/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: src/import/chips/p10/common/include/iohs/reg00038.H $         */
/*                                                                        */
/* OpenPOWER sbe Project                                                  */
/*                                                                        */
/* Contributors Listed Below - COPYRIGHT 2019,2020                        */
/* [+] International Business Machines Corp.                              */
/*                                                                        */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */
#include "fapi2.H"

#ifndef __IOHS_REG00038_H_
#define __IOHS_REG00038_H_

#ifndef __PPE_HCODE__
namespace scomt
{
namespace iohs
{
#endif


//>> PREP_[AXON_CTRL_ATOMIC_LOCK_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AXON_CTRL_ATOMIC_LOCK_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AXON_CTRL_ATOMIC_LOCK_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AXON_CTRL_ATOMIC_LOCK_REG]

//>> GET_[AXON_CTRL_ATOMIC_LOCK_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AXON_CTRL_ATOMIC_LOCK_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AXON_CTRL_ATOMIC_LOCK_REG;
#endif
    return fapi2::getScom(i_target, AXON_CTRL_ATOMIC_LOCK_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AXON_CTRL_ATOMIC_LOCK_REG]

//>> PUT_[AXON_CTRL_ATOMIC_LOCK_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AXON_CTRL_ATOMIC_LOCK_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AXON_CTRL_ATOMIC_LOCK_REG));
#endif
    return fapi2::putScom(i_target, AXON_CTRL_ATOMIC_LOCK_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AXON_CTRL_ATOMIC_LOCK_REG]


//>> SET_[AXON_CTRL_ATOMIC_LOCK_REG_LOCK_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_AXON_CTRL_ATOMIC_LOCK_REG_LOCK_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_CTRL_ATOMIC_LOCK_REG));
#endif
    return o_data.insertFromRight<AXON_CTRL_ATOMIC_LOCK_REG_LOCK_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_CTRL_ATOMIC_LOCK_REG_LOCK_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_CTRL_ATOMIC_LOCK_REG_LOCK_ENABLE]

//>> SET_[AXON_CTRL_ATOMIC_LOCK_REG_LOCK_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_AXON_CTRL_ATOMIC_LOCK_REG_LOCK_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_CTRL_ATOMIC_LOCK_REG));
#endif
    return o_data.insertFromRight<AXON_CTRL_ATOMIC_LOCK_REG_LOCK_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_CTRL_ATOMIC_LOCK_REG_LOCK_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_CTRL_ATOMIC_LOCK_REG_LOCK_ENABLE]

//>> SET_[AXON_CTRL_ATOMIC_LOCK_REG_LOCK_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_AXON_CTRL_ATOMIC_LOCK_REG_LOCK_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_CTRL_ATOMIC_LOCK_REG));
#endif
    return o_data.setBit<AXON_CTRL_ATOMIC_LOCK_REG_LOCK_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_CTRL_ATOMIC_LOCK_REG_LOCK_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_CTRL_ATOMIC_LOCK_REG_LOCK_ENABLE]

//>> CLEAR_[AXON_CTRL_ATOMIC_LOCK_REG_LOCK_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_CTRL_ATOMIC_LOCK_REG_LOCK_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_CTRL_ATOMIC_LOCK_REG));
#endif
    return o_data.clearBit<AXON_CTRL_ATOMIC_LOCK_REG_LOCK_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_CTRL_ATOMIC_LOCK_REG_LOCK_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_CTRL_ATOMIC_LOCK_REG_LOCK_ENABLE]

//>> GET_[AXON_CTRL_ATOMIC_LOCK_REG_LOCK_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_AXON_CTRL_ATOMIC_LOCK_REG_LOCK_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_CTRL_ATOMIC_LOCK_REG));
#endif
    return i_data.extractToRight<AXON_CTRL_ATOMIC_LOCK_REG_LOCK_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_CTRL_ATOMIC_LOCK_REG_LOCK_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_CTRL_ATOMIC_LOCK_REG_LOCK_ENABLE]

//>> GET_[AXON_CTRL_ATOMIC_LOCK_REG_LOCK_ENABLE]
static inline bool GET_AXON_CTRL_ATOMIC_LOCK_REG_LOCK_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_CTRL_ATOMIC_LOCK_REG));
#endif
    return i_data.getBit<AXON_CTRL_ATOMIC_LOCK_REG_LOCK_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_CTRL_ATOMIC_LOCK_REG_LOCK_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_CTRL_ATOMIC_LOCK_REG_LOCK_ENABLE]

//>> SET_[AXON_CTRL_ATOMIC_LOCK_REG_ID]
static inline fapi2::buffer<uint64_t>& SET_AXON_CTRL_ATOMIC_LOCK_REG_ID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_CTRL_ATOMIC_LOCK_REG));
#endif
    return o_data.insertFromRight<AXON_CTRL_ATOMIC_LOCK_REG_ID,
           AXON_CTRL_ATOMIC_LOCK_REG_ID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_CTRL_ATOMIC_LOCK_REG_ID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_CTRL_ATOMIC_LOCK_REG_ID]

//>> SET_[AXON_CTRL_ATOMIC_LOCK_REG_ID]
static inline fapi2::buffer<uint64_t>& SET_AXON_CTRL_ATOMIC_LOCK_REG_ID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_CTRL_ATOMIC_LOCK_REG));
#endif
    return o_data.insertFromRight<AXON_CTRL_ATOMIC_LOCK_REG_ID,
           AXON_CTRL_ATOMIC_LOCK_REG_ID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_CTRL_ATOMIC_LOCK_REG_ID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_CTRL_ATOMIC_LOCK_REG_ID]

//>> GET_[AXON_CTRL_ATOMIC_LOCK_REG_ID]
static inline fapi2::buffer<uint64_t>& GET_AXON_CTRL_ATOMIC_LOCK_REG_ID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_CTRL_ATOMIC_LOCK_REG));
#endif
    return i_data.extractToRight<AXON_CTRL_ATOMIC_LOCK_REG_ID,
           AXON_CTRL_ATOMIC_LOCK_REG_ID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_CTRL_ATOMIC_LOCK_REG_ID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_CTRL_ATOMIC_LOCK_REG_ID]

//>> SET_[AXON_CTRL_ATOMIC_LOCK_REG_ACTIVITY]
static inline fapi2::buffer<uint64_t>& SET_AXON_CTRL_ATOMIC_LOCK_REG_ACTIVITY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_CTRL_ATOMIC_LOCK_REG));
#endif
    return o_data.insertFromRight<AXON_CTRL_ATOMIC_LOCK_REG_ACTIVITY,
           AXON_CTRL_ATOMIC_LOCK_REG_ACTIVITY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_CTRL_ATOMIC_LOCK_REG_ACTIVITY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_CTRL_ATOMIC_LOCK_REG_ACTIVITY]

//>> SET_[AXON_CTRL_ATOMIC_LOCK_REG_ACTIVITY]
static inline fapi2::buffer<uint64_t>& SET_AXON_CTRL_ATOMIC_LOCK_REG_ACTIVITY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_CTRL_ATOMIC_LOCK_REG));
#endif
    return o_data.insertFromRight<AXON_CTRL_ATOMIC_LOCK_REG_ACTIVITY,
           AXON_CTRL_ATOMIC_LOCK_REG_ACTIVITY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_CTRL_ATOMIC_LOCK_REG_ACTIVITY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_CTRL_ATOMIC_LOCK_REG_ACTIVITY]

//>> GET_[AXON_CTRL_ATOMIC_LOCK_REG_ACTIVITY]
static inline fapi2::buffer<uint64_t>& GET_AXON_CTRL_ATOMIC_LOCK_REG_ACTIVITY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_CTRL_ATOMIC_LOCK_REG));
#endif
    return i_data.extractToRight<AXON_CTRL_ATOMIC_LOCK_REG_ACTIVITY,
           AXON_CTRL_ATOMIC_LOCK_REG_ACTIVITY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_CTRL_ATOMIC_LOCK_REG_ACTIVITY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_CTRL_ATOMIC_LOCK_REG_ACTIVITY]

//>> PREP_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4;
#endif
    return fapi2::getScom(i_target, AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4]

//>> PUT_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return fapi2::putScom(i_target, AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4]


//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_XSTOP_ERR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_XSTOP_ERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_XSTOP_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_XSTOP_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_XSTOP_ERR]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_XSTOP_ERR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_XSTOP_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_XSTOP_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_XSTOP_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_XSTOP_ERR]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_XSTOP_ERR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_XSTOP_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.setBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_XSTOP_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_XSTOP_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_XSTOP_ERR]

//>> CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_XSTOP_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_XSTOP_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.clearBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_XSTOP_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_XSTOP_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_XSTOP_ERR]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_XSTOP_ERR]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_XSTOP_ERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_XSTOP_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_XSTOP_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_XSTOP_ERR]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_XSTOP_ERR]
static inline bool GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_XSTOP_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.getBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_XSTOP_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_XSTOP_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_XSTOP_ERR]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_RECOV_ERR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_RECOV_ERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_RECOV_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_RECOV_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_RECOV_ERR]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_RECOV_ERR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_RECOV_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_RECOV_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_RECOV_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_RECOV_ERR]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_RECOV_ERR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_RECOV_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.setBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_RECOV_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_RECOV_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_RECOV_ERR]

//>> CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_RECOV_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_RECOV_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.clearBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_RECOV_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_RECOV_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_RECOV_ERR]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_RECOV_ERR]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_RECOV_ERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_RECOV_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_RECOV_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_RECOV_ERR]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_RECOV_ERR]
static inline bool GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_RECOV_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.getBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_RECOV_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_RECOV_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_RECOV_ERR]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SPATTN_ERR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SPATTN_ERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SPATTN_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SPATTN_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SPATTN_ERR]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SPATTN_ERR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SPATTN_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SPATTN_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SPATTN_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SPATTN_ERR]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SPATTN_ERR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SPATTN_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.setBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SPATTN_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SPATTN_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SPATTN_ERR]

//>> CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SPATTN_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SPATTN_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.clearBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SPATTN_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SPATTN_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SPATTN_ERR]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SPATTN_ERR]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SPATTN_ERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SPATTN_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SPATTN_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SPATTN_ERR]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SPATTN_ERR]
static inline bool GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SPATTN_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.getBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SPATTN_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SPATTN_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SPATTN_ERR]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_LXSTOP_ERR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_LXSTOP_ERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_LXSTOP_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_LXSTOP_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_LXSTOP_ERR]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_LXSTOP_ERR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_LXSTOP_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_LXSTOP_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_LXSTOP_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_LXSTOP_ERR]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_LXSTOP_ERR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_LXSTOP_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.setBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_LXSTOP_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_LXSTOP_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_LXSTOP_ERR]

//>> CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_LXSTOP_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_LXSTOP_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.clearBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_LXSTOP_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_LXSTOP_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_LXSTOP_ERR]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_LXSTOP_ERR]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_LXSTOP_ERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_LXSTOP_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_LXSTOP_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_LXSTOP_ERR]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_LXSTOP_ERR]
static inline bool GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_LXSTOP_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.getBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_LXSTOP_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_LXSTOP_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_LXSTOP_ERR]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_HOSTATTN_ERR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_HOSTATTN_ERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_HOSTATTN_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_HOSTATTN_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_HOSTATTN_ERR]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_HOSTATTN_ERR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_HOSTATTN_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_HOSTATTN_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_HOSTATTN_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_HOSTATTN_ERR]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_HOSTATTN_ERR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_HOSTATTN_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.setBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_HOSTATTN_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_HOSTATTN_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_HOSTATTN_ERR]

//>> CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_HOSTATTN_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_HOSTATTN_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.clearBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_HOSTATTN_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_HOSTATTN_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_HOSTATTN_ERR]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_HOSTATTN_ERR]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_HOSTATTN_ERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_HOSTATTN_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_HOSTATTN_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_HOSTATTN_ERR]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_HOSTATTN_ERR]
static inline bool GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_HOSTATTN_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.getBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_HOSTATTN_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_HOSTATTN_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_HOSTATTN_ERR]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_ERR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_ERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_ERR]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_ERR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_ERR]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_ERR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.setBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_ERR]

//>> CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.clearBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_ERR]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_ERR]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_ERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_ERR]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_ERR]
static inline bool GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.getBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_ERR]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_STAGED_ERR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_STAGED_ERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_STAGED_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_STAGED_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_STAGED_ERR]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_STAGED_ERR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_STAGED_ERR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_STAGED_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_STAGED_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_STAGED_ERR]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_STAGED_ERR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_STAGED_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.setBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_STAGED_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_STAGED_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_STAGED_ERR]

//>> CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_STAGED_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_STAGED_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.clearBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_STAGED_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_STAGED_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_STAGED_ERR]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_STAGED_ERR]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_STAGED_ERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_STAGED_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_STAGED_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_STAGED_ERR]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_STAGED_ERR]
static inline bool GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_STAGED_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.getBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_STAGED_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_STAGED_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_SYS_XSTOP_STAGED_ERR]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_DBG_TRIG_ERR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_DBG_TRIG_ERR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_DBG_TRIG_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_DBG_TRIG_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_DBG_TRIG_ERR]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_DBG_TRIG_ERR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_DBG_TRIG_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_DBG_TRIG_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_DBG_TRIG_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_DBG_TRIG_ERR]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_DBG_TRIG_ERR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_DBG_TRIG_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.setBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_DBG_TRIG_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_DBG_TRIG_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_DBG_TRIG_ERR]

//>> CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_DBG_TRIG_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_DBG_TRIG_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.clearBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_DBG_TRIG_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_DBG_TRIG_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_DBG_TRIG_ERR]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_DBG_TRIG_ERR]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_DBG_TRIG_ERR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_DBG_TRIG_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_DBG_TRIG_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_DBG_TRIG_ERR]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_DBG_TRIG_ERR]
static inline bool GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_DBG_TRIG_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.getBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_DBG_TRIG_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_DBG_TRIG_ERR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_DBG_TRIG_ERR]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP01]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP01(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP01,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP01 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP01]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP01]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP01(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP01,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP01 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP01]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP01]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP01(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.setBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP01 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP01]

//>> CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP01]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP01(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.clearBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP01 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP01]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP01]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP01(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP01,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP01 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP01]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP01]
static inline bool GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP01(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.getBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP01 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP01]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP02]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP02(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP02,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP02 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP02]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP02]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP02(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP02,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP02 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP02]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP02]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP02(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.setBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP02 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP02]

//>> CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP02]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP02(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.clearBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP02 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP02]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP02]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP02(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP02,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP02 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP02]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP02]
static inline bool GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP02(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.getBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP02 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP02]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP03]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP03(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP03,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP03 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP03]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP03]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP03(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP03,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP03 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP03]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP03]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP03(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.setBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP03 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP03]

//>> CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP03]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP03(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.clearBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP03 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP03]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP03]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP03(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP03,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP03 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP03]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP03]
static inline bool GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP03(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.getBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP03 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP03]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP04]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP04(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP04,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP04 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP04]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP04]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP04(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP04,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP04 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP04]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP04]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP04(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.setBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP04>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP04 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP04]

//>> CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP04]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP04(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.clearBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP04>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP04 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP04]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP04]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP04(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP04,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP04 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP04]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP04]
static inline bool GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP04(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.getBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP04>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP04 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP04]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP05]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP05(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP05,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP05 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP05]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP05]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP05(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP05,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP05 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP05]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP05]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP05(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.setBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP05 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP05]

//>> CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP05]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP05(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.clearBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP05 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP05]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP05]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP05(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP05,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP05 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP05]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP05]
static inline bool GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP05(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.getBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP05 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP05]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP06]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP06(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP06,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP06 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP06]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP06]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP06(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP06,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP06 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP06]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP06]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP06(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.setBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP06 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP06]

//>> CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP06]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP06(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.clearBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP06 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP06]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP06]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP06(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP06,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP06 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP06]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP06]
static inline bool GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP06(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.getBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP06 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP06]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP07]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP07(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP07,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP07 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP07]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP07]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP07(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP07,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP07 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP07]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP07]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP07(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.setBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP07 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP07]

//>> CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP07]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP07(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.clearBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP07 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP07]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP07]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP07(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP07,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP07 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP07]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP07]
static inline bool GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP07(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.getBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP07 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP07]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP08]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP08(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP08,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP08 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP08]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP08]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP08(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP08,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP08 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP08]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP08]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP08(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.setBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP08 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP08]

//>> CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP08]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP08(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.clearBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP08 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP08]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP08]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP08(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP08,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP08 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP08]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP08]
static inline bool GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP08(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.getBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP08 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP08]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP09]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP09(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP09,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP09 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP09]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP09]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP09(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP09,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP09 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP09]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP09]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP09(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.setBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP09 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP09]

//>> CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP09]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP09(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.clearBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP09 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP09]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP09]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP09(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP09,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP09 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP09]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP09]
static inline bool GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP09(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.getBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP09 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP09]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP10]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP10(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP10 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP10]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP10]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP10(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP10 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP10]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP10]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP10(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.setBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP10 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP10]

//>> CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP10]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP10(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.clearBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP10 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP10]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP10]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP10(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP10 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP10]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP10]
static inline bool GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.getBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP10 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP10]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP11]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP11(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP11 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP11]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP11]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP11(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP11 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP11]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP11]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP11(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.setBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP11 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP11]

//>> CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP11]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP11(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.clearBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP11 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP11]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP11]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP11(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP11 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP11]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP11]
static inline bool GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.getBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP11 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP11]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP12]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP12(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP12]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP12]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP12(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP12]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP12]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.setBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP12]

//>> CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP12]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.clearBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP12]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP12]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP12(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP12]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP12]
static inline bool GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.getBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP12 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP12]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP13]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP13(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP13 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP13]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP13]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP13(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP13 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP13]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP13]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP13(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.setBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP13 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP13]

//>> CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP13]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP13(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.clearBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP13 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP13]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP13]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP13(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP13 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP13]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP13]
static inline bool GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.getBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP13 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP13]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP14]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP14(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP14 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP14]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP14]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP14(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP14 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP14]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP14]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP14(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.setBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP14 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP14]

//>> CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP14]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP14(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.clearBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP14 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP14]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP14]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP14(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP14 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP14]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP14]
static inline bool GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.getBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP14 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP14]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP15]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP15(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP15 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP15]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP15]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP15(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP15 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP15]

//>> SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP15]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP15(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.setBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP15 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP15]

//>> CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP15]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP15(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return o_data.clearBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP15 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP15]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP15]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP15(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP15 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP15]

//>> GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP15]
static inline bool GET_AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4));
#endif
    return i_data.getBit<AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP15 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_CLKSTOP_ON_XSTOP_MASK4_UNIT_TC_FIR_LOCAL_XSTOP15]

//>> PREP_[AXON_EPS_FIR_LOCAL_WOF]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AXON_EPS_FIR_LOCAL_WOF(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AXON_EPS_FIR_LOCAL_WOF;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AXON_EPS_FIR_LOCAL_WOF]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AXON_EPS_FIR_LOCAL_WOF(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AXON_EPS_FIR_LOCAL_WOF;
#endif
    return fapi2::getScom(i_target, AXON_EPS_FIR_LOCAL_WOF, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF]

//>> PUT_[AXON_EPS_FIR_LOCAL_WOF]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AXON_EPS_FIR_LOCAL_WOF(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return fapi2::putScom(i_target, AXON_EPS_FIR_LOCAL_WOF, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AXON_EPS_FIR_LOCAL_WOF]


//>> SET_[AXON_EPS_FIR_LOCAL_WOF_00]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_00(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_00,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_00]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_00]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_00(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_00,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_00]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_00]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_00(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_00>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_00]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_00]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_00(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_00>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_00]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_00]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_00(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_00,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_00]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_00]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_00(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_00>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_00 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_00]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_01]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_01(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_01,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_01]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_01]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_01(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_01,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_01]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_01]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_01(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_01]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_01]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_01(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_01]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_01]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_01(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_01,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_01]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_01]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_01(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_01]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_02]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_02(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_02,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_02]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_02]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_02(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_02,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_02]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_02]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_02(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_02]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_02]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_02(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_02]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_02]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_02(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_02,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_02]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_02]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_02(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_02]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_03]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_03(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_03,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_03]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_03]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_03(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_03,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_03]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_03]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_03(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_03]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_03]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_03(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_03]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_03]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_03(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_03,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_03]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_03]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_03(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_03]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_04]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_04(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_04,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_04]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_04]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_04(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_04,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_04]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_04]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_04(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_04>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_04]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_04]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_04(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_04>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_04]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_04]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_04(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_04,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_04]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_04]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_04(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_04>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_04]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_05]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_05(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_05,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_05]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_05]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_05(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_05,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_05]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_05]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_05(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_05]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_05]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_05(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_05]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_05]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_05(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_05,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_05]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_05]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_05(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_05]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_06]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_06(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_06,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_06]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_06]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_06(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_06,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_06]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_06]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_06(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_06]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_06]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_06(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_06]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_06]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_06(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_06,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_06]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_06]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_06(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_06]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_07]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_07(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_07,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_07]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_07]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_07(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_07,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_07]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_07]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_07(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_07]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_07]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_07(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_07]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_07]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_07(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_07,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_07]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_07]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_07(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_07]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_08]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_08(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_08,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_08]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_08]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_08(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_08,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_08]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_08]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_08(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_08]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_08]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_08(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_08]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_08]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_08(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_08,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_08]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_08]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_08(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_08]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_09]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_09(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_09,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_09]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_09]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_09(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_09,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_09]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_09]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_09(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_09]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_09]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_09(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_09]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_09]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_09(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_09,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_09]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_09]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_09(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_09]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_10]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_10]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_10]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_10]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_10]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_10]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_10]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_10]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_10]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_10]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_10]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_10]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_11]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_11]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_11]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_11]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_11]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_11]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_11]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_11]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_11]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_11]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_11]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_11]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_12]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_12]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_12]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_12]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_12]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_12]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_12]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_12]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_12]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_12]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_12]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_12]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_13]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_13]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_13]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_13]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_13]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_13]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_13]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_13]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_13]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_13]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_13]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_13]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_14]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_14]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_14]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_14]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_14]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_14]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_14]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_14]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_14]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_14]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_14]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_14]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_15]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_15]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_15]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_15]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_15]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_15]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_15]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_15]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_15]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_15]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_15]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_15]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_16]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_16]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_16]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_16]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_16]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_16]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_16]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_16]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_16]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_16]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_16]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_16]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_17]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_17]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_17]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_17]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_17]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_17]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_17]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_17]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_17]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_17]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_17]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_17]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_18]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_18]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_18]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_18]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_18]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_18]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_18]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_18]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_18]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_18]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_18]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_18]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_19]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_19]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_19]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_19]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_19]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_19]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_19]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_19]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_19]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_19]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_19]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_19]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_20]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_20]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_20]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_20]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_20]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_20]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_20]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_20]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_20]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_20,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_20]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_20]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_20(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_20]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_21]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_21]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_21]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_21]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_21]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_21]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_21]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_21]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_21]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_21,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_21]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_21]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_21(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_21]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_22]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_22]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_22]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_22]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_22]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_22]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_22]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_22]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_22]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_22,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_22]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_22]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_22(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_22]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_23]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_23]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_23]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_23]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_23]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_23]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_23]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_23]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_23]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_23]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_23]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_23]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_24]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_24(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_24]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_24]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_24(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_24]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_24]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_24]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_24]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_24]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_24]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_24(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_24,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_24]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_24]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_24(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_24]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_25]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_25(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_25]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_25]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_25(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_25]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_25]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_25]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_25]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_25]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_25]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_25(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_25,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_25]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_25]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_25(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_25]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_26]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_26(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_26]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_26]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_26(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_26]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_26]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_26]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_26]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_26]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_26]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_26(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_26,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_26]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_26]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_26(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_26]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_27]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_27(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_27]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_27]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_27(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_27]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_27]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_27]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_27]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_27]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_27]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_27(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_27,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_27]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_27]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_27(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_27]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_28]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_28(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_28]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_28]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_28(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_28]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_28]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_28]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_28]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_28]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_28]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_28(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_28,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_28]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_28]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_28(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_28]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_29]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_29(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_29]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_29]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_29(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_29]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_29]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_29]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_29]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_29]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_29]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_29(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_29,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_29]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_29]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_29(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_29]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_30]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_30(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_30]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_30]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_30(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_30]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_30]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_30]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_30]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_30]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_30]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_30(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_30,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_30]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_30]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_30(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_30]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_31]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_31(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_31]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_31]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_31(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_31]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_31]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_31]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_31]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_31]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_31]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_31(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_31,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_31]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_31]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_31(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_31]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_32]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_32(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_32]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_32]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_32(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_32]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_32]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_32]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_32]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_32]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_32]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_32(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_32,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_32]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_32]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_32(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_32]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_33]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_33(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_33]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_33]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_33(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_33]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_33]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_33]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_33]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_33]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_33]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_33(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_33,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_33]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_33]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_33(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_33]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_34]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_34(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_34]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_34]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_34(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_34]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_34]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_34]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_34]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_34]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_34]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_34(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_34,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_34]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_34]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_34(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_34]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_35]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_35(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_35]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_35]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_35(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_35]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_35]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_35]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_35]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_35]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_35]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_35(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_35,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_35]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_35]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_35(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_35]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_36]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_36(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_36]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_36]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_36(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_36]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_36]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_36]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_36]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_36]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_36]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_36(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_36,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_36]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_36]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_36(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_36]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_37]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_37(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_37]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_37]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_37(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_37]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_37]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_37]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_37]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_37]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_37]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_37(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_37,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_37]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_37]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_37(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_37]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_38]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_38(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_38]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_38]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_38(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_38]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_38]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_38]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_38]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_38]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_38]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_38(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_38,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_38]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_38]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_38(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_38]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_39]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_39(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_39]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_39]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_39(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_39]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_39]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_39]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_39]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_39]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_39]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_39(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_39,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_39]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_39]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_39(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_39]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_40]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_40(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_40]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_40]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_40(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_40]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_40]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_40]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_40]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_40]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_40]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_40(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_40,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_40]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_40]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_40(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_40]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_41]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_41(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_41]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_41]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_41(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_41]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_41]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_41]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_41]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_41]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_41]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_41(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_41,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_41]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_41]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_41(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_41]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_42]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_42(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_42]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_42]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_42(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_42]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_42]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_42]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_42]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_42]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_42]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_42(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_42,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_42]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_42]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_42(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_42]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_43]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_43(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_43]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_43]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_43(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_43]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_43]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_43]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_43]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_43]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_43]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_43(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_43,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_43]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_43]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_43(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_43]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_44]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_44(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_44]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_44]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_44(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_44]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_44]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_44]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_44]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_44]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_44]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_44(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_44,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_44]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_44]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_44(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_44]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_45]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_45(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_45]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_45]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_45(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_45]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_45]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_45]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_45]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_45]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_45]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_45(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_45,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_45]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_45]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_45(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_45]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_46]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_46(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_46]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_46]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_46(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_46]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_46]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_46]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_46]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_46]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_46]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_46(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_46,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_46]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_46]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_46(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_46]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_47]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_47(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_47]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_47]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_47(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_47]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_47]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_47]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_47]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_47]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_47]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_47(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_47,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_47]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_47]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_47(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_47]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_48]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_48(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_48]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_48]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_48(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_48]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_48]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_48]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_48]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_48]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_48]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_48(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_48,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_48]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_48]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_48(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_48]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_49]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_49(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_49]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_49]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_49(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_49]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_49]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_49]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_49]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_49]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_49]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_49(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_49,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_49]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_49]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_49(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_49]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_50]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_50(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_50]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_50]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_50(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_50]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_50]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_50]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_50]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_50]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_50]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_50(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_50,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_50]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_50]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_50(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_50]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_51]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_51(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_51]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_51]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_51(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_51]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_51]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_51]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_51]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_51]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_51]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_51(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_51,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_51]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_51]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_51(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_51]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_52]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_52(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_52]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_52]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_52(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_52]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_52]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_52]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_52]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_52]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_52]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_52(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_52,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_52]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_52]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_52(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_52]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_53]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_53(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_53]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_53]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_53(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_53]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_53]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_53]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_53]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_53]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_53]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_53(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_53,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_53]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_53]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_53(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_53]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_54]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_54(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_54,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_54]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_54]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_54(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_54,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_54]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_54]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_54(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_54]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_54]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_54(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_54]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_54]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_54(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_54,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_54]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_54]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_54(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_54 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_54]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_55]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_55(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_55,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_55]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_55]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_55(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_55,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_55]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_55]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_55(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_55]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_55]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_55(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_55]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_55]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_55(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_55,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_55]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_55]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_55(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_55]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_56]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_56(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_56,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_56]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_56]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_56(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_56,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_56]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_56]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_56(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_56]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_56]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_56(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_56]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_56]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_56(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_56,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_56]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_56]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_56(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_56]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_57]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_57(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_57,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_57]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_57]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_57(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_57,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_57]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_57]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_57(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_57]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_57]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_57(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_57]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_57]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_57(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_57,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_57]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_57]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_57(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_57 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_57]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_58]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_58(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_58,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_58]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_58]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_58(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_58,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_58]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_58]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_58(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_58]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_58]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_58(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_58]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_58]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_58(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_58,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_58]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_58]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_58(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_58 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_58]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_59]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_59(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_59,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_59]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_59]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_59(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_59,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_59]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_59]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_59(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_59]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_59]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_59(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_59]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_59]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_59(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_59,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_59]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_59]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_59(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_59 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_59]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_60]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_60(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_60,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_60]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_60]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_60(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_60,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_60]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_60]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_60(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_60]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_60]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_60(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_60]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_60]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_60(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_60,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_60]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_60]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_60(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_60 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_60]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_61]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_61(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_61,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_61]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_61]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_61(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_61,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_61]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_61]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_61(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_61]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_61]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_61(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_61]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_61]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_61(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_61,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_61]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_61]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_61(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_61 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_61]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_62]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_62(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_62,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_62]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_62]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_62(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_62,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_62]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_62]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_62(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_62]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_62]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_62(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_62]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_62]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_62(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_62,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_62]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_62]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_62(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_62 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_62]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_63]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_63(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_63,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_63]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_63]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_63(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.insertFromRight<AXON_EPS_FIR_LOCAL_WOF_63,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_63]

//>> SET_[AXON_EPS_FIR_LOCAL_WOF_63]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_FIR_LOCAL_WOF_63(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.setBit<AXON_EPS_FIR_LOCAL_WOF_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_FIR_LOCAL_WOF_63]

//>> CLEAR_[AXON_EPS_FIR_LOCAL_WOF_63]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_FIR_LOCAL_WOF_63(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return o_data.clearBit<AXON_EPS_FIR_LOCAL_WOF_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_FIR_LOCAL_WOF_63]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_63]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_FIR_LOCAL_WOF_63(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.extractToRight<AXON_EPS_FIR_LOCAL_WOF_63,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_63]

//>> GET_[AXON_EPS_FIR_LOCAL_WOF_63]
static inline bool GET_AXON_EPS_FIR_LOCAL_WOF_63(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_FIR_LOCAL_WOF));
#endif
    return i_data.getBit<AXON_EPS_FIR_LOCAL_WOF_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_FIR_LOCAL_WOF_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_FIR_LOCAL_WOF_63]

//>> PREP_[AXON_EPS_PSC_PSCOM_ERROR_MASK]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AXON_EPS_PSC_PSCOM_ERROR_MASK(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AXON_EPS_PSC_PSCOM_ERROR_MASK;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AXON_EPS_PSC_PSCOM_ERROR_MASK]

//>> GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AXON_EPS_PSC_PSCOM_ERROR_MASK(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AXON_EPS_PSC_PSCOM_ERROR_MASK;
#endif
    return fapi2::getScom(i_target, AXON_EPS_PSC_PSCOM_ERROR_MASK, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK]

//>> PUT_[AXON_EPS_PSC_PSCOM_ERROR_MASK]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AXON_EPS_PSC_PSCOM_ERROR_MASK(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return fapi2::putScom(i_target, AXON_EPS_PSC_PSCOM_ERROR_MASK, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AXON_EPS_PSC_PSCOM_ERROR_MASK]


//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_WDATA_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_WDATA_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.insertFromRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_WDATA_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_WDATA_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_WDATA_PARITY_ERROR]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_WDATA_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_WDATA_PARITY_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.insertFromRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_WDATA_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_WDATA_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_WDATA_PARITY_ERROR]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_WDATA_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_WDATA_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.setBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_WDATA_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_WDATA_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_WDATA_PARITY_ERROR]

//>> CLEAR_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_WDATA_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_WDATA_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.clearBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_WDATA_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_WDATA_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_WDATA_PARITY_ERROR]

//>> GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_WDATA_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_WDATA_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return i_data.extractToRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_WDATA_PARITY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_WDATA_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_WDATA_PARITY_ERROR]

//>> GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_WDATA_PARITY_ERROR]
static inline bool GET_AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_WDATA_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return i_data.getBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_WDATA_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_WDATA_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_WDATA_PARITY_ERROR]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_ADDRESS_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_ADDRESS_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.insertFromRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_ADDRESS_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_ADDRESS_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_ADDRESS_PARITY_ERROR]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_ADDRESS_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_ADDRESS_PARITY_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.insertFromRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_ADDRESS_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_ADDRESS_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_ADDRESS_PARITY_ERROR]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_ADDRESS_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_ADDRESS_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.setBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_ADDRESS_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_ADDRESS_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_ADDRESS_PARITY_ERROR]

//>> CLEAR_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_ADDRESS_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_ADDRESS_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.clearBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_ADDRESS_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_ADDRESS_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_ADDRESS_PARITY_ERROR]

//>> GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_ADDRESS_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_ADDRESS_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return i_data.extractToRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_ADDRESS_PARITY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_ADDRESS_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_ADDRESS_PARITY_ERROR]

//>> GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_ADDRESS_PARITY_ERROR]
static inline bool GET_AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_ADDRESS_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return i_data.getBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_ADDRESS_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_ADDRESS_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_ADDRESS_PARITY_ERROR]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_WDATA_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_WDATA_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.insertFromRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_WDATA_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_WDATA_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_WDATA_PARITY_ERROR]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_WDATA_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_WDATA_PARITY_ERROR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.insertFromRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_WDATA_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_WDATA_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_WDATA_PARITY_ERROR]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_WDATA_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_WDATA_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.setBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_WDATA_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_WDATA_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_WDATA_PARITY_ERROR]

//>> CLEAR_[AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_WDATA_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_WDATA_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.clearBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_WDATA_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_WDATA_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_WDATA_PARITY_ERROR]

//>> GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_WDATA_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_WDATA_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return i_data.extractToRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_WDATA_PARITY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_WDATA_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_WDATA_PARITY_ERROR]

//>> GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_WDATA_PARITY_ERROR]
static inline bool GET_AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_WDATA_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return i_data.getBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_WDATA_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_WDATA_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_WDATA_PARITY_ERROR]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_P0_ERROR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_P0_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.insertFromRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_P0_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_P0_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_P0_ERROR]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_P0_ERROR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_P0_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.insertFromRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_P0_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_P0_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_P0_ERROR]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_P0_ERROR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_P0_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.setBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_P0_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_P0_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_P0_ERROR]

//>> CLEAR_[AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_P0_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_P0_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.clearBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_P0_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_P0_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_P0_ERROR]

//>> GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_P0_ERROR]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_P0_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return i_data.extractToRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_P0_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_P0_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_P0_ERROR]

//>> GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_P0_ERROR]
static inline bool GET_AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_P0_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return i_data.getBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_P0_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_P0_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_DL_RETURN_P0_ERROR]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_RDATA_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_RDATA_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.insertFromRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_RDATA_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_RDATA_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_RDATA_PARITY_ERROR]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_RDATA_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_RDATA_PARITY_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.insertFromRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_RDATA_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_RDATA_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_RDATA_PARITY_ERROR]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_RDATA_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_RDATA_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.setBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_RDATA_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_RDATA_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_RDATA_PARITY_ERROR]

//>> CLEAR_[AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_RDATA_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_RDATA_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.clearBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_RDATA_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_RDATA_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_RDATA_PARITY_ERROR]

//>> GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_RDATA_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_RDATA_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return i_data.extractToRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_RDATA_PARITY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_RDATA_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_RDATA_PARITY_ERROR]

//>> GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_RDATA_PARITY_ERROR]
static inline bool GET_AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_RDATA_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return i_data.getBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_RDATA_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_RDATA_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_RDATA_PARITY_ERROR]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_P0_ERROR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_P0_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.insertFromRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_P0_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_P0_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_P0_ERROR]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_P0_ERROR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_P0_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.insertFromRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_P0_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_P0_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_P0_ERROR]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_P0_ERROR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_P0_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.setBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_P0_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_P0_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_P0_ERROR]

//>> CLEAR_[AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_P0_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_P0_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.clearBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_P0_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_P0_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_P0_ERROR]

//>> GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_P0_ERROR]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_P0_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return i_data.extractToRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_P0_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_P0_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_P0_ERROR]

//>> GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_P0_ERROR]
static inline bool GET_AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_P0_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return i_data.getBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_P0_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_P0_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_UL_P0_ERROR]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_INTERFACE_MACHINE]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_INTERFACE_MACHINE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.insertFromRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_INTERFACE_MACHINE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_INTERFACE_MACHINE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_INTERFACE_MACHINE]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_INTERFACE_MACHINE]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_INTERFACE_MACHINE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.insertFromRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_INTERFACE_MACHINE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_INTERFACE_MACHINE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_INTERFACE_MACHINE]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_INTERFACE_MACHINE]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_INTERFACE_MACHINE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.setBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_INTERFACE_MACHINE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_INTERFACE_MACHINE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_INTERFACE_MACHINE]

//>> CLEAR_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_INTERFACE_MACHINE]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_INTERFACE_MACHINE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.clearBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_INTERFACE_MACHINE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_INTERFACE_MACHINE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_INTERFACE_MACHINE]

//>> GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_INTERFACE_MACHINE]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_INTERFACE_MACHINE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return i_data.extractToRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_INTERFACE_MACHINE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_INTERFACE_MACHINE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_INTERFACE_MACHINE]

//>> GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_INTERFACE_MACHINE]
static inline bool GET_AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_INTERFACE_MACHINE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return i_data.getBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_INTERFACE_MACHINE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_INTERFACE_MACHINE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_INTERFACE_MACHINE]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_P2S_MACHINE]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_P2S_MACHINE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.insertFromRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_P2S_MACHINE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_P2S_MACHINE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_P2S_MACHINE]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_P2S_MACHINE]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_P2S_MACHINE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.insertFromRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_P2S_MACHINE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_P2S_MACHINE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_P2S_MACHINE]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_P2S_MACHINE]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_P2S_MACHINE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.setBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_P2S_MACHINE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_P2S_MACHINE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_P2S_MACHINE]

//>> CLEAR_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_P2S_MACHINE]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_P2S_MACHINE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.clearBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_P2S_MACHINE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_P2S_MACHINE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_P2S_MACHINE]

//>> GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_P2S_MACHINE]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_P2S_MACHINE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return i_data.extractToRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_P2S_MACHINE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_P2S_MACHINE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_P2S_MACHINE]

//>> GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_P2S_MACHINE]
static inline bool GET_AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_P2S_MACHINE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return i_data.getBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_P2S_MACHINE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_P2S_MACHINE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PARITY_ERROR_ON_P2S_MACHINE]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULCCH]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULCCH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.insertFromRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULCCH,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULCCH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULCCH]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULCCH]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULCCH(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.insertFromRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULCCH,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULCCH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULCCH]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULCCH]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULCCH(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.setBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULCCH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULCCH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULCCH]

//>> CLEAR_[AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULCCH]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULCCH(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.clearBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULCCH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULCCH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULCCH]

//>> GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULCCH]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULCCH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return i_data.extractToRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULCCH,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULCCH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULCCH]

//>> GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULCCH]
static inline bool GET_AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULCCH(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return i_data.getBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULCCH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULCCH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULCCH]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_DLDCH_RETURN]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_DLDCH_RETURN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.insertFromRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_DLDCH_RETURN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_DLDCH_RETURN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_DLDCH_RETURN]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_DLDCH_RETURN]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_DLDCH_RETURN(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.insertFromRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_DLDCH_RETURN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_DLDCH_RETURN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_DLDCH_RETURN]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_DLDCH_RETURN]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_DLDCH_RETURN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.setBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_DLDCH_RETURN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_DLDCH_RETURN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_DLDCH_RETURN]

//>> CLEAR_[AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_DLDCH_RETURN]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_DLDCH_RETURN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.clearBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_DLDCH_RETURN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_DLDCH_RETURN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_DLDCH_RETURN]

//>> GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_DLDCH_RETURN]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_DLDCH_RETURN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return i_data.extractToRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_DLDCH_RETURN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_DLDCH_RETURN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_DLDCH_RETURN]

//>> GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_DLDCH_RETURN]
static inline bool GET_AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_DLDCH_RETURN(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return i_data.getBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_DLDCH_RETURN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_DLDCH_RETURN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_DLDCH_RETURN]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULDCH]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULDCH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.insertFromRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULDCH,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULDCH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULDCH]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULDCH]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULDCH(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.insertFromRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULDCH,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULDCH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULDCH]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULDCH]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULDCH(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.setBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULDCH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULDCH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULDCH]

//>> CLEAR_[AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULDCH]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULDCH(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.clearBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULDCH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULDCH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULDCH]

//>> GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULDCH]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULDCH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return i_data.extractToRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULDCH,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULDCH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULDCH]

//>> GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULDCH]
static inline bool GET_AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULDCH(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return i_data.getBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULDCH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULDCH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_TIMEOUT_WHILE_WAITING_FOR_ULDCH]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_LOCK_ERR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_LOCK_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.insertFromRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_LOCK_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_LOCK_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_LOCK_ERR]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_LOCK_ERR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_LOCK_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.insertFromRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_LOCK_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_LOCK_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_LOCK_ERR]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_LOCK_ERR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_LOCK_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.setBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_LOCK_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_LOCK_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_LOCK_ERR]

//>> CLEAR_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_LOCK_ERR]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_LOCK_ERR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.clearBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_LOCK_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_LOCK_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_LOCK_ERR]

//>> GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_LOCK_ERR]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_LOCK_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return i_data.extractToRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_LOCK_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_LOCK_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_LOCK_ERR]

//>> GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_LOCK_ERR]
static inline bool GET_AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_LOCK_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return i_data.getBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_LOCK_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_LOCK_ERR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_LOCK_ERR]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_READ_WRITE_NVLD]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_READ_WRITE_NVLD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.insertFromRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_READ_WRITE_NVLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_READ_WRITE_NVLD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_READ_WRITE_NVLD]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_READ_WRITE_NVLD]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_READ_WRITE_NVLD(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.insertFromRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_READ_WRITE_NVLD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_READ_WRITE_NVLD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_READ_WRITE_NVLD]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_READ_WRITE_NVLD]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_READ_WRITE_NVLD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.setBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_READ_WRITE_NVLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_READ_WRITE_NVLD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_READ_WRITE_NVLD]

//>> CLEAR_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_READ_WRITE_NVLD]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_READ_WRITE_NVLD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.clearBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_READ_WRITE_NVLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_READ_WRITE_NVLD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_READ_WRITE_NVLD]

//>> GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_READ_WRITE_NVLD]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_READ_WRITE_NVLD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return i_data.extractToRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_READ_WRITE_NVLD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_READ_WRITE_NVLD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_READ_WRITE_NVLD]

//>> GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_READ_WRITE_NVLD]
static inline bool GET_AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_READ_WRITE_NVLD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return i_data.getBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_READ_WRITE_NVLD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_READ_WRITE_NVLD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_READ_WRITE_NVLD]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_ADDR_INVALID]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_ADDR_INVALID(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.insertFromRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_ADDR_INVALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_ADDR_INVALID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_ADDR_INVALID]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_ADDR_INVALID]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_ADDR_INVALID(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.insertFromRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_ADDR_INVALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_ADDR_INVALID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_ADDR_INVALID]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_ADDR_INVALID]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_ADDR_INVALID(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.setBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_ADDR_INVALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_ADDR_INVALID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_ADDR_INVALID]

//>> CLEAR_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_ADDR_INVALID]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_ADDR_INVALID(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.clearBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_ADDR_INVALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_ADDR_INVALID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_ADDR_INVALID]

//>> GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_ADDR_INVALID]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_ADDR_INVALID(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return i_data.extractToRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_ADDR_INVALID,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_ADDR_INVALID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_ADDR_INVALID]

//>> GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_ADDR_INVALID]
static inline bool GET_AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_ADDR_INVALID(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return i_data.getBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_ADDR_INVALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_ADDR_INVALID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PSCOM_PARALLEL_ADDR_INVALID]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_COMMAND_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_COMMAND_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.insertFromRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_COMMAND_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_COMMAND_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_COMMAND_PARITY_ERROR]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_COMMAND_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_COMMAND_PARITY_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.insertFromRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_COMMAND_PARITY_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_COMMAND_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_COMMAND_PARITY_ERROR]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_COMMAND_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_COMMAND_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.setBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_COMMAND_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_COMMAND_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_COMMAND_PARITY_ERROR]

//>> CLEAR_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_COMMAND_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_COMMAND_PARITY_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.clearBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_COMMAND_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_COMMAND_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_COMMAND_PARITY_ERROR]

//>> GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_COMMAND_PARITY_ERROR]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_COMMAND_PARITY_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return i_data.extractToRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_COMMAND_PARITY_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_COMMAND_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_COMMAND_PARITY_ERROR]

//>> GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_COMMAND_PARITY_ERROR]
static inline bool GET_AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_COMMAND_PARITY_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return i_data.getBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_COMMAND_PARITY_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_COMMAND_PARITY_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_PCB_COMMAND_PARITY_ERROR]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_GENERAL_TIMEOUT]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_GENERAL_TIMEOUT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.insertFromRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_GENERAL_TIMEOUT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_GENERAL_TIMEOUT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_GENERAL_TIMEOUT]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_GENERAL_TIMEOUT]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_GENERAL_TIMEOUT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.insertFromRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_GENERAL_TIMEOUT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_GENERAL_TIMEOUT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_GENERAL_TIMEOUT]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_GENERAL_TIMEOUT]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_GENERAL_TIMEOUT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.setBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_GENERAL_TIMEOUT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_GENERAL_TIMEOUT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_GENERAL_TIMEOUT]

//>> CLEAR_[AXON_EPS_PSC_PSCOM_ERROR_MASK_GENERAL_TIMEOUT]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_PSC_PSCOM_ERROR_MASK_GENERAL_TIMEOUT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.clearBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_GENERAL_TIMEOUT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_GENERAL_TIMEOUT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_PSC_PSCOM_ERROR_MASK_GENERAL_TIMEOUT]

//>> GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_GENERAL_TIMEOUT]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_PSC_PSCOM_ERROR_MASK_GENERAL_TIMEOUT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return i_data.extractToRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_GENERAL_TIMEOUT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_GENERAL_TIMEOUT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_GENERAL_TIMEOUT]

//>> GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_GENERAL_TIMEOUT]
static inline bool GET_AXON_EPS_PSC_PSCOM_ERROR_MASK_GENERAL_TIMEOUT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return i_data.getBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_GENERAL_TIMEOUT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_GENERAL_TIMEOUT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_GENERAL_TIMEOUT]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_ACCESS_VIOLATION]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_ACCESS_VIOLATION(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.insertFromRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_ACCESS_VIOLATION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_ACCESS_VIOLATION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_ACCESS_VIOLATION]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_ACCESS_VIOLATION]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_ACCESS_VIOLATION(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.insertFromRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_ACCESS_VIOLATION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_ACCESS_VIOLATION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_ACCESS_VIOLATION]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_ACCESS_VIOLATION]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_ACCESS_VIOLATION(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.setBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_ACCESS_VIOLATION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_ACCESS_VIOLATION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_ACCESS_VIOLATION]

//>> CLEAR_[AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_ACCESS_VIOLATION]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_ACCESS_VIOLATION(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.clearBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_ACCESS_VIOLATION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_ACCESS_VIOLATION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_ACCESS_VIOLATION]

//>> GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_ACCESS_VIOLATION]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_ACCESS_VIOLATION(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return i_data.extractToRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_ACCESS_VIOLATION,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_ACCESS_VIOLATION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_ACCESS_VIOLATION]

//>> GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_ACCESS_VIOLATION]
static inline bool GET_AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_ACCESS_VIOLATION(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return i_data.getBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_ACCESS_VIOLATION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_ACCESS_VIOLATION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_ACCESS_VIOLATION]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_INVALID_REGISTER]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_INVALID_REGISTER(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.insertFromRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_INVALID_REGISTER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_INVALID_REGISTER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_INVALID_REGISTER]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_INVALID_REGISTER]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_INVALID_REGISTER(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.insertFromRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_INVALID_REGISTER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_INVALID_REGISTER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_INVALID_REGISTER]

//>> SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_INVALID_REGISTER]
static inline fapi2::buffer<uint64_t>& SET_AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_INVALID_REGISTER(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.setBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_INVALID_REGISTER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_INVALID_REGISTER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_INVALID_REGISTER]

//>> CLEAR_[AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_INVALID_REGISTER]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_INVALID_REGISTER(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return o_data.clearBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_INVALID_REGISTER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_INVALID_REGISTER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_INVALID_REGISTER]

//>> GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_INVALID_REGISTER]
static inline fapi2::buffer<uint64_t>& GET_AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_INVALID_REGISTER(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return i_data.extractToRight<AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_INVALID_REGISTER,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_INVALID_REGISTER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_INVALID_REGISTER]

//>> GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_INVALID_REGISTER]
static inline bool GET_AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_INVALID_REGISTER(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_EPS_PSC_PSCOM_ERROR_MASK));
#endif
    return i_data.getBit<AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_INVALID_REGISTER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_INVALID_REGISTER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_EPS_PSC_PSCOM_ERROR_MASK_SATELLITE_ACKNOWLEDGE_INVALID_REGISTER]

//>> PREP_[AXON_HOSTATTN_MASK_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AXON_HOSTATTN_MASK_RW(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AXON_HOSTATTN_MASK_RW;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AXON_HOSTATTN_MASK_RW]

//>> GET_[AXON_HOSTATTN_MASK_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AXON_HOSTATTN_MASK_RW(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AXON_HOSTATTN_MASK_RW;
#endif
    return fapi2::getScom(i_target, AXON_HOSTATTN_MASK_RW, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_RW]

//>> PUT_[AXON_HOSTATTN_MASK_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AXON_HOSTATTN_MASK_RW(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return fapi2::putScom(i_target, AXON_HOSTATTN_MASK_RW, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AXON_HOSTATTN_MASK_RW]

//>> PREP_[AXON_HOSTATTN_MASK_WO_CLEAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AXON_HOSTATTN_MASK_WO_CLEAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AXON_HOSTATTN_MASK_WO_CLEAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AXON_HOSTATTN_MASK_WO_CLEAR]

//>> GET_[AXON_HOSTATTN_MASK_WO_CLEAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AXON_HOSTATTN_MASK_WO_CLEAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AXON_HOSTATTN_MASK_WO_CLEAR;
#endif
    return fapi2::getScom(i_target, AXON_HOSTATTN_MASK_WO_CLEAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_WO_CLEAR]

//>> PUT_[AXON_HOSTATTN_MASK_WO_CLEAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AXON_HOSTATTN_MASK_WO_CLEAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return fapi2::putScom(i_target, AXON_HOSTATTN_MASK_WO_CLEAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AXON_HOSTATTN_MASK_WO_CLEAR]

//>> PREP_[AXON_HOSTATTN_MASK_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AXON_HOSTATTN_MASK_WO_OR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AXON_HOSTATTN_MASK_WO_OR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AXON_HOSTATTN_MASK_WO_OR]

//>> GET_[AXON_HOSTATTN_MASK_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AXON_HOSTATTN_MASK_WO_OR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AXON_HOSTATTN_MASK_WO_OR;
#endif
    return fapi2::getScom(i_target, AXON_HOSTATTN_MASK_WO_OR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_WO_OR]

//>> PUT_[AXON_HOSTATTN_MASK_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AXON_HOSTATTN_MASK_WO_OR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return fapi2::putScom(i_target, AXON_HOSTATTN_MASK_WO_OR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AXON_HOSTATTN_MASK_WO_OR]


//>> SET_[AXON_HOSTATTN_MASK_01]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_01(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_01,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_01]

//>> SET_[AXON_HOSTATTN_MASK_01]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_01(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_01,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_01]

//>> SET_[AXON_HOSTATTN_MASK_01]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_01(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_01]

//>> CLEAR_[AXON_HOSTATTN_MASK_01]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_01(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_01]

//>> GET_[AXON_HOSTATTN_MASK_01]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_01(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_01,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_01]

//>> GET_[AXON_HOSTATTN_MASK_01]
static inline bool GET_AXON_HOSTATTN_MASK_01(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_01]

//>> SET_[AXON_HOSTATTN_MASK_02]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_02(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_02,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_02]

//>> SET_[AXON_HOSTATTN_MASK_02]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_02(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_02,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_02]

//>> SET_[AXON_HOSTATTN_MASK_02]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_02(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_02]

//>> CLEAR_[AXON_HOSTATTN_MASK_02]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_02(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_02]

//>> GET_[AXON_HOSTATTN_MASK_02]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_02(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_02,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_02]

//>> GET_[AXON_HOSTATTN_MASK_02]
static inline bool GET_AXON_HOSTATTN_MASK_02(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_02]

//>> SET_[AXON_HOSTATTN_MASK_03]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_03(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_03,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_03]

//>> SET_[AXON_HOSTATTN_MASK_03]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_03(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_03,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_03]

//>> SET_[AXON_HOSTATTN_MASK_03]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_03(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_03]

//>> CLEAR_[AXON_HOSTATTN_MASK_03]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_03(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_03]

//>> GET_[AXON_HOSTATTN_MASK_03]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_03(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_03,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_03]

//>> GET_[AXON_HOSTATTN_MASK_03]
static inline bool GET_AXON_HOSTATTN_MASK_03(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_03]

//>> SET_[AXON_HOSTATTN_MASK_04]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_04(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_04,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_04]

//>> SET_[AXON_HOSTATTN_MASK_04]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_04(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_04,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_04]

//>> SET_[AXON_HOSTATTN_MASK_04]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_04(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_04>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_04]

//>> CLEAR_[AXON_HOSTATTN_MASK_04]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_04(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_04>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_04]

//>> GET_[AXON_HOSTATTN_MASK_04]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_04(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_04,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_04]

//>> GET_[AXON_HOSTATTN_MASK_04]
static inline bool GET_AXON_HOSTATTN_MASK_04(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_04>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_04]

//>> SET_[AXON_HOSTATTN_MASK_05]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_05(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_05,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_05]

//>> SET_[AXON_HOSTATTN_MASK_05]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_05(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_05,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_05]

//>> SET_[AXON_HOSTATTN_MASK_05]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_05(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_05]

//>> CLEAR_[AXON_HOSTATTN_MASK_05]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_05(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_05]

//>> GET_[AXON_HOSTATTN_MASK_05]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_05(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_05,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_05]

//>> GET_[AXON_HOSTATTN_MASK_05]
static inline bool GET_AXON_HOSTATTN_MASK_05(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_05]

//>> SET_[AXON_HOSTATTN_MASK_06]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_06(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_06,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_06]

//>> SET_[AXON_HOSTATTN_MASK_06]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_06(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_06,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_06]

//>> SET_[AXON_HOSTATTN_MASK_06]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_06(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_06]

//>> CLEAR_[AXON_HOSTATTN_MASK_06]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_06(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_06]

//>> GET_[AXON_HOSTATTN_MASK_06]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_06(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_06,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_06]

//>> GET_[AXON_HOSTATTN_MASK_06]
static inline bool GET_AXON_HOSTATTN_MASK_06(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_06]

//>> SET_[AXON_HOSTATTN_MASK_07]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_07(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_07,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_07]

//>> SET_[AXON_HOSTATTN_MASK_07]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_07(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_07,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_07]

//>> SET_[AXON_HOSTATTN_MASK_07]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_07(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_07]

//>> CLEAR_[AXON_HOSTATTN_MASK_07]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_07(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_07]

//>> GET_[AXON_HOSTATTN_MASK_07]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_07(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_07,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_07]

//>> GET_[AXON_HOSTATTN_MASK_07]
static inline bool GET_AXON_HOSTATTN_MASK_07(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_07]

//>> SET_[AXON_HOSTATTN_MASK_08]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_08(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_08,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_08]

//>> SET_[AXON_HOSTATTN_MASK_08]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_08(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_08,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_08]

//>> SET_[AXON_HOSTATTN_MASK_08]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_08(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_08]

//>> CLEAR_[AXON_HOSTATTN_MASK_08]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_08(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_08]

//>> GET_[AXON_HOSTATTN_MASK_08]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_08(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_08,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_08]

//>> GET_[AXON_HOSTATTN_MASK_08]
static inline bool GET_AXON_HOSTATTN_MASK_08(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_08]

//>> SET_[AXON_HOSTATTN_MASK_09]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_09(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_09,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_09]

//>> SET_[AXON_HOSTATTN_MASK_09]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_09(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_09,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_09]

//>> SET_[AXON_HOSTATTN_MASK_09]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_09(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_09]

//>> CLEAR_[AXON_HOSTATTN_MASK_09]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_09(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_09]

//>> GET_[AXON_HOSTATTN_MASK_09]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_09(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_09,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_09]

//>> GET_[AXON_HOSTATTN_MASK_09]
static inline bool GET_AXON_HOSTATTN_MASK_09(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_09]

//>> SET_[AXON_HOSTATTN_MASK_10]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_10]

//>> SET_[AXON_HOSTATTN_MASK_10]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_10]

//>> SET_[AXON_HOSTATTN_MASK_10]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_10]

//>> CLEAR_[AXON_HOSTATTN_MASK_10]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_10]

//>> GET_[AXON_HOSTATTN_MASK_10]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_10]

//>> GET_[AXON_HOSTATTN_MASK_10]
static inline bool GET_AXON_HOSTATTN_MASK_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_10]

//>> SET_[AXON_HOSTATTN_MASK_11]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_11]

//>> SET_[AXON_HOSTATTN_MASK_11]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_11]

//>> SET_[AXON_HOSTATTN_MASK_11]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_11]

//>> CLEAR_[AXON_HOSTATTN_MASK_11]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_11]

//>> GET_[AXON_HOSTATTN_MASK_11]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_11]

//>> GET_[AXON_HOSTATTN_MASK_11]
static inline bool GET_AXON_HOSTATTN_MASK_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_11]

//>> SET_[AXON_HOSTATTN_MASK_12]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_12]

//>> SET_[AXON_HOSTATTN_MASK_12]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_12]

//>> SET_[AXON_HOSTATTN_MASK_12]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_12]

//>> CLEAR_[AXON_HOSTATTN_MASK_12]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_12]

//>> GET_[AXON_HOSTATTN_MASK_12]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_12]

//>> GET_[AXON_HOSTATTN_MASK_12]
static inline bool GET_AXON_HOSTATTN_MASK_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_12]

//>> SET_[AXON_HOSTATTN_MASK_13]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_13]

//>> SET_[AXON_HOSTATTN_MASK_13]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_13]

//>> SET_[AXON_HOSTATTN_MASK_13]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_13]

//>> CLEAR_[AXON_HOSTATTN_MASK_13]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_13]

//>> GET_[AXON_HOSTATTN_MASK_13]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_13]

//>> GET_[AXON_HOSTATTN_MASK_13]
static inline bool GET_AXON_HOSTATTN_MASK_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_13]

//>> SET_[AXON_HOSTATTN_MASK_14]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_14]

//>> SET_[AXON_HOSTATTN_MASK_14]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_14]

//>> SET_[AXON_HOSTATTN_MASK_14]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_14]

//>> CLEAR_[AXON_HOSTATTN_MASK_14]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_14]

//>> GET_[AXON_HOSTATTN_MASK_14]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_14]

//>> GET_[AXON_HOSTATTN_MASK_14]
static inline bool GET_AXON_HOSTATTN_MASK_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_14]

//>> SET_[AXON_HOSTATTN_MASK_15]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_15]

//>> SET_[AXON_HOSTATTN_MASK_15]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_15]

//>> SET_[AXON_HOSTATTN_MASK_15]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_15]

//>> CLEAR_[AXON_HOSTATTN_MASK_15]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_15]

//>> GET_[AXON_HOSTATTN_MASK_15]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_15]

//>> GET_[AXON_HOSTATTN_MASK_15]
static inline bool GET_AXON_HOSTATTN_MASK_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_15]

//>> SET_[AXON_HOSTATTN_MASK_16]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_16]

//>> SET_[AXON_HOSTATTN_MASK_16]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_16]

//>> SET_[AXON_HOSTATTN_MASK_16]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_16]

//>> CLEAR_[AXON_HOSTATTN_MASK_16]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_16]

//>> GET_[AXON_HOSTATTN_MASK_16]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_16]

//>> GET_[AXON_HOSTATTN_MASK_16]
static inline bool GET_AXON_HOSTATTN_MASK_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_16]

//>> SET_[AXON_HOSTATTN_MASK_17]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_17]

//>> SET_[AXON_HOSTATTN_MASK_17]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_17]

//>> SET_[AXON_HOSTATTN_MASK_17]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_17]

//>> CLEAR_[AXON_HOSTATTN_MASK_17]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_17]

//>> GET_[AXON_HOSTATTN_MASK_17]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_17]

//>> GET_[AXON_HOSTATTN_MASK_17]
static inline bool GET_AXON_HOSTATTN_MASK_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_17]

//>> SET_[AXON_HOSTATTN_MASK_18]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_18]

//>> SET_[AXON_HOSTATTN_MASK_18]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_18]

//>> SET_[AXON_HOSTATTN_MASK_18]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_18]

//>> CLEAR_[AXON_HOSTATTN_MASK_18]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_18]

//>> GET_[AXON_HOSTATTN_MASK_18]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_18]

//>> GET_[AXON_HOSTATTN_MASK_18]
static inline bool GET_AXON_HOSTATTN_MASK_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_18]

//>> SET_[AXON_HOSTATTN_MASK_19]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_19]

//>> SET_[AXON_HOSTATTN_MASK_19]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_19]

//>> SET_[AXON_HOSTATTN_MASK_19]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_19]

//>> CLEAR_[AXON_HOSTATTN_MASK_19]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_19]

//>> GET_[AXON_HOSTATTN_MASK_19]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_19]

//>> GET_[AXON_HOSTATTN_MASK_19]
static inline bool GET_AXON_HOSTATTN_MASK_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_19]

//>> SET_[AXON_HOSTATTN_MASK_20]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_20]

//>> SET_[AXON_HOSTATTN_MASK_20]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_20]

//>> SET_[AXON_HOSTATTN_MASK_20]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_20]

//>> CLEAR_[AXON_HOSTATTN_MASK_20]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_20]

//>> GET_[AXON_HOSTATTN_MASK_20]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_20,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_20]

//>> GET_[AXON_HOSTATTN_MASK_20]
static inline bool GET_AXON_HOSTATTN_MASK_20(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_20]

//>> SET_[AXON_HOSTATTN_MASK_21]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_21]

//>> SET_[AXON_HOSTATTN_MASK_21]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_21]

//>> SET_[AXON_HOSTATTN_MASK_21]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_21]

//>> CLEAR_[AXON_HOSTATTN_MASK_21]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_21]

//>> GET_[AXON_HOSTATTN_MASK_21]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_21,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_21]

//>> GET_[AXON_HOSTATTN_MASK_21]
static inline bool GET_AXON_HOSTATTN_MASK_21(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_21]

//>> SET_[AXON_HOSTATTN_MASK_22]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_22]

//>> SET_[AXON_HOSTATTN_MASK_22]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_22]

//>> SET_[AXON_HOSTATTN_MASK_22]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_22]

//>> CLEAR_[AXON_HOSTATTN_MASK_22]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_22]

//>> GET_[AXON_HOSTATTN_MASK_22]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_22,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_22]

//>> GET_[AXON_HOSTATTN_MASK_22]
static inline bool GET_AXON_HOSTATTN_MASK_22(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_22]

//>> SET_[AXON_HOSTATTN_MASK_23]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_23]

//>> SET_[AXON_HOSTATTN_MASK_23]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_23]

//>> SET_[AXON_HOSTATTN_MASK_23]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_23]

//>> CLEAR_[AXON_HOSTATTN_MASK_23]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_23]

//>> GET_[AXON_HOSTATTN_MASK_23]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_23]

//>> GET_[AXON_HOSTATTN_MASK_23]
static inline bool GET_AXON_HOSTATTN_MASK_23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_23]

//>> SET_[AXON_HOSTATTN_MASK_24]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_24(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_24]

//>> SET_[AXON_HOSTATTN_MASK_24]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_24(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_24]

//>> SET_[AXON_HOSTATTN_MASK_24]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_24]

//>> CLEAR_[AXON_HOSTATTN_MASK_24]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_24]

//>> GET_[AXON_HOSTATTN_MASK_24]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_24(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_24,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_24]

//>> GET_[AXON_HOSTATTN_MASK_24]
static inline bool GET_AXON_HOSTATTN_MASK_24(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_24]

//>> SET_[AXON_HOSTATTN_MASK_25]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_25(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_25]

//>> SET_[AXON_HOSTATTN_MASK_25]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_25(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_25]

//>> SET_[AXON_HOSTATTN_MASK_25]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_25]

//>> CLEAR_[AXON_HOSTATTN_MASK_25]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_25]

//>> GET_[AXON_HOSTATTN_MASK_25]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_25(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_25,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_25]

//>> GET_[AXON_HOSTATTN_MASK_25]
static inline bool GET_AXON_HOSTATTN_MASK_25(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_25]

//>> SET_[AXON_HOSTATTN_MASK_26]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_26(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_26]

//>> SET_[AXON_HOSTATTN_MASK_26]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_26(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_26]

//>> SET_[AXON_HOSTATTN_MASK_26]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_26]

//>> CLEAR_[AXON_HOSTATTN_MASK_26]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_26]

//>> GET_[AXON_HOSTATTN_MASK_26]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_26(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_26,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_26]

//>> GET_[AXON_HOSTATTN_MASK_26]
static inline bool GET_AXON_HOSTATTN_MASK_26(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_26]

//>> SET_[AXON_HOSTATTN_MASK_27]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_27(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_27]

//>> SET_[AXON_HOSTATTN_MASK_27]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_27(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_27]

//>> SET_[AXON_HOSTATTN_MASK_27]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_27]

//>> CLEAR_[AXON_HOSTATTN_MASK_27]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_27]

//>> GET_[AXON_HOSTATTN_MASK_27]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_27(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_27,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_27]

//>> GET_[AXON_HOSTATTN_MASK_27]
static inline bool GET_AXON_HOSTATTN_MASK_27(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_27]

//>> SET_[AXON_HOSTATTN_MASK_28]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_28(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_28]

//>> SET_[AXON_HOSTATTN_MASK_28]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_28(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_28]

//>> SET_[AXON_HOSTATTN_MASK_28]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_28]

//>> CLEAR_[AXON_HOSTATTN_MASK_28]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_28]

//>> GET_[AXON_HOSTATTN_MASK_28]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_28(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_28,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_28]

//>> GET_[AXON_HOSTATTN_MASK_28]
static inline bool GET_AXON_HOSTATTN_MASK_28(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_28]

//>> SET_[AXON_HOSTATTN_MASK_29]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_29(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_29]

//>> SET_[AXON_HOSTATTN_MASK_29]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_29(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_29]

//>> SET_[AXON_HOSTATTN_MASK_29]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_29]

//>> CLEAR_[AXON_HOSTATTN_MASK_29]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_29]

//>> GET_[AXON_HOSTATTN_MASK_29]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_29(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_29,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_29]

//>> GET_[AXON_HOSTATTN_MASK_29]
static inline bool GET_AXON_HOSTATTN_MASK_29(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_29]

//>> SET_[AXON_HOSTATTN_MASK_30]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_30(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_30]

//>> SET_[AXON_HOSTATTN_MASK_30]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_30(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_30]

//>> SET_[AXON_HOSTATTN_MASK_30]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_30]

//>> CLEAR_[AXON_HOSTATTN_MASK_30]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_30]

//>> GET_[AXON_HOSTATTN_MASK_30]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_30(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_30,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_30]

//>> GET_[AXON_HOSTATTN_MASK_30]
static inline bool GET_AXON_HOSTATTN_MASK_30(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_30]

//>> SET_[AXON_HOSTATTN_MASK_31]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_31(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_31]

//>> SET_[AXON_HOSTATTN_MASK_31]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_31(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_31]

//>> SET_[AXON_HOSTATTN_MASK_31]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_31]

//>> CLEAR_[AXON_HOSTATTN_MASK_31]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_31]

//>> GET_[AXON_HOSTATTN_MASK_31]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_31(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_31,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_31]

//>> GET_[AXON_HOSTATTN_MASK_31]
static inline bool GET_AXON_HOSTATTN_MASK_31(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_31]

//>> SET_[AXON_HOSTATTN_MASK_32]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_32(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_32]

//>> SET_[AXON_HOSTATTN_MASK_32]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_32(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_32]

//>> SET_[AXON_HOSTATTN_MASK_32]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_32]

//>> CLEAR_[AXON_HOSTATTN_MASK_32]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_32]

//>> GET_[AXON_HOSTATTN_MASK_32]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_32(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_32,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_32]

//>> GET_[AXON_HOSTATTN_MASK_32]
static inline bool GET_AXON_HOSTATTN_MASK_32(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_32]

//>> SET_[AXON_HOSTATTN_MASK_33]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_33(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_33]

//>> SET_[AXON_HOSTATTN_MASK_33]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_33(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_33]

//>> SET_[AXON_HOSTATTN_MASK_33]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_33]

//>> CLEAR_[AXON_HOSTATTN_MASK_33]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_33]

//>> GET_[AXON_HOSTATTN_MASK_33]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_33(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_33,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_33]

//>> GET_[AXON_HOSTATTN_MASK_33]
static inline bool GET_AXON_HOSTATTN_MASK_33(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_33]

//>> SET_[AXON_HOSTATTN_MASK_34]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_34(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_34]

//>> SET_[AXON_HOSTATTN_MASK_34]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_34(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_34]

//>> SET_[AXON_HOSTATTN_MASK_34]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_34]

//>> CLEAR_[AXON_HOSTATTN_MASK_34]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_34]

//>> GET_[AXON_HOSTATTN_MASK_34]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_34(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_34,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_34]

//>> GET_[AXON_HOSTATTN_MASK_34]
static inline bool GET_AXON_HOSTATTN_MASK_34(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_34]

//>> SET_[AXON_HOSTATTN_MASK_35]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_35(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_35]

//>> SET_[AXON_HOSTATTN_MASK_35]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_35(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_35]

//>> SET_[AXON_HOSTATTN_MASK_35]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_35]

//>> CLEAR_[AXON_HOSTATTN_MASK_35]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_35]

//>> GET_[AXON_HOSTATTN_MASK_35]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_35(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_35,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_35]

//>> GET_[AXON_HOSTATTN_MASK_35]
static inline bool GET_AXON_HOSTATTN_MASK_35(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_35]

//>> SET_[AXON_HOSTATTN_MASK_36]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_36(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_36]

//>> SET_[AXON_HOSTATTN_MASK_36]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_36(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_36]

//>> SET_[AXON_HOSTATTN_MASK_36]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_36]

//>> CLEAR_[AXON_HOSTATTN_MASK_36]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_36]

//>> GET_[AXON_HOSTATTN_MASK_36]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_36(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_36,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_36]

//>> GET_[AXON_HOSTATTN_MASK_36]
static inline bool GET_AXON_HOSTATTN_MASK_36(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_36]

//>> SET_[AXON_HOSTATTN_MASK_37]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_37(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_37]

//>> SET_[AXON_HOSTATTN_MASK_37]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_37(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_37]

//>> SET_[AXON_HOSTATTN_MASK_37]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_37]

//>> CLEAR_[AXON_HOSTATTN_MASK_37]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_37]

//>> GET_[AXON_HOSTATTN_MASK_37]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_37(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_37,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_37]

//>> GET_[AXON_HOSTATTN_MASK_37]
static inline bool GET_AXON_HOSTATTN_MASK_37(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_37]

//>> SET_[AXON_HOSTATTN_MASK_38]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_38(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_38]

//>> SET_[AXON_HOSTATTN_MASK_38]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_38(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_38]

//>> SET_[AXON_HOSTATTN_MASK_38]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_38]

//>> CLEAR_[AXON_HOSTATTN_MASK_38]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_38]

//>> GET_[AXON_HOSTATTN_MASK_38]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_38(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_38,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_38]

//>> GET_[AXON_HOSTATTN_MASK_38]
static inline bool GET_AXON_HOSTATTN_MASK_38(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_38]

//>> SET_[AXON_HOSTATTN_MASK_39]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_39(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_39]

//>> SET_[AXON_HOSTATTN_MASK_39]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_39(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_39]

//>> SET_[AXON_HOSTATTN_MASK_39]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_39]

//>> CLEAR_[AXON_HOSTATTN_MASK_39]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_39]

//>> GET_[AXON_HOSTATTN_MASK_39]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_39(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_39,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_39]

//>> GET_[AXON_HOSTATTN_MASK_39]
static inline bool GET_AXON_HOSTATTN_MASK_39(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_39]

//>> SET_[AXON_HOSTATTN_MASK_40]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_40(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_40]

//>> SET_[AXON_HOSTATTN_MASK_40]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_40(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_40]

//>> SET_[AXON_HOSTATTN_MASK_40]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_40]

//>> CLEAR_[AXON_HOSTATTN_MASK_40]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_40]

//>> GET_[AXON_HOSTATTN_MASK_40]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_40(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_40,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_40]

//>> GET_[AXON_HOSTATTN_MASK_40]
static inline bool GET_AXON_HOSTATTN_MASK_40(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_40]

//>> SET_[AXON_HOSTATTN_MASK_41]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_41(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_41]

//>> SET_[AXON_HOSTATTN_MASK_41]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_41(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_41]

//>> SET_[AXON_HOSTATTN_MASK_41]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_41]

//>> CLEAR_[AXON_HOSTATTN_MASK_41]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_41]

//>> GET_[AXON_HOSTATTN_MASK_41]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_41(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_41,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_41]

//>> GET_[AXON_HOSTATTN_MASK_41]
static inline bool GET_AXON_HOSTATTN_MASK_41(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_41]

//>> SET_[AXON_HOSTATTN_MASK_42]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_42(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_42]

//>> SET_[AXON_HOSTATTN_MASK_42]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_42(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_42]

//>> SET_[AXON_HOSTATTN_MASK_42]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_42]

//>> CLEAR_[AXON_HOSTATTN_MASK_42]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_42]

//>> GET_[AXON_HOSTATTN_MASK_42]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_42(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_42,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_42]

//>> GET_[AXON_HOSTATTN_MASK_42]
static inline bool GET_AXON_HOSTATTN_MASK_42(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_42]

//>> SET_[AXON_HOSTATTN_MASK_43]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_43(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_43]

//>> SET_[AXON_HOSTATTN_MASK_43]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_43(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_43]

//>> SET_[AXON_HOSTATTN_MASK_43]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_43]

//>> CLEAR_[AXON_HOSTATTN_MASK_43]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_43]

//>> GET_[AXON_HOSTATTN_MASK_43]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_43(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_43,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_43]

//>> GET_[AXON_HOSTATTN_MASK_43]
static inline bool GET_AXON_HOSTATTN_MASK_43(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_43]

//>> SET_[AXON_HOSTATTN_MASK_44]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_44(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_44]

//>> SET_[AXON_HOSTATTN_MASK_44]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_44(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_44]

//>> SET_[AXON_HOSTATTN_MASK_44]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_44]

//>> CLEAR_[AXON_HOSTATTN_MASK_44]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_44]

//>> GET_[AXON_HOSTATTN_MASK_44]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_44(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_44,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_44]

//>> GET_[AXON_HOSTATTN_MASK_44]
static inline bool GET_AXON_HOSTATTN_MASK_44(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_44]

//>> SET_[AXON_HOSTATTN_MASK_45]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_45(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_45]

//>> SET_[AXON_HOSTATTN_MASK_45]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_45(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_45]

//>> SET_[AXON_HOSTATTN_MASK_45]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_45]

//>> CLEAR_[AXON_HOSTATTN_MASK_45]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_45]

//>> GET_[AXON_HOSTATTN_MASK_45]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_45(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_45,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_45]

//>> GET_[AXON_HOSTATTN_MASK_45]
static inline bool GET_AXON_HOSTATTN_MASK_45(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_45]

//>> SET_[AXON_HOSTATTN_MASK_46]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_46(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_46]

//>> SET_[AXON_HOSTATTN_MASK_46]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_46(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_46]

//>> SET_[AXON_HOSTATTN_MASK_46]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_46]

//>> CLEAR_[AXON_HOSTATTN_MASK_46]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_46]

//>> GET_[AXON_HOSTATTN_MASK_46]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_46(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_46,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_46]

//>> GET_[AXON_HOSTATTN_MASK_46]
static inline bool GET_AXON_HOSTATTN_MASK_46(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_46]

//>> SET_[AXON_HOSTATTN_MASK_47]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_47(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_47]

//>> SET_[AXON_HOSTATTN_MASK_47]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_47(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_47]

//>> SET_[AXON_HOSTATTN_MASK_47]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_47]

//>> CLEAR_[AXON_HOSTATTN_MASK_47]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_47]

//>> GET_[AXON_HOSTATTN_MASK_47]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_47(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_47,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_47]

//>> GET_[AXON_HOSTATTN_MASK_47]
static inline bool GET_AXON_HOSTATTN_MASK_47(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_47]

//>> SET_[AXON_HOSTATTN_MASK_48]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_48(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_48]

//>> SET_[AXON_HOSTATTN_MASK_48]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_48(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_48]

//>> SET_[AXON_HOSTATTN_MASK_48]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_48]

//>> CLEAR_[AXON_HOSTATTN_MASK_48]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_48]

//>> GET_[AXON_HOSTATTN_MASK_48]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_48(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_48,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_48]

//>> GET_[AXON_HOSTATTN_MASK_48]
static inline bool GET_AXON_HOSTATTN_MASK_48(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_48]

//>> SET_[AXON_HOSTATTN_MASK_49]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_49(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_49]

//>> SET_[AXON_HOSTATTN_MASK_49]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_49(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_49]

//>> SET_[AXON_HOSTATTN_MASK_49]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_49]

//>> CLEAR_[AXON_HOSTATTN_MASK_49]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_49]

//>> GET_[AXON_HOSTATTN_MASK_49]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_49(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_49,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_49]

//>> GET_[AXON_HOSTATTN_MASK_49]
static inline bool GET_AXON_HOSTATTN_MASK_49(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_49]

//>> SET_[AXON_HOSTATTN_MASK_50]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_50(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_50]

//>> SET_[AXON_HOSTATTN_MASK_50]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_50(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_50]

//>> SET_[AXON_HOSTATTN_MASK_50]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_50]

//>> CLEAR_[AXON_HOSTATTN_MASK_50]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_50]

//>> GET_[AXON_HOSTATTN_MASK_50]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_50(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_50,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_50]

//>> GET_[AXON_HOSTATTN_MASK_50]
static inline bool GET_AXON_HOSTATTN_MASK_50(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_50]

//>> SET_[AXON_HOSTATTN_MASK_51]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_51(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_51]

//>> SET_[AXON_HOSTATTN_MASK_51]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_51(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_51]

//>> SET_[AXON_HOSTATTN_MASK_51]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_51]

//>> CLEAR_[AXON_HOSTATTN_MASK_51]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_51]

//>> GET_[AXON_HOSTATTN_MASK_51]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_51(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_51,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_51]

//>> GET_[AXON_HOSTATTN_MASK_51]
static inline bool GET_AXON_HOSTATTN_MASK_51(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_51]

//>> SET_[AXON_HOSTATTN_MASK_52]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_52(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_52]

//>> SET_[AXON_HOSTATTN_MASK_52]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_52(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_52]

//>> SET_[AXON_HOSTATTN_MASK_52]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_52]

//>> CLEAR_[AXON_HOSTATTN_MASK_52]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_52]

//>> GET_[AXON_HOSTATTN_MASK_52]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_52(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_52,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_52]

//>> GET_[AXON_HOSTATTN_MASK_52]
static inline bool GET_AXON_HOSTATTN_MASK_52(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_52]

//>> SET_[AXON_HOSTATTN_MASK_53]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_53(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_53]

//>> SET_[AXON_HOSTATTN_MASK_53]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_53(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<AXON_HOSTATTN_MASK_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_53]

//>> SET_[AXON_HOSTATTN_MASK_53]
static inline fapi2::buffer<uint64_t>& SET_AXON_HOSTATTN_MASK_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<AXON_HOSTATTN_MASK_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_HOSTATTN_MASK_53]

//>> CLEAR_[AXON_HOSTATTN_MASK_53]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_HOSTATTN_MASK_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<AXON_HOSTATTN_MASK_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_HOSTATTN_MASK_53]

//>> GET_[AXON_HOSTATTN_MASK_53]
static inline fapi2::buffer<uint64_t>& GET_AXON_HOSTATTN_MASK_53(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<AXON_HOSTATTN_MASK_53,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_53]

//>> GET_[AXON_HOSTATTN_MASK_53]
static inline bool GET_AXON_HOSTATTN_MASK_53(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_HOSTATTN_MASK_RW, AXON_HOSTATTN_MASK_WO_CLEAR, AXON_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<AXON_HOSTATTN_MASK_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_HOSTATTN_MASK_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_HOSTATTN_MASK_53]

//>> PREP_[AXON_OPCG_CAPT2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AXON_OPCG_CAPT2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AXON_OPCG_CAPT2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AXON_OPCG_CAPT2]

//>> GET_[AXON_OPCG_CAPT2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AXON_OPCG_CAPT2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AXON_OPCG_CAPT2;
#endif
    return fapi2::getScom(i_target, AXON_OPCG_CAPT2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AXON_OPCG_CAPT2]

//>> PUT_[AXON_OPCG_CAPT2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AXON_OPCG_CAPT2(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AXON_OPCG_CAPT2));
#endif
    return fapi2::putScom(i_target, AXON_OPCG_CAPT2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AXON_OPCG_CAPT2]


//>> SET_[AXON_OPCG_CAPT2_13_01EVEN]
static inline fapi2::buffer<uint64_t>& SET_AXON_OPCG_CAPT2_13_01EVEN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<AXON_OPCG_CAPT2_13_01EVEN,
           AXON_OPCG_CAPT2_13_01EVEN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_OPCG_CAPT2_13_01EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_OPCG_CAPT2_13_01EVEN]

//>> SET_[AXON_OPCG_CAPT2_13_01EVEN]
static inline fapi2::buffer<uint64_t>& SET_AXON_OPCG_CAPT2_13_01EVEN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<AXON_OPCG_CAPT2_13_01EVEN,
           AXON_OPCG_CAPT2_13_01EVEN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_OPCG_CAPT2_13_01EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_OPCG_CAPT2_13_01EVEN]

//>> GET_[AXON_OPCG_CAPT2_13_01EVEN]
static inline fapi2::buffer<uint64_t>& GET_AXON_OPCG_CAPT2_13_01EVEN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_OPCG_CAPT2));
#endif
    return i_data.extractToRight<AXON_OPCG_CAPT2_13_01EVEN,
           AXON_OPCG_CAPT2_13_01EVEN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_OPCG_CAPT2_13_01EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_OPCG_CAPT2_13_01EVEN]

//>> SET_[AXON_OPCG_CAPT2_14_01ODD]
static inline fapi2::buffer<uint64_t>& SET_AXON_OPCG_CAPT2_14_01ODD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<AXON_OPCG_CAPT2_14_01ODD,
           AXON_OPCG_CAPT2_14_01ODD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_OPCG_CAPT2_14_01ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_OPCG_CAPT2_14_01ODD]

//>> SET_[AXON_OPCG_CAPT2_14_01ODD]
static inline fapi2::buffer<uint64_t>& SET_AXON_OPCG_CAPT2_14_01ODD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<AXON_OPCG_CAPT2_14_01ODD,
           AXON_OPCG_CAPT2_14_01ODD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_OPCG_CAPT2_14_01ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_OPCG_CAPT2_14_01ODD]

//>> GET_[AXON_OPCG_CAPT2_14_01ODD]
static inline fapi2::buffer<uint64_t>& GET_AXON_OPCG_CAPT2_14_01ODD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_OPCG_CAPT2));
#endif
    return i_data.extractToRight<AXON_OPCG_CAPT2_14_01ODD,
           AXON_OPCG_CAPT2_14_01ODD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_OPCG_CAPT2_14_01ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_OPCG_CAPT2_14_01ODD]

//>> SET_[AXON_OPCG_CAPT2_15_02EVEN]
static inline fapi2::buffer<uint64_t>& SET_AXON_OPCG_CAPT2_15_02EVEN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<AXON_OPCG_CAPT2_15_02EVEN,
           AXON_OPCG_CAPT2_15_02EVEN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_OPCG_CAPT2_15_02EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_OPCG_CAPT2_15_02EVEN]

//>> SET_[AXON_OPCG_CAPT2_15_02EVEN]
static inline fapi2::buffer<uint64_t>& SET_AXON_OPCG_CAPT2_15_02EVEN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<AXON_OPCG_CAPT2_15_02EVEN,
           AXON_OPCG_CAPT2_15_02EVEN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_OPCG_CAPT2_15_02EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_OPCG_CAPT2_15_02EVEN]

//>> GET_[AXON_OPCG_CAPT2_15_02EVEN]
static inline fapi2::buffer<uint64_t>& GET_AXON_OPCG_CAPT2_15_02EVEN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_OPCG_CAPT2));
#endif
    return i_data.extractToRight<AXON_OPCG_CAPT2_15_02EVEN,
           AXON_OPCG_CAPT2_15_02EVEN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_OPCG_CAPT2_15_02EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_OPCG_CAPT2_15_02EVEN]

//>> SET_[AXON_OPCG_CAPT2_16_02ODD]
static inline fapi2::buffer<uint64_t>& SET_AXON_OPCG_CAPT2_16_02ODD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<AXON_OPCG_CAPT2_16_02ODD,
           AXON_OPCG_CAPT2_16_02ODD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_OPCG_CAPT2_16_02ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_OPCG_CAPT2_16_02ODD]

//>> SET_[AXON_OPCG_CAPT2_16_02ODD]
static inline fapi2::buffer<uint64_t>& SET_AXON_OPCG_CAPT2_16_02ODD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<AXON_OPCG_CAPT2_16_02ODD,
           AXON_OPCG_CAPT2_16_02ODD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_OPCG_CAPT2_16_02ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_OPCG_CAPT2_16_02ODD]

//>> GET_[AXON_OPCG_CAPT2_16_02ODD]
static inline fapi2::buffer<uint64_t>& GET_AXON_OPCG_CAPT2_16_02ODD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_OPCG_CAPT2));
#endif
    return i_data.extractToRight<AXON_OPCG_CAPT2_16_02ODD,
           AXON_OPCG_CAPT2_16_02ODD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_OPCG_CAPT2_16_02ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_OPCG_CAPT2_16_02ODD]

//>> SET_[AXON_OPCG_CAPT2_17_03EVEN]
static inline fapi2::buffer<uint64_t>& SET_AXON_OPCG_CAPT2_17_03EVEN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<AXON_OPCG_CAPT2_17_03EVEN,
           AXON_OPCG_CAPT2_17_03EVEN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_OPCG_CAPT2_17_03EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_OPCG_CAPT2_17_03EVEN]

//>> SET_[AXON_OPCG_CAPT2_17_03EVEN]
static inline fapi2::buffer<uint64_t>& SET_AXON_OPCG_CAPT2_17_03EVEN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<AXON_OPCG_CAPT2_17_03EVEN,
           AXON_OPCG_CAPT2_17_03EVEN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_OPCG_CAPT2_17_03EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_OPCG_CAPT2_17_03EVEN]

//>> GET_[AXON_OPCG_CAPT2_17_03EVEN]
static inline fapi2::buffer<uint64_t>& GET_AXON_OPCG_CAPT2_17_03EVEN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_OPCG_CAPT2));
#endif
    return i_data.extractToRight<AXON_OPCG_CAPT2_17_03EVEN,
           AXON_OPCG_CAPT2_17_03EVEN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_OPCG_CAPT2_17_03EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_OPCG_CAPT2_17_03EVEN]

//>> SET_[AXON_OPCG_CAPT2_18_03ODD]
static inline fapi2::buffer<uint64_t>& SET_AXON_OPCG_CAPT2_18_03ODD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<AXON_OPCG_CAPT2_18_03ODD,
           AXON_OPCG_CAPT2_18_03ODD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_OPCG_CAPT2_18_03ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_OPCG_CAPT2_18_03ODD]

//>> SET_[AXON_OPCG_CAPT2_18_03ODD]
static inline fapi2::buffer<uint64_t>& SET_AXON_OPCG_CAPT2_18_03ODD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<AXON_OPCG_CAPT2_18_03ODD,
           AXON_OPCG_CAPT2_18_03ODD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_OPCG_CAPT2_18_03ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_OPCG_CAPT2_18_03ODD]

//>> GET_[AXON_OPCG_CAPT2_18_03ODD]
static inline fapi2::buffer<uint64_t>& GET_AXON_OPCG_CAPT2_18_03ODD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_OPCG_CAPT2));
#endif
    return i_data.extractToRight<AXON_OPCG_CAPT2_18_03ODD,
           AXON_OPCG_CAPT2_18_03ODD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_OPCG_CAPT2_18_03ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_OPCG_CAPT2_18_03ODD]

//>> SET_[AXON_OPCG_CAPT2_19_04EVEN]
static inline fapi2::buffer<uint64_t>& SET_AXON_OPCG_CAPT2_19_04EVEN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<AXON_OPCG_CAPT2_19_04EVEN,
           AXON_OPCG_CAPT2_19_04EVEN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_OPCG_CAPT2_19_04EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_OPCG_CAPT2_19_04EVEN]

//>> SET_[AXON_OPCG_CAPT2_19_04EVEN]
static inline fapi2::buffer<uint64_t>& SET_AXON_OPCG_CAPT2_19_04EVEN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<AXON_OPCG_CAPT2_19_04EVEN,
           AXON_OPCG_CAPT2_19_04EVEN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_OPCG_CAPT2_19_04EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_OPCG_CAPT2_19_04EVEN]

//>> GET_[AXON_OPCG_CAPT2_19_04EVEN]
static inline fapi2::buffer<uint64_t>& GET_AXON_OPCG_CAPT2_19_04EVEN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_OPCG_CAPT2));
#endif
    return i_data.extractToRight<AXON_OPCG_CAPT2_19_04EVEN,
           AXON_OPCG_CAPT2_19_04EVEN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_OPCG_CAPT2_19_04EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_OPCG_CAPT2_19_04EVEN]

//>> SET_[AXON_OPCG_CAPT2_20_04ODD]
static inline fapi2::buffer<uint64_t>& SET_AXON_OPCG_CAPT2_20_04ODD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<AXON_OPCG_CAPT2_20_04ODD,
           AXON_OPCG_CAPT2_20_04ODD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_OPCG_CAPT2_20_04ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_OPCG_CAPT2_20_04ODD]

//>> SET_[AXON_OPCG_CAPT2_20_04ODD]
static inline fapi2::buffer<uint64_t>& SET_AXON_OPCG_CAPT2_20_04ODD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<AXON_OPCG_CAPT2_20_04ODD,
           AXON_OPCG_CAPT2_20_04ODD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_OPCG_CAPT2_20_04ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_OPCG_CAPT2_20_04ODD]

//>> GET_[AXON_OPCG_CAPT2_20_04ODD]
static inline fapi2::buffer<uint64_t>& GET_AXON_OPCG_CAPT2_20_04ODD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_OPCG_CAPT2));
#endif
    return i_data.extractToRight<AXON_OPCG_CAPT2_20_04ODD,
           AXON_OPCG_CAPT2_20_04ODD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_OPCG_CAPT2_20_04ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_OPCG_CAPT2_20_04ODD]

//>> SET_[AXON_OPCG_CAPT2_21_05EVEN]
static inline fapi2::buffer<uint64_t>& SET_AXON_OPCG_CAPT2_21_05EVEN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<AXON_OPCG_CAPT2_21_05EVEN,
           AXON_OPCG_CAPT2_21_05EVEN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_OPCG_CAPT2_21_05EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_OPCG_CAPT2_21_05EVEN]

//>> SET_[AXON_OPCG_CAPT2_21_05EVEN]
static inline fapi2::buffer<uint64_t>& SET_AXON_OPCG_CAPT2_21_05EVEN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<AXON_OPCG_CAPT2_21_05EVEN,
           AXON_OPCG_CAPT2_21_05EVEN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_OPCG_CAPT2_21_05EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_OPCG_CAPT2_21_05EVEN]

//>> GET_[AXON_OPCG_CAPT2_21_05EVEN]
static inline fapi2::buffer<uint64_t>& GET_AXON_OPCG_CAPT2_21_05EVEN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_OPCG_CAPT2));
#endif
    return i_data.extractToRight<AXON_OPCG_CAPT2_21_05EVEN,
           AXON_OPCG_CAPT2_21_05EVEN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_OPCG_CAPT2_21_05EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_OPCG_CAPT2_21_05EVEN]

//>> SET_[AXON_OPCG_CAPT2_22_05ODD]
static inline fapi2::buffer<uint64_t>& SET_AXON_OPCG_CAPT2_22_05ODD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<AXON_OPCG_CAPT2_22_05ODD,
           AXON_OPCG_CAPT2_22_05ODD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_OPCG_CAPT2_22_05ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_OPCG_CAPT2_22_05ODD]

//>> SET_[AXON_OPCG_CAPT2_22_05ODD]
static inline fapi2::buffer<uint64_t>& SET_AXON_OPCG_CAPT2_22_05ODD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<AXON_OPCG_CAPT2_22_05ODD,
           AXON_OPCG_CAPT2_22_05ODD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_OPCG_CAPT2_22_05ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_OPCG_CAPT2_22_05ODD]

//>> GET_[AXON_OPCG_CAPT2_22_05ODD]
static inline fapi2::buffer<uint64_t>& GET_AXON_OPCG_CAPT2_22_05ODD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_OPCG_CAPT2));
#endif
    return i_data.extractToRight<AXON_OPCG_CAPT2_22_05ODD,
           AXON_OPCG_CAPT2_22_05ODD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_OPCG_CAPT2_22_05ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_OPCG_CAPT2_22_05ODD]

//>> SET_[AXON_OPCG_CAPT2_23_06EVEN]
static inline fapi2::buffer<uint64_t>& SET_AXON_OPCG_CAPT2_23_06EVEN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<AXON_OPCG_CAPT2_23_06EVEN,
           AXON_OPCG_CAPT2_23_06EVEN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_OPCG_CAPT2_23_06EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_OPCG_CAPT2_23_06EVEN]

//>> SET_[AXON_OPCG_CAPT2_23_06EVEN]
static inline fapi2::buffer<uint64_t>& SET_AXON_OPCG_CAPT2_23_06EVEN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<AXON_OPCG_CAPT2_23_06EVEN,
           AXON_OPCG_CAPT2_23_06EVEN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_OPCG_CAPT2_23_06EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_OPCG_CAPT2_23_06EVEN]

//>> GET_[AXON_OPCG_CAPT2_23_06EVEN]
static inline fapi2::buffer<uint64_t>& GET_AXON_OPCG_CAPT2_23_06EVEN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_OPCG_CAPT2));
#endif
    return i_data.extractToRight<AXON_OPCG_CAPT2_23_06EVEN,
           AXON_OPCG_CAPT2_23_06EVEN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_OPCG_CAPT2_23_06EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_OPCG_CAPT2_23_06EVEN]

//>> SET_[AXON_OPCG_CAPT2_24_06ODD]
static inline fapi2::buffer<uint64_t>& SET_AXON_OPCG_CAPT2_24_06ODD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<AXON_OPCG_CAPT2_24_06ODD,
           AXON_OPCG_CAPT2_24_06ODD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_OPCG_CAPT2_24_06ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_OPCG_CAPT2_24_06ODD]

//>> SET_[AXON_OPCG_CAPT2_24_06ODD]
static inline fapi2::buffer<uint64_t>& SET_AXON_OPCG_CAPT2_24_06ODD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<AXON_OPCG_CAPT2_24_06ODD,
           AXON_OPCG_CAPT2_24_06ODD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_OPCG_CAPT2_24_06ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_OPCG_CAPT2_24_06ODD]

//>> GET_[AXON_OPCG_CAPT2_24_06ODD]
static inline fapi2::buffer<uint64_t>& GET_AXON_OPCG_CAPT2_24_06ODD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_OPCG_CAPT2));
#endif
    return i_data.extractToRight<AXON_OPCG_CAPT2_24_06ODD,
           AXON_OPCG_CAPT2_24_06ODD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_OPCG_CAPT2_24_06ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_OPCG_CAPT2_24_06ODD]

//>> PREP_[AXON_PCB_OPCG_GO]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AXON_PCB_OPCG_GO(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AXON_PCB_OPCG_GO;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AXON_PCB_OPCG_GO]

//>> GET_[AXON_PCB_OPCG_GO]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AXON_PCB_OPCG_GO(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AXON_PCB_OPCG_GO;
#endif
    return fapi2::getScom(i_target, AXON_PCB_OPCG_GO, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AXON_PCB_OPCG_GO]

//>> PUT_[AXON_PCB_OPCG_GO]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AXON_PCB_OPCG_GO(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AXON_PCB_OPCG_GO));
#endif
    return fapi2::putScom(i_target, AXON_PCB_OPCG_GO, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AXON_PCB_OPCG_GO]


//>> SET_[AXON_PCB_OPCG_GO_PCB_OPCGGO]
static inline fapi2::buffer<uint64_t>& SET_AXON_PCB_OPCG_GO_PCB_OPCGGO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_PCB_OPCG_GO));
#endif
    return o_data.insertFromRight<AXON_PCB_OPCG_GO_PCB_OPCGGO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_PCB_OPCG_GO_PCB_OPCGGO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_PCB_OPCG_GO_PCB_OPCGGO]

//>> SET_[AXON_PCB_OPCG_GO_PCB_OPCGGO]
static inline fapi2::buffer<uint64_t>& SET_AXON_PCB_OPCG_GO_PCB_OPCGGO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_PCB_OPCG_GO));
#endif
    return o_data.insertFromRight<AXON_PCB_OPCG_GO_PCB_OPCGGO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_PCB_OPCG_GO_PCB_OPCGGO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_PCB_OPCG_GO_PCB_OPCGGO]

//>> SET_[AXON_PCB_OPCG_GO_PCB_OPCGGO]
static inline fapi2::buffer<uint64_t>& SET_AXON_PCB_OPCG_GO_PCB_OPCGGO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_PCB_OPCG_GO));
#endif
    return o_data.setBit<AXON_PCB_OPCG_GO_PCB_OPCGGO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_PCB_OPCG_GO_PCB_OPCGGO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_PCB_OPCG_GO_PCB_OPCGGO]

//>> CLEAR_[AXON_PCB_OPCG_GO_PCB_OPCGGO]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_PCB_OPCG_GO_PCB_OPCGGO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_PCB_OPCG_GO));
#endif
    return o_data.clearBit<AXON_PCB_OPCG_GO_PCB_OPCGGO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_PCB_OPCG_GO_PCB_OPCGGO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_PCB_OPCG_GO_PCB_OPCGGO]

//>> GET_[AXON_PCB_OPCG_GO_PCB_OPCGGO]
static inline fapi2::buffer<uint64_t>& GET_AXON_PCB_OPCG_GO_PCB_OPCGGO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_PCB_OPCG_GO));
#endif
    return i_data.extractToRight<AXON_PCB_OPCG_GO_PCB_OPCGGO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_PCB_OPCG_GO_PCB_OPCGGO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_PCB_OPCG_GO_PCB_OPCGGO]

//>> GET_[AXON_PCB_OPCG_GO_PCB_OPCGGO]
static inline bool GET_AXON_PCB_OPCG_GO_PCB_OPCGGO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_PCB_OPCG_GO));
#endif
    return i_data.getBit<AXON_PCB_OPCG_GO_PCB_OPCGGO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_PCB_OPCG_GO_PCB_OPCGGO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_PCB_OPCG_GO_PCB_OPCGGO]

//>> PREP_[AXON_TRA0_TR0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AXON_TRA0_TR0_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AXON_TRA0_TR0_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AXON_TRA0_TR0_CONFIG]

//>> GET_[AXON_TRA0_TR0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AXON_TRA0_TR0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AXON_TRA0_TR0_CONFIG;
#endif
    return fapi2::getScom(i_target, AXON_TRA0_TR0_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AXON_TRA0_TR0_CONFIG]

//>> PUT_[AXON_TRA0_TR0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AXON_TRA0_TR0_CONFIG(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return fapi2::putScom(i_target, AXON_TRA0_TR0_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AXON_TRA0_TR0_CONFIG]


//>> SET_[AXON_TRA0_TR0_CONFIG_STORE_ON_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& SET_AXON_TRA0_TR0_CONFIG_STORE_ON_TRIG_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.insertFromRight<AXON_TRA0_TR0_CONFIG_STORE_ON_TRIG_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_STORE_ON_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_TRA0_TR0_CONFIG_STORE_ON_TRIG_MODE]

//>> SET_[AXON_TRA0_TR0_CONFIG_STORE_ON_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& SET_AXON_TRA0_TR0_CONFIG_STORE_ON_TRIG_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.insertFromRight<AXON_TRA0_TR0_CONFIG_STORE_ON_TRIG_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_STORE_ON_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_TRA0_TR0_CONFIG_STORE_ON_TRIG_MODE]

//>> SET_[AXON_TRA0_TR0_CONFIG_STORE_ON_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& SET_AXON_TRA0_TR0_CONFIG_STORE_ON_TRIG_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.setBit<AXON_TRA0_TR0_CONFIG_STORE_ON_TRIG_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_STORE_ON_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_TRA0_TR0_CONFIG_STORE_ON_TRIG_MODE]

//>> CLEAR_[AXON_TRA0_TR0_CONFIG_STORE_ON_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_TRA0_TR0_CONFIG_STORE_ON_TRIG_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.clearBit<AXON_TRA0_TR0_CONFIG_STORE_ON_TRIG_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_STORE_ON_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_TRA0_TR0_CONFIG_STORE_ON_TRIG_MODE]

//>> GET_[AXON_TRA0_TR0_CONFIG_STORE_ON_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& GET_AXON_TRA0_TR0_CONFIG_STORE_ON_TRIG_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return i_data.extractToRight<AXON_TRA0_TR0_CONFIG_STORE_ON_TRIG_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_STORE_ON_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_TRA0_TR0_CONFIG_STORE_ON_TRIG_MODE]

//>> GET_[AXON_TRA0_TR0_CONFIG_STORE_ON_TRIG_MODE]
static inline bool GET_AXON_TRA0_TR0_CONFIG_STORE_ON_TRIG_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return i_data.getBit<AXON_TRA0_TR0_CONFIG_STORE_ON_TRIG_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_STORE_ON_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_TRA0_TR0_CONFIG_STORE_ON_TRIG_MODE]

//>> SET_[AXON_TRA0_TR0_CONFIG_WRITE_ON_RUN_MODE]
static inline fapi2::buffer<uint64_t>& SET_AXON_TRA0_TR0_CONFIG_WRITE_ON_RUN_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.insertFromRight<AXON_TRA0_TR0_CONFIG_WRITE_ON_RUN_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_WRITE_ON_RUN_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_TRA0_TR0_CONFIG_WRITE_ON_RUN_MODE]

//>> SET_[AXON_TRA0_TR0_CONFIG_WRITE_ON_RUN_MODE]
static inline fapi2::buffer<uint64_t>& SET_AXON_TRA0_TR0_CONFIG_WRITE_ON_RUN_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.insertFromRight<AXON_TRA0_TR0_CONFIG_WRITE_ON_RUN_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_WRITE_ON_RUN_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_TRA0_TR0_CONFIG_WRITE_ON_RUN_MODE]

//>> SET_[AXON_TRA0_TR0_CONFIG_WRITE_ON_RUN_MODE]
static inline fapi2::buffer<uint64_t>& SET_AXON_TRA0_TR0_CONFIG_WRITE_ON_RUN_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.setBit<AXON_TRA0_TR0_CONFIG_WRITE_ON_RUN_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_WRITE_ON_RUN_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_TRA0_TR0_CONFIG_WRITE_ON_RUN_MODE]

//>> CLEAR_[AXON_TRA0_TR0_CONFIG_WRITE_ON_RUN_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_TRA0_TR0_CONFIG_WRITE_ON_RUN_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.clearBit<AXON_TRA0_TR0_CONFIG_WRITE_ON_RUN_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_WRITE_ON_RUN_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_TRA0_TR0_CONFIG_WRITE_ON_RUN_MODE]

//>> GET_[AXON_TRA0_TR0_CONFIG_WRITE_ON_RUN_MODE]
static inline fapi2::buffer<uint64_t>& GET_AXON_TRA0_TR0_CONFIG_WRITE_ON_RUN_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return i_data.extractToRight<AXON_TRA0_TR0_CONFIG_WRITE_ON_RUN_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_WRITE_ON_RUN_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_TRA0_TR0_CONFIG_WRITE_ON_RUN_MODE]

//>> GET_[AXON_TRA0_TR0_CONFIG_WRITE_ON_RUN_MODE]
static inline bool GET_AXON_TRA0_TR0_CONFIG_WRITE_ON_RUN_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return i_data.getBit<AXON_TRA0_TR0_CONFIG_WRITE_ON_RUN_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_WRITE_ON_RUN_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_TRA0_TR0_CONFIG_WRITE_ON_RUN_MODE]

//>> SET_[AXON_TRA0_TR0_CONFIG_EXTEND_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& SET_AXON_TRA0_TR0_CONFIG_EXTEND_TRIG_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.insertFromRight<AXON_TRA0_TR0_CONFIG_EXTEND_TRIG_MODE,
           AXON_TRA0_TR0_CONFIG_EXTEND_TRIG_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_EXTEND_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_TRA0_TR0_CONFIG_EXTEND_TRIG_MODE]

//>> SET_[AXON_TRA0_TR0_CONFIG_EXTEND_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& SET_AXON_TRA0_TR0_CONFIG_EXTEND_TRIG_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.insertFromRight<AXON_TRA0_TR0_CONFIG_EXTEND_TRIG_MODE,
           AXON_TRA0_TR0_CONFIG_EXTEND_TRIG_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_EXTEND_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_TRA0_TR0_CONFIG_EXTEND_TRIG_MODE]

//>> GET_[AXON_TRA0_TR0_CONFIG_EXTEND_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& GET_AXON_TRA0_TR0_CONFIG_EXTEND_TRIG_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return i_data.extractToRight<AXON_TRA0_TR0_CONFIG_EXTEND_TRIG_MODE,
           AXON_TRA0_TR0_CONFIG_EXTEND_TRIG_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_EXTEND_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_TRA0_TR0_CONFIG_EXTEND_TRIG_MODE]

//>> SET_[AXON_TRA0_TR0_CONFIG_BANK_MODE]
static inline fapi2::buffer<uint64_t>& SET_AXON_TRA0_TR0_CONFIG_BANK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.insertFromRight<AXON_TRA0_TR0_CONFIG_BANK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_BANK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_TRA0_TR0_CONFIG_BANK_MODE]

//>> SET_[AXON_TRA0_TR0_CONFIG_BANK_MODE]
static inline fapi2::buffer<uint64_t>& SET_AXON_TRA0_TR0_CONFIG_BANK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.insertFromRight<AXON_TRA0_TR0_CONFIG_BANK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_BANK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_TRA0_TR0_CONFIG_BANK_MODE]

//>> SET_[AXON_TRA0_TR0_CONFIG_BANK_MODE]
static inline fapi2::buffer<uint64_t>& SET_AXON_TRA0_TR0_CONFIG_BANK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.setBit<AXON_TRA0_TR0_CONFIG_BANK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_BANK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_TRA0_TR0_CONFIG_BANK_MODE]

//>> CLEAR_[AXON_TRA0_TR0_CONFIG_BANK_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_TRA0_TR0_CONFIG_BANK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.clearBit<AXON_TRA0_TR0_CONFIG_BANK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_BANK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_TRA0_TR0_CONFIG_BANK_MODE]

//>> GET_[AXON_TRA0_TR0_CONFIG_BANK_MODE]
static inline fapi2::buffer<uint64_t>& GET_AXON_TRA0_TR0_CONFIG_BANK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return i_data.extractToRight<AXON_TRA0_TR0_CONFIG_BANK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_BANK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_TRA0_TR0_CONFIG_BANK_MODE]

//>> GET_[AXON_TRA0_TR0_CONFIG_BANK_MODE]
static inline bool GET_AXON_TRA0_TR0_CONFIG_BANK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return i_data.getBit<AXON_TRA0_TR0_CONFIG_BANK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_BANK_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_TRA0_TR0_CONFIG_BANK_MODE]

//>> SET_[AXON_TRA0_TR0_CONFIG_ENH_TRACE_MODE]
static inline fapi2::buffer<uint64_t>& SET_AXON_TRA0_TR0_CONFIG_ENH_TRACE_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.insertFromRight<AXON_TRA0_TR0_CONFIG_ENH_TRACE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_ENH_TRACE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_TRA0_TR0_CONFIG_ENH_TRACE_MODE]

//>> SET_[AXON_TRA0_TR0_CONFIG_ENH_TRACE_MODE]
static inline fapi2::buffer<uint64_t>& SET_AXON_TRA0_TR0_CONFIG_ENH_TRACE_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.insertFromRight<AXON_TRA0_TR0_CONFIG_ENH_TRACE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_ENH_TRACE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_TRA0_TR0_CONFIG_ENH_TRACE_MODE]

//>> SET_[AXON_TRA0_TR0_CONFIG_ENH_TRACE_MODE]
static inline fapi2::buffer<uint64_t>& SET_AXON_TRA0_TR0_CONFIG_ENH_TRACE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.setBit<AXON_TRA0_TR0_CONFIG_ENH_TRACE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_ENH_TRACE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_TRA0_TR0_CONFIG_ENH_TRACE_MODE]

//>> CLEAR_[AXON_TRA0_TR0_CONFIG_ENH_TRACE_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_TRA0_TR0_CONFIG_ENH_TRACE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.clearBit<AXON_TRA0_TR0_CONFIG_ENH_TRACE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_ENH_TRACE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_TRA0_TR0_CONFIG_ENH_TRACE_MODE]

//>> GET_[AXON_TRA0_TR0_CONFIG_ENH_TRACE_MODE]
static inline fapi2::buffer<uint64_t>& GET_AXON_TRA0_TR0_CONFIG_ENH_TRACE_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return i_data.extractToRight<AXON_TRA0_TR0_CONFIG_ENH_TRACE_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_ENH_TRACE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_TRA0_TR0_CONFIG_ENH_TRACE_MODE]

//>> GET_[AXON_TRA0_TR0_CONFIG_ENH_TRACE_MODE]
static inline bool GET_AXON_TRA0_TR0_CONFIG_ENH_TRACE_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return i_data.getBit<AXON_TRA0_TR0_CONFIG_ENH_TRACE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_ENH_TRACE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_TRA0_TR0_CONFIG_ENH_TRACE_MODE]

//>> SET_[AXON_TRA0_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_AXON_TRA0_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.insertFromRight<AXON_TRA0_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL,
           AXON_TRA0_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_TRA0_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL]

//>> SET_[AXON_TRA0_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_AXON_TRA0_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.insertFromRight<AXON_TRA0_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL,
           AXON_TRA0_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_TRA0_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL]

//>> GET_[AXON_TRA0_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL]
static inline fapi2::buffer<uint64_t>& GET_AXON_TRA0_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return i_data.extractToRight<AXON_TRA0_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL,
           AXON_TRA0_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_TRA0_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL]

//>> SET_[AXON_TRA0_TR0_CONFIG_TRACE_SELECT_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_AXON_TRA0_TR0_CONFIG_TRACE_SELECT_CONTROL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.insertFromRight<AXON_TRA0_TR0_CONFIG_TRACE_SELECT_CONTROL,
           AXON_TRA0_TR0_CONFIG_TRACE_SELECT_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_TRACE_SELECT_CONTROL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_TRA0_TR0_CONFIG_TRACE_SELECT_CONTROL]

//>> SET_[AXON_TRA0_TR0_CONFIG_TRACE_SELECT_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_AXON_TRA0_TR0_CONFIG_TRACE_SELECT_CONTROL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.insertFromRight<AXON_TRA0_TR0_CONFIG_TRACE_SELECT_CONTROL,
           AXON_TRA0_TR0_CONFIG_TRACE_SELECT_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_TRACE_SELECT_CONTROL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_TRA0_TR0_CONFIG_TRACE_SELECT_CONTROL]

//>> GET_[AXON_TRA0_TR0_CONFIG_TRACE_SELECT_CONTROL]
static inline fapi2::buffer<uint64_t>& GET_AXON_TRA0_TR0_CONFIG_TRACE_SELECT_CONTROL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return i_data.extractToRight<AXON_TRA0_TR0_CONFIG_TRACE_SELECT_CONTROL,
           AXON_TRA0_TR0_CONFIG_TRACE_SELECT_CONTROL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_TRACE_SELECT_CONTROL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_TRA0_TR0_CONFIG_TRACE_SELECT_CONTROL]

//>> SET_[AXON_TRA0_TR0_CONFIG_TRACE_RUN_HOLD_OFF]
static inline fapi2::buffer<uint64_t>& SET_AXON_TRA0_TR0_CONFIG_TRACE_RUN_HOLD_OFF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.insertFromRight<AXON_TRA0_TR0_CONFIG_TRACE_RUN_HOLD_OFF,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_TRACE_RUN_HOLD_OFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_TRA0_TR0_CONFIG_TRACE_RUN_HOLD_OFF]

//>> SET_[AXON_TRA0_TR0_CONFIG_TRACE_RUN_HOLD_OFF]
static inline fapi2::buffer<uint64_t>& SET_AXON_TRA0_TR0_CONFIG_TRACE_RUN_HOLD_OFF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.insertFromRight<AXON_TRA0_TR0_CONFIG_TRACE_RUN_HOLD_OFF,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_TRACE_RUN_HOLD_OFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_TRA0_TR0_CONFIG_TRACE_RUN_HOLD_OFF]

//>> SET_[AXON_TRA0_TR0_CONFIG_TRACE_RUN_HOLD_OFF]
static inline fapi2::buffer<uint64_t>& SET_AXON_TRA0_TR0_CONFIG_TRACE_RUN_HOLD_OFF(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.setBit<AXON_TRA0_TR0_CONFIG_TRACE_RUN_HOLD_OFF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_TRACE_RUN_HOLD_OFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_TRA0_TR0_CONFIG_TRACE_RUN_HOLD_OFF]

//>> CLEAR_[AXON_TRA0_TR0_CONFIG_TRACE_RUN_HOLD_OFF]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_TRA0_TR0_CONFIG_TRACE_RUN_HOLD_OFF(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.clearBit<AXON_TRA0_TR0_CONFIG_TRACE_RUN_HOLD_OFF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_TRACE_RUN_HOLD_OFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_TRA0_TR0_CONFIG_TRACE_RUN_HOLD_OFF]

//>> GET_[AXON_TRA0_TR0_CONFIG_TRACE_RUN_HOLD_OFF]
static inline fapi2::buffer<uint64_t>& GET_AXON_TRA0_TR0_CONFIG_TRACE_RUN_HOLD_OFF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return i_data.extractToRight<AXON_TRA0_TR0_CONFIG_TRACE_RUN_HOLD_OFF,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_TRACE_RUN_HOLD_OFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_TRA0_TR0_CONFIG_TRACE_RUN_HOLD_OFF]

//>> GET_[AXON_TRA0_TR0_CONFIG_TRACE_RUN_HOLD_OFF]
static inline bool GET_AXON_TRA0_TR0_CONFIG_TRACE_RUN_HOLD_OFF(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return i_data.getBit<AXON_TRA0_TR0_CONFIG_TRACE_RUN_HOLD_OFF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_TRACE_RUN_HOLD_OFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_TRA0_TR0_CONFIG_TRACE_RUN_HOLD_OFF]

//>> SET_[AXON_TRA0_TR0_CONFIG_TRACE_RUN_STATUS]
static inline fapi2::buffer<uint64_t>& SET_AXON_TRA0_TR0_CONFIG_TRACE_RUN_STATUS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.insertFromRight<AXON_TRA0_TR0_CONFIG_TRACE_RUN_STATUS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_TRACE_RUN_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_TRA0_TR0_CONFIG_TRACE_RUN_STATUS]

//>> SET_[AXON_TRA0_TR0_CONFIG_TRACE_RUN_STATUS]
static inline fapi2::buffer<uint64_t>& SET_AXON_TRA0_TR0_CONFIG_TRACE_RUN_STATUS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.insertFromRight<AXON_TRA0_TR0_CONFIG_TRACE_RUN_STATUS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_TRACE_RUN_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_TRA0_TR0_CONFIG_TRACE_RUN_STATUS]

//>> SET_[AXON_TRA0_TR0_CONFIG_TRACE_RUN_STATUS]
static inline fapi2::buffer<uint64_t>& SET_AXON_TRA0_TR0_CONFIG_TRACE_RUN_STATUS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.setBit<AXON_TRA0_TR0_CONFIG_TRACE_RUN_STATUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_TRACE_RUN_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_TRA0_TR0_CONFIG_TRACE_RUN_STATUS]

//>> CLEAR_[AXON_TRA0_TR0_CONFIG_TRACE_RUN_STATUS]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_TRA0_TR0_CONFIG_TRACE_RUN_STATUS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.clearBit<AXON_TRA0_TR0_CONFIG_TRACE_RUN_STATUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_TRACE_RUN_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_TRA0_TR0_CONFIG_TRACE_RUN_STATUS]

//>> GET_[AXON_TRA0_TR0_CONFIG_TRACE_RUN_STATUS]
static inline fapi2::buffer<uint64_t>& GET_AXON_TRA0_TR0_CONFIG_TRACE_RUN_STATUS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return i_data.extractToRight<AXON_TRA0_TR0_CONFIG_TRACE_RUN_STATUS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_TRACE_RUN_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_TRA0_TR0_CONFIG_TRACE_RUN_STATUS]

//>> GET_[AXON_TRA0_TR0_CONFIG_TRACE_RUN_STATUS]
static inline bool GET_AXON_TRA0_TR0_CONFIG_TRACE_RUN_STATUS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return i_data.getBit<AXON_TRA0_TR0_CONFIG_TRACE_RUN_STATUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_TRACE_RUN_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_TRA0_TR0_CONFIG_TRACE_RUN_STATUS]

//>> SET_[AXON_TRA0_TR0_CONFIG_TRACE_RUN_STICKY]
static inline fapi2::buffer<uint64_t>& SET_AXON_TRA0_TR0_CONFIG_TRACE_RUN_STICKY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.insertFromRight<AXON_TRA0_TR0_CONFIG_TRACE_RUN_STICKY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_TRACE_RUN_STICKY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_TRA0_TR0_CONFIG_TRACE_RUN_STICKY]

//>> SET_[AXON_TRA0_TR0_CONFIG_TRACE_RUN_STICKY]
static inline fapi2::buffer<uint64_t>& SET_AXON_TRA0_TR0_CONFIG_TRACE_RUN_STICKY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.insertFromRight<AXON_TRA0_TR0_CONFIG_TRACE_RUN_STICKY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_TRACE_RUN_STICKY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_TRA0_TR0_CONFIG_TRACE_RUN_STICKY]

//>> SET_[AXON_TRA0_TR0_CONFIG_TRACE_RUN_STICKY]
static inline fapi2::buffer<uint64_t>& SET_AXON_TRA0_TR0_CONFIG_TRACE_RUN_STICKY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.setBit<AXON_TRA0_TR0_CONFIG_TRACE_RUN_STICKY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_TRACE_RUN_STICKY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_TRA0_TR0_CONFIG_TRACE_RUN_STICKY]

//>> CLEAR_[AXON_TRA0_TR0_CONFIG_TRACE_RUN_STICKY]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_TRA0_TR0_CONFIG_TRACE_RUN_STICKY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.clearBit<AXON_TRA0_TR0_CONFIG_TRACE_RUN_STICKY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_TRACE_RUN_STICKY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_TRA0_TR0_CONFIG_TRACE_RUN_STICKY]

//>> GET_[AXON_TRA0_TR0_CONFIG_TRACE_RUN_STICKY]
static inline fapi2::buffer<uint64_t>& GET_AXON_TRA0_TR0_CONFIG_TRACE_RUN_STICKY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return i_data.extractToRight<AXON_TRA0_TR0_CONFIG_TRACE_RUN_STICKY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_TRACE_RUN_STICKY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_TRA0_TR0_CONFIG_TRACE_RUN_STICKY]

//>> GET_[AXON_TRA0_TR0_CONFIG_TRACE_RUN_STICKY]
static inline bool GET_AXON_TRA0_TR0_CONFIG_TRACE_RUN_STICKY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return i_data.getBit<AXON_TRA0_TR0_CONFIG_TRACE_RUN_STICKY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_TRACE_RUN_STICKY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_TRA0_TR0_CONFIG_TRACE_RUN_STICKY]

//>> SET_[AXON_TRA0_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]
static inline fapi2::buffer<uint64_t>& SET_AXON_TRA0_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.insertFromRight<AXON_TRA0_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_TRA0_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]

//>> SET_[AXON_TRA0_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]
static inline fapi2::buffer<uint64_t>& SET_AXON_TRA0_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.insertFromRight<AXON_TRA0_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_TRA0_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]

//>> SET_[AXON_TRA0_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]
static inline fapi2::buffer<uint64_t>& SET_AXON_TRA0_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.setBit<AXON_TRA0_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_TRA0_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]

//>> CLEAR_[AXON_TRA0_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_TRA0_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.clearBit<AXON_TRA0_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_TRA0_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]

//>> GET_[AXON_TRA0_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]
static inline fapi2::buffer<uint64_t>& GET_AXON_TRA0_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return i_data.extractToRight<AXON_TRA0_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_TRA0_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]

//>> GET_[AXON_TRA0_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]
static inline bool GET_AXON_TRA0_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return i_data.getBit<AXON_TRA0_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_TRA0_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]

//>> SET_[AXON_TRA0_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]
static inline fapi2::buffer<uint64_t>& SET_AXON_TRA0_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.insertFromRight<AXON_TRA0_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_TRA0_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]

//>> SET_[AXON_TRA0_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]
static inline fapi2::buffer<uint64_t>& SET_AXON_TRA0_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.insertFromRight<AXON_TRA0_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_TRA0_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]

//>> SET_[AXON_TRA0_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]
static inline fapi2::buffer<uint64_t>& SET_AXON_TRA0_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.setBit<AXON_TRA0_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_TRA0_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]

//>> CLEAR_[AXON_TRA0_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_TRA0_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.clearBit<AXON_TRA0_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_TRA0_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]

//>> GET_[AXON_TRA0_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]
static inline fapi2::buffer<uint64_t>& GET_AXON_TRA0_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return i_data.extractToRight<AXON_TRA0_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_TRA0_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]

//>> GET_[AXON_TRA0_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]
static inline bool GET_AXON_TRA0_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return i_data.getBit<AXON_TRA0_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_TRA0_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]

//>> SET_[AXON_TRA0_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]
static inline fapi2::buffer<uint64_t>& SET_AXON_TRA0_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.insertFromRight<AXON_TRA0_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_TRA0_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]

//>> SET_[AXON_TRA0_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]
static inline fapi2::buffer<uint64_t>& SET_AXON_TRA0_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.insertFromRight<AXON_TRA0_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_TRA0_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]

//>> SET_[AXON_TRA0_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]
static inline fapi2::buffer<uint64_t>& SET_AXON_TRA0_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.setBit<AXON_TRA0_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_TRA0_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]

//>> CLEAR_[AXON_TRA0_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_TRA0_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return o_data.clearBit<AXON_TRA0_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_TRA0_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]

//>> GET_[AXON_TRA0_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]
static inline fapi2::buffer<uint64_t>& GET_AXON_TRA0_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return i_data.extractToRight<AXON_TRA0_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_TRA0_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]

//>> GET_[AXON_TRA0_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]
static inline bool GET_AXON_TRA0_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_TRA0_TR0_CONFIG));
#endif
    return i_data.getBit<AXON_TRA0_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_TRA0_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_TRA0_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]

//>> PREP_[AXON_XSTOP5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_AXON_XSTOP5(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AXON_XSTOP5;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[AXON_XSTOP5]

//>> GET_[AXON_XSTOP5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_AXON_XSTOP5(const fapi2::Target<K, M, V>& i_target, fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = AXON_XSTOP5;
#endif
    return fapi2::getScom(i_target, AXON_XSTOP5, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[AXON_XSTOP5]

//>> PUT_[AXON_XSTOP5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_AXON_XSTOP5(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return fapi2::putScom(i_target, AXON_XSTOP5, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[AXON_XSTOP5]


//>> SET_[AXON_XSTOP5_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.insertFromRight<AXON_XSTOP5_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_XSTOP5_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_ENABLE]

//>> SET_[AXON_XSTOP5_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.insertFromRight<AXON_XSTOP5_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_XSTOP5_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_ENABLE]

//>> SET_[AXON_XSTOP5_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.setBit<AXON_XSTOP5_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_XSTOP5_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_ENABLE]

//>> CLEAR_[AXON_XSTOP5_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_XSTOP5_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.clearBit<AXON_XSTOP5_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_XSTOP5_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_XSTOP5_ENABLE]

//>> GET_[AXON_XSTOP5_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_AXON_XSTOP5_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return i_data.extractToRight<AXON_XSTOP5_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_XSTOP5_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_XSTOP5_ENABLE]

//>> GET_[AXON_XSTOP5_ENABLE]
static inline bool GET_AXON_XSTOP5_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return i_data.getBit<AXON_XSTOP5_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_XSTOP5_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_XSTOP5_ENABLE]

//>> SET_[AXON_XSTOP5_WAIT_SNOPA]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_WAIT_SNOPA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.insertFromRight<AXON_XSTOP5_WAIT_SNOPA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_XSTOP5_WAIT_SNOPA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_WAIT_SNOPA]

//>> SET_[AXON_XSTOP5_WAIT_SNOPA]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_WAIT_SNOPA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.insertFromRight<AXON_XSTOP5_WAIT_SNOPA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_XSTOP5_WAIT_SNOPA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_WAIT_SNOPA]

//>> SET_[AXON_XSTOP5_WAIT_SNOPA]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_WAIT_SNOPA(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.setBit<AXON_XSTOP5_WAIT_SNOPA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_XSTOP5_WAIT_SNOPA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_WAIT_SNOPA]

//>> CLEAR_[AXON_XSTOP5_WAIT_SNOPA]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_XSTOP5_WAIT_SNOPA(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.clearBit<AXON_XSTOP5_WAIT_SNOPA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_XSTOP5_WAIT_SNOPA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_XSTOP5_WAIT_SNOPA]

//>> GET_[AXON_XSTOP5_WAIT_SNOPA]
static inline fapi2::buffer<uint64_t>& GET_AXON_XSTOP5_WAIT_SNOPA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return i_data.extractToRight<AXON_XSTOP5_WAIT_SNOPA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_XSTOP5_WAIT_SNOPA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_XSTOP5_WAIT_SNOPA]

//>> GET_[AXON_XSTOP5_WAIT_SNOPA]
static inline bool GET_AXON_XSTOP5_WAIT_SNOPA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return i_data.getBit<AXON_XSTOP5_WAIT_SNOPA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_XSTOP5_WAIT_SNOPA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_XSTOP5_WAIT_SNOPA]

//>> SET_[AXON_XSTOP5_TRIGGER_OPCG_GO]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_TRIGGER_OPCG_GO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.insertFromRight<AXON_XSTOP5_TRIGGER_OPCG_GO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_XSTOP5_TRIGGER_OPCG_GO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_TRIGGER_OPCG_GO]

//>> SET_[AXON_XSTOP5_TRIGGER_OPCG_GO]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_TRIGGER_OPCG_GO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.insertFromRight<AXON_XSTOP5_TRIGGER_OPCG_GO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_XSTOP5_TRIGGER_OPCG_GO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_TRIGGER_OPCG_GO]

//>> SET_[AXON_XSTOP5_TRIGGER_OPCG_GO]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_TRIGGER_OPCG_GO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.setBit<AXON_XSTOP5_TRIGGER_OPCG_GO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_XSTOP5_TRIGGER_OPCG_GO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_TRIGGER_OPCG_GO]

//>> CLEAR_[AXON_XSTOP5_TRIGGER_OPCG_GO]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_XSTOP5_TRIGGER_OPCG_GO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.clearBit<AXON_XSTOP5_TRIGGER_OPCG_GO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_XSTOP5_TRIGGER_OPCG_GO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_XSTOP5_TRIGGER_OPCG_GO]

//>> GET_[AXON_XSTOP5_TRIGGER_OPCG_GO]
static inline fapi2::buffer<uint64_t>& GET_AXON_XSTOP5_TRIGGER_OPCG_GO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return i_data.extractToRight<AXON_XSTOP5_TRIGGER_OPCG_GO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_XSTOP5_TRIGGER_OPCG_GO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_XSTOP5_TRIGGER_OPCG_GO]

//>> GET_[AXON_XSTOP5_TRIGGER_OPCG_GO]
static inline bool GET_AXON_XSTOP5_TRIGGER_OPCG_GO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return i_data.getBit<AXON_XSTOP5_TRIGGER_OPCG_GO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_XSTOP5_TRIGGER_OPCG_GO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_XSTOP5_TRIGGER_OPCG_GO]

//>> SET_[AXON_XSTOP5_WAIT_ALWAYS]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_WAIT_ALWAYS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.insertFromRight<AXON_XSTOP5_WAIT_ALWAYS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_XSTOP5_WAIT_ALWAYS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_WAIT_ALWAYS]

//>> SET_[AXON_XSTOP5_WAIT_ALWAYS]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_WAIT_ALWAYS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.insertFromRight<AXON_XSTOP5_WAIT_ALWAYS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_XSTOP5_WAIT_ALWAYS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_WAIT_ALWAYS]

//>> SET_[AXON_XSTOP5_WAIT_ALWAYS]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_WAIT_ALWAYS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.setBit<AXON_XSTOP5_WAIT_ALWAYS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_XSTOP5_WAIT_ALWAYS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_WAIT_ALWAYS]

//>> CLEAR_[AXON_XSTOP5_WAIT_ALWAYS]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_XSTOP5_WAIT_ALWAYS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.clearBit<AXON_XSTOP5_WAIT_ALWAYS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_XSTOP5_WAIT_ALWAYS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_XSTOP5_WAIT_ALWAYS]

//>> GET_[AXON_XSTOP5_WAIT_ALWAYS]
static inline fapi2::buffer<uint64_t>& GET_AXON_XSTOP5_WAIT_ALWAYS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return i_data.extractToRight<AXON_XSTOP5_WAIT_ALWAYS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_XSTOP5_WAIT_ALWAYS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_XSTOP5_WAIT_ALWAYS]

//>> GET_[AXON_XSTOP5_WAIT_ALWAYS]
static inline bool GET_AXON_XSTOP5_WAIT_ALWAYS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return i_data.getBit<AXON_XSTOP5_WAIT_ALWAYS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_XSTOP5_WAIT_ALWAYS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_XSTOP5_WAIT_ALWAYS]

//>> SET_[AXON_XSTOP5_REGION_PERV]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_PERV(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.insertFromRight<AXON_XSTOP5_REGION_PERV,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_XSTOP5_REGION_PERV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_PERV]

//>> SET_[AXON_XSTOP5_REGION_PERV]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_PERV(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.insertFromRight<AXON_XSTOP5_REGION_PERV,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_XSTOP5_REGION_PERV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_PERV]

//>> SET_[AXON_XSTOP5_REGION_PERV]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_PERV(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.setBit<AXON_XSTOP5_REGION_PERV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_XSTOP5_REGION_PERV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_PERV]

//>> CLEAR_[AXON_XSTOP5_REGION_PERV]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_XSTOP5_REGION_PERV(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.clearBit<AXON_XSTOP5_REGION_PERV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_XSTOP5_REGION_PERV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_XSTOP5_REGION_PERV]

//>> GET_[AXON_XSTOP5_REGION_PERV]
static inline fapi2::buffer<uint64_t>& GET_AXON_XSTOP5_REGION_PERV(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return i_data.extractToRight<AXON_XSTOP5_REGION_PERV,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_XSTOP5_REGION_PERV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_XSTOP5_REGION_PERV]

//>> GET_[AXON_XSTOP5_REGION_PERV]
static inline bool GET_AXON_XSTOP5_REGION_PERV(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return i_data.getBit<AXON_XSTOP5_REGION_PERV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_XSTOP5_REGION_PERV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_XSTOP5_REGION_PERV]

//>> SET_[AXON_XSTOP5_REGION_UNIT1]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_UNIT1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.insertFromRight<AXON_XSTOP5_REGION_UNIT1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_UNIT1]

//>> SET_[AXON_XSTOP5_REGION_UNIT1]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_UNIT1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.insertFromRight<AXON_XSTOP5_REGION_UNIT1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_UNIT1]

//>> SET_[AXON_XSTOP5_REGION_UNIT1]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_UNIT1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.setBit<AXON_XSTOP5_REGION_UNIT1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_UNIT1]

//>> CLEAR_[AXON_XSTOP5_REGION_UNIT1]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_XSTOP5_REGION_UNIT1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.clearBit<AXON_XSTOP5_REGION_UNIT1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_XSTOP5_REGION_UNIT1]

//>> GET_[AXON_XSTOP5_REGION_UNIT1]
static inline fapi2::buffer<uint64_t>& GET_AXON_XSTOP5_REGION_UNIT1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return i_data.extractToRight<AXON_XSTOP5_REGION_UNIT1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_XSTOP5_REGION_UNIT1]

//>> GET_[AXON_XSTOP5_REGION_UNIT1]
static inline bool GET_AXON_XSTOP5_REGION_UNIT1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return i_data.getBit<AXON_XSTOP5_REGION_UNIT1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_XSTOP5_REGION_UNIT1]

//>> SET_[AXON_XSTOP5_REGION_UNIT2]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_UNIT2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.insertFromRight<AXON_XSTOP5_REGION_UNIT2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_UNIT2]

//>> SET_[AXON_XSTOP5_REGION_UNIT2]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_UNIT2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.insertFromRight<AXON_XSTOP5_REGION_UNIT2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_UNIT2]

//>> SET_[AXON_XSTOP5_REGION_UNIT2]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_UNIT2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.setBit<AXON_XSTOP5_REGION_UNIT2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_UNIT2]

//>> CLEAR_[AXON_XSTOP5_REGION_UNIT2]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_XSTOP5_REGION_UNIT2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.clearBit<AXON_XSTOP5_REGION_UNIT2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_XSTOP5_REGION_UNIT2]

//>> GET_[AXON_XSTOP5_REGION_UNIT2]
static inline fapi2::buffer<uint64_t>& GET_AXON_XSTOP5_REGION_UNIT2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return i_data.extractToRight<AXON_XSTOP5_REGION_UNIT2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_XSTOP5_REGION_UNIT2]

//>> GET_[AXON_XSTOP5_REGION_UNIT2]
static inline bool GET_AXON_XSTOP5_REGION_UNIT2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return i_data.getBit<AXON_XSTOP5_REGION_UNIT2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_XSTOP5_REGION_UNIT2]

//>> SET_[AXON_XSTOP5_REGION_UNIT3]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_UNIT3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.insertFromRight<AXON_XSTOP5_REGION_UNIT3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_UNIT3]

//>> SET_[AXON_XSTOP5_REGION_UNIT3]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_UNIT3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.insertFromRight<AXON_XSTOP5_REGION_UNIT3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_UNIT3]

//>> SET_[AXON_XSTOP5_REGION_UNIT3]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_UNIT3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.setBit<AXON_XSTOP5_REGION_UNIT3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_UNIT3]

//>> CLEAR_[AXON_XSTOP5_REGION_UNIT3]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_XSTOP5_REGION_UNIT3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.clearBit<AXON_XSTOP5_REGION_UNIT3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_XSTOP5_REGION_UNIT3]

//>> GET_[AXON_XSTOP5_REGION_UNIT3]
static inline fapi2::buffer<uint64_t>& GET_AXON_XSTOP5_REGION_UNIT3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return i_data.extractToRight<AXON_XSTOP5_REGION_UNIT3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_XSTOP5_REGION_UNIT3]

//>> GET_[AXON_XSTOP5_REGION_UNIT3]
static inline bool GET_AXON_XSTOP5_REGION_UNIT3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return i_data.getBit<AXON_XSTOP5_REGION_UNIT3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_XSTOP5_REGION_UNIT3]

//>> SET_[AXON_XSTOP5_REGION_UNIT4]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_UNIT4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.insertFromRight<AXON_XSTOP5_REGION_UNIT4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_UNIT4]

//>> SET_[AXON_XSTOP5_REGION_UNIT4]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_UNIT4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.insertFromRight<AXON_XSTOP5_REGION_UNIT4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_UNIT4]

//>> SET_[AXON_XSTOP5_REGION_UNIT4]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_UNIT4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.setBit<AXON_XSTOP5_REGION_UNIT4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_UNIT4]

//>> CLEAR_[AXON_XSTOP5_REGION_UNIT4]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_XSTOP5_REGION_UNIT4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.clearBit<AXON_XSTOP5_REGION_UNIT4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_XSTOP5_REGION_UNIT4]

//>> GET_[AXON_XSTOP5_REGION_UNIT4]
static inline fapi2::buffer<uint64_t>& GET_AXON_XSTOP5_REGION_UNIT4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return i_data.extractToRight<AXON_XSTOP5_REGION_UNIT4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_XSTOP5_REGION_UNIT4]

//>> GET_[AXON_XSTOP5_REGION_UNIT4]
static inline bool GET_AXON_XSTOP5_REGION_UNIT4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return i_data.getBit<AXON_XSTOP5_REGION_UNIT4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_XSTOP5_REGION_UNIT4]

//>> SET_[AXON_XSTOP5_REGION_UNIT5]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_UNIT5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.insertFromRight<AXON_XSTOP5_REGION_UNIT5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_UNIT5]

//>> SET_[AXON_XSTOP5_REGION_UNIT5]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_UNIT5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.insertFromRight<AXON_XSTOP5_REGION_UNIT5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_UNIT5]

//>> SET_[AXON_XSTOP5_REGION_UNIT5]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_UNIT5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.setBit<AXON_XSTOP5_REGION_UNIT5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_UNIT5]

//>> CLEAR_[AXON_XSTOP5_REGION_UNIT5]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_XSTOP5_REGION_UNIT5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.clearBit<AXON_XSTOP5_REGION_UNIT5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_XSTOP5_REGION_UNIT5]

//>> GET_[AXON_XSTOP5_REGION_UNIT5]
static inline fapi2::buffer<uint64_t>& GET_AXON_XSTOP5_REGION_UNIT5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return i_data.extractToRight<AXON_XSTOP5_REGION_UNIT5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_XSTOP5_REGION_UNIT5]

//>> GET_[AXON_XSTOP5_REGION_UNIT5]
static inline bool GET_AXON_XSTOP5_REGION_UNIT5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return i_data.getBit<AXON_XSTOP5_REGION_UNIT5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_XSTOP5_REGION_UNIT5]

//>> SET_[AXON_XSTOP5_REGION_UNIT6]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_UNIT6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.insertFromRight<AXON_XSTOP5_REGION_UNIT6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_UNIT6]

//>> SET_[AXON_XSTOP5_REGION_UNIT6]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_UNIT6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.insertFromRight<AXON_XSTOP5_REGION_UNIT6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_UNIT6]

//>> SET_[AXON_XSTOP5_REGION_UNIT6]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_UNIT6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.setBit<AXON_XSTOP5_REGION_UNIT6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_UNIT6]

//>> CLEAR_[AXON_XSTOP5_REGION_UNIT6]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_XSTOP5_REGION_UNIT6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.clearBit<AXON_XSTOP5_REGION_UNIT6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_XSTOP5_REGION_UNIT6]

//>> GET_[AXON_XSTOP5_REGION_UNIT6]
static inline fapi2::buffer<uint64_t>& GET_AXON_XSTOP5_REGION_UNIT6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return i_data.extractToRight<AXON_XSTOP5_REGION_UNIT6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_XSTOP5_REGION_UNIT6]

//>> GET_[AXON_XSTOP5_REGION_UNIT6]
static inline bool GET_AXON_XSTOP5_REGION_UNIT6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return i_data.getBit<AXON_XSTOP5_REGION_UNIT6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_XSTOP5_REGION_UNIT6]

//>> SET_[AXON_XSTOP5_REGION_UNIT7]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_UNIT7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.insertFromRight<AXON_XSTOP5_REGION_UNIT7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_UNIT7]

//>> SET_[AXON_XSTOP5_REGION_UNIT7]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_UNIT7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.insertFromRight<AXON_XSTOP5_REGION_UNIT7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_UNIT7]

//>> SET_[AXON_XSTOP5_REGION_UNIT7]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_UNIT7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.setBit<AXON_XSTOP5_REGION_UNIT7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_UNIT7]

//>> CLEAR_[AXON_XSTOP5_REGION_UNIT7]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_XSTOP5_REGION_UNIT7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.clearBit<AXON_XSTOP5_REGION_UNIT7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_XSTOP5_REGION_UNIT7]

//>> GET_[AXON_XSTOP5_REGION_UNIT7]
static inline fapi2::buffer<uint64_t>& GET_AXON_XSTOP5_REGION_UNIT7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return i_data.extractToRight<AXON_XSTOP5_REGION_UNIT7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_XSTOP5_REGION_UNIT7]

//>> GET_[AXON_XSTOP5_REGION_UNIT7]
static inline bool GET_AXON_XSTOP5_REGION_UNIT7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return i_data.getBit<AXON_XSTOP5_REGION_UNIT7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_XSTOP5_REGION_UNIT7]

//>> SET_[AXON_XSTOP5_REGION_UNIT8]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_UNIT8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.insertFromRight<AXON_XSTOP5_REGION_UNIT8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_UNIT8]

//>> SET_[AXON_XSTOP5_REGION_UNIT8]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_UNIT8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.insertFromRight<AXON_XSTOP5_REGION_UNIT8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_UNIT8]

//>> SET_[AXON_XSTOP5_REGION_UNIT8]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_UNIT8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.setBit<AXON_XSTOP5_REGION_UNIT8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_UNIT8]

//>> CLEAR_[AXON_XSTOP5_REGION_UNIT8]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_XSTOP5_REGION_UNIT8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.clearBit<AXON_XSTOP5_REGION_UNIT8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_XSTOP5_REGION_UNIT8]

//>> GET_[AXON_XSTOP5_REGION_UNIT8]
static inline fapi2::buffer<uint64_t>& GET_AXON_XSTOP5_REGION_UNIT8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return i_data.extractToRight<AXON_XSTOP5_REGION_UNIT8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_XSTOP5_REGION_UNIT8]

//>> GET_[AXON_XSTOP5_REGION_UNIT8]
static inline bool GET_AXON_XSTOP5_REGION_UNIT8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return i_data.getBit<AXON_XSTOP5_REGION_UNIT8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_XSTOP5_REGION_UNIT8]

//>> SET_[AXON_XSTOP5_REGION_UNIT9]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_UNIT9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.insertFromRight<AXON_XSTOP5_REGION_UNIT9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_UNIT9]

//>> SET_[AXON_XSTOP5_REGION_UNIT9]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_UNIT9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.insertFromRight<AXON_XSTOP5_REGION_UNIT9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_UNIT9]

//>> SET_[AXON_XSTOP5_REGION_UNIT9]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_UNIT9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.setBit<AXON_XSTOP5_REGION_UNIT9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_UNIT9]

//>> CLEAR_[AXON_XSTOP5_REGION_UNIT9]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_XSTOP5_REGION_UNIT9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.clearBit<AXON_XSTOP5_REGION_UNIT9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_XSTOP5_REGION_UNIT9]

//>> GET_[AXON_XSTOP5_REGION_UNIT9]
static inline fapi2::buffer<uint64_t>& GET_AXON_XSTOP5_REGION_UNIT9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return i_data.extractToRight<AXON_XSTOP5_REGION_UNIT9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_XSTOP5_REGION_UNIT9]

//>> GET_[AXON_XSTOP5_REGION_UNIT9]
static inline bool GET_AXON_XSTOP5_REGION_UNIT9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return i_data.getBit<AXON_XSTOP5_REGION_UNIT9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_XSTOP5_REGION_UNIT9]

//>> SET_[AXON_XSTOP5_REGION_UNIT10]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_UNIT10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.insertFromRight<AXON_XSTOP5_REGION_UNIT10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_UNIT10]

//>> SET_[AXON_XSTOP5_REGION_UNIT10]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_UNIT10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.insertFromRight<AXON_XSTOP5_REGION_UNIT10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_UNIT10]

//>> SET_[AXON_XSTOP5_REGION_UNIT10]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_UNIT10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.setBit<AXON_XSTOP5_REGION_UNIT10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_UNIT10]

//>> CLEAR_[AXON_XSTOP5_REGION_UNIT10]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_XSTOP5_REGION_UNIT10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.clearBit<AXON_XSTOP5_REGION_UNIT10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_XSTOP5_REGION_UNIT10]

//>> GET_[AXON_XSTOP5_REGION_UNIT10]
static inline fapi2::buffer<uint64_t>& GET_AXON_XSTOP5_REGION_UNIT10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return i_data.extractToRight<AXON_XSTOP5_REGION_UNIT10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_XSTOP5_REGION_UNIT10]

//>> GET_[AXON_XSTOP5_REGION_UNIT10]
static inline bool GET_AXON_XSTOP5_REGION_UNIT10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return i_data.getBit<AXON_XSTOP5_REGION_UNIT10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_XSTOP5_REGION_UNIT10]

//>> SET_[AXON_XSTOP5_REGION_UNIT11]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_UNIT11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.insertFromRight<AXON_XSTOP5_REGION_UNIT11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_UNIT11]

//>> SET_[AXON_XSTOP5_REGION_UNIT11]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_UNIT11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.insertFromRight<AXON_XSTOP5_REGION_UNIT11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_UNIT11]

//>> SET_[AXON_XSTOP5_REGION_UNIT11]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_UNIT11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.setBit<AXON_XSTOP5_REGION_UNIT11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_UNIT11]

//>> CLEAR_[AXON_XSTOP5_REGION_UNIT11]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_XSTOP5_REGION_UNIT11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.clearBit<AXON_XSTOP5_REGION_UNIT11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_XSTOP5_REGION_UNIT11]

//>> GET_[AXON_XSTOP5_REGION_UNIT11]
static inline fapi2::buffer<uint64_t>& GET_AXON_XSTOP5_REGION_UNIT11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return i_data.extractToRight<AXON_XSTOP5_REGION_UNIT11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_XSTOP5_REGION_UNIT11]

//>> GET_[AXON_XSTOP5_REGION_UNIT11]
static inline bool GET_AXON_XSTOP5_REGION_UNIT11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return i_data.getBit<AXON_XSTOP5_REGION_UNIT11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_XSTOP5_REGION_UNIT11]

//>> SET_[AXON_XSTOP5_REGION_UNIT12]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_UNIT12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.insertFromRight<AXON_XSTOP5_REGION_UNIT12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_UNIT12]

//>> SET_[AXON_XSTOP5_REGION_UNIT12]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_UNIT12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.insertFromRight<AXON_XSTOP5_REGION_UNIT12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_UNIT12]

//>> SET_[AXON_XSTOP5_REGION_UNIT12]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_UNIT12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.setBit<AXON_XSTOP5_REGION_UNIT12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_UNIT12]

//>> CLEAR_[AXON_XSTOP5_REGION_UNIT12]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_XSTOP5_REGION_UNIT12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.clearBit<AXON_XSTOP5_REGION_UNIT12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_XSTOP5_REGION_UNIT12]

//>> GET_[AXON_XSTOP5_REGION_UNIT12]
static inline fapi2::buffer<uint64_t>& GET_AXON_XSTOP5_REGION_UNIT12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return i_data.extractToRight<AXON_XSTOP5_REGION_UNIT12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_XSTOP5_REGION_UNIT12]

//>> GET_[AXON_XSTOP5_REGION_UNIT12]
static inline bool GET_AXON_XSTOP5_REGION_UNIT12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return i_data.getBit<AXON_XSTOP5_REGION_UNIT12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_XSTOP5_REGION_UNIT12]

//>> SET_[AXON_XSTOP5_REGION_UNIT13]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_UNIT13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.insertFromRight<AXON_XSTOP5_REGION_UNIT13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_UNIT13]

//>> SET_[AXON_XSTOP5_REGION_UNIT13]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_UNIT13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.insertFromRight<AXON_XSTOP5_REGION_UNIT13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_UNIT13]

//>> SET_[AXON_XSTOP5_REGION_UNIT13]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_UNIT13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.setBit<AXON_XSTOP5_REGION_UNIT13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_UNIT13]

//>> CLEAR_[AXON_XSTOP5_REGION_UNIT13]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_XSTOP5_REGION_UNIT13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.clearBit<AXON_XSTOP5_REGION_UNIT13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_XSTOP5_REGION_UNIT13]

//>> GET_[AXON_XSTOP5_REGION_UNIT13]
static inline fapi2::buffer<uint64_t>& GET_AXON_XSTOP5_REGION_UNIT13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return i_data.extractToRight<AXON_XSTOP5_REGION_UNIT13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_XSTOP5_REGION_UNIT13]

//>> GET_[AXON_XSTOP5_REGION_UNIT13]
static inline bool GET_AXON_XSTOP5_REGION_UNIT13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return i_data.getBit<AXON_XSTOP5_REGION_UNIT13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_XSTOP5_REGION_UNIT13]

//>> SET_[AXON_XSTOP5_REGION_UNIT14]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_UNIT14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.insertFromRight<AXON_XSTOP5_REGION_UNIT14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_UNIT14]

//>> SET_[AXON_XSTOP5_REGION_UNIT14]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_UNIT14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.insertFromRight<AXON_XSTOP5_REGION_UNIT14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_UNIT14]

//>> SET_[AXON_XSTOP5_REGION_UNIT14]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_REGION_UNIT14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.setBit<AXON_XSTOP5_REGION_UNIT14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_REGION_UNIT14]

//>> CLEAR_[AXON_XSTOP5_REGION_UNIT14]
static inline fapi2::buffer<uint64_t>& CLEAR_AXON_XSTOP5_REGION_UNIT14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.clearBit<AXON_XSTOP5_REGION_UNIT14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[AXON_XSTOP5_REGION_UNIT14]

//>> GET_[AXON_XSTOP5_REGION_UNIT14]
static inline fapi2::buffer<uint64_t>& GET_AXON_XSTOP5_REGION_UNIT14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return i_data.extractToRight<AXON_XSTOP5_REGION_UNIT14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_XSTOP5_REGION_UNIT14]

//>> GET_[AXON_XSTOP5_REGION_UNIT14]
static inline bool GET_AXON_XSTOP5_REGION_UNIT14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return i_data.getBit<AXON_XSTOP5_REGION_UNIT14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access AXON_XSTOP5_REGION_UNIT14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_XSTOP5_REGION_UNIT14]

//>> SET_[AXON_XSTOP5_WAIT_CYCLES]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_WAIT_CYCLES(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.insertFromRight<AXON_XSTOP5_WAIT_CYCLES,
           AXON_XSTOP5_WAIT_CYCLES_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access AXON_XSTOP5_WAIT_CYCLES chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_WAIT_CYCLES]

//>> SET_[AXON_XSTOP5_WAIT_CYCLES]
static inline fapi2::buffer<uint64_t>& SET_AXON_XSTOP5_WAIT_CYCLES(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return o_data.insertFromRight<AXON_XSTOP5_WAIT_CYCLES,
           AXON_XSTOP5_WAIT_CYCLES_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access AXON_XSTOP5_WAIT_CYCLES chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[AXON_XSTOP5_WAIT_CYCLES]

//>> GET_[AXON_XSTOP5_WAIT_CYCLES]
static inline fapi2::buffer<uint64_t>& GET_AXON_XSTOP5_WAIT_CYCLES(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(AXON_XSTOP5));
#endif
    return i_data.extractToRight<AXON_XSTOP5_WAIT_CYCLES,
           AXON_XSTOP5_WAIT_CYCLES_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access AXON_XSTOP5_WAIT_CYCLES chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[AXON_XSTOP5_WAIT_CYCLES]

//>> PREP_[DLP_FIR_MASK_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_DLP_FIR_MASK_REG_RW(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = DLP_FIR_MASK_REG_RW;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[DLP_FIR_MASK_REG_RW]

//>> GET_[DLP_FIR_MASK_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_DLP_FIR_MASK_REG_RW(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = DLP_FIR_MASK_REG_RW;
#endif
    return fapi2::getScom(i_target, DLP_FIR_MASK_REG_RW, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_RW]

//>> PUT_[DLP_FIR_MASK_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_DLP_FIR_MASK_REG_RW(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, DLP_FIR_MASK_REG_RW, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[DLP_FIR_MASK_REG_RW]

//>> PREP_[DLP_FIR_MASK_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_DLP_FIR_MASK_REG_WO_AND(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = DLP_FIR_MASK_REG_WO_AND;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[DLP_FIR_MASK_REG_WO_AND]

//>> GET_[DLP_FIR_MASK_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_DLP_FIR_MASK_REG_WO_AND(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = DLP_FIR_MASK_REG_WO_AND;
#endif
    return fapi2::getScom(i_target, DLP_FIR_MASK_REG_WO_AND, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_WO_AND]

//>> PUT_[DLP_FIR_MASK_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_DLP_FIR_MASK_REG_WO_AND(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, DLP_FIR_MASK_REG_WO_AND, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[DLP_FIR_MASK_REG_WO_AND]

//>> PREP_[DLP_FIR_MASK_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_DLP_FIR_MASK_REG_WO_OR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = DLP_FIR_MASK_REG_WO_OR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[DLP_FIR_MASK_REG_WO_OR]

//>> GET_[DLP_FIR_MASK_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_DLP_FIR_MASK_REG_WO_OR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = DLP_FIR_MASK_REG_WO_OR;
#endif
    return fapi2::getScom(i_target, DLP_FIR_MASK_REG_WO_OR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_WO_OR]

//>> PUT_[DLP_FIR_MASK_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_DLP_FIR_MASK_REG_WO_OR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, DLP_FIR_MASK_REG_WO_OR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[DLP_FIR_MASK_REG_WO_OR]


//>> SET_[DLP_FIR_MASK_REG_0_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_TRAINED_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_TRAINED_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_TRAINED_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_TRAINED_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_TRAINED_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_TRAINED_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_TRAINED_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_TRAINED_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_TRAINED_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_0_TRAINED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_TRAINED_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_TRAINED_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_0_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_0_TRAINED_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_0_TRAINED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_TRAINED_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_0_TRAINED_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_0_TRAINED_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_0_TRAINED_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_TRAINED_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_TRAINED_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_TRAINED_MASK]
static inline bool GET_DLP_FIR_MASK_REG_0_TRAINED_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_0_TRAINED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_TRAINED_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_TRAINED_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_TRAINED_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_TRAINED_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_TRAINED_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_TRAINED_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_TRAINED_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_TRAINED_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_TRAINED_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_TRAINED_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_TRAINED_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_1_TRAINED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_TRAINED_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_TRAINED_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_1_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_1_TRAINED_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_1_TRAINED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_TRAINED_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_1_TRAINED_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_TRAINED_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_1_TRAINED_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_1_TRAINED_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_TRAINED_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_TRAINED_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_TRAINED_MASK]
static inline bool GET_DLP_FIR_MASK_REG_1_TRAINED_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_1_TRAINED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_TRAINED_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_TRAINED_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_OP_IRQ_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_OP_IRQ_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_OP_IRQ_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_OP_IRQ_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_OP_IRQ_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_OP_IRQ_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_OP_IRQ_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_OP_IRQ_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_OP_IRQ_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_OP_IRQ_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_OP_IRQ_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_OP_IRQ_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_0_OP_IRQ_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_OP_IRQ_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_OP_IRQ_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_0_OP_IRQ_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_0_OP_IRQ_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_0_OP_IRQ_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_OP_IRQ_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_0_OP_IRQ_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_OP_IRQ_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_0_OP_IRQ_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_0_OP_IRQ_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_OP_IRQ_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_OP_IRQ_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_OP_IRQ_MASK]
static inline bool GET_DLP_FIR_MASK_REG_0_OP_IRQ_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_0_OP_IRQ_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_OP_IRQ_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_OP_IRQ_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_OP_IRQ_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_OP_IRQ_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_OP_IRQ_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_OP_IRQ_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_OP_IRQ_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_OP_IRQ_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_OP_IRQ_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_OP_IRQ_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_OP_IRQ_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_OP_IRQ_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_OP_IRQ_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_OP_IRQ_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_1_OP_IRQ_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_OP_IRQ_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_OP_IRQ_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_1_OP_IRQ_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_1_OP_IRQ_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_1_OP_IRQ_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_OP_IRQ_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_1_OP_IRQ_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_OP_IRQ_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_1_OP_IRQ_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_1_OP_IRQ_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_OP_IRQ_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_OP_IRQ_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_OP_IRQ_MASK]
static inline bool GET_DLP_FIR_MASK_REG_1_OP_IRQ_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_1_OP_IRQ_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_OP_IRQ_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_OP_IRQ_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_REPLAY_THRESHOLD_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_REPLAY_THRESHOLD_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_REPLAY_THRESHOLD_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_REPLAY_THRESHOLD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_REPLAY_THRESHOLD_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_REPLAY_THRESHOLD_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_REPLAY_THRESHOLD_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_REPLAY_THRESHOLD_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_REPLAY_THRESHOLD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_REPLAY_THRESHOLD_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_REPLAY_THRESHOLD_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_REPLAY_THRESHOLD_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_0_REPLAY_THRESHOLD_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_REPLAY_THRESHOLD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_REPLAY_THRESHOLD_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_0_REPLAY_THRESHOLD_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_0_REPLAY_THRESHOLD_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_0_REPLAY_THRESHOLD_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_REPLAY_THRESHOLD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_0_REPLAY_THRESHOLD_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_REPLAY_THRESHOLD_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_0_REPLAY_THRESHOLD_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_0_REPLAY_THRESHOLD_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_REPLAY_THRESHOLD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_REPLAY_THRESHOLD_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_REPLAY_THRESHOLD_MASK]
static inline bool GET_DLP_FIR_MASK_REG_0_REPLAY_THRESHOLD_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_0_REPLAY_THRESHOLD_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_REPLAY_THRESHOLD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_REPLAY_THRESHOLD_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_REPLAY_THRESHOLD_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_REPLAY_THRESHOLD_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_REPLAY_THRESHOLD_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_REPLAY_THRESHOLD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_REPLAY_THRESHOLD_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_REPLAY_THRESHOLD_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_REPLAY_THRESHOLD_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_REPLAY_THRESHOLD_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_REPLAY_THRESHOLD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_REPLAY_THRESHOLD_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_REPLAY_THRESHOLD_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_REPLAY_THRESHOLD_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_1_REPLAY_THRESHOLD_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_REPLAY_THRESHOLD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_REPLAY_THRESHOLD_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_1_REPLAY_THRESHOLD_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_1_REPLAY_THRESHOLD_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_1_REPLAY_THRESHOLD_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_REPLAY_THRESHOLD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_1_REPLAY_THRESHOLD_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_REPLAY_THRESHOLD_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_1_REPLAY_THRESHOLD_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_1_REPLAY_THRESHOLD_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_REPLAY_THRESHOLD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_REPLAY_THRESHOLD_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_REPLAY_THRESHOLD_MASK]
static inline bool GET_DLP_FIR_MASK_REG_1_REPLAY_THRESHOLD_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_1_REPLAY_THRESHOLD_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_REPLAY_THRESHOLD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_REPLAY_THRESHOLD_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_CRC_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_CRC_ERROR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_CRC_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_CRC_ERROR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_CRC_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_CRC_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_CRC_ERROR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_CRC_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_CRC_ERROR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_CRC_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_CRC_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_CRC_ERROR_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_0_CRC_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_CRC_ERROR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_CRC_ERROR_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_0_CRC_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_0_CRC_ERROR_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_0_CRC_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_CRC_ERROR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_0_CRC_ERROR_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_CRC_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_0_CRC_ERROR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_0_CRC_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_CRC_ERROR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_CRC_ERROR_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_CRC_ERROR_MASK]
static inline bool GET_DLP_FIR_MASK_REG_0_CRC_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_0_CRC_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_CRC_ERROR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_CRC_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_CRC_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_CRC_ERROR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_CRC_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_CRC_ERROR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_CRC_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_CRC_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_CRC_ERROR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_CRC_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_CRC_ERROR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_CRC_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_CRC_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_CRC_ERROR_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_1_CRC_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_CRC_ERROR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_CRC_ERROR_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_1_CRC_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_1_CRC_ERROR_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_1_CRC_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_CRC_ERROR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_1_CRC_ERROR_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_CRC_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_1_CRC_ERROR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_1_CRC_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_CRC_ERROR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_CRC_ERROR_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_CRC_ERROR_MASK]
static inline bool GET_DLP_FIR_MASK_REG_1_CRC_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_1_CRC_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_CRC_ERROR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_CRC_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_NAK_RECEIVED_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_NAK_RECEIVED_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_NAK_RECEIVED_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_NAK_RECEIVED_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_NAK_RECEIVED_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_NAK_RECEIVED_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_NAK_RECEIVED_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_NAK_RECEIVED_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_NAK_RECEIVED_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_NAK_RECEIVED_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_NAK_RECEIVED_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_NAK_RECEIVED_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_0_NAK_RECEIVED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_NAK_RECEIVED_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_NAK_RECEIVED_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_0_NAK_RECEIVED_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_0_NAK_RECEIVED_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_0_NAK_RECEIVED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_NAK_RECEIVED_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_0_NAK_RECEIVED_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_NAK_RECEIVED_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_0_NAK_RECEIVED_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_0_NAK_RECEIVED_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_NAK_RECEIVED_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_NAK_RECEIVED_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_NAK_RECEIVED_MASK]
static inline bool GET_DLP_FIR_MASK_REG_0_NAK_RECEIVED_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_0_NAK_RECEIVED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_NAK_RECEIVED_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_NAK_RECEIVED_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_NAK_RECEIVED_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_NAK_RECEIVED_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_NAK_RECEIVED_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_NAK_RECEIVED_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_NAK_RECEIVED_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_NAK_RECEIVED_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_NAK_RECEIVED_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_NAK_RECEIVED_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_NAK_RECEIVED_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_NAK_RECEIVED_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_NAK_RECEIVED_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_NAK_RECEIVED_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_1_NAK_RECEIVED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_NAK_RECEIVED_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_NAK_RECEIVED_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_1_NAK_RECEIVED_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_1_NAK_RECEIVED_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_1_NAK_RECEIVED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_NAK_RECEIVED_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_1_NAK_RECEIVED_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_NAK_RECEIVED_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_1_NAK_RECEIVED_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_1_NAK_RECEIVED_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_NAK_RECEIVED_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_NAK_RECEIVED_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_NAK_RECEIVED_MASK]
static inline bool GET_DLP_FIR_MASK_REG_1_NAK_RECEIVED_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_1_NAK_RECEIVED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_NAK_RECEIVED_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_NAK_RECEIVED_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_REPLAY_BUFFER_FULL_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_REPLAY_BUFFER_FULL_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_REPLAY_BUFFER_FULL_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_REPLAY_BUFFER_FULL_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_REPLAY_BUFFER_FULL_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_REPLAY_BUFFER_FULL_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_REPLAY_BUFFER_FULL_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_REPLAY_BUFFER_FULL_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_REPLAY_BUFFER_FULL_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_REPLAY_BUFFER_FULL_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_REPLAY_BUFFER_FULL_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_REPLAY_BUFFER_FULL_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_0_REPLAY_BUFFER_FULL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_REPLAY_BUFFER_FULL_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_REPLAY_BUFFER_FULL_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_0_REPLAY_BUFFER_FULL_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_0_REPLAY_BUFFER_FULL_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_0_REPLAY_BUFFER_FULL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_REPLAY_BUFFER_FULL_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_0_REPLAY_BUFFER_FULL_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_REPLAY_BUFFER_FULL_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_0_REPLAY_BUFFER_FULL_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_0_REPLAY_BUFFER_FULL_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_REPLAY_BUFFER_FULL_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_REPLAY_BUFFER_FULL_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_REPLAY_BUFFER_FULL_MASK]
static inline bool GET_DLP_FIR_MASK_REG_0_REPLAY_BUFFER_FULL_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_0_REPLAY_BUFFER_FULL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_REPLAY_BUFFER_FULL_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_REPLAY_BUFFER_FULL_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_REPLAY_BUFFER_FULL_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_REPLAY_BUFFER_FULL_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_REPLAY_BUFFER_FULL_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_REPLAY_BUFFER_FULL_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_REPLAY_BUFFER_FULL_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_REPLAY_BUFFER_FULL_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_REPLAY_BUFFER_FULL_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_REPLAY_BUFFER_FULL_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_REPLAY_BUFFER_FULL_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_REPLAY_BUFFER_FULL_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_REPLAY_BUFFER_FULL_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_REPLAY_BUFFER_FULL_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_1_REPLAY_BUFFER_FULL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_REPLAY_BUFFER_FULL_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_REPLAY_BUFFER_FULL_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_1_REPLAY_BUFFER_FULL_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_1_REPLAY_BUFFER_FULL_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_1_REPLAY_BUFFER_FULL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_REPLAY_BUFFER_FULL_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_1_REPLAY_BUFFER_FULL_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_REPLAY_BUFFER_FULL_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_1_REPLAY_BUFFER_FULL_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_1_REPLAY_BUFFER_FULL_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_REPLAY_BUFFER_FULL_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_REPLAY_BUFFER_FULL_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_REPLAY_BUFFER_FULL_MASK]
static inline bool GET_DLP_FIR_MASK_REG_1_REPLAY_BUFFER_FULL_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_1_REPLAY_BUFFER_FULL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_REPLAY_BUFFER_FULL_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_REPLAY_BUFFER_FULL_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_SL_ECC_THRESHOLD_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_SL_ECC_THRESHOLD_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_SL_ECC_THRESHOLD_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_SL_ECC_THRESHOLD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_SL_ECC_THRESHOLD_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_SL_ECC_THRESHOLD_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_SL_ECC_THRESHOLD_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_SL_ECC_THRESHOLD_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_SL_ECC_THRESHOLD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_SL_ECC_THRESHOLD_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_SL_ECC_THRESHOLD_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_SL_ECC_THRESHOLD_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_0_SL_ECC_THRESHOLD_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_SL_ECC_THRESHOLD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_SL_ECC_THRESHOLD_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_0_SL_ECC_THRESHOLD_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_0_SL_ECC_THRESHOLD_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_0_SL_ECC_THRESHOLD_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_SL_ECC_THRESHOLD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_0_SL_ECC_THRESHOLD_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_SL_ECC_THRESHOLD_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_0_SL_ECC_THRESHOLD_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_0_SL_ECC_THRESHOLD_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_SL_ECC_THRESHOLD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_SL_ECC_THRESHOLD_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_SL_ECC_THRESHOLD_MASK]
static inline bool GET_DLP_FIR_MASK_REG_0_SL_ECC_THRESHOLD_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_0_SL_ECC_THRESHOLD_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_SL_ECC_THRESHOLD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_SL_ECC_THRESHOLD_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_SL_ECC_THRESHOLD_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_SL_ECC_THRESHOLD_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_SL_ECC_THRESHOLD_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_SL_ECC_THRESHOLD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_SL_ECC_THRESHOLD_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_SL_ECC_THRESHOLD_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_SL_ECC_THRESHOLD_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_SL_ECC_THRESHOLD_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_SL_ECC_THRESHOLD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_SL_ECC_THRESHOLD_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_SL_ECC_THRESHOLD_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_SL_ECC_THRESHOLD_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_1_SL_ECC_THRESHOLD_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_SL_ECC_THRESHOLD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_SL_ECC_THRESHOLD_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_1_SL_ECC_THRESHOLD_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_1_SL_ECC_THRESHOLD_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_1_SL_ECC_THRESHOLD_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_SL_ECC_THRESHOLD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_1_SL_ECC_THRESHOLD_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_SL_ECC_THRESHOLD_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_1_SL_ECC_THRESHOLD_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_1_SL_ECC_THRESHOLD_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_SL_ECC_THRESHOLD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_SL_ECC_THRESHOLD_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_SL_ECC_THRESHOLD_MASK]
static inline bool GET_DLP_FIR_MASK_REG_1_SL_ECC_THRESHOLD_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_1_SL_ECC_THRESHOLD_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_SL_ECC_THRESHOLD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_SL_ECC_THRESHOLD_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_SL_ECC_CORRECTABLE_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_SL_ECC_CORRECTABLE_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_SL_ECC_CORRECTABLE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_SL_ECC_CORRECTABLE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_SL_ECC_CORRECTABLE_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_SL_ECC_CORRECTABLE_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_SL_ECC_CORRECTABLE_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_SL_ECC_CORRECTABLE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_SL_ECC_CORRECTABLE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_SL_ECC_CORRECTABLE_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_SL_ECC_CORRECTABLE_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_SL_ECC_CORRECTABLE_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_0_SL_ECC_CORRECTABLE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_SL_ECC_CORRECTABLE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_SL_ECC_CORRECTABLE_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_0_SL_ECC_CORRECTABLE_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_0_SL_ECC_CORRECTABLE_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_0_SL_ECC_CORRECTABLE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_SL_ECC_CORRECTABLE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_0_SL_ECC_CORRECTABLE_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_SL_ECC_CORRECTABLE_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_0_SL_ECC_CORRECTABLE_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_0_SL_ECC_CORRECTABLE_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_SL_ECC_CORRECTABLE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_SL_ECC_CORRECTABLE_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_SL_ECC_CORRECTABLE_MASK]
static inline bool GET_DLP_FIR_MASK_REG_0_SL_ECC_CORRECTABLE_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_0_SL_ECC_CORRECTABLE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_SL_ECC_CORRECTABLE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_SL_ECC_CORRECTABLE_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_SL_ECC_CORRECTABLE_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_SL_ECC_CORRECTABLE_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_SL_ECC_CORRECTABLE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_SL_ECC_CORRECTABLE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_SL_ECC_CORRECTABLE_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_SL_ECC_CORRECTABLE_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_SL_ECC_CORRECTABLE_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_SL_ECC_CORRECTABLE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_SL_ECC_CORRECTABLE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_SL_ECC_CORRECTABLE_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_SL_ECC_CORRECTABLE_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_SL_ECC_CORRECTABLE_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_1_SL_ECC_CORRECTABLE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_SL_ECC_CORRECTABLE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_SL_ECC_CORRECTABLE_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_1_SL_ECC_CORRECTABLE_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_1_SL_ECC_CORRECTABLE_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_1_SL_ECC_CORRECTABLE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_SL_ECC_CORRECTABLE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_1_SL_ECC_CORRECTABLE_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_SL_ECC_CORRECTABLE_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_1_SL_ECC_CORRECTABLE_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_1_SL_ECC_CORRECTABLE_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_SL_ECC_CORRECTABLE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_SL_ECC_CORRECTABLE_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_SL_ECC_CORRECTABLE_MASK]
static inline bool GET_DLP_FIR_MASK_REG_1_SL_ECC_CORRECTABLE_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_1_SL_ECC_CORRECTABLE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_SL_ECC_CORRECTABLE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_SL_ECC_CORRECTABLE_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_SL_ECC_UE_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_SL_ECC_UE_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_SL_ECC_UE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_SL_ECC_UE_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_SL_ECC_UE_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_SL_ECC_UE_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_SL_ECC_UE_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_SL_ECC_UE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_SL_ECC_UE_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_SL_ECC_UE_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_SL_ECC_UE_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_SL_ECC_UE_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_0_SL_ECC_UE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_SL_ECC_UE_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_SL_ECC_UE_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_0_SL_ECC_UE_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_0_SL_ECC_UE_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_0_SL_ECC_UE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_SL_ECC_UE_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_0_SL_ECC_UE_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_SL_ECC_UE_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_0_SL_ECC_UE_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_0_SL_ECC_UE_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_SL_ECC_UE_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_SL_ECC_UE_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_SL_ECC_UE_MASK]
static inline bool GET_DLP_FIR_MASK_REG_0_SL_ECC_UE_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_0_SL_ECC_UE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_SL_ECC_UE_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_SL_ECC_UE_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_SL_ECC_UE_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_SL_ECC_UE_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_SL_ECC_UE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_SL_ECC_UE_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_SL_ECC_UE_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_SL_ECC_UE_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_SL_ECC_UE_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_SL_ECC_UE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_SL_ECC_UE_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_SL_ECC_UE_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_SL_ECC_UE_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_SL_ECC_UE_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_1_SL_ECC_UE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_SL_ECC_UE_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_SL_ECC_UE_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_1_SL_ECC_UE_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_1_SL_ECC_UE_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_1_SL_ECC_UE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_SL_ECC_UE_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_1_SL_ECC_UE_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_SL_ECC_UE_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_1_SL_ECC_UE_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_1_SL_ECC_UE_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_SL_ECC_UE_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_SL_ECC_UE_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_SL_ECC_UE_MASK]
static inline bool GET_DLP_FIR_MASK_REG_1_SL_ECC_UE_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_1_SL_ECC_UE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_SL_ECC_UE_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_SL_ECC_UE_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_RETRAIN_THRESHOLD_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_RETRAIN_THRESHOLD_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_RETRAIN_THRESHOLD_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_RETRAIN_THRESHOLD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_RETRAIN_THRESHOLD_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_RETRAIN_THRESHOLD_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_RETRAIN_THRESHOLD_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_RETRAIN_THRESHOLD_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_RETRAIN_THRESHOLD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_RETRAIN_THRESHOLD_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_RETRAIN_THRESHOLD_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_RETRAIN_THRESHOLD_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_0_RETRAIN_THRESHOLD_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_RETRAIN_THRESHOLD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_RETRAIN_THRESHOLD_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_0_RETRAIN_THRESHOLD_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_0_RETRAIN_THRESHOLD_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_0_RETRAIN_THRESHOLD_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_RETRAIN_THRESHOLD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_0_RETRAIN_THRESHOLD_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_RETRAIN_THRESHOLD_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_0_RETRAIN_THRESHOLD_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_0_RETRAIN_THRESHOLD_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_RETRAIN_THRESHOLD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_RETRAIN_THRESHOLD_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_RETRAIN_THRESHOLD_MASK]
static inline bool GET_DLP_FIR_MASK_REG_0_RETRAIN_THRESHOLD_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_0_RETRAIN_THRESHOLD_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_RETRAIN_THRESHOLD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_RETRAIN_THRESHOLD_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_RETRAIN_THRESHOLD_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_RETRAIN_THRESHOLD_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_RETRAIN_THRESHOLD_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_RETRAIN_THRESHOLD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_RETRAIN_THRESHOLD_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_RETRAIN_THRESHOLD_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_RETRAIN_THRESHOLD_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_RETRAIN_THRESHOLD_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_RETRAIN_THRESHOLD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_RETRAIN_THRESHOLD_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_RETRAIN_THRESHOLD_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_RETRAIN_THRESHOLD_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_1_RETRAIN_THRESHOLD_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_RETRAIN_THRESHOLD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_RETRAIN_THRESHOLD_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_1_RETRAIN_THRESHOLD_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_1_RETRAIN_THRESHOLD_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_1_RETRAIN_THRESHOLD_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_RETRAIN_THRESHOLD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_1_RETRAIN_THRESHOLD_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_RETRAIN_THRESHOLD_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_1_RETRAIN_THRESHOLD_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_1_RETRAIN_THRESHOLD_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_RETRAIN_THRESHOLD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_RETRAIN_THRESHOLD_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_RETRAIN_THRESHOLD_MASK]
static inline bool GET_DLP_FIR_MASK_REG_1_RETRAIN_THRESHOLD_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_1_RETRAIN_THRESHOLD_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_RETRAIN_THRESHOLD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_RETRAIN_THRESHOLD_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_LOSS_BLOCK_ALIGN_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_LOSS_BLOCK_ALIGN_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_LOSS_BLOCK_ALIGN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_LOSS_BLOCK_ALIGN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_LOSS_BLOCK_ALIGN_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_LOSS_BLOCK_ALIGN_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_LOSS_BLOCK_ALIGN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_LOSS_BLOCK_ALIGN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_LOSS_BLOCK_ALIGN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_LOSS_BLOCK_ALIGN_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_LOSS_BLOCK_ALIGN_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_LOSS_BLOCK_ALIGN_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_0_LOSS_BLOCK_ALIGN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_LOSS_BLOCK_ALIGN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_LOSS_BLOCK_ALIGN_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_0_LOSS_BLOCK_ALIGN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_0_LOSS_BLOCK_ALIGN_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_0_LOSS_BLOCK_ALIGN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_LOSS_BLOCK_ALIGN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_0_LOSS_BLOCK_ALIGN_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_LOSS_BLOCK_ALIGN_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_0_LOSS_BLOCK_ALIGN_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_0_LOSS_BLOCK_ALIGN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_LOSS_BLOCK_ALIGN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_LOSS_BLOCK_ALIGN_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_LOSS_BLOCK_ALIGN_MASK]
static inline bool GET_DLP_FIR_MASK_REG_0_LOSS_BLOCK_ALIGN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_0_LOSS_BLOCK_ALIGN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_LOSS_BLOCK_ALIGN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_LOSS_BLOCK_ALIGN_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_LOSS_BLOCK_ALIGN_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_LOSS_BLOCK_ALIGN_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_LOSS_BLOCK_ALIGN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_LOSS_BLOCK_ALIGN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_LOSS_BLOCK_ALIGN_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_LOSS_BLOCK_ALIGN_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_LOSS_BLOCK_ALIGN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_LOSS_BLOCK_ALIGN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_LOSS_BLOCK_ALIGN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_LOSS_BLOCK_ALIGN_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_LOSS_BLOCK_ALIGN_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_LOSS_BLOCK_ALIGN_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_1_LOSS_BLOCK_ALIGN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_LOSS_BLOCK_ALIGN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_LOSS_BLOCK_ALIGN_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_1_LOSS_BLOCK_ALIGN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_1_LOSS_BLOCK_ALIGN_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_1_LOSS_BLOCK_ALIGN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_LOSS_BLOCK_ALIGN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_1_LOSS_BLOCK_ALIGN_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_LOSS_BLOCK_ALIGN_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_1_LOSS_BLOCK_ALIGN_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_1_LOSS_BLOCK_ALIGN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_LOSS_BLOCK_ALIGN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_LOSS_BLOCK_ALIGN_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_LOSS_BLOCK_ALIGN_MASK]
static inline bool GET_DLP_FIR_MASK_REG_1_LOSS_BLOCK_ALIGN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_1_LOSS_BLOCK_ALIGN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_LOSS_BLOCK_ALIGN_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_LOSS_BLOCK_ALIGN_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_INVALID_BLOCK_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_INVALID_BLOCK_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_INVALID_BLOCK_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_INVALID_BLOCK_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_INVALID_BLOCK_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_INVALID_BLOCK_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_INVALID_BLOCK_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_INVALID_BLOCK_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_INVALID_BLOCK_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_INVALID_BLOCK_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_INVALID_BLOCK_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_INVALID_BLOCK_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_0_INVALID_BLOCK_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_INVALID_BLOCK_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_INVALID_BLOCK_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_0_INVALID_BLOCK_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_0_INVALID_BLOCK_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_0_INVALID_BLOCK_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_INVALID_BLOCK_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_0_INVALID_BLOCK_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_INVALID_BLOCK_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_0_INVALID_BLOCK_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_0_INVALID_BLOCK_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_INVALID_BLOCK_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_INVALID_BLOCK_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_INVALID_BLOCK_MASK]
static inline bool GET_DLP_FIR_MASK_REG_0_INVALID_BLOCK_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_0_INVALID_BLOCK_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_INVALID_BLOCK_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_INVALID_BLOCK_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_INVALID_BLOCK_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_INVALID_BLOCK_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_INVALID_BLOCK_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_INVALID_BLOCK_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_INVALID_BLOCK_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_INVALID_BLOCK_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_INVALID_BLOCK_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_INVALID_BLOCK_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_INVALID_BLOCK_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_INVALID_BLOCK_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_INVALID_BLOCK_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_INVALID_BLOCK_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_1_INVALID_BLOCK_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_INVALID_BLOCK_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_INVALID_BLOCK_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_1_INVALID_BLOCK_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_1_INVALID_BLOCK_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_1_INVALID_BLOCK_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_INVALID_BLOCK_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_1_INVALID_BLOCK_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_INVALID_BLOCK_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_1_INVALID_BLOCK_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_1_INVALID_BLOCK_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_INVALID_BLOCK_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_INVALID_BLOCK_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_INVALID_BLOCK_MASK]
static inline bool GET_DLP_FIR_MASK_REG_1_INVALID_BLOCK_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_1_INVALID_BLOCK_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_INVALID_BLOCK_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_INVALID_BLOCK_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_DESKEW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_DESKEW_ERROR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_DESKEW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_DESKEW_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_DESKEW_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_DESKEW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_DESKEW_ERROR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_DESKEW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_DESKEW_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_DESKEW_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_DESKEW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_DESKEW_ERROR_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_0_DESKEW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_DESKEW_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_DESKEW_ERROR_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_0_DESKEW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_0_DESKEW_ERROR_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_0_DESKEW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_DESKEW_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_0_DESKEW_ERROR_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_DESKEW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_0_DESKEW_ERROR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_0_DESKEW_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_DESKEW_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_DESKEW_ERROR_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_DESKEW_ERROR_MASK]
static inline bool GET_DLP_FIR_MASK_REG_0_DESKEW_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_0_DESKEW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_DESKEW_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_DESKEW_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_DESKEW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_DESKEW_ERROR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_DESKEW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_DESKEW_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_DESKEW_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_DESKEW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_DESKEW_ERROR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_DESKEW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_DESKEW_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_DESKEW_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_DESKEW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_DESKEW_ERROR_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_1_DESKEW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_DESKEW_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_DESKEW_ERROR_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_1_DESKEW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_1_DESKEW_ERROR_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_1_DESKEW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_DESKEW_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_1_DESKEW_ERROR_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_DESKEW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_1_DESKEW_ERROR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_1_DESKEW_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_DESKEW_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_DESKEW_ERROR_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_DESKEW_ERROR_MASK]
static inline bool GET_DLP_FIR_MASK_REG_1_DESKEW_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_1_DESKEW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_DESKEW_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_DESKEW_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_DESKEW_OVERFLOW_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_DESKEW_OVERFLOW_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_DESKEW_OVERFLOW_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_DESKEW_OVERFLOW_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_DESKEW_OVERFLOW_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_DESKEW_OVERFLOW_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_DESKEW_OVERFLOW_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_DESKEW_OVERFLOW_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_DESKEW_OVERFLOW_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_DESKEW_OVERFLOW_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_DESKEW_OVERFLOW_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_DESKEW_OVERFLOW_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_0_DESKEW_OVERFLOW_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_DESKEW_OVERFLOW_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_DESKEW_OVERFLOW_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_0_DESKEW_OVERFLOW_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_0_DESKEW_OVERFLOW_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_0_DESKEW_OVERFLOW_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_DESKEW_OVERFLOW_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_0_DESKEW_OVERFLOW_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_DESKEW_OVERFLOW_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_0_DESKEW_OVERFLOW_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_0_DESKEW_OVERFLOW_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_DESKEW_OVERFLOW_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_DESKEW_OVERFLOW_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_DESKEW_OVERFLOW_MASK]
static inline bool GET_DLP_FIR_MASK_REG_0_DESKEW_OVERFLOW_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_0_DESKEW_OVERFLOW_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_DESKEW_OVERFLOW_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_DESKEW_OVERFLOW_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_DESKEW_OVERFLOW_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_DESKEW_OVERFLOW_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_DESKEW_OVERFLOW_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_DESKEW_OVERFLOW_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_DESKEW_OVERFLOW_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_DESKEW_OVERFLOW_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_DESKEW_OVERFLOW_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_DESKEW_OVERFLOW_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_DESKEW_OVERFLOW_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_DESKEW_OVERFLOW_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_DESKEW_OVERFLOW_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_DESKEW_OVERFLOW_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_1_DESKEW_OVERFLOW_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_DESKEW_OVERFLOW_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_DESKEW_OVERFLOW_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_1_DESKEW_OVERFLOW_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_1_DESKEW_OVERFLOW_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_1_DESKEW_OVERFLOW_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_DESKEW_OVERFLOW_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_1_DESKEW_OVERFLOW_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_DESKEW_OVERFLOW_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_1_DESKEW_OVERFLOW_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_1_DESKEW_OVERFLOW_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_DESKEW_OVERFLOW_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_DESKEW_OVERFLOW_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_DESKEW_OVERFLOW_MASK]
static inline bool GET_DLP_FIR_MASK_REG_1_DESKEW_OVERFLOW_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_1_DESKEW_OVERFLOW_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_DESKEW_OVERFLOW_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_DESKEW_OVERFLOW_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_SW_RETRAIN_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_SW_RETRAIN_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_SW_RETRAIN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_SW_RETRAIN_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_SW_RETRAIN_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_SW_RETRAIN_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_SW_RETRAIN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_SW_RETRAIN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_SW_RETRAIN_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_SW_RETRAIN_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_SW_RETRAIN_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_SW_RETRAIN_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_0_SW_RETRAIN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_SW_RETRAIN_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_SW_RETRAIN_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_0_SW_RETRAIN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_0_SW_RETRAIN_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_0_SW_RETRAIN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_SW_RETRAIN_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_0_SW_RETRAIN_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_SW_RETRAIN_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_0_SW_RETRAIN_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_0_SW_RETRAIN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_SW_RETRAIN_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_SW_RETRAIN_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_SW_RETRAIN_MASK]
static inline bool GET_DLP_FIR_MASK_REG_0_SW_RETRAIN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_0_SW_RETRAIN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_SW_RETRAIN_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_SW_RETRAIN_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_SW_RETRAIN_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_SW_RETRAIN_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_SW_RETRAIN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_SW_RETRAIN_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_SW_RETRAIN_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_SW_RETRAIN_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_SW_RETRAIN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_SW_RETRAIN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_SW_RETRAIN_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_SW_RETRAIN_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_SW_RETRAIN_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_SW_RETRAIN_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_1_SW_RETRAIN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_SW_RETRAIN_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_SW_RETRAIN_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_1_SW_RETRAIN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_1_SW_RETRAIN_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_1_SW_RETRAIN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_SW_RETRAIN_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_1_SW_RETRAIN_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_SW_RETRAIN_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_1_SW_RETRAIN_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_1_SW_RETRAIN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_SW_RETRAIN_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_SW_RETRAIN_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_SW_RETRAIN_MASK]
static inline bool GET_DLP_FIR_MASK_REG_1_SW_RETRAIN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_1_SW_RETRAIN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_SW_RETRAIN_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_SW_RETRAIN_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_ACK_QUEUE_OVERFLOW_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_ACK_QUEUE_OVERFLOW_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_ACK_QUEUE_OVERFLOW_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_ACK_QUEUE_OVERFLOW_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_ACK_QUEUE_OVERFLOW_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_ACK_QUEUE_OVERFLOW_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_ACK_QUEUE_OVERFLOW_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_ACK_QUEUE_OVERFLOW_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_ACK_QUEUE_OVERFLOW_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_ACK_QUEUE_OVERFLOW_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_ACK_QUEUE_OVERFLOW_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_ACK_QUEUE_OVERFLOW_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_0_ACK_QUEUE_OVERFLOW_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_ACK_QUEUE_OVERFLOW_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_ACK_QUEUE_OVERFLOW_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_0_ACK_QUEUE_OVERFLOW_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_0_ACK_QUEUE_OVERFLOW_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_0_ACK_QUEUE_OVERFLOW_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_ACK_QUEUE_OVERFLOW_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_0_ACK_QUEUE_OVERFLOW_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_ACK_QUEUE_OVERFLOW_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_0_ACK_QUEUE_OVERFLOW_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_0_ACK_QUEUE_OVERFLOW_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_ACK_QUEUE_OVERFLOW_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_ACK_QUEUE_OVERFLOW_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_ACK_QUEUE_OVERFLOW_MASK]
static inline bool GET_DLP_FIR_MASK_REG_0_ACK_QUEUE_OVERFLOW_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_0_ACK_QUEUE_OVERFLOW_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_ACK_QUEUE_OVERFLOW_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_ACK_QUEUE_OVERFLOW_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_ACK_QUEUE_OVERFLOW_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_ACK_QUEUE_OVERFLOW_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_ACK_QUEUE_OVERFLOW_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_ACK_QUEUE_OVERFLOW_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_ACK_QUEUE_OVERFLOW_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_ACK_QUEUE_OVERFLOW_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_ACK_QUEUE_OVERFLOW_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_ACK_QUEUE_OVERFLOW_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_ACK_QUEUE_OVERFLOW_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_ACK_QUEUE_OVERFLOW_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_ACK_QUEUE_OVERFLOW_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_ACK_QUEUE_OVERFLOW_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_1_ACK_QUEUE_OVERFLOW_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_ACK_QUEUE_OVERFLOW_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_ACK_QUEUE_OVERFLOW_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_1_ACK_QUEUE_OVERFLOW_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_1_ACK_QUEUE_OVERFLOW_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_1_ACK_QUEUE_OVERFLOW_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_ACK_QUEUE_OVERFLOW_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_1_ACK_QUEUE_OVERFLOW_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_ACK_QUEUE_OVERFLOW_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_1_ACK_QUEUE_OVERFLOW_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_1_ACK_QUEUE_OVERFLOW_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_ACK_QUEUE_OVERFLOW_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_ACK_QUEUE_OVERFLOW_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_ACK_QUEUE_OVERFLOW_MASK]
static inline bool GET_DLP_FIR_MASK_REG_1_ACK_QUEUE_OVERFLOW_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_1_ACK_QUEUE_OVERFLOW_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_ACK_QUEUE_OVERFLOW_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_ACK_QUEUE_OVERFLOW_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_ACK_QUEUE_UNDERFLOW_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_ACK_QUEUE_UNDERFLOW_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_ACK_QUEUE_UNDERFLOW_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_ACK_QUEUE_UNDERFLOW_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_ACK_QUEUE_UNDERFLOW_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_ACK_QUEUE_UNDERFLOW_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_ACK_QUEUE_UNDERFLOW_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_ACK_QUEUE_UNDERFLOW_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_ACK_QUEUE_UNDERFLOW_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_ACK_QUEUE_UNDERFLOW_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_ACK_QUEUE_UNDERFLOW_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_ACK_QUEUE_UNDERFLOW_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_0_ACK_QUEUE_UNDERFLOW_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_ACK_QUEUE_UNDERFLOW_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_ACK_QUEUE_UNDERFLOW_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_0_ACK_QUEUE_UNDERFLOW_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_0_ACK_QUEUE_UNDERFLOW_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_0_ACK_QUEUE_UNDERFLOW_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_ACK_QUEUE_UNDERFLOW_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_0_ACK_QUEUE_UNDERFLOW_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_ACK_QUEUE_UNDERFLOW_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_0_ACK_QUEUE_UNDERFLOW_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_0_ACK_QUEUE_UNDERFLOW_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_ACK_QUEUE_UNDERFLOW_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_ACK_QUEUE_UNDERFLOW_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_ACK_QUEUE_UNDERFLOW_MASK]
static inline bool GET_DLP_FIR_MASK_REG_0_ACK_QUEUE_UNDERFLOW_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_0_ACK_QUEUE_UNDERFLOW_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_ACK_QUEUE_UNDERFLOW_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_ACK_QUEUE_UNDERFLOW_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_ACK_QUEUE_UNDERFLOW_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_ACK_QUEUE_UNDERFLOW_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_ACK_QUEUE_UNDERFLOW_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_ACK_QUEUE_UNDERFLOW_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_ACK_QUEUE_UNDERFLOW_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_ACK_QUEUE_UNDERFLOW_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_ACK_QUEUE_UNDERFLOW_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_ACK_QUEUE_UNDERFLOW_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_ACK_QUEUE_UNDERFLOW_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_ACK_QUEUE_UNDERFLOW_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_ACK_QUEUE_UNDERFLOW_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_ACK_QUEUE_UNDERFLOW_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_1_ACK_QUEUE_UNDERFLOW_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_ACK_QUEUE_UNDERFLOW_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_ACK_QUEUE_UNDERFLOW_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_1_ACK_QUEUE_UNDERFLOW_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_1_ACK_QUEUE_UNDERFLOW_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_1_ACK_QUEUE_UNDERFLOW_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_ACK_QUEUE_UNDERFLOW_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_1_ACK_QUEUE_UNDERFLOW_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_ACK_QUEUE_UNDERFLOW_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_1_ACK_QUEUE_UNDERFLOW_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_1_ACK_QUEUE_UNDERFLOW_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_ACK_QUEUE_UNDERFLOW_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_ACK_QUEUE_UNDERFLOW_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_ACK_QUEUE_UNDERFLOW_MASK]
static inline bool GET_DLP_FIR_MASK_REG_1_ACK_QUEUE_UNDERFLOW_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_1_ACK_QUEUE_UNDERFLOW_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_ACK_QUEUE_UNDERFLOW_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_ACK_QUEUE_UNDERFLOW_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_NUM_REPLAY_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_NUM_REPLAY_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_NUM_REPLAY_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_NUM_REPLAY_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_NUM_REPLAY_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_NUM_REPLAY_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_NUM_REPLAY_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_NUM_REPLAY_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_NUM_REPLAY_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_NUM_REPLAY_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_NUM_REPLAY_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_NUM_REPLAY_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_0_NUM_REPLAY_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_NUM_REPLAY_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_NUM_REPLAY_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_0_NUM_REPLAY_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_0_NUM_REPLAY_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_0_NUM_REPLAY_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_NUM_REPLAY_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_0_NUM_REPLAY_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_NUM_REPLAY_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_0_NUM_REPLAY_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_0_NUM_REPLAY_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_NUM_REPLAY_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_NUM_REPLAY_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_NUM_REPLAY_MASK]
static inline bool GET_DLP_FIR_MASK_REG_0_NUM_REPLAY_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_0_NUM_REPLAY_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_NUM_REPLAY_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_NUM_REPLAY_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_NUM_REPLAY_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_NUM_REPLAY_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_NUM_REPLAY_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_NUM_REPLAY_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_NUM_REPLAY_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_NUM_REPLAY_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_NUM_REPLAY_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_NUM_REPLAY_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_NUM_REPLAY_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_NUM_REPLAY_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_NUM_REPLAY_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_NUM_REPLAY_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_1_NUM_REPLAY_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_NUM_REPLAY_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_NUM_REPLAY_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_1_NUM_REPLAY_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_1_NUM_REPLAY_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_1_NUM_REPLAY_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_NUM_REPLAY_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_1_NUM_REPLAY_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_NUM_REPLAY_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_1_NUM_REPLAY_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_1_NUM_REPLAY_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_NUM_REPLAY_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_NUM_REPLAY_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_NUM_REPLAY_MASK]
static inline bool GET_DLP_FIR_MASK_REG_1_NUM_REPLAY_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_1_NUM_REPLAY_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_NUM_REPLAY_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_NUM_REPLAY_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_TRAINING_SET_RECEIVED_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_TRAINING_SET_RECEIVED_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_TRAINING_SET_RECEIVED_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_TRAINING_SET_RECEIVED_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_TRAINING_SET_RECEIVED_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_TRAINING_SET_RECEIVED_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_TRAINING_SET_RECEIVED_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_TRAINING_SET_RECEIVED_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_TRAINING_SET_RECEIVED_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_TRAINING_SET_RECEIVED_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_TRAINING_SET_RECEIVED_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_TRAINING_SET_RECEIVED_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_0_TRAINING_SET_RECEIVED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_TRAINING_SET_RECEIVED_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_TRAINING_SET_RECEIVED_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_0_TRAINING_SET_RECEIVED_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_0_TRAINING_SET_RECEIVED_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_0_TRAINING_SET_RECEIVED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_TRAINING_SET_RECEIVED_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_0_TRAINING_SET_RECEIVED_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_TRAINING_SET_RECEIVED_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_0_TRAINING_SET_RECEIVED_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_0_TRAINING_SET_RECEIVED_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_TRAINING_SET_RECEIVED_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_TRAINING_SET_RECEIVED_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_TRAINING_SET_RECEIVED_MASK]
static inline bool GET_DLP_FIR_MASK_REG_0_TRAINING_SET_RECEIVED_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_0_TRAINING_SET_RECEIVED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_TRAINING_SET_RECEIVED_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_TRAINING_SET_RECEIVED_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_TRAINING_SET_RECEIVED_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_TRAINING_SET_RECEIVED_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_TRAINING_SET_RECEIVED_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_TRAINING_SET_RECEIVED_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_TRAINING_SET_RECEIVED_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_TRAINING_SET_RECEIVED_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_TRAINING_SET_RECEIVED_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_TRAINING_SET_RECEIVED_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_TRAINING_SET_RECEIVED_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_TRAINING_SET_RECEIVED_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_TRAINING_SET_RECEIVED_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_TRAINING_SET_RECEIVED_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_1_TRAINING_SET_RECEIVED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_TRAINING_SET_RECEIVED_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_TRAINING_SET_RECEIVED_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_1_TRAINING_SET_RECEIVED_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_1_TRAINING_SET_RECEIVED_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_1_TRAINING_SET_RECEIVED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_TRAINING_SET_RECEIVED_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_1_TRAINING_SET_RECEIVED_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_TRAINING_SET_RECEIVED_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_1_TRAINING_SET_RECEIVED_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_1_TRAINING_SET_RECEIVED_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_TRAINING_SET_RECEIVED_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_TRAINING_SET_RECEIVED_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_TRAINING_SET_RECEIVED_MASK]
static inline bool GET_DLP_FIR_MASK_REG_1_TRAINING_SET_RECEIVED_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_1_TRAINING_SET_RECEIVED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_TRAINING_SET_RECEIVED_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_TRAINING_SET_RECEIVED_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_PRBS_SELECT_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_PRBS_SELECT_ERROR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_PRBS_SELECT_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_PRBS_SELECT_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_PRBS_SELECT_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_PRBS_SELECT_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_PRBS_SELECT_ERROR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_PRBS_SELECT_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_PRBS_SELECT_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_PRBS_SELECT_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_PRBS_SELECT_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_PRBS_SELECT_ERROR_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_0_PRBS_SELECT_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_PRBS_SELECT_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_PRBS_SELECT_ERROR_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_0_PRBS_SELECT_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_0_PRBS_SELECT_ERROR_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_0_PRBS_SELECT_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_PRBS_SELECT_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_0_PRBS_SELECT_ERROR_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_PRBS_SELECT_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_0_PRBS_SELECT_ERROR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_0_PRBS_SELECT_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_PRBS_SELECT_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_PRBS_SELECT_ERROR_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_PRBS_SELECT_ERROR_MASK]
static inline bool GET_DLP_FIR_MASK_REG_0_PRBS_SELECT_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_0_PRBS_SELECT_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_PRBS_SELECT_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_PRBS_SELECT_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_PRBS_SELECT_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_PRBS_SELECT_ERROR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_PRBS_SELECT_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_PRBS_SELECT_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_PRBS_SELECT_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_PRBS_SELECT_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_PRBS_SELECT_ERROR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_PRBS_SELECT_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_PRBS_SELECT_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_PRBS_SELECT_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_PRBS_SELECT_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_PRBS_SELECT_ERROR_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_1_PRBS_SELECT_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_PRBS_SELECT_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_PRBS_SELECT_ERROR_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_1_PRBS_SELECT_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_1_PRBS_SELECT_ERROR_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_1_PRBS_SELECT_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_PRBS_SELECT_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_1_PRBS_SELECT_ERROR_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_PRBS_SELECT_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_1_PRBS_SELECT_ERROR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_1_PRBS_SELECT_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_PRBS_SELECT_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_PRBS_SELECT_ERROR_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_PRBS_SELECT_ERROR_MASK]
static inline bool GET_DLP_FIR_MASK_REG_1_PRBS_SELECT_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_1_PRBS_SELECT_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_PRBS_SELECT_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_PRBS_SELECT_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_TCOMPLETE_BAD_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_TCOMPLETE_BAD_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_TCOMPLETE_BAD_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_TCOMPLETE_BAD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_TCOMPLETE_BAD_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_TCOMPLETE_BAD_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_TCOMPLETE_BAD_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_TCOMPLETE_BAD_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_TCOMPLETE_BAD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_TCOMPLETE_BAD_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_TCOMPLETE_BAD_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_TCOMPLETE_BAD_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_0_TCOMPLETE_BAD_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_TCOMPLETE_BAD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_TCOMPLETE_BAD_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_0_TCOMPLETE_BAD_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_0_TCOMPLETE_BAD_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_0_TCOMPLETE_BAD_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_TCOMPLETE_BAD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_0_TCOMPLETE_BAD_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_TCOMPLETE_BAD_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_0_TCOMPLETE_BAD_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_0_TCOMPLETE_BAD_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_TCOMPLETE_BAD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_TCOMPLETE_BAD_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_TCOMPLETE_BAD_MASK]
static inline bool GET_DLP_FIR_MASK_REG_0_TCOMPLETE_BAD_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_0_TCOMPLETE_BAD_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_TCOMPLETE_BAD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_TCOMPLETE_BAD_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_TCOMPLETE_BAD_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_TCOMPLETE_BAD_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_TCOMPLETE_BAD_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_TCOMPLETE_BAD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_TCOMPLETE_BAD_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_TCOMPLETE_BAD_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_TCOMPLETE_BAD_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_TCOMPLETE_BAD_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_TCOMPLETE_BAD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_TCOMPLETE_BAD_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_TCOMPLETE_BAD_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_TCOMPLETE_BAD_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_1_TCOMPLETE_BAD_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_TCOMPLETE_BAD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_TCOMPLETE_BAD_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_1_TCOMPLETE_BAD_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_1_TCOMPLETE_BAD_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_1_TCOMPLETE_BAD_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_TCOMPLETE_BAD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_1_TCOMPLETE_BAD_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_TCOMPLETE_BAD_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_1_TCOMPLETE_BAD_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_1_TCOMPLETE_BAD_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_TCOMPLETE_BAD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_TCOMPLETE_BAD_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_TCOMPLETE_BAD_MASK]
static inline bool GET_DLP_FIR_MASK_REG_1_TCOMPLETE_BAD_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_1_TCOMPLETE_BAD_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_TCOMPLETE_BAD_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_TCOMPLETE_BAD_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_NO_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_NO_SPARE_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_NO_SPARE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_NO_SPARE_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_NO_SPARE_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_NO_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_NO_SPARE_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_NO_SPARE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_NO_SPARE_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_NO_SPARE_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_NO_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_NO_SPARE_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_0_NO_SPARE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_NO_SPARE_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_NO_SPARE_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_0_NO_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_0_NO_SPARE_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_0_NO_SPARE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_NO_SPARE_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_0_NO_SPARE_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_NO_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_0_NO_SPARE_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_0_NO_SPARE_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_NO_SPARE_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_NO_SPARE_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_NO_SPARE_MASK]
static inline bool GET_DLP_FIR_MASK_REG_0_NO_SPARE_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_0_NO_SPARE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_NO_SPARE_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_NO_SPARE_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_NO_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_NO_SPARE_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_NO_SPARE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_NO_SPARE_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_NO_SPARE_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_NO_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_NO_SPARE_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_NO_SPARE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_NO_SPARE_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_NO_SPARE_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_NO_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_NO_SPARE_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_1_NO_SPARE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_NO_SPARE_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_NO_SPARE_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_1_NO_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_1_NO_SPARE_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_1_NO_SPARE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_NO_SPARE_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_1_NO_SPARE_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_NO_SPARE_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_1_NO_SPARE_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_1_NO_SPARE_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_NO_SPARE_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_NO_SPARE_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_NO_SPARE_MASK]
static inline bool GET_DLP_FIR_MASK_REG_1_NO_SPARE_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_1_NO_SPARE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_NO_SPARE_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_NO_SPARE_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_SPARE_DONE_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_SPARE_DONE_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_SPARE_DONE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_SPARE_DONE_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_SPARE_DONE_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_SPARE_DONE_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_SPARE_DONE_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_SPARE_DONE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_SPARE_DONE_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_SPARE_DONE_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_SPARE_DONE_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_SPARE_DONE_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_0_SPARE_DONE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_SPARE_DONE_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_SPARE_DONE_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_0_SPARE_DONE_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_0_SPARE_DONE_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_0_SPARE_DONE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_SPARE_DONE_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_0_SPARE_DONE_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_SPARE_DONE_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_0_SPARE_DONE_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_0_SPARE_DONE_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_SPARE_DONE_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_SPARE_DONE_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_SPARE_DONE_MASK]
static inline bool GET_DLP_FIR_MASK_REG_0_SPARE_DONE_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_0_SPARE_DONE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_SPARE_DONE_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_SPARE_DONE_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_SPARE_DONE_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_SPARE_DONE_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_SPARE_DONE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_SPARE_DONE_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_SPARE_DONE_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_SPARE_DONE_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_SPARE_DONE_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_SPARE_DONE_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_SPARE_DONE_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_SPARE_DONE_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_SPARE_DONE_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_SPARE_DONE_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_1_SPARE_DONE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_SPARE_DONE_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_SPARE_DONE_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_1_SPARE_DONE_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_1_SPARE_DONE_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_1_SPARE_DONE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_SPARE_DONE_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_1_SPARE_DONE_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_SPARE_DONE_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_1_SPARE_DONE_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_1_SPARE_DONE_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_SPARE_DONE_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_SPARE_DONE_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_SPARE_DONE_MASK]
static inline bool GET_DLP_FIR_MASK_REG_1_SPARE_DONE_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_1_SPARE_DONE_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_SPARE_DONE_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_SPARE_DONE_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_TOO_MANY_CRC_ERRORS_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_TOO_MANY_CRC_ERRORS_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_TOO_MANY_CRC_ERRORS_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_TOO_MANY_CRC_ERRORS_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_TOO_MANY_CRC_ERRORS_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_TOO_MANY_CRC_ERRORS_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_TOO_MANY_CRC_ERRORS_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_TOO_MANY_CRC_ERRORS_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_TOO_MANY_CRC_ERRORS_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_TOO_MANY_CRC_ERRORS_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_TOO_MANY_CRC_ERRORS_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_TOO_MANY_CRC_ERRORS_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_0_TOO_MANY_CRC_ERRORS_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_TOO_MANY_CRC_ERRORS_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_TOO_MANY_CRC_ERRORS_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_0_TOO_MANY_CRC_ERRORS_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_0_TOO_MANY_CRC_ERRORS_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_0_TOO_MANY_CRC_ERRORS_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_TOO_MANY_CRC_ERRORS_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_0_TOO_MANY_CRC_ERRORS_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_TOO_MANY_CRC_ERRORS_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_0_TOO_MANY_CRC_ERRORS_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_0_TOO_MANY_CRC_ERRORS_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_TOO_MANY_CRC_ERRORS_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_TOO_MANY_CRC_ERRORS_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_TOO_MANY_CRC_ERRORS_MASK]
static inline bool GET_DLP_FIR_MASK_REG_0_TOO_MANY_CRC_ERRORS_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_0_TOO_MANY_CRC_ERRORS_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_TOO_MANY_CRC_ERRORS_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_TOO_MANY_CRC_ERRORS_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_TOO_MANY_CRC_ERRORS_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_TOO_MANY_CRC_ERRORS_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_TOO_MANY_CRC_ERRORS_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_TOO_MANY_CRC_ERRORS_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_TOO_MANY_CRC_ERRORS_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_TOO_MANY_CRC_ERRORS_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_TOO_MANY_CRC_ERRORS_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_TOO_MANY_CRC_ERRORS_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_TOO_MANY_CRC_ERRORS_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_TOO_MANY_CRC_ERRORS_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_TOO_MANY_CRC_ERRORS_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_TOO_MANY_CRC_ERRORS_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_1_TOO_MANY_CRC_ERRORS_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_TOO_MANY_CRC_ERRORS_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_TOO_MANY_CRC_ERRORS_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_1_TOO_MANY_CRC_ERRORS_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_1_TOO_MANY_CRC_ERRORS_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_1_TOO_MANY_CRC_ERRORS_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_TOO_MANY_CRC_ERRORS_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_1_TOO_MANY_CRC_ERRORS_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_TOO_MANY_CRC_ERRORS_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_1_TOO_MANY_CRC_ERRORS_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_1_TOO_MANY_CRC_ERRORS_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_TOO_MANY_CRC_ERRORS_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_TOO_MANY_CRC_ERRORS_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_TOO_MANY_CRC_ERRORS_MASK]
static inline bool GET_DLP_FIR_MASK_REG_1_TOO_MANY_CRC_ERRORS_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_1_TOO_MANY_CRC_ERRORS_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_TOO_MANY_CRC_ERRORS_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_TOO_MANY_CRC_ERRORS_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_NPU_DLX_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_NPU_DLX_ERROR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_NPU_DLX_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_NPU_DLX_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_NPU_DLX_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_NPU_DLX_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_NPU_DLX_ERROR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_NPU_DLX_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_NPU_DLX_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_NPU_DLX_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_NPU_DLX_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_NPU_DLX_ERROR_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_0_NPU_DLX_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_NPU_DLX_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_NPU_DLX_ERROR_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_0_NPU_DLX_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_0_NPU_DLX_ERROR_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_0_NPU_DLX_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_NPU_DLX_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_0_NPU_DLX_ERROR_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_NPU_DLX_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_0_NPU_DLX_ERROR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_0_NPU_DLX_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_NPU_DLX_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_NPU_DLX_ERROR_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_NPU_DLX_ERROR_MASK]
static inline bool GET_DLP_FIR_MASK_REG_0_NPU_DLX_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_0_NPU_DLX_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_NPU_DLX_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_NPU_DLX_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_NPU_DLX_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_NPU_DLX_ERROR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_NPU_DLX_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_NPU_DLX_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_NPU_DLX_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_NPU_DLX_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_NPU_DLX_ERROR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_NPU_DLX_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_NPU_DLX_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_NPU_DLX_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_NPU_DLX_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_NPU_DLX_ERROR_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_1_NPU_DLX_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_NPU_DLX_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_NPU_DLX_ERROR_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_1_NPU_DLX_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_1_NPU_DLX_ERROR_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_1_NPU_DLX_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_NPU_DLX_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_1_NPU_DLX_ERROR_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_NPU_DLX_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_1_NPU_DLX_ERROR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_1_NPU_DLX_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_NPU_DLX_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_NPU_DLX_ERROR_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_NPU_DLX_ERROR_MASK]
static inline bool GET_DLP_FIR_MASK_REG_1_NPU_DLX_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_1_NPU_DLX_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_NPU_DLX_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_NPU_DLX_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_OSC_SWITCH_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_OSC_SWITCH_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_OSC_SWITCH_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_OSC_SWITCH_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_OSC_SWITCH_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_OSC_SWITCH_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_OSC_SWITCH_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_OSC_SWITCH_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_OSC_SWITCH_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_OSC_SWITCH_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_OSC_SWITCH_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_OSC_SWITCH_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_0_OSC_SWITCH_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_OSC_SWITCH_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_OSC_SWITCH_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_0_OSC_SWITCH_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_0_OSC_SWITCH_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_0_OSC_SWITCH_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_OSC_SWITCH_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_0_OSC_SWITCH_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_OSC_SWITCH_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_0_OSC_SWITCH_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_0_OSC_SWITCH_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_OSC_SWITCH_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_OSC_SWITCH_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_OSC_SWITCH_MASK]
static inline bool GET_DLP_FIR_MASK_REG_0_OSC_SWITCH_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_0_OSC_SWITCH_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_OSC_SWITCH_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_OSC_SWITCH_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_OSC_SWITCH_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_OSC_SWITCH_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_OSC_SWITCH_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_OSC_SWITCH_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_OSC_SWITCH_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_OSC_SWITCH_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_OSC_SWITCH_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_OSC_SWITCH_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_OSC_SWITCH_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_OSC_SWITCH_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_OSC_SWITCH_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_OSC_SWITCH_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_1_OSC_SWITCH_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_OSC_SWITCH_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_OSC_SWITCH_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_1_OSC_SWITCH_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_1_OSC_SWITCH_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_1_OSC_SWITCH_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_OSC_SWITCH_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_1_OSC_SWITCH_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_OSC_SWITCH_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_1_OSC_SWITCH_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_1_OSC_SWITCH_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_OSC_SWITCH_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_OSC_SWITCH_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_OSC_SWITCH_MASK]
static inline bool GET_DLP_FIR_MASK_REG_1_OSC_SWITCH_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_1_OSC_SWITCH_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_OSC_SWITCH_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_OSC_SWITCH_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_CORRECTABLE_ARRAY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_CORRECTABLE_ARRAY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_CORRECTABLE_ARRAY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_CORRECTABLE_ARRAY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_CORRECTABLE_ARRAY_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_CORRECTABLE_ARRAY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_CORRECTABLE_ARRAY_ERROR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_CORRECTABLE_ARRAY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_CORRECTABLE_ARRAY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_CORRECTABLE_ARRAY_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_CORRECTABLE_ARRAY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_CORRECTABLE_ARRAY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_0_CORRECTABLE_ARRAY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_CORRECTABLE_ARRAY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_CORRECTABLE_ARRAY_ERROR_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_0_CORRECTABLE_ARRAY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_0_CORRECTABLE_ARRAY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_0_CORRECTABLE_ARRAY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_CORRECTABLE_ARRAY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_0_CORRECTABLE_ARRAY_ERROR_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_CORRECTABLE_ARRAY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_0_CORRECTABLE_ARRAY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_0_CORRECTABLE_ARRAY_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_CORRECTABLE_ARRAY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_CORRECTABLE_ARRAY_ERROR_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_CORRECTABLE_ARRAY_ERROR_MASK]
static inline bool GET_DLP_FIR_MASK_REG_0_CORRECTABLE_ARRAY_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_0_CORRECTABLE_ARRAY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_CORRECTABLE_ARRAY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_CORRECTABLE_ARRAY_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_CORRECTABLE_ARRAY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_CORRECTABLE_ARRAY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_CORRECTABLE_ARRAY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_CORRECTABLE_ARRAY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_CORRECTABLE_ARRAY_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_CORRECTABLE_ARRAY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_CORRECTABLE_ARRAY_ERROR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_CORRECTABLE_ARRAY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_CORRECTABLE_ARRAY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_CORRECTABLE_ARRAY_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_CORRECTABLE_ARRAY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_CORRECTABLE_ARRAY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_1_CORRECTABLE_ARRAY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_CORRECTABLE_ARRAY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_CORRECTABLE_ARRAY_ERROR_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_1_CORRECTABLE_ARRAY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_1_CORRECTABLE_ARRAY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_1_CORRECTABLE_ARRAY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_CORRECTABLE_ARRAY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_1_CORRECTABLE_ARRAY_ERROR_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_CORRECTABLE_ARRAY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_1_CORRECTABLE_ARRAY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_1_CORRECTABLE_ARRAY_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_CORRECTABLE_ARRAY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_CORRECTABLE_ARRAY_ERROR_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_CORRECTABLE_ARRAY_ERROR_MASK]
static inline bool GET_DLP_FIR_MASK_REG_1_CORRECTABLE_ARRAY_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_1_CORRECTABLE_ARRAY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_CORRECTABLE_ARRAY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_CORRECTABLE_ARRAY_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_UNCORRECTABLE_ARRAY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_UNCORRECTABLE_ARRAY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_UNCORRECTABLE_ARRAY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_UNCORRECTABLE_ARRAY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_UNCORRECTABLE_ARRAY_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_UNCORRECTABLE_ARRAY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_UNCORRECTABLE_ARRAY_ERROR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_UNCORRECTABLE_ARRAY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_UNCORRECTABLE_ARRAY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_UNCORRECTABLE_ARRAY_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_UNCORRECTABLE_ARRAY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_UNCORRECTABLE_ARRAY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_0_UNCORRECTABLE_ARRAY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_UNCORRECTABLE_ARRAY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_UNCORRECTABLE_ARRAY_ERROR_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_0_UNCORRECTABLE_ARRAY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_0_UNCORRECTABLE_ARRAY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_0_UNCORRECTABLE_ARRAY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_UNCORRECTABLE_ARRAY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_0_UNCORRECTABLE_ARRAY_ERROR_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_UNCORRECTABLE_ARRAY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_0_UNCORRECTABLE_ARRAY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_0_UNCORRECTABLE_ARRAY_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_UNCORRECTABLE_ARRAY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_UNCORRECTABLE_ARRAY_ERROR_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_UNCORRECTABLE_ARRAY_ERROR_MASK]
static inline bool GET_DLP_FIR_MASK_REG_0_UNCORRECTABLE_ARRAY_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_0_UNCORRECTABLE_ARRAY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_UNCORRECTABLE_ARRAY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_UNCORRECTABLE_ARRAY_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_UNCORRECTABLE_ARRAY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_UNCORRECTABLE_ARRAY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_UNCORRECTABLE_ARRAY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_UNCORRECTABLE_ARRAY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_UNCORRECTABLE_ARRAY_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_UNCORRECTABLE_ARRAY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_UNCORRECTABLE_ARRAY_ERROR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_UNCORRECTABLE_ARRAY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_UNCORRECTABLE_ARRAY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_UNCORRECTABLE_ARRAY_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_UNCORRECTABLE_ARRAY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_UNCORRECTABLE_ARRAY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_1_UNCORRECTABLE_ARRAY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_UNCORRECTABLE_ARRAY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_UNCORRECTABLE_ARRAY_ERROR_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_1_UNCORRECTABLE_ARRAY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_1_UNCORRECTABLE_ARRAY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_1_UNCORRECTABLE_ARRAY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_UNCORRECTABLE_ARRAY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_1_UNCORRECTABLE_ARRAY_ERROR_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_UNCORRECTABLE_ARRAY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_1_UNCORRECTABLE_ARRAY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_1_UNCORRECTABLE_ARRAY_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_UNCORRECTABLE_ARRAY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_UNCORRECTABLE_ARRAY_ERROR_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_UNCORRECTABLE_ARRAY_ERROR_MASK]
static inline bool GET_DLP_FIR_MASK_REG_1_UNCORRECTABLE_ARRAY_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_1_UNCORRECTABLE_ARRAY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_UNCORRECTABLE_ARRAY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_UNCORRECTABLE_ARRAY_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_TRAINING_FAILED_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_TRAINING_FAILED_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_TRAINING_FAILED_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_TRAINING_FAILED_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_TRAINING_FAILED_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_TRAINING_FAILED_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_TRAINING_FAILED_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_TRAINING_FAILED_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_TRAINING_FAILED_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_TRAINING_FAILED_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_TRAINING_FAILED_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_TRAINING_FAILED_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_0_TRAINING_FAILED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_TRAINING_FAILED_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_TRAINING_FAILED_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_0_TRAINING_FAILED_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_0_TRAINING_FAILED_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_0_TRAINING_FAILED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_TRAINING_FAILED_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_0_TRAINING_FAILED_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_TRAINING_FAILED_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_0_TRAINING_FAILED_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_0_TRAINING_FAILED_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_TRAINING_FAILED_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_TRAINING_FAILED_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_TRAINING_FAILED_MASK]
static inline bool GET_DLP_FIR_MASK_REG_0_TRAINING_FAILED_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_0_TRAINING_FAILED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_TRAINING_FAILED_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_TRAINING_FAILED_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_TRAINING_FAILED_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_TRAINING_FAILED_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_TRAINING_FAILED_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_TRAINING_FAILED_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_TRAINING_FAILED_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_TRAINING_FAILED_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_TRAINING_FAILED_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_TRAINING_FAILED_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_TRAINING_FAILED_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_TRAINING_FAILED_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_TRAINING_FAILED_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_TRAINING_FAILED_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_1_TRAINING_FAILED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_TRAINING_FAILED_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_TRAINING_FAILED_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_1_TRAINING_FAILED_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_1_TRAINING_FAILED_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_1_TRAINING_FAILED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_TRAINING_FAILED_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_1_TRAINING_FAILED_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_TRAINING_FAILED_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_1_TRAINING_FAILED_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_1_TRAINING_FAILED_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_TRAINING_FAILED_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_TRAINING_FAILED_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_TRAINING_FAILED_MASK]
static inline bool GET_DLP_FIR_MASK_REG_1_TRAINING_FAILED_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_1_TRAINING_FAILED_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_TRAINING_FAILED_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_TRAINING_FAILED_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_UNRECOVERABLE_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_UNRECOVERABLE_ERROR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_UNRECOVERABLE_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_UNRECOVERABLE_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_UNRECOVERABLE_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_UNRECOVERABLE_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_UNRECOVERABLE_ERROR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_UNRECOVERABLE_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_UNRECOVERABLE_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_UNRECOVERABLE_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_UNRECOVERABLE_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_UNRECOVERABLE_ERROR_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_0_UNRECOVERABLE_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_UNRECOVERABLE_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_UNRECOVERABLE_ERROR_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_0_UNRECOVERABLE_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_0_UNRECOVERABLE_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_0_UNRECOVERABLE_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_UNRECOVERABLE_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_0_UNRECOVERABLE_ERROR_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_UNRECOVERABLE_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_0_UNRECOVERABLE_ERROR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_0_UNRECOVERABLE_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_UNRECOVERABLE_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_UNRECOVERABLE_ERROR_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_UNRECOVERABLE_ERROR_MASK]
static inline bool GET_DLP_FIR_MASK_REG_0_UNRECOVERABLE_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_0_UNRECOVERABLE_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_UNRECOVERABLE_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_UNRECOVERABLE_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_UNRECOVERABLE_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_UNRECOVERABLE_ERROR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_UNRECOVERABLE_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_UNRECOVERABLE_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_UNRECOVERABLE_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_UNRECOVERABLE_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_UNRECOVERABLE_ERROR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_UNRECOVERABLE_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_UNRECOVERABLE_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_UNRECOVERABLE_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_UNRECOVERABLE_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_UNRECOVERABLE_ERROR_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_1_UNRECOVERABLE_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_UNRECOVERABLE_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_UNRECOVERABLE_ERROR_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_1_UNRECOVERABLE_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_1_UNRECOVERABLE_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_1_UNRECOVERABLE_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_UNRECOVERABLE_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_1_UNRECOVERABLE_ERROR_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_UNRECOVERABLE_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_1_UNRECOVERABLE_ERROR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_1_UNRECOVERABLE_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_UNRECOVERABLE_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_UNRECOVERABLE_ERROR_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_UNRECOVERABLE_ERROR_MASK]
static inline bool GET_DLP_FIR_MASK_REG_1_UNRECOVERABLE_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_1_UNRECOVERABLE_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_UNRECOVERABLE_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_UNRECOVERABLE_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_INTERNAL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_INTERNAL_ERROR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_INTERNAL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_INTERNAL_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_INTERNAL_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_INTERNAL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_INTERNAL_ERROR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_0_INTERNAL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_INTERNAL_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_INTERNAL_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_0_INTERNAL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_0_INTERNAL_ERROR_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_0_INTERNAL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_INTERNAL_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_0_INTERNAL_ERROR_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_0_INTERNAL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_0_INTERNAL_ERROR_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_0_INTERNAL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_INTERNAL_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_0_INTERNAL_ERROR_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_INTERNAL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_0_INTERNAL_ERROR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_0_INTERNAL_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_INTERNAL_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_INTERNAL_ERROR_MASK]

//>> GET_[DLP_FIR_MASK_REG_0_INTERNAL_ERROR_MASK]
static inline bool GET_DLP_FIR_MASK_REG_0_INTERNAL_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_0_INTERNAL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_0_INTERNAL_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_0_INTERNAL_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_INTERNAL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_INTERNAL_ERROR_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_INTERNAL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_INTERNAL_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_INTERNAL_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_INTERNAL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_INTERNAL_ERROR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<DLP_FIR_MASK_REG_1_INTERNAL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_INTERNAL_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_INTERNAL_ERROR_MASK]

//>> SET_[DLP_FIR_MASK_REG_1_INTERNAL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_DLP_FIR_MASK_REG_1_INTERNAL_ERROR_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<DLP_FIR_MASK_REG_1_INTERNAL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_INTERNAL_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_FIR_MASK_REG_1_INTERNAL_ERROR_MASK]

//>> CLEAR_[DLP_FIR_MASK_REG_1_INTERNAL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_FIR_MASK_REG_1_INTERNAL_ERROR_MASK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<DLP_FIR_MASK_REG_1_INTERNAL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_INTERNAL_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_FIR_MASK_REG_1_INTERNAL_ERROR_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_INTERNAL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_DLP_FIR_MASK_REG_1_INTERNAL_ERROR_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<DLP_FIR_MASK_REG_1_INTERNAL_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_INTERNAL_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_INTERNAL_ERROR_MASK]

//>> GET_[DLP_FIR_MASK_REG_1_INTERNAL_ERROR_MASK]
static inline bool GET_DLP_FIR_MASK_REG_1_INTERNAL_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_FIR_MASK_REG_RW, DLP_FIR_MASK_REG_WO_AND, DLP_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<DLP_FIR_MASK_REG_1_INTERNAL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_FIR_MASK_REG_1_INTERNAL_ERROR_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_FIR_MASK_REG_1_INTERNAL_ERROR_MASK]

//>> PREP_[DLP_LINK1_ERROR_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_DLP_LINK1_ERROR_STATUS(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = DLP_LINK1_ERROR_STATUS;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[DLP_LINK1_ERROR_STATUS]

//>> GET_[DLP_LINK1_ERROR_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_DLP_LINK1_ERROR_STATUS(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = DLP_LINK1_ERROR_STATUS;
#endif
    return fapi2::getScom(i_target, DLP_LINK1_ERROR_STATUS, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[DLP_LINK1_ERROR_STATUS]

//>> PUT_[DLP_LINK1_ERROR_STATUS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_DLP_LINK1_ERROR_STATUS(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(DLP_LINK1_ERROR_STATUS));
#endif
    return fapi2::putScom(i_target, DLP_LINK1_ERROR_STATUS, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[DLP_LINK1_ERROR_STATUS]


//>> SET_[DLP_LINK1_ERROR_STATUS_LINK1_RESET_KEEPER]
static inline fapi2::buffer<uint64_t>& SET_DLP_LINK1_ERROR_STATUS_LINK1_RESET_KEEPER(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_ERROR_STATUS));
#endif
    return o_data.insertFromRight<DLP_LINK1_ERROR_STATUS_LINK1_RESET_KEEPER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_LINK1_ERROR_STATUS_LINK1_RESET_KEEPER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_LINK1_ERROR_STATUS_LINK1_RESET_KEEPER]

//>> SET_[DLP_LINK1_ERROR_STATUS_LINK1_RESET_KEEPER]
static inline fapi2::buffer<uint64_t>& SET_DLP_LINK1_ERROR_STATUS_LINK1_RESET_KEEPER(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_ERROR_STATUS));
#endif
    return o_data.insertFromRight<DLP_LINK1_ERROR_STATUS_LINK1_RESET_KEEPER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_LINK1_ERROR_STATUS_LINK1_RESET_KEEPER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_LINK1_ERROR_STATUS_LINK1_RESET_KEEPER]

//>> SET_[DLP_LINK1_ERROR_STATUS_LINK1_RESET_KEEPER]
static inline fapi2::buffer<uint64_t>& SET_DLP_LINK1_ERROR_STATUS_LINK1_RESET_KEEPER(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_ERROR_STATUS));
#endif
    return o_data.setBit<DLP_LINK1_ERROR_STATUS_LINK1_RESET_KEEPER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_LINK1_ERROR_STATUS_LINK1_RESET_KEEPER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_LINK1_ERROR_STATUS_LINK1_RESET_KEEPER]

//>> CLEAR_[DLP_LINK1_ERROR_STATUS_LINK1_RESET_KEEPER]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_LINK1_ERROR_STATUS_LINK1_RESET_KEEPER(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_ERROR_STATUS));
#endif
    return o_data.clearBit<DLP_LINK1_ERROR_STATUS_LINK1_RESET_KEEPER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_LINK1_ERROR_STATUS_LINK1_RESET_KEEPER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_LINK1_ERROR_STATUS_LINK1_RESET_KEEPER]

//>> GET_[DLP_LINK1_ERROR_STATUS_LINK1_RESET_KEEPER]
static inline fapi2::buffer<uint64_t>& GET_DLP_LINK1_ERROR_STATUS_LINK1_RESET_KEEPER(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_ERROR_STATUS));
#endif
    return i_data.extractToRight<DLP_LINK1_ERROR_STATUS_LINK1_RESET_KEEPER,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_LINK1_ERROR_STATUS_LINK1_RESET_KEEPER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_LINK1_ERROR_STATUS_LINK1_RESET_KEEPER]

//>> GET_[DLP_LINK1_ERROR_STATUS_LINK1_RESET_KEEPER]
static inline bool GET_DLP_LINK1_ERROR_STATUS_LINK1_RESET_KEEPER(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_ERROR_STATUS));
#endif
    return i_data.getBit<DLP_LINK1_ERROR_STATUS_LINK1_RESET_KEEPER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_LINK1_ERROR_STATUS_LINK1_RESET_KEEPER chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_LINK1_ERROR_STATUS_LINK1_RESET_KEEPER]

//>> SET_[DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_CE]
static inline fapi2::buffer<uint64_t>& SET_DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_ERROR_STATUS));
#endif
    return o_data.insertFromRight<DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_CE,
           DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_CE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_CE]

//>> SET_[DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_CE]
static inline fapi2::buffer<uint64_t>& SET_DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_ERROR_STATUS));
#endif
    return o_data.insertFromRight<DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_CE,
           DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_CE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_CE]

//>> GET_[DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_CE]
static inline fapi2::buffer<uint64_t>& GET_DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_ERROR_STATUS));
#endif
    return i_data.extractToRight<DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_CE,
           DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_CE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_CE]

//>> SET_[DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_UE]
static inline fapi2::buffer<uint64_t>& SET_DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_ERROR_STATUS));
#endif
    return o_data.insertFromRight<DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_UE,
           DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_UE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_UE]

//>> SET_[DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_UE]
static inline fapi2::buffer<uint64_t>& SET_DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_ERROR_STATUS));
#endif
    return o_data.insertFromRight<DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_UE,
           DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_UE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_UE]

//>> GET_[DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_UE]
static inline fapi2::buffer<uint64_t>& GET_DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_ERROR_STATUS));
#endif
    return i_data.extractToRight<DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_UE,
           DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_UE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_UE]

//>> SET_[DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_OSC]
static inline fapi2::buffer<uint64_t>& SET_DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_OSC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_ERROR_STATUS));
#endif
    return o_data.insertFromRight<DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_OSC,
           DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_OSC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_OSC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_OSC]

//>> SET_[DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_OSC]
static inline fapi2::buffer<uint64_t>& SET_DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_OSC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_ERROR_STATUS));
#endif
    return o_data.insertFromRight<DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_OSC,
           DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_OSC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_OSC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_OSC]

//>> GET_[DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_OSC]
static inline fapi2::buffer<uint64_t>& GET_DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_OSC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_ERROR_STATUS));
#endif
    return i_data.extractToRight<DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_OSC,
           DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_OSC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_OSC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_OSC]

//>> SET_[DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_TRAIN]
static inline fapi2::buffer<uint64_t>& SET_DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_TRAIN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_ERROR_STATUS));
#endif
    return o_data.insertFromRight<DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_TRAIN,
           DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_TRAIN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_TRAIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_TRAIN]

//>> SET_[DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_TRAIN]
static inline fapi2::buffer<uint64_t>& SET_DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_TRAIN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_ERROR_STATUS));
#endif
    return o_data.insertFromRight<DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_TRAIN,
           DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_TRAIN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_TRAIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_TRAIN]

//>> GET_[DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_TRAIN]
static inline fapi2::buffer<uint64_t>& GET_DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_TRAIN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_ERROR_STATUS));
#endif
    return i_data.extractToRight<DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_TRAIN,
           DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_TRAIN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_TRAIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_TRAIN]

//>> SET_[DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_UNRECOV]
static inline fapi2::buffer<uint64_t>& SET_DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_UNRECOV(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_ERROR_STATUS));
#endif
    return o_data.insertFromRight<DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_UNRECOV,
           DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_UNRECOV_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_UNRECOV chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_UNRECOV]

//>> SET_[DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_UNRECOV]
static inline fapi2::buffer<uint64_t>& SET_DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_UNRECOV(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_ERROR_STATUS));
#endif
    return o_data.insertFromRight<DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_UNRECOV,
           DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_UNRECOV_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_UNRECOV chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_UNRECOV]

//>> GET_[DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_UNRECOV]
static inline fapi2::buffer<uint64_t>& GET_DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_UNRECOV(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_ERROR_STATUS));
#endif
    return i_data.extractToRight<DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_UNRECOV,
           DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_UNRECOV_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_UNRECOV chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_LINK1_ERROR_STATUS_LINK1_ERROR_STATUS_UNRECOV]

//>> SET_[DLP_LINK1_ERROR_STATUS_INTERNAL]
static inline fapi2::buffer<uint64_t>& SET_DLP_LINK1_ERROR_STATUS_INTERNAL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_ERROR_STATUS));
#endif
    return o_data.insertFromRight<DLP_LINK1_ERROR_STATUS_INTERNAL,
           DLP_LINK1_ERROR_STATUS_INTERNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_LINK1_ERROR_STATUS_INTERNAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_LINK1_ERROR_STATUS_INTERNAL]

//>> SET_[DLP_LINK1_ERROR_STATUS_INTERNAL]
static inline fapi2::buffer<uint64_t>& SET_DLP_LINK1_ERROR_STATUS_INTERNAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_ERROR_STATUS));
#endif
    return o_data.insertFromRight<DLP_LINK1_ERROR_STATUS_INTERNAL,
           DLP_LINK1_ERROR_STATUS_INTERNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_LINK1_ERROR_STATUS_INTERNAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_LINK1_ERROR_STATUS_INTERNAL]

//>> GET_[DLP_LINK1_ERROR_STATUS_INTERNAL]
static inline fapi2::buffer<uint64_t>& GET_DLP_LINK1_ERROR_STATUS_INTERNAL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_ERROR_STATUS));
#endif
    return i_data.extractToRight<DLP_LINK1_ERROR_STATUS_INTERNAL,
           DLP_LINK1_ERROR_STATUS_INTERNAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_LINK1_ERROR_STATUS_INTERNAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_LINK1_ERROR_STATUS_INTERNAL]

//>> PREP_[DLP_LINK1_TX_LANE_CONTROL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_DLP_LINK1_TX_LANE_CONTROL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = DLP_LINK1_TX_LANE_CONTROL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[DLP_LINK1_TX_LANE_CONTROL]

//>> GET_[DLP_LINK1_TX_LANE_CONTROL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_DLP_LINK1_TX_LANE_CONTROL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = DLP_LINK1_TX_LANE_CONTROL;
#endif
    return fapi2::getScom(i_target, DLP_LINK1_TX_LANE_CONTROL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[DLP_LINK1_TX_LANE_CONTROL]

//>> PUT_[DLP_LINK1_TX_LANE_CONTROL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_DLP_LINK1_TX_LANE_CONTROL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(DLP_LINK1_TX_LANE_CONTROL));
#endif
    return fapi2::putScom(i_target, DLP_LINK1_TX_LANE_CONTROL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[DLP_LINK1_TX_LANE_CONTROL]


//>> SET_[DLP_LINK1_TX_LANE_CONTROL_00_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_DLP_LINK1_TX_LANE_CONTROL_00_CONTROL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_TX_LANE_CONTROL));
#endif
    return o_data.insertFromRight<DLP_LINK1_TX_LANE_CONTROL_00_CONTROL,
           DLP_LINK1_TX_LANE_CONTROL_00_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_LINK1_TX_LANE_CONTROL_00_CONTROL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_LINK1_TX_LANE_CONTROL_00_CONTROL]

//>> SET_[DLP_LINK1_TX_LANE_CONTROL_00_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_DLP_LINK1_TX_LANE_CONTROL_00_CONTROL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_TX_LANE_CONTROL));
#endif
    return o_data.insertFromRight<DLP_LINK1_TX_LANE_CONTROL_00_CONTROL,
           DLP_LINK1_TX_LANE_CONTROL_00_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_LINK1_TX_LANE_CONTROL_00_CONTROL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_LINK1_TX_LANE_CONTROL_00_CONTROL]

//>> GET_[DLP_LINK1_TX_LANE_CONTROL_00_CONTROL]
static inline fapi2::buffer<uint64_t>& GET_DLP_LINK1_TX_LANE_CONTROL_00_CONTROL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_TX_LANE_CONTROL));
#endif
    return i_data.extractToRight<DLP_LINK1_TX_LANE_CONTROL_00_CONTROL,
           DLP_LINK1_TX_LANE_CONTROL_00_CONTROL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_LINK1_TX_LANE_CONTROL_00_CONTROL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_LINK1_TX_LANE_CONTROL_00_CONTROL]

//>> SET_[DLP_LINK1_TX_LANE_CONTROL_01_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_DLP_LINK1_TX_LANE_CONTROL_01_CONTROL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_TX_LANE_CONTROL));
#endif
    return o_data.insertFromRight<DLP_LINK1_TX_LANE_CONTROL_01_CONTROL,
           DLP_LINK1_TX_LANE_CONTROL_01_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_LINK1_TX_LANE_CONTROL_01_CONTROL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_LINK1_TX_LANE_CONTROL_01_CONTROL]

//>> SET_[DLP_LINK1_TX_LANE_CONTROL_01_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_DLP_LINK1_TX_LANE_CONTROL_01_CONTROL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_TX_LANE_CONTROL));
#endif
    return o_data.insertFromRight<DLP_LINK1_TX_LANE_CONTROL_01_CONTROL,
           DLP_LINK1_TX_LANE_CONTROL_01_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_LINK1_TX_LANE_CONTROL_01_CONTROL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_LINK1_TX_LANE_CONTROL_01_CONTROL]

//>> GET_[DLP_LINK1_TX_LANE_CONTROL_01_CONTROL]
static inline fapi2::buffer<uint64_t>& GET_DLP_LINK1_TX_LANE_CONTROL_01_CONTROL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_TX_LANE_CONTROL));
#endif
    return i_data.extractToRight<DLP_LINK1_TX_LANE_CONTROL_01_CONTROL,
           DLP_LINK1_TX_LANE_CONTROL_01_CONTROL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_LINK1_TX_LANE_CONTROL_01_CONTROL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_LINK1_TX_LANE_CONTROL_01_CONTROL]

//>> SET_[DLP_LINK1_TX_LANE_CONTROL_02_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_DLP_LINK1_TX_LANE_CONTROL_02_CONTROL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_TX_LANE_CONTROL));
#endif
    return o_data.insertFromRight<DLP_LINK1_TX_LANE_CONTROL_02_CONTROL,
           DLP_LINK1_TX_LANE_CONTROL_02_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_LINK1_TX_LANE_CONTROL_02_CONTROL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_LINK1_TX_LANE_CONTROL_02_CONTROL]

//>> SET_[DLP_LINK1_TX_LANE_CONTROL_02_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_DLP_LINK1_TX_LANE_CONTROL_02_CONTROL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_TX_LANE_CONTROL));
#endif
    return o_data.insertFromRight<DLP_LINK1_TX_LANE_CONTROL_02_CONTROL,
           DLP_LINK1_TX_LANE_CONTROL_02_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_LINK1_TX_LANE_CONTROL_02_CONTROL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_LINK1_TX_LANE_CONTROL_02_CONTROL]

//>> GET_[DLP_LINK1_TX_LANE_CONTROL_02_CONTROL]
static inline fapi2::buffer<uint64_t>& GET_DLP_LINK1_TX_LANE_CONTROL_02_CONTROL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_TX_LANE_CONTROL));
#endif
    return i_data.extractToRight<DLP_LINK1_TX_LANE_CONTROL_02_CONTROL,
           DLP_LINK1_TX_LANE_CONTROL_02_CONTROL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_LINK1_TX_LANE_CONTROL_02_CONTROL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_LINK1_TX_LANE_CONTROL_02_CONTROL]

//>> SET_[DLP_LINK1_TX_LANE_CONTROL_03_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_DLP_LINK1_TX_LANE_CONTROL_03_CONTROL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_TX_LANE_CONTROL));
#endif
    return o_data.insertFromRight<DLP_LINK1_TX_LANE_CONTROL_03_CONTROL,
           DLP_LINK1_TX_LANE_CONTROL_03_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_LINK1_TX_LANE_CONTROL_03_CONTROL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_LINK1_TX_LANE_CONTROL_03_CONTROL]

//>> SET_[DLP_LINK1_TX_LANE_CONTROL_03_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_DLP_LINK1_TX_LANE_CONTROL_03_CONTROL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_TX_LANE_CONTROL));
#endif
    return o_data.insertFromRight<DLP_LINK1_TX_LANE_CONTROL_03_CONTROL,
           DLP_LINK1_TX_LANE_CONTROL_03_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_LINK1_TX_LANE_CONTROL_03_CONTROL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_LINK1_TX_LANE_CONTROL_03_CONTROL]

//>> GET_[DLP_LINK1_TX_LANE_CONTROL_03_CONTROL]
static inline fapi2::buffer<uint64_t>& GET_DLP_LINK1_TX_LANE_CONTROL_03_CONTROL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_TX_LANE_CONTROL));
#endif
    return i_data.extractToRight<DLP_LINK1_TX_LANE_CONTROL_03_CONTROL,
           DLP_LINK1_TX_LANE_CONTROL_03_CONTROL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_LINK1_TX_LANE_CONTROL_03_CONTROL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_LINK1_TX_LANE_CONTROL_03_CONTROL]

//>> SET_[DLP_LINK1_TX_LANE_CONTROL_04_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_DLP_LINK1_TX_LANE_CONTROL_04_CONTROL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_TX_LANE_CONTROL));
#endif
    return o_data.insertFromRight<DLP_LINK1_TX_LANE_CONTROL_04_CONTROL,
           DLP_LINK1_TX_LANE_CONTROL_04_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_LINK1_TX_LANE_CONTROL_04_CONTROL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_LINK1_TX_LANE_CONTROL_04_CONTROL]

//>> SET_[DLP_LINK1_TX_LANE_CONTROL_04_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_DLP_LINK1_TX_LANE_CONTROL_04_CONTROL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_TX_LANE_CONTROL));
#endif
    return o_data.insertFromRight<DLP_LINK1_TX_LANE_CONTROL_04_CONTROL,
           DLP_LINK1_TX_LANE_CONTROL_04_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_LINK1_TX_LANE_CONTROL_04_CONTROL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_LINK1_TX_LANE_CONTROL_04_CONTROL]

//>> GET_[DLP_LINK1_TX_LANE_CONTROL_04_CONTROL]
static inline fapi2::buffer<uint64_t>& GET_DLP_LINK1_TX_LANE_CONTROL_04_CONTROL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_TX_LANE_CONTROL));
#endif
    return i_data.extractToRight<DLP_LINK1_TX_LANE_CONTROL_04_CONTROL,
           DLP_LINK1_TX_LANE_CONTROL_04_CONTROL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_LINK1_TX_LANE_CONTROL_04_CONTROL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_LINK1_TX_LANE_CONTROL_04_CONTROL]

//>> SET_[DLP_LINK1_TX_LANE_CONTROL_05_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_DLP_LINK1_TX_LANE_CONTROL_05_CONTROL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_TX_LANE_CONTROL));
#endif
    return o_data.insertFromRight<DLP_LINK1_TX_LANE_CONTROL_05_CONTROL,
           DLP_LINK1_TX_LANE_CONTROL_05_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_LINK1_TX_LANE_CONTROL_05_CONTROL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_LINK1_TX_LANE_CONTROL_05_CONTROL]

//>> SET_[DLP_LINK1_TX_LANE_CONTROL_05_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_DLP_LINK1_TX_LANE_CONTROL_05_CONTROL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_TX_LANE_CONTROL));
#endif
    return o_data.insertFromRight<DLP_LINK1_TX_LANE_CONTROL_05_CONTROL,
           DLP_LINK1_TX_LANE_CONTROL_05_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_LINK1_TX_LANE_CONTROL_05_CONTROL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_LINK1_TX_LANE_CONTROL_05_CONTROL]

//>> GET_[DLP_LINK1_TX_LANE_CONTROL_05_CONTROL]
static inline fapi2::buffer<uint64_t>& GET_DLP_LINK1_TX_LANE_CONTROL_05_CONTROL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_TX_LANE_CONTROL));
#endif
    return i_data.extractToRight<DLP_LINK1_TX_LANE_CONTROL_05_CONTROL,
           DLP_LINK1_TX_LANE_CONTROL_05_CONTROL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_LINK1_TX_LANE_CONTROL_05_CONTROL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_LINK1_TX_LANE_CONTROL_05_CONTROL]

//>> SET_[DLP_LINK1_TX_LANE_CONTROL_06_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_DLP_LINK1_TX_LANE_CONTROL_06_CONTROL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_TX_LANE_CONTROL));
#endif
    return o_data.insertFromRight<DLP_LINK1_TX_LANE_CONTROL_06_CONTROL,
           DLP_LINK1_TX_LANE_CONTROL_06_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_LINK1_TX_LANE_CONTROL_06_CONTROL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_LINK1_TX_LANE_CONTROL_06_CONTROL]

//>> SET_[DLP_LINK1_TX_LANE_CONTROL_06_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_DLP_LINK1_TX_LANE_CONTROL_06_CONTROL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_TX_LANE_CONTROL));
#endif
    return o_data.insertFromRight<DLP_LINK1_TX_LANE_CONTROL_06_CONTROL,
           DLP_LINK1_TX_LANE_CONTROL_06_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_LINK1_TX_LANE_CONTROL_06_CONTROL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_LINK1_TX_LANE_CONTROL_06_CONTROL]

//>> GET_[DLP_LINK1_TX_LANE_CONTROL_06_CONTROL]
static inline fapi2::buffer<uint64_t>& GET_DLP_LINK1_TX_LANE_CONTROL_06_CONTROL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_TX_LANE_CONTROL));
#endif
    return i_data.extractToRight<DLP_LINK1_TX_LANE_CONTROL_06_CONTROL,
           DLP_LINK1_TX_LANE_CONTROL_06_CONTROL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_LINK1_TX_LANE_CONTROL_06_CONTROL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_LINK1_TX_LANE_CONTROL_06_CONTROL]

//>> SET_[DLP_LINK1_TX_LANE_CONTROL_07_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_DLP_LINK1_TX_LANE_CONTROL_07_CONTROL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_TX_LANE_CONTROL));
#endif
    return o_data.insertFromRight<DLP_LINK1_TX_LANE_CONTROL_07_CONTROL,
           DLP_LINK1_TX_LANE_CONTROL_07_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_LINK1_TX_LANE_CONTROL_07_CONTROL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_LINK1_TX_LANE_CONTROL_07_CONTROL]

//>> SET_[DLP_LINK1_TX_LANE_CONTROL_07_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_DLP_LINK1_TX_LANE_CONTROL_07_CONTROL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_TX_LANE_CONTROL));
#endif
    return o_data.insertFromRight<DLP_LINK1_TX_LANE_CONTROL_07_CONTROL,
           DLP_LINK1_TX_LANE_CONTROL_07_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_LINK1_TX_LANE_CONTROL_07_CONTROL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_LINK1_TX_LANE_CONTROL_07_CONTROL]

//>> GET_[DLP_LINK1_TX_LANE_CONTROL_07_CONTROL]
static inline fapi2::buffer<uint64_t>& GET_DLP_LINK1_TX_LANE_CONTROL_07_CONTROL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_TX_LANE_CONTROL));
#endif
    return i_data.extractToRight<DLP_LINK1_TX_LANE_CONTROL_07_CONTROL,
           DLP_LINK1_TX_LANE_CONTROL_07_CONTROL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_LINK1_TX_LANE_CONTROL_07_CONTROL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_LINK1_TX_LANE_CONTROL_07_CONTROL]

//>> SET_[DLP_LINK1_TX_LANE_CONTROL_SP_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_DLP_LINK1_TX_LANE_CONTROL_SP_CONTROL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_TX_LANE_CONTROL));
#endif
    return o_data.insertFromRight<DLP_LINK1_TX_LANE_CONTROL_SP_CONTROL,
           DLP_LINK1_TX_LANE_CONTROL_SP_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_LINK1_TX_LANE_CONTROL_SP_CONTROL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_LINK1_TX_LANE_CONTROL_SP_CONTROL]

//>> SET_[DLP_LINK1_TX_LANE_CONTROL_SP_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_DLP_LINK1_TX_LANE_CONTROL_SP_CONTROL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_TX_LANE_CONTROL));
#endif
    return o_data.insertFromRight<DLP_LINK1_TX_LANE_CONTROL_SP_CONTROL,
           DLP_LINK1_TX_LANE_CONTROL_SP_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_LINK1_TX_LANE_CONTROL_SP_CONTROL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_LINK1_TX_LANE_CONTROL_SP_CONTROL]

//>> GET_[DLP_LINK1_TX_LANE_CONTROL_SP_CONTROL]
static inline fapi2::buffer<uint64_t>& GET_DLP_LINK1_TX_LANE_CONTROL_SP_CONTROL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_TX_LANE_CONTROL));
#endif
    return i_data.extractToRight<DLP_LINK1_TX_LANE_CONTROL_SP_CONTROL,
           DLP_LINK1_TX_LANE_CONTROL_SP_CONTROL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_LINK1_TX_LANE_CONTROL_SP_CONTROL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_LINK1_TX_LANE_CONTROL_SP_CONTROL]

//>> SET_[DLP_LINK1_TX_LANE_CONTROL_FAILED]
static inline fapi2::buffer<uint64_t>& SET_DLP_LINK1_TX_LANE_CONTROL_FAILED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_TX_LANE_CONTROL));
#endif
    return o_data.insertFromRight<DLP_LINK1_TX_LANE_CONTROL_FAILED,
           DLP_LINK1_TX_LANE_CONTROL_FAILED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_LINK1_TX_LANE_CONTROL_FAILED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_LINK1_TX_LANE_CONTROL_FAILED]

//>> SET_[DLP_LINK1_TX_LANE_CONTROL_FAILED]
static inline fapi2::buffer<uint64_t>& SET_DLP_LINK1_TX_LANE_CONTROL_FAILED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_TX_LANE_CONTROL));
#endif
    return o_data.insertFromRight<DLP_LINK1_TX_LANE_CONTROL_FAILED,
           DLP_LINK1_TX_LANE_CONTROL_FAILED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_LINK1_TX_LANE_CONTROL_FAILED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_LINK1_TX_LANE_CONTROL_FAILED]

//>> GET_[DLP_LINK1_TX_LANE_CONTROL_FAILED]
static inline fapi2::buffer<uint64_t>& GET_DLP_LINK1_TX_LANE_CONTROL_FAILED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_LINK1_TX_LANE_CONTROL));
#endif
    return i_data.extractToRight<DLP_LINK1_TX_LANE_CONTROL_FAILED,
           DLP_LINK1_TX_LANE_CONTROL_FAILED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_LINK1_TX_LANE_CONTROL_FAILED chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_LINK1_TX_LANE_CONTROL_FAILED]

//>> PREP_[DLP_REPLAY_THRESHOLD]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_DLP_REPLAY_THRESHOLD(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = DLP_REPLAY_THRESHOLD;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[DLP_REPLAY_THRESHOLD]

//>> GET_[DLP_REPLAY_THRESHOLD]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_DLP_REPLAY_THRESHOLD(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = DLP_REPLAY_THRESHOLD;
#endif
    return fapi2::getScom(i_target, DLP_REPLAY_THRESHOLD, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[DLP_REPLAY_THRESHOLD]

//>> PUT_[DLP_REPLAY_THRESHOLD]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_DLP_REPLAY_THRESHOLD(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return fapi2::putScom(i_target, DLP_REPLAY_THRESHOLD, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[DLP_REPLAY_THRESHOLD]


//>> SET_[DLP_REPLAY_THRESHOLD_TB_SEL]
static inline fapi2::buffer<uint64_t>& SET_DLP_REPLAY_THRESHOLD_TB_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_REPLAY_THRESHOLD_TB_SEL,
           DLP_REPLAY_THRESHOLD_TB_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_TB_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_REPLAY_THRESHOLD_TB_SEL]

//>> SET_[DLP_REPLAY_THRESHOLD_TB_SEL]
static inline fapi2::buffer<uint64_t>& SET_DLP_REPLAY_THRESHOLD_TB_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_REPLAY_THRESHOLD_TB_SEL,
           DLP_REPLAY_THRESHOLD_TB_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_TB_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_REPLAY_THRESHOLD_TB_SEL]

//>> GET_[DLP_REPLAY_THRESHOLD_TB_SEL]
static inline fapi2::buffer<uint64_t>& GET_DLP_REPLAY_THRESHOLD_TB_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return i_data.extractToRight<DLP_REPLAY_THRESHOLD_TB_SEL,
           DLP_REPLAY_THRESHOLD_TB_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_TB_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_REPLAY_THRESHOLD_TB_SEL]

//>> SET_[DLP_REPLAY_THRESHOLD_TAP_SEL]
static inline fapi2::buffer<uint64_t>& SET_DLP_REPLAY_THRESHOLD_TAP_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_REPLAY_THRESHOLD_TAP_SEL,
           DLP_REPLAY_THRESHOLD_TAP_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_TAP_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_REPLAY_THRESHOLD_TAP_SEL]

//>> SET_[DLP_REPLAY_THRESHOLD_TAP_SEL]
static inline fapi2::buffer<uint64_t>& SET_DLP_REPLAY_THRESHOLD_TAP_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_REPLAY_THRESHOLD_TAP_SEL,
           DLP_REPLAY_THRESHOLD_TAP_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_TAP_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_REPLAY_THRESHOLD_TAP_SEL]

//>> GET_[DLP_REPLAY_THRESHOLD_TAP_SEL]
static inline fapi2::buffer<uint64_t>& GET_DLP_REPLAY_THRESHOLD_TAP_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return i_data.extractToRight<DLP_REPLAY_THRESHOLD_TAP_SEL,
           DLP_REPLAY_THRESHOLD_TAP_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_TAP_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_REPLAY_THRESHOLD_TAP_SEL]

//>> SET_[DLP_REPLAY_THRESHOLD_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_DLP_REPLAY_THRESHOLD_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_REPLAY_THRESHOLD_ENABLE,
           DLP_REPLAY_THRESHOLD_ENABLE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_REPLAY_THRESHOLD_ENABLE]

//>> SET_[DLP_REPLAY_THRESHOLD_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_DLP_REPLAY_THRESHOLD_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_REPLAY_THRESHOLD_ENABLE,
           DLP_REPLAY_THRESHOLD_ENABLE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_REPLAY_THRESHOLD_ENABLE]

//>> GET_[DLP_REPLAY_THRESHOLD_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_DLP_REPLAY_THRESHOLD_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return i_data.extractToRight<DLP_REPLAY_THRESHOLD_ENABLE,
           DLP_REPLAY_THRESHOLD_ENABLE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_REPLAY_THRESHOLD_ENABLE]

//>> SET_[DLP_REPLAY_THRESHOLD_LINK0_CLEAR]
static inline fapi2::buffer<uint64_t>& SET_DLP_REPLAY_THRESHOLD_LINK0_CLEAR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_REPLAY_THRESHOLD_LINK0_CLEAR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_LINK0_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_REPLAY_THRESHOLD_LINK0_CLEAR]

//>> SET_[DLP_REPLAY_THRESHOLD_LINK0_CLEAR]
static inline fapi2::buffer<uint64_t>& SET_DLP_REPLAY_THRESHOLD_LINK0_CLEAR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_REPLAY_THRESHOLD_LINK0_CLEAR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_LINK0_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_REPLAY_THRESHOLD_LINK0_CLEAR]

//>> SET_[DLP_REPLAY_THRESHOLD_LINK0_CLEAR]
static inline fapi2::buffer<uint64_t>& SET_DLP_REPLAY_THRESHOLD_LINK0_CLEAR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return o_data.setBit<DLP_REPLAY_THRESHOLD_LINK0_CLEAR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_LINK0_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_REPLAY_THRESHOLD_LINK0_CLEAR]

//>> CLEAR_[DLP_REPLAY_THRESHOLD_LINK0_CLEAR]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_REPLAY_THRESHOLD_LINK0_CLEAR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return o_data.clearBit<DLP_REPLAY_THRESHOLD_LINK0_CLEAR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_LINK0_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_REPLAY_THRESHOLD_LINK0_CLEAR]

//>> GET_[DLP_REPLAY_THRESHOLD_LINK0_CLEAR]
static inline fapi2::buffer<uint64_t>& GET_DLP_REPLAY_THRESHOLD_LINK0_CLEAR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return i_data.extractToRight<DLP_REPLAY_THRESHOLD_LINK0_CLEAR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_LINK0_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_REPLAY_THRESHOLD_LINK0_CLEAR]

//>> GET_[DLP_REPLAY_THRESHOLD_LINK0_CLEAR]
static inline bool GET_DLP_REPLAY_THRESHOLD_LINK0_CLEAR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return i_data.getBit<DLP_REPLAY_THRESHOLD_LINK0_CLEAR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_LINK0_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_REPLAY_THRESHOLD_LINK0_CLEAR]

//>> SET_[DLP_REPLAY_THRESHOLD_LINK1_CLEAR]
static inline fapi2::buffer<uint64_t>& SET_DLP_REPLAY_THRESHOLD_LINK1_CLEAR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_REPLAY_THRESHOLD_LINK1_CLEAR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_LINK1_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_REPLAY_THRESHOLD_LINK1_CLEAR]

//>> SET_[DLP_REPLAY_THRESHOLD_LINK1_CLEAR]
static inline fapi2::buffer<uint64_t>& SET_DLP_REPLAY_THRESHOLD_LINK1_CLEAR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_REPLAY_THRESHOLD_LINK1_CLEAR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_LINK1_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_REPLAY_THRESHOLD_LINK1_CLEAR]

//>> SET_[DLP_REPLAY_THRESHOLD_LINK1_CLEAR]
static inline fapi2::buffer<uint64_t>& SET_DLP_REPLAY_THRESHOLD_LINK1_CLEAR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return o_data.setBit<DLP_REPLAY_THRESHOLD_LINK1_CLEAR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_LINK1_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_REPLAY_THRESHOLD_LINK1_CLEAR]

//>> CLEAR_[DLP_REPLAY_THRESHOLD_LINK1_CLEAR]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_REPLAY_THRESHOLD_LINK1_CLEAR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return o_data.clearBit<DLP_REPLAY_THRESHOLD_LINK1_CLEAR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_LINK1_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_REPLAY_THRESHOLD_LINK1_CLEAR]

//>> GET_[DLP_REPLAY_THRESHOLD_LINK1_CLEAR]
static inline fapi2::buffer<uint64_t>& GET_DLP_REPLAY_THRESHOLD_LINK1_CLEAR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return i_data.extractToRight<DLP_REPLAY_THRESHOLD_LINK1_CLEAR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_LINK1_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_REPLAY_THRESHOLD_LINK1_CLEAR]

//>> GET_[DLP_REPLAY_THRESHOLD_LINK1_CLEAR]
static inline bool GET_DLP_REPLAY_THRESHOLD_LINK1_CLEAR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return i_data.getBit<DLP_REPLAY_THRESHOLD_LINK1_CLEAR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_LINK1_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_REPLAY_THRESHOLD_LINK1_CLEAR]

//>> SET_[DLP_REPLAY_THRESHOLD_DIS_TB_CLEAR]
static inline fapi2::buffer<uint64_t>& SET_DLP_REPLAY_THRESHOLD_DIS_TB_CLEAR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_REPLAY_THRESHOLD_DIS_TB_CLEAR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_DIS_TB_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_REPLAY_THRESHOLD_DIS_TB_CLEAR]

//>> SET_[DLP_REPLAY_THRESHOLD_DIS_TB_CLEAR]
static inline fapi2::buffer<uint64_t>& SET_DLP_REPLAY_THRESHOLD_DIS_TB_CLEAR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_REPLAY_THRESHOLD_DIS_TB_CLEAR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_DIS_TB_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_REPLAY_THRESHOLD_DIS_TB_CLEAR]

//>> SET_[DLP_REPLAY_THRESHOLD_DIS_TB_CLEAR]
static inline fapi2::buffer<uint64_t>& SET_DLP_REPLAY_THRESHOLD_DIS_TB_CLEAR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return o_data.setBit<DLP_REPLAY_THRESHOLD_DIS_TB_CLEAR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_DIS_TB_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_REPLAY_THRESHOLD_DIS_TB_CLEAR]

//>> CLEAR_[DLP_REPLAY_THRESHOLD_DIS_TB_CLEAR]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_REPLAY_THRESHOLD_DIS_TB_CLEAR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return o_data.clearBit<DLP_REPLAY_THRESHOLD_DIS_TB_CLEAR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_DIS_TB_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_REPLAY_THRESHOLD_DIS_TB_CLEAR]

//>> GET_[DLP_REPLAY_THRESHOLD_DIS_TB_CLEAR]
static inline fapi2::buffer<uint64_t>& GET_DLP_REPLAY_THRESHOLD_DIS_TB_CLEAR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return i_data.extractToRight<DLP_REPLAY_THRESHOLD_DIS_TB_CLEAR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_DIS_TB_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_REPLAY_THRESHOLD_DIS_TB_CLEAR]

//>> GET_[DLP_REPLAY_THRESHOLD_DIS_TB_CLEAR]
static inline bool GET_DLP_REPLAY_THRESHOLD_DIS_TB_CLEAR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return i_data.getBit<DLP_REPLAY_THRESHOLD_DIS_TB_CLEAR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_DIS_TB_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_REPLAY_THRESHOLD_DIS_TB_CLEAR]

//>> SET_[DLP_REPLAY_THRESHOLD_DIS_TAP_CLEAR]
static inline fapi2::buffer<uint64_t>& SET_DLP_REPLAY_THRESHOLD_DIS_TAP_CLEAR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_REPLAY_THRESHOLD_DIS_TAP_CLEAR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_DIS_TAP_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_REPLAY_THRESHOLD_DIS_TAP_CLEAR]

//>> SET_[DLP_REPLAY_THRESHOLD_DIS_TAP_CLEAR]
static inline fapi2::buffer<uint64_t>& SET_DLP_REPLAY_THRESHOLD_DIS_TAP_CLEAR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_REPLAY_THRESHOLD_DIS_TAP_CLEAR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_DIS_TAP_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_REPLAY_THRESHOLD_DIS_TAP_CLEAR]

//>> SET_[DLP_REPLAY_THRESHOLD_DIS_TAP_CLEAR]
static inline fapi2::buffer<uint64_t>& SET_DLP_REPLAY_THRESHOLD_DIS_TAP_CLEAR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return o_data.setBit<DLP_REPLAY_THRESHOLD_DIS_TAP_CLEAR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_DIS_TAP_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_REPLAY_THRESHOLD_DIS_TAP_CLEAR]

//>> CLEAR_[DLP_REPLAY_THRESHOLD_DIS_TAP_CLEAR]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_REPLAY_THRESHOLD_DIS_TAP_CLEAR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return o_data.clearBit<DLP_REPLAY_THRESHOLD_DIS_TAP_CLEAR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_DIS_TAP_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_REPLAY_THRESHOLD_DIS_TAP_CLEAR]

//>> GET_[DLP_REPLAY_THRESHOLD_DIS_TAP_CLEAR]
static inline fapi2::buffer<uint64_t>& GET_DLP_REPLAY_THRESHOLD_DIS_TAP_CLEAR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return i_data.extractToRight<DLP_REPLAY_THRESHOLD_DIS_TAP_CLEAR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_DIS_TAP_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_REPLAY_THRESHOLD_DIS_TAP_CLEAR]

//>> GET_[DLP_REPLAY_THRESHOLD_DIS_TAP_CLEAR]
static inline bool GET_DLP_REPLAY_THRESHOLD_DIS_TAP_CLEAR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return i_data.getBit<DLP_REPLAY_THRESHOLD_DIS_TAP_CLEAR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_DIS_TAP_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_REPLAY_THRESHOLD_DIS_TAP_CLEAR]

//>> SET_[DLP_REPLAY_THRESHOLD_DIS_TAP_STOP]
static inline fapi2::buffer<uint64_t>& SET_DLP_REPLAY_THRESHOLD_DIS_TAP_STOP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_REPLAY_THRESHOLD_DIS_TAP_STOP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_DIS_TAP_STOP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_REPLAY_THRESHOLD_DIS_TAP_STOP]

//>> SET_[DLP_REPLAY_THRESHOLD_DIS_TAP_STOP]
static inline fapi2::buffer<uint64_t>& SET_DLP_REPLAY_THRESHOLD_DIS_TAP_STOP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_REPLAY_THRESHOLD_DIS_TAP_STOP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_DIS_TAP_STOP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_REPLAY_THRESHOLD_DIS_TAP_STOP]

//>> SET_[DLP_REPLAY_THRESHOLD_DIS_TAP_STOP]
static inline fapi2::buffer<uint64_t>& SET_DLP_REPLAY_THRESHOLD_DIS_TAP_STOP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return o_data.setBit<DLP_REPLAY_THRESHOLD_DIS_TAP_STOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_DIS_TAP_STOP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_REPLAY_THRESHOLD_DIS_TAP_STOP]

//>> CLEAR_[DLP_REPLAY_THRESHOLD_DIS_TAP_STOP]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_REPLAY_THRESHOLD_DIS_TAP_STOP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return o_data.clearBit<DLP_REPLAY_THRESHOLD_DIS_TAP_STOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_DIS_TAP_STOP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_REPLAY_THRESHOLD_DIS_TAP_STOP]

//>> GET_[DLP_REPLAY_THRESHOLD_DIS_TAP_STOP]
static inline fapi2::buffer<uint64_t>& GET_DLP_REPLAY_THRESHOLD_DIS_TAP_STOP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return i_data.extractToRight<DLP_REPLAY_THRESHOLD_DIS_TAP_STOP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_DIS_TAP_STOP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_REPLAY_THRESHOLD_DIS_TAP_STOP]

//>> GET_[DLP_REPLAY_THRESHOLD_DIS_TAP_STOP]
static inline bool GET_DLP_REPLAY_THRESHOLD_DIS_TAP_STOP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return i_data.getBit<DLP_REPLAY_THRESHOLD_DIS_TAP_STOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_DIS_TAP_STOP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_REPLAY_THRESHOLD_DIS_TAP_STOP]

//>> SET_[DLP_REPLAY_THRESHOLD_LINK0_COUNT]
static inline fapi2::buffer<uint64_t>& SET_DLP_REPLAY_THRESHOLD_LINK0_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_REPLAY_THRESHOLD_LINK0_COUNT,
           DLP_REPLAY_THRESHOLD_LINK0_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_LINK0_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_REPLAY_THRESHOLD_LINK0_COUNT]

//>> SET_[DLP_REPLAY_THRESHOLD_LINK0_COUNT]
static inline fapi2::buffer<uint64_t>& SET_DLP_REPLAY_THRESHOLD_LINK0_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_REPLAY_THRESHOLD_LINK0_COUNT,
           DLP_REPLAY_THRESHOLD_LINK0_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_LINK0_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_REPLAY_THRESHOLD_LINK0_COUNT]

//>> GET_[DLP_REPLAY_THRESHOLD_LINK0_COUNT]
static inline fapi2::buffer<uint64_t>& GET_DLP_REPLAY_THRESHOLD_LINK0_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return i_data.extractToRight<DLP_REPLAY_THRESHOLD_LINK0_COUNT,
           DLP_REPLAY_THRESHOLD_LINK0_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_LINK0_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_REPLAY_THRESHOLD_LINK0_COUNT]

//>> SET_[DLP_REPLAY_THRESHOLD_LINK1_COUNT]
static inline fapi2::buffer<uint64_t>& SET_DLP_REPLAY_THRESHOLD_LINK1_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_REPLAY_THRESHOLD_LINK1_COUNT,
           DLP_REPLAY_THRESHOLD_LINK1_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_LINK1_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_REPLAY_THRESHOLD_LINK1_COUNT]

//>> SET_[DLP_REPLAY_THRESHOLD_LINK1_COUNT]
static inline fapi2::buffer<uint64_t>& SET_DLP_REPLAY_THRESHOLD_LINK1_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_REPLAY_THRESHOLD_LINK1_COUNT,
           DLP_REPLAY_THRESHOLD_LINK1_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_LINK1_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_REPLAY_THRESHOLD_LINK1_COUNT]

//>> GET_[DLP_REPLAY_THRESHOLD_LINK1_COUNT]
static inline fapi2::buffer<uint64_t>& GET_DLP_REPLAY_THRESHOLD_LINK1_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_REPLAY_THRESHOLD));
#endif
    return i_data.extractToRight<DLP_REPLAY_THRESHOLD_LINK1_COUNT,
           DLP_REPLAY_THRESHOLD_LINK1_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_REPLAY_THRESHOLD_LINK1_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_REPLAY_THRESHOLD_LINK1_COUNT]

//>> PREP_[DLP_RETRAIN_THRESHOLD]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_DLP_RETRAIN_THRESHOLD(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = DLP_RETRAIN_THRESHOLD;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[DLP_RETRAIN_THRESHOLD]

//>> GET_[DLP_RETRAIN_THRESHOLD]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_DLP_RETRAIN_THRESHOLD(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = DLP_RETRAIN_THRESHOLD;
#endif
    return fapi2::getScom(i_target, DLP_RETRAIN_THRESHOLD, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[DLP_RETRAIN_THRESHOLD]

//>> PUT_[DLP_RETRAIN_THRESHOLD]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_DLP_RETRAIN_THRESHOLD(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return fapi2::putScom(i_target, DLP_RETRAIN_THRESHOLD, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[DLP_RETRAIN_THRESHOLD]


//>> SET_[DLP_RETRAIN_THRESHOLD_TB_SEL]
static inline fapi2::buffer<uint64_t>& SET_DLP_RETRAIN_THRESHOLD_TB_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_RETRAIN_THRESHOLD_TB_SEL,
           DLP_RETRAIN_THRESHOLD_TB_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_TB_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_RETRAIN_THRESHOLD_TB_SEL]

//>> SET_[DLP_RETRAIN_THRESHOLD_TB_SEL]
static inline fapi2::buffer<uint64_t>& SET_DLP_RETRAIN_THRESHOLD_TB_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_RETRAIN_THRESHOLD_TB_SEL,
           DLP_RETRAIN_THRESHOLD_TB_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_TB_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_RETRAIN_THRESHOLD_TB_SEL]

//>> GET_[DLP_RETRAIN_THRESHOLD_TB_SEL]
static inline fapi2::buffer<uint64_t>& GET_DLP_RETRAIN_THRESHOLD_TB_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return i_data.extractToRight<DLP_RETRAIN_THRESHOLD_TB_SEL,
           DLP_RETRAIN_THRESHOLD_TB_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_TB_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_RETRAIN_THRESHOLD_TB_SEL]

//>> SET_[DLP_RETRAIN_THRESHOLD_TAP_SEL]
static inline fapi2::buffer<uint64_t>& SET_DLP_RETRAIN_THRESHOLD_TAP_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_RETRAIN_THRESHOLD_TAP_SEL,
           DLP_RETRAIN_THRESHOLD_TAP_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_TAP_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_RETRAIN_THRESHOLD_TAP_SEL]

//>> SET_[DLP_RETRAIN_THRESHOLD_TAP_SEL]
static inline fapi2::buffer<uint64_t>& SET_DLP_RETRAIN_THRESHOLD_TAP_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_RETRAIN_THRESHOLD_TAP_SEL,
           DLP_RETRAIN_THRESHOLD_TAP_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_TAP_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_RETRAIN_THRESHOLD_TAP_SEL]

//>> GET_[DLP_RETRAIN_THRESHOLD_TAP_SEL]
static inline fapi2::buffer<uint64_t>& GET_DLP_RETRAIN_THRESHOLD_TAP_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return i_data.extractToRight<DLP_RETRAIN_THRESHOLD_TAP_SEL,
           DLP_RETRAIN_THRESHOLD_TAP_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_TAP_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_RETRAIN_THRESHOLD_TAP_SEL]

//>> SET_[DLP_RETRAIN_THRESHOLD_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_DLP_RETRAIN_THRESHOLD_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_RETRAIN_THRESHOLD_ENABLE,
           DLP_RETRAIN_THRESHOLD_ENABLE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_RETRAIN_THRESHOLD_ENABLE]

//>> SET_[DLP_RETRAIN_THRESHOLD_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_DLP_RETRAIN_THRESHOLD_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_RETRAIN_THRESHOLD_ENABLE,
           DLP_RETRAIN_THRESHOLD_ENABLE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_RETRAIN_THRESHOLD_ENABLE]

//>> GET_[DLP_RETRAIN_THRESHOLD_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_DLP_RETRAIN_THRESHOLD_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return i_data.extractToRight<DLP_RETRAIN_THRESHOLD_ENABLE,
           DLP_RETRAIN_THRESHOLD_ENABLE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_RETRAIN_THRESHOLD_ENABLE]

//>> SET_[DLP_RETRAIN_THRESHOLD_LINK0_CLEAR]
static inline fapi2::buffer<uint64_t>& SET_DLP_RETRAIN_THRESHOLD_LINK0_CLEAR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_RETRAIN_THRESHOLD_LINK0_CLEAR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_LINK0_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_RETRAIN_THRESHOLD_LINK0_CLEAR]

//>> SET_[DLP_RETRAIN_THRESHOLD_LINK0_CLEAR]
static inline fapi2::buffer<uint64_t>& SET_DLP_RETRAIN_THRESHOLD_LINK0_CLEAR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_RETRAIN_THRESHOLD_LINK0_CLEAR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_LINK0_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_RETRAIN_THRESHOLD_LINK0_CLEAR]

//>> SET_[DLP_RETRAIN_THRESHOLD_LINK0_CLEAR]
static inline fapi2::buffer<uint64_t>& SET_DLP_RETRAIN_THRESHOLD_LINK0_CLEAR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return o_data.setBit<DLP_RETRAIN_THRESHOLD_LINK0_CLEAR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_LINK0_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_RETRAIN_THRESHOLD_LINK0_CLEAR]

//>> CLEAR_[DLP_RETRAIN_THRESHOLD_LINK0_CLEAR]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_RETRAIN_THRESHOLD_LINK0_CLEAR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return o_data.clearBit<DLP_RETRAIN_THRESHOLD_LINK0_CLEAR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_LINK0_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_RETRAIN_THRESHOLD_LINK0_CLEAR]

//>> GET_[DLP_RETRAIN_THRESHOLD_LINK0_CLEAR]
static inline fapi2::buffer<uint64_t>& GET_DLP_RETRAIN_THRESHOLD_LINK0_CLEAR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return i_data.extractToRight<DLP_RETRAIN_THRESHOLD_LINK0_CLEAR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_LINK0_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_RETRAIN_THRESHOLD_LINK0_CLEAR]

//>> GET_[DLP_RETRAIN_THRESHOLD_LINK0_CLEAR]
static inline bool GET_DLP_RETRAIN_THRESHOLD_LINK0_CLEAR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return i_data.getBit<DLP_RETRAIN_THRESHOLD_LINK0_CLEAR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_LINK0_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_RETRAIN_THRESHOLD_LINK0_CLEAR]

//>> SET_[DLP_RETRAIN_THRESHOLD_LINK1_CLEAR]
static inline fapi2::buffer<uint64_t>& SET_DLP_RETRAIN_THRESHOLD_LINK1_CLEAR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_RETRAIN_THRESHOLD_LINK1_CLEAR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_LINK1_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_RETRAIN_THRESHOLD_LINK1_CLEAR]

//>> SET_[DLP_RETRAIN_THRESHOLD_LINK1_CLEAR]
static inline fapi2::buffer<uint64_t>& SET_DLP_RETRAIN_THRESHOLD_LINK1_CLEAR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_RETRAIN_THRESHOLD_LINK1_CLEAR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_LINK1_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_RETRAIN_THRESHOLD_LINK1_CLEAR]

//>> SET_[DLP_RETRAIN_THRESHOLD_LINK1_CLEAR]
static inline fapi2::buffer<uint64_t>& SET_DLP_RETRAIN_THRESHOLD_LINK1_CLEAR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return o_data.setBit<DLP_RETRAIN_THRESHOLD_LINK1_CLEAR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_LINK1_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_RETRAIN_THRESHOLD_LINK1_CLEAR]

//>> CLEAR_[DLP_RETRAIN_THRESHOLD_LINK1_CLEAR]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_RETRAIN_THRESHOLD_LINK1_CLEAR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return o_data.clearBit<DLP_RETRAIN_THRESHOLD_LINK1_CLEAR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_LINK1_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_RETRAIN_THRESHOLD_LINK1_CLEAR]

//>> GET_[DLP_RETRAIN_THRESHOLD_LINK1_CLEAR]
static inline fapi2::buffer<uint64_t>& GET_DLP_RETRAIN_THRESHOLD_LINK1_CLEAR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return i_data.extractToRight<DLP_RETRAIN_THRESHOLD_LINK1_CLEAR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_LINK1_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_RETRAIN_THRESHOLD_LINK1_CLEAR]

//>> GET_[DLP_RETRAIN_THRESHOLD_LINK1_CLEAR]
static inline bool GET_DLP_RETRAIN_THRESHOLD_LINK1_CLEAR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return i_data.getBit<DLP_RETRAIN_THRESHOLD_LINK1_CLEAR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_LINK1_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_RETRAIN_THRESHOLD_LINK1_CLEAR]

//>> SET_[DLP_RETRAIN_THRESHOLD_DIS_TB_CLEAR]
static inline fapi2::buffer<uint64_t>& SET_DLP_RETRAIN_THRESHOLD_DIS_TB_CLEAR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_RETRAIN_THRESHOLD_DIS_TB_CLEAR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_DIS_TB_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_RETRAIN_THRESHOLD_DIS_TB_CLEAR]

//>> SET_[DLP_RETRAIN_THRESHOLD_DIS_TB_CLEAR]
static inline fapi2::buffer<uint64_t>& SET_DLP_RETRAIN_THRESHOLD_DIS_TB_CLEAR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_RETRAIN_THRESHOLD_DIS_TB_CLEAR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_DIS_TB_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_RETRAIN_THRESHOLD_DIS_TB_CLEAR]

//>> SET_[DLP_RETRAIN_THRESHOLD_DIS_TB_CLEAR]
static inline fapi2::buffer<uint64_t>& SET_DLP_RETRAIN_THRESHOLD_DIS_TB_CLEAR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return o_data.setBit<DLP_RETRAIN_THRESHOLD_DIS_TB_CLEAR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_DIS_TB_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_RETRAIN_THRESHOLD_DIS_TB_CLEAR]

//>> CLEAR_[DLP_RETRAIN_THRESHOLD_DIS_TB_CLEAR]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_RETRAIN_THRESHOLD_DIS_TB_CLEAR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return o_data.clearBit<DLP_RETRAIN_THRESHOLD_DIS_TB_CLEAR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_DIS_TB_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_RETRAIN_THRESHOLD_DIS_TB_CLEAR]

//>> GET_[DLP_RETRAIN_THRESHOLD_DIS_TB_CLEAR]
static inline fapi2::buffer<uint64_t>& GET_DLP_RETRAIN_THRESHOLD_DIS_TB_CLEAR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return i_data.extractToRight<DLP_RETRAIN_THRESHOLD_DIS_TB_CLEAR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_DIS_TB_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_RETRAIN_THRESHOLD_DIS_TB_CLEAR]

//>> GET_[DLP_RETRAIN_THRESHOLD_DIS_TB_CLEAR]
static inline bool GET_DLP_RETRAIN_THRESHOLD_DIS_TB_CLEAR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return i_data.getBit<DLP_RETRAIN_THRESHOLD_DIS_TB_CLEAR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_DIS_TB_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_RETRAIN_THRESHOLD_DIS_TB_CLEAR]

//>> SET_[DLP_RETRAIN_THRESHOLD_DIS_TAP_CLEAR]
static inline fapi2::buffer<uint64_t>& SET_DLP_RETRAIN_THRESHOLD_DIS_TAP_CLEAR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_RETRAIN_THRESHOLD_DIS_TAP_CLEAR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_DIS_TAP_CLEAR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_RETRAIN_THRESHOLD_DIS_TAP_CLEAR]

//>> SET_[DLP_RETRAIN_THRESHOLD_DIS_TAP_CLEAR]
static inline fapi2::buffer<uint64_t>& SET_DLP_RETRAIN_THRESHOLD_DIS_TAP_CLEAR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_RETRAIN_THRESHOLD_DIS_TAP_CLEAR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_DIS_TAP_CLEAR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_RETRAIN_THRESHOLD_DIS_TAP_CLEAR]

//>> SET_[DLP_RETRAIN_THRESHOLD_DIS_TAP_CLEAR]
static inline fapi2::buffer<uint64_t>& SET_DLP_RETRAIN_THRESHOLD_DIS_TAP_CLEAR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return o_data.setBit<DLP_RETRAIN_THRESHOLD_DIS_TAP_CLEAR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_DIS_TAP_CLEAR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_RETRAIN_THRESHOLD_DIS_TAP_CLEAR]

//>> CLEAR_[DLP_RETRAIN_THRESHOLD_DIS_TAP_CLEAR]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_RETRAIN_THRESHOLD_DIS_TAP_CLEAR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return o_data.clearBit<DLP_RETRAIN_THRESHOLD_DIS_TAP_CLEAR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_DIS_TAP_CLEAR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_RETRAIN_THRESHOLD_DIS_TAP_CLEAR]

//>> GET_[DLP_RETRAIN_THRESHOLD_DIS_TAP_CLEAR]
static inline fapi2::buffer<uint64_t>& GET_DLP_RETRAIN_THRESHOLD_DIS_TAP_CLEAR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return i_data.extractToRight<DLP_RETRAIN_THRESHOLD_DIS_TAP_CLEAR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_DIS_TAP_CLEAR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_RETRAIN_THRESHOLD_DIS_TAP_CLEAR]

//>> GET_[DLP_RETRAIN_THRESHOLD_DIS_TAP_CLEAR]
static inline bool GET_DLP_RETRAIN_THRESHOLD_DIS_TAP_CLEAR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return i_data.getBit<DLP_RETRAIN_THRESHOLD_DIS_TAP_CLEAR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_DIS_TAP_CLEAR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_RETRAIN_THRESHOLD_DIS_TAP_CLEAR]

//>> SET_[DLP_RETRAIN_THRESHOLD_DIS_TAP_STOP]
static inline fapi2::buffer<uint64_t>& SET_DLP_RETRAIN_THRESHOLD_DIS_TAP_STOP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_RETRAIN_THRESHOLD_DIS_TAP_STOP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_DIS_TAP_STOP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_RETRAIN_THRESHOLD_DIS_TAP_STOP]

//>> SET_[DLP_RETRAIN_THRESHOLD_DIS_TAP_STOP]
static inline fapi2::buffer<uint64_t>& SET_DLP_RETRAIN_THRESHOLD_DIS_TAP_STOP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_RETRAIN_THRESHOLD_DIS_TAP_STOP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_DIS_TAP_STOP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_RETRAIN_THRESHOLD_DIS_TAP_STOP]

//>> SET_[DLP_RETRAIN_THRESHOLD_DIS_TAP_STOP]
static inline fapi2::buffer<uint64_t>& SET_DLP_RETRAIN_THRESHOLD_DIS_TAP_STOP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return o_data.setBit<DLP_RETRAIN_THRESHOLD_DIS_TAP_STOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_DIS_TAP_STOP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_RETRAIN_THRESHOLD_DIS_TAP_STOP]

//>> CLEAR_[DLP_RETRAIN_THRESHOLD_DIS_TAP_STOP]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_RETRAIN_THRESHOLD_DIS_TAP_STOP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return o_data.clearBit<DLP_RETRAIN_THRESHOLD_DIS_TAP_STOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_DIS_TAP_STOP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_RETRAIN_THRESHOLD_DIS_TAP_STOP]

//>> GET_[DLP_RETRAIN_THRESHOLD_DIS_TAP_STOP]
static inline fapi2::buffer<uint64_t>& GET_DLP_RETRAIN_THRESHOLD_DIS_TAP_STOP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return i_data.extractToRight<DLP_RETRAIN_THRESHOLD_DIS_TAP_STOP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_DIS_TAP_STOP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_RETRAIN_THRESHOLD_DIS_TAP_STOP]

//>> GET_[DLP_RETRAIN_THRESHOLD_DIS_TAP_STOP]
static inline bool GET_DLP_RETRAIN_THRESHOLD_DIS_TAP_STOP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return i_data.getBit<DLP_RETRAIN_THRESHOLD_DIS_TAP_STOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_DIS_TAP_STOP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_RETRAIN_THRESHOLD_DIS_TAP_STOP]

//>> SET_[DLP_RETRAIN_THRESHOLD_LINK0_COUNT]
static inline fapi2::buffer<uint64_t>& SET_DLP_RETRAIN_THRESHOLD_LINK0_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_RETRAIN_THRESHOLD_LINK0_COUNT,
           DLP_RETRAIN_THRESHOLD_LINK0_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_LINK0_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_RETRAIN_THRESHOLD_LINK0_COUNT]

//>> SET_[DLP_RETRAIN_THRESHOLD_LINK0_COUNT]
static inline fapi2::buffer<uint64_t>& SET_DLP_RETRAIN_THRESHOLD_LINK0_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_RETRAIN_THRESHOLD_LINK0_COUNT,
           DLP_RETRAIN_THRESHOLD_LINK0_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_LINK0_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_RETRAIN_THRESHOLD_LINK0_COUNT]

//>> GET_[DLP_RETRAIN_THRESHOLD_LINK0_COUNT]
static inline fapi2::buffer<uint64_t>& GET_DLP_RETRAIN_THRESHOLD_LINK0_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return i_data.extractToRight<DLP_RETRAIN_THRESHOLD_LINK0_COUNT,
           DLP_RETRAIN_THRESHOLD_LINK0_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_LINK0_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_RETRAIN_THRESHOLD_LINK0_COUNT]

//>> SET_[DLP_RETRAIN_THRESHOLD_LINK1_COUNT]
static inline fapi2::buffer<uint64_t>& SET_DLP_RETRAIN_THRESHOLD_LINK1_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_RETRAIN_THRESHOLD_LINK1_COUNT,
           DLP_RETRAIN_THRESHOLD_LINK1_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_LINK1_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_RETRAIN_THRESHOLD_LINK1_COUNT]

//>> SET_[DLP_RETRAIN_THRESHOLD_LINK1_COUNT]
static inline fapi2::buffer<uint64_t>& SET_DLP_RETRAIN_THRESHOLD_LINK1_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_RETRAIN_THRESHOLD_LINK1_COUNT,
           DLP_RETRAIN_THRESHOLD_LINK1_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_LINK1_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_RETRAIN_THRESHOLD_LINK1_COUNT]

//>> GET_[DLP_RETRAIN_THRESHOLD_LINK1_COUNT]
static inline fapi2::buffer<uint64_t>& GET_DLP_RETRAIN_THRESHOLD_LINK1_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_RETRAIN_THRESHOLD));
#endif
    return i_data.extractToRight<DLP_RETRAIN_THRESHOLD_LINK1_COUNT,
           DLP_RETRAIN_THRESHOLD_LINK1_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_RETRAIN_THRESHOLD_LINK1_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_RETRAIN_THRESHOLD_LINK1_COUNT]

//>> PREP_[DLP_SEC_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_DLP_SEC_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = DLP_SEC_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[DLP_SEC_CONFIG]

//>> GET_[DLP_SEC_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_DLP_SEC_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = DLP_SEC_CONFIG;
#endif
    return fapi2::getScom(i_target, DLP_SEC_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[DLP_SEC_CONFIG]

//>> PUT_[DLP_SEC_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_DLP_SEC_CONFIG(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(DLP_SEC_CONFIG));
#endif
    return fapi2::putScom(i_target, DLP_SEC_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[DLP_SEC_CONFIG]


//>> SET_[DLP_SEC_CONFIG_ENABLE_ERR_INJ]
static inline fapi2::buffer<uint64_t>& SET_DLP_SEC_CONFIG_ENABLE_ERR_INJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SEC_CONFIG));
#endif
    return o_data.insertFromRight<DLP_SEC_CONFIG_ENABLE_ERR_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_SEC_CONFIG_ENABLE_ERR_INJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SEC_CONFIG_ENABLE_ERR_INJ]

//>> SET_[DLP_SEC_CONFIG_ENABLE_ERR_INJ]
static inline fapi2::buffer<uint64_t>& SET_DLP_SEC_CONFIG_ENABLE_ERR_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SEC_CONFIG));
#endif
    return o_data.insertFromRight<DLP_SEC_CONFIG_ENABLE_ERR_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_SEC_CONFIG_ENABLE_ERR_INJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SEC_CONFIG_ENABLE_ERR_INJ]

//>> SET_[DLP_SEC_CONFIG_ENABLE_ERR_INJ]
static inline fapi2::buffer<uint64_t>& SET_DLP_SEC_CONFIG_ENABLE_ERR_INJ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SEC_CONFIG));
#endif
    return o_data.setBit<DLP_SEC_CONFIG_ENABLE_ERR_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_SEC_CONFIG_ENABLE_ERR_INJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SEC_CONFIG_ENABLE_ERR_INJ]

//>> CLEAR_[DLP_SEC_CONFIG_ENABLE_ERR_INJ]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_SEC_CONFIG_ENABLE_ERR_INJ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SEC_CONFIG));
#endif
    return o_data.clearBit<DLP_SEC_CONFIG_ENABLE_ERR_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_SEC_CONFIG_ENABLE_ERR_INJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_SEC_CONFIG_ENABLE_ERR_INJ]

//>> GET_[DLP_SEC_CONFIG_ENABLE_ERR_INJ]
static inline fapi2::buffer<uint64_t>& GET_DLP_SEC_CONFIG_ENABLE_ERR_INJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SEC_CONFIG));
#endif
    return i_data.extractToRight<DLP_SEC_CONFIG_ENABLE_ERR_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_SEC_CONFIG_ENABLE_ERR_INJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_SEC_CONFIG_ENABLE_ERR_INJ]

//>> GET_[DLP_SEC_CONFIG_ENABLE_ERR_INJ]
static inline bool GET_DLP_SEC_CONFIG_ENABLE_ERR_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SEC_CONFIG));
#endif
    return i_data.getBit<DLP_SEC_CONFIG_ENABLE_ERR_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_SEC_CONFIG_ENABLE_ERR_INJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_SEC_CONFIG_ENABLE_ERR_INJ]

//>> SET_[DLP_SEC_CONFIG_ENABLE_TRACE]
static inline fapi2::buffer<uint64_t>& SET_DLP_SEC_CONFIG_ENABLE_TRACE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SEC_CONFIG));
#endif
    return o_data.insertFromRight<DLP_SEC_CONFIG_ENABLE_TRACE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_SEC_CONFIG_ENABLE_TRACE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SEC_CONFIG_ENABLE_TRACE]

//>> SET_[DLP_SEC_CONFIG_ENABLE_TRACE]
static inline fapi2::buffer<uint64_t>& SET_DLP_SEC_CONFIG_ENABLE_TRACE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SEC_CONFIG));
#endif
    return o_data.insertFromRight<DLP_SEC_CONFIG_ENABLE_TRACE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_SEC_CONFIG_ENABLE_TRACE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SEC_CONFIG_ENABLE_TRACE]

//>> SET_[DLP_SEC_CONFIG_ENABLE_TRACE]
static inline fapi2::buffer<uint64_t>& SET_DLP_SEC_CONFIG_ENABLE_TRACE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SEC_CONFIG));
#endif
    return o_data.setBit<DLP_SEC_CONFIG_ENABLE_TRACE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_SEC_CONFIG_ENABLE_TRACE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SEC_CONFIG_ENABLE_TRACE]

//>> CLEAR_[DLP_SEC_CONFIG_ENABLE_TRACE]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_SEC_CONFIG_ENABLE_TRACE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SEC_CONFIG));
#endif
    return o_data.clearBit<DLP_SEC_CONFIG_ENABLE_TRACE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_SEC_CONFIG_ENABLE_TRACE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_SEC_CONFIG_ENABLE_TRACE]

//>> GET_[DLP_SEC_CONFIG_ENABLE_TRACE]
static inline fapi2::buffer<uint64_t>& GET_DLP_SEC_CONFIG_ENABLE_TRACE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SEC_CONFIG));
#endif
    return i_data.extractToRight<DLP_SEC_CONFIG_ENABLE_TRACE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_SEC_CONFIG_ENABLE_TRACE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_SEC_CONFIG_ENABLE_TRACE]

//>> GET_[DLP_SEC_CONFIG_ENABLE_TRACE]
static inline bool GET_DLP_SEC_CONFIG_ENABLE_TRACE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SEC_CONFIG));
#endif
    return i_data.getBit<DLP_SEC_CONFIG_ENABLE_TRACE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_SEC_CONFIG_ENABLE_TRACE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_SEC_CONFIG_ENABLE_TRACE]

//>> SET_[DLP_SEC_CONFIG_RESET_INJ]
static inline fapi2::buffer<uint64_t>& SET_DLP_SEC_CONFIG_RESET_INJ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SEC_CONFIG));
#endif
    return o_data.insertFromRight<DLP_SEC_CONFIG_RESET_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_SEC_CONFIG_RESET_INJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SEC_CONFIG_RESET_INJ]

//>> SET_[DLP_SEC_CONFIG_RESET_INJ]
static inline fapi2::buffer<uint64_t>& SET_DLP_SEC_CONFIG_RESET_INJ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SEC_CONFIG));
#endif
    return o_data.insertFromRight<DLP_SEC_CONFIG_RESET_INJ,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_SEC_CONFIG_RESET_INJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SEC_CONFIG_RESET_INJ]

//>> SET_[DLP_SEC_CONFIG_RESET_INJ]
static inline fapi2::buffer<uint64_t>& SET_DLP_SEC_CONFIG_RESET_INJ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SEC_CONFIG));
#endif
    return o_data.setBit<DLP_SEC_CONFIG_RESET_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_SEC_CONFIG_RESET_INJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SEC_CONFIG_RESET_INJ]

//>> CLEAR_[DLP_SEC_CONFIG_RESET_INJ]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_SEC_CONFIG_RESET_INJ(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SEC_CONFIG));
#endif
    return o_data.clearBit<DLP_SEC_CONFIG_RESET_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_SEC_CONFIG_RESET_INJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_SEC_CONFIG_RESET_INJ]

//>> GET_[DLP_SEC_CONFIG_RESET_INJ]
static inline fapi2::buffer<uint64_t>& GET_DLP_SEC_CONFIG_RESET_INJ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SEC_CONFIG));
#endif
    return i_data.extractToRight<DLP_SEC_CONFIG_RESET_INJ,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_SEC_CONFIG_RESET_INJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_SEC_CONFIG_RESET_INJ]

//>> GET_[DLP_SEC_CONFIG_RESET_INJ]
static inline bool GET_DLP_SEC_CONFIG_RESET_INJ(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SEC_CONFIG));
#endif
    return i_data.getBit<DLP_SEC_CONFIG_RESET_INJ>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_SEC_CONFIG_RESET_INJ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_SEC_CONFIG_RESET_INJ]

//>> SET_[DLP_SEC_CONFIG_LINK0_PSAVE_OVERRIDE]
static inline fapi2::buffer<uint64_t>& SET_DLP_SEC_CONFIG_LINK0_PSAVE_OVERRIDE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SEC_CONFIG));
#endif
    return o_data.insertFromRight<DLP_SEC_CONFIG_LINK0_PSAVE_OVERRIDE,
           DLP_SEC_CONFIG_LINK0_PSAVE_OVERRIDE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_SEC_CONFIG_LINK0_PSAVE_OVERRIDE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SEC_CONFIG_LINK0_PSAVE_OVERRIDE]

//>> SET_[DLP_SEC_CONFIG_LINK0_PSAVE_OVERRIDE]
static inline fapi2::buffer<uint64_t>& SET_DLP_SEC_CONFIG_LINK0_PSAVE_OVERRIDE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SEC_CONFIG));
#endif
    return o_data.insertFromRight<DLP_SEC_CONFIG_LINK0_PSAVE_OVERRIDE,
           DLP_SEC_CONFIG_LINK0_PSAVE_OVERRIDE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_SEC_CONFIG_LINK0_PSAVE_OVERRIDE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SEC_CONFIG_LINK0_PSAVE_OVERRIDE]

//>> GET_[DLP_SEC_CONFIG_LINK0_PSAVE_OVERRIDE]
static inline fapi2::buffer<uint64_t>& GET_DLP_SEC_CONFIG_LINK0_PSAVE_OVERRIDE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SEC_CONFIG));
#endif
    return i_data.extractToRight<DLP_SEC_CONFIG_LINK0_PSAVE_OVERRIDE,
           DLP_SEC_CONFIG_LINK0_PSAVE_OVERRIDE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_SEC_CONFIG_LINK0_PSAVE_OVERRIDE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_SEC_CONFIG_LINK0_PSAVE_OVERRIDE]

//>> SET_[DLP_SEC_CONFIG_LINK1_PSAVE_OVERRIDE]
static inline fapi2::buffer<uint64_t>& SET_DLP_SEC_CONFIG_LINK1_PSAVE_OVERRIDE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SEC_CONFIG));
#endif
    return o_data.insertFromRight<DLP_SEC_CONFIG_LINK1_PSAVE_OVERRIDE,
           DLP_SEC_CONFIG_LINK1_PSAVE_OVERRIDE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_SEC_CONFIG_LINK1_PSAVE_OVERRIDE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SEC_CONFIG_LINK1_PSAVE_OVERRIDE]

//>> SET_[DLP_SEC_CONFIG_LINK1_PSAVE_OVERRIDE]
static inline fapi2::buffer<uint64_t>& SET_DLP_SEC_CONFIG_LINK1_PSAVE_OVERRIDE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SEC_CONFIG));
#endif
    return o_data.insertFromRight<DLP_SEC_CONFIG_LINK1_PSAVE_OVERRIDE,
           DLP_SEC_CONFIG_LINK1_PSAVE_OVERRIDE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_SEC_CONFIG_LINK1_PSAVE_OVERRIDE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SEC_CONFIG_LINK1_PSAVE_OVERRIDE]

//>> GET_[DLP_SEC_CONFIG_LINK1_PSAVE_OVERRIDE]
static inline fapi2::buffer<uint64_t>& GET_DLP_SEC_CONFIG_LINK1_PSAVE_OVERRIDE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SEC_CONFIG));
#endif
    return i_data.extractToRight<DLP_SEC_CONFIG_LINK1_PSAVE_OVERRIDE,
           DLP_SEC_CONFIG_LINK1_PSAVE_OVERRIDE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_SEC_CONFIG_LINK1_PSAVE_OVERRIDE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_SEC_CONFIG_LINK1_PSAVE_OVERRIDE]

//>> SET_[DLP_SEC_CONFIG_SBE_ERROR_RATE]
static inline fapi2::buffer<uint64_t>& SET_DLP_SEC_CONFIG_SBE_ERROR_RATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SEC_CONFIG));
#endif
    return o_data.insertFromRight<DLP_SEC_CONFIG_SBE_ERROR_RATE,
           DLP_SEC_CONFIG_SBE_ERROR_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_SEC_CONFIG_SBE_ERROR_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SEC_CONFIG_SBE_ERROR_RATE]

//>> SET_[DLP_SEC_CONFIG_SBE_ERROR_RATE]
static inline fapi2::buffer<uint64_t>& SET_DLP_SEC_CONFIG_SBE_ERROR_RATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SEC_CONFIG));
#endif
    return o_data.insertFromRight<DLP_SEC_CONFIG_SBE_ERROR_RATE,
           DLP_SEC_CONFIG_SBE_ERROR_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_SEC_CONFIG_SBE_ERROR_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SEC_CONFIG_SBE_ERROR_RATE]

//>> GET_[DLP_SEC_CONFIG_SBE_ERROR_RATE]
static inline fapi2::buffer<uint64_t>& GET_DLP_SEC_CONFIG_SBE_ERROR_RATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SEC_CONFIG));
#endif
    return i_data.extractToRight<DLP_SEC_CONFIG_SBE_ERROR_RATE,
           DLP_SEC_CONFIG_SBE_ERROR_RATE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_SEC_CONFIG_SBE_ERROR_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_SEC_CONFIG_SBE_ERROR_RATE]

//>> SET_[DLP_SEC_CONFIG_RAND_ERROR_RATE]
static inline fapi2::buffer<uint64_t>& SET_DLP_SEC_CONFIG_RAND_ERROR_RATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SEC_CONFIG));
#endif
    return o_data.insertFromRight<DLP_SEC_CONFIG_RAND_ERROR_RATE,
           DLP_SEC_CONFIG_RAND_ERROR_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_SEC_CONFIG_RAND_ERROR_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SEC_CONFIG_RAND_ERROR_RATE]

//>> SET_[DLP_SEC_CONFIG_RAND_ERROR_RATE]
static inline fapi2::buffer<uint64_t>& SET_DLP_SEC_CONFIG_RAND_ERROR_RATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SEC_CONFIG));
#endif
    return o_data.insertFromRight<DLP_SEC_CONFIG_RAND_ERROR_RATE,
           DLP_SEC_CONFIG_RAND_ERROR_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_SEC_CONFIG_RAND_ERROR_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SEC_CONFIG_RAND_ERROR_RATE]

//>> GET_[DLP_SEC_CONFIG_RAND_ERROR_RATE]
static inline fapi2::buffer<uint64_t>& GET_DLP_SEC_CONFIG_RAND_ERROR_RATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SEC_CONFIG));
#endif
    return i_data.extractToRight<DLP_SEC_CONFIG_RAND_ERROR_RATE,
           DLP_SEC_CONFIG_RAND_ERROR_RATE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_SEC_CONFIG_RAND_ERROR_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_SEC_CONFIG_RAND_ERROR_RATE]

//>> SET_[DLP_SEC_CONFIG_INV_SH_ERROR_RATE]
static inline fapi2::buffer<uint64_t>& SET_DLP_SEC_CONFIG_INV_SH_ERROR_RATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SEC_CONFIG));
#endif
    return o_data.insertFromRight<DLP_SEC_CONFIG_INV_SH_ERROR_RATE,
           DLP_SEC_CONFIG_INV_SH_ERROR_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_SEC_CONFIG_INV_SH_ERROR_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SEC_CONFIG_INV_SH_ERROR_RATE]

//>> SET_[DLP_SEC_CONFIG_INV_SH_ERROR_RATE]
static inline fapi2::buffer<uint64_t>& SET_DLP_SEC_CONFIG_INV_SH_ERROR_RATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SEC_CONFIG));
#endif
    return o_data.insertFromRight<DLP_SEC_CONFIG_INV_SH_ERROR_RATE,
           DLP_SEC_CONFIG_INV_SH_ERROR_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_SEC_CONFIG_INV_SH_ERROR_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SEC_CONFIG_INV_SH_ERROR_RATE]

//>> GET_[DLP_SEC_CONFIG_INV_SH_ERROR_RATE]
static inline fapi2::buffer<uint64_t>& GET_DLP_SEC_CONFIG_INV_SH_ERROR_RATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SEC_CONFIG));
#endif
    return i_data.extractToRight<DLP_SEC_CONFIG_INV_SH_ERROR_RATE,
           DLP_SEC_CONFIG_INV_SH_ERROR_RATE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_SEC_CONFIG_INV_SH_ERROR_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_SEC_CONFIG_INV_SH_ERROR_RATE]

//>> SET_[DLP_SEC_CONFIG_SYNC_HEADER_ERROR_RATE]
static inline fapi2::buffer<uint64_t>& SET_DLP_SEC_CONFIG_SYNC_HEADER_ERROR_RATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SEC_CONFIG));
#endif
    return o_data.insertFromRight<DLP_SEC_CONFIG_SYNC_HEADER_ERROR_RATE,
           DLP_SEC_CONFIG_SYNC_HEADER_ERROR_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_SEC_CONFIG_SYNC_HEADER_ERROR_RATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SEC_CONFIG_SYNC_HEADER_ERROR_RATE]

//>> SET_[DLP_SEC_CONFIG_SYNC_HEADER_ERROR_RATE]
static inline fapi2::buffer<uint64_t>& SET_DLP_SEC_CONFIG_SYNC_HEADER_ERROR_RATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SEC_CONFIG));
#endif
    return o_data.insertFromRight<DLP_SEC_CONFIG_SYNC_HEADER_ERROR_RATE,
           DLP_SEC_CONFIG_SYNC_HEADER_ERROR_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_SEC_CONFIG_SYNC_HEADER_ERROR_RATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SEC_CONFIG_SYNC_HEADER_ERROR_RATE]

//>> GET_[DLP_SEC_CONFIG_SYNC_HEADER_ERROR_RATE]
static inline fapi2::buffer<uint64_t>& GET_DLP_SEC_CONFIG_SYNC_HEADER_ERROR_RATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SEC_CONFIG));
#endif
    return i_data.extractToRight<DLP_SEC_CONFIG_SYNC_HEADER_ERROR_RATE,
           DLP_SEC_CONFIG_SYNC_HEADER_ERROR_RATE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_SEC_CONFIG_SYNC_HEADER_ERROR_RATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_SEC_CONFIG_SYNC_HEADER_ERROR_RATE]

//>> SET_[DLP_SEC_CONFIG_EDPL_RATE]
static inline fapi2::buffer<uint64_t>& SET_DLP_SEC_CONFIG_EDPL_RATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SEC_CONFIG));
#endif
    return o_data.insertFromRight<DLP_SEC_CONFIG_EDPL_RATE,
           DLP_SEC_CONFIG_EDPL_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_SEC_CONFIG_EDPL_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SEC_CONFIG_EDPL_RATE]

//>> SET_[DLP_SEC_CONFIG_EDPL_RATE]
static inline fapi2::buffer<uint64_t>& SET_DLP_SEC_CONFIG_EDPL_RATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SEC_CONFIG));
#endif
    return o_data.insertFromRight<DLP_SEC_CONFIG_EDPL_RATE,
           DLP_SEC_CONFIG_EDPL_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_SEC_CONFIG_EDPL_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SEC_CONFIG_EDPL_RATE]

//>> GET_[DLP_SEC_CONFIG_EDPL_RATE]
static inline fapi2::buffer<uint64_t>& GET_DLP_SEC_CONFIG_EDPL_RATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SEC_CONFIG));
#endif
    return i_data.extractToRight<DLP_SEC_CONFIG_EDPL_RATE,
           DLP_SEC_CONFIG_EDPL_RATE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_SEC_CONFIG_EDPL_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_SEC_CONFIG_EDPL_RATE]

//>> PREP_[DLP_SL_ECC_THRESHOLD]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_DLP_SL_ECC_THRESHOLD(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = DLP_SL_ECC_THRESHOLD;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[DLP_SL_ECC_THRESHOLD]

//>> GET_[DLP_SL_ECC_THRESHOLD]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_DLP_SL_ECC_THRESHOLD(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = DLP_SL_ECC_THRESHOLD;
#endif
    return fapi2::getScom(i_target, DLP_SL_ECC_THRESHOLD, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[DLP_SL_ECC_THRESHOLD]

//>> PUT_[DLP_SL_ECC_THRESHOLD]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_DLP_SL_ECC_THRESHOLD(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return fapi2::putScom(i_target, DLP_SL_ECC_THRESHOLD, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[DLP_SL_ECC_THRESHOLD]


//>> SET_[DLP_SL_ECC_THRESHOLD_TB_SEL]
static inline fapi2::buffer<uint64_t>& SET_DLP_SL_ECC_THRESHOLD_TB_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_SL_ECC_THRESHOLD_TB_SEL,
           DLP_SL_ECC_THRESHOLD_TB_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_TB_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SL_ECC_THRESHOLD_TB_SEL]

//>> SET_[DLP_SL_ECC_THRESHOLD_TB_SEL]
static inline fapi2::buffer<uint64_t>& SET_DLP_SL_ECC_THRESHOLD_TB_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_SL_ECC_THRESHOLD_TB_SEL,
           DLP_SL_ECC_THRESHOLD_TB_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_TB_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SL_ECC_THRESHOLD_TB_SEL]

//>> GET_[DLP_SL_ECC_THRESHOLD_TB_SEL]
static inline fapi2::buffer<uint64_t>& GET_DLP_SL_ECC_THRESHOLD_TB_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return i_data.extractToRight<DLP_SL_ECC_THRESHOLD_TB_SEL,
           DLP_SL_ECC_THRESHOLD_TB_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_TB_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_SL_ECC_THRESHOLD_TB_SEL]

//>> SET_[DLP_SL_ECC_THRESHOLD_TAP_SEL]
static inline fapi2::buffer<uint64_t>& SET_DLP_SL_ECC_THRESHOLD_TAP_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_SL_ECC_THRESHOLD_TAP_SEL,
           DLP_SL_ECC_THRESHOLD_TAP_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_TAP_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SL_ECC_THRESHOLD_TAP_SEL]

//>> SET_[DLP_SL_ECC_THRESHOLD_TAP_SEL]
static inline fapi2::buffer<uint64_t>& SET_DLP_SL_ECC_THRESHOLD_TAP_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_SL_ECC_THRESHOLD_TAP_SEL,
           DLP_SL_ECC_THRESHOLD_TAP_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_TAP_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SL_ECC_THRESHOLD_TAP_SEL]

//>> GET_[DLP_SL_ECC_THRESHOLD_TAP_SEL]
static inline fapi2::buffer<uint64_t>& GET_DLP_SL_ECC_THRESHOLD_TAP_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return i_data.extractToRight<DLP_SL_ECC_THRESHOLD_TAP_SEL,
           DLP_SL_ECC_THRESHOLD_TAP_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_TAP_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_SL_ECC_THRESHOLD_TAP_SEL]

//>> SET_[DLP_SL_ECC_THRESHOLD_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_DLP_SL_ECC_THRESHOLD_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_SL_ECC_THRESHOLD_ENABLE,
           DLP_SL_ECC_THRESHOLD_ENABLE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SL_ECC_THRESHOLD_ENABLE]

//>> SET_[DLP_SL_ECC_THRESHOLD_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_DLP_SL_ECC_THRESHOLD_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_SL_ECC_THRESHOLD_ENABLE,
           DLP_SL_ECC_THRESHOLD_ENABLE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SL_ECC_THRESHOLD_ENABLE]

//>> GET_[DLP_SL_ECC_THRESHOLD_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_DLP_SL_ECC_THRESHOLD_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return i_data.extractToRight<DLP_SL_ECC_THRESHOLD_ENABLE,
           DLP_SL_ECC_THRESHOLD_ENABLE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_SL_ECC_THRESHOLD_ENABLE]

//>> SET_[DLP_SL_ECC_THRESHOLD_LINK0_CLEAR]
static inline fapi2::buffer<uint64_t>& SET_DLP_SL_ECC_THRESHOLD_LINK0_CLEAR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_SL_ECC_THRESHOLD_LINK0_CLEAR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_LINK0_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SL_ECC_THRESHOLD_LINK0_CLEAR]

//>> SET_[DLP_SL_ECC_THRESHOLD_LINK0_CLEAR]
static inline fapi2::buffer<uint64_t>& SET_DLP_SL_ECC_THRESHOLD_LINK0_CLEAR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_SL_ECC_THRESHOLD_LINK0_CLEAR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_LINK0_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SL_ECC_THRESHOLD_LINK0_CLEAR]

//>> SET_[DLP_SL_ECC_THRESHOLD_LINK0_CLEAR]
static inline fapi2::buffer<uint64_t>& SET_DLP_SL_ECC_THRESHOLD_LINK0_CLEAR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return o_data.setBit<DLP_SL_ECC_THRESHOLD_LINK0_CLEAR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_LINK0_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SL_ECC_THRESHOLD_LINK0_CLEAR]

//>> CLEAR_[DLP_SL_ECC_THRESHOLD_LINK0_CLEAR]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_SL_ECC_THRESHOLD_LINK0_CLEAR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return o_data.clearBit<DLP_SL_ECC_THRESHOLD_LINK0_CLEAR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_LINK0_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_SL_ECC_THRESHOLD_LINK0_CLEAR]

//>> GET_[DLP_SL_ECC_THRESHOLD_LINK0_CLEAR]
static inline fapi2::buffer<uint64_t>& GET_DLP_SL_ECC_THRESHOLD_LINK0_CLEAR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return i_data.extractToRight<DLP_SL_ECC_THRESHOLD_LINK0_CLEAR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_LINK0_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_SL_ECC_THRESHOLD_LINK0_CLEAR]

//>> GET_[DLP_SL_ECC_THRESHOLD_LINK0_CLEAR]
static inline bool GET_DLP_SL_ECC_THRESHOLD_LINK0_CLEAR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return i_data.getBit<DLP_SL_ECC_THRESHOLD_LINK0_CLEAR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_LINK0_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_SL_ECC_THRESHOLD_LINK0_CLEAR]

//>> SET_[DLP_SL_ECC_THRESHOLD_LINK1_CLEAR]
static inline fapi2::buffer<uint64_t>& SET_DLP_SL_ECC_THRESHOLD_LINK1_CLEAR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_SL_ECC_THRESHOLD_LINK1_CLEAR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_LINK1_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SL_ECC_THRESHOLD_LINK1_CLEAR]

//>> SET_[DLP_SL_ECC_THRESHOLD_LINK1_CLEAR]
static inline fapi2::buffer<uint64_t>& SET_DLP_SL_ECC_THRESHOLD_LINK1_CLEAR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_SL_ECC_THRESHOLD_LINK1_CLEAR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_LINK1_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SL_ECC_THRESHOLD_LINK1_CLEAR]

//>> SET_[DLP_SL_ECC_THRESHOLD_LINK1_CLEAR]
static inline fapi2::buffer<uint64_t>& SET_DLP_SL_ECC_THRESHOLD_LINK1_CLEAR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return o_data.setBit<DLP_SL_ECC_THRESHOLD_LINK1_CLEAR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_LINK1_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SL_ECC_THRESHOLD_LINK1_CLEAR]

//>> CLEAR_[DLP_SL_ECC_THRESHOLD_LINK1_CLEAR]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_SL_ECC_THRESHOLD_LINK1_CLEAR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return o_data.clearBit<DLP_SL_ECC_THRESHOLD_LINK1_CLEAR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_LINK1_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_SL_ECC_THRESHOLD_LINK1_CLEAR]

//>> GET_[DLP_SL_ECC_THRESHOLD_LINK1_CLEAR]
static inline fapi2::buffer<uint64_t>& GET_DLP_SL_ECC_THRESHOLD_LINK1_CLEAR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return i_data.extractToRight<DLP_SL_ECC_THRESHOLD_LINK1_CLEAR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_LINK1_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_SL_ECC_THRESHOLD_LINK1_CLEAR]

//>> GET_[DLP_SL_ECC_THRESHOLD_LINK1_CLEAR]
static inline bool GET_DLP_SL_ECC_THRESHOLD_LINK1_CLEAR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return i_data.getBit<DLP_SL_ECC_THRESHOLD_LINK1_CLEAR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_LINK1_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_SL_ECC_THRESHOLD_LINK1_CLEAR]

//>> SET_[DLP_SL_ECC_THRESHOLD_DIS_TB_CLEAR]
static inline fapi2::buffer<uint64_t>& SET_DLP_SL_ECC_THRESHOLD_DIS_TB_CLEAR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_SL_ECC_THRESHOLD_DIS_TB_CLEAR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_DIS_TB_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SL_ECC_THRESHOLD_DIS_TB_CLEAR]

//>> SET_[DLP_SL_ECC_THRESHOLD_DIS_TB_CLEAR]
static inline fapi2::buffer<uint64_t>& SET_DLP_SL_ECC_THRESHOLD_DIS_TB_CLEAR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_SL_ECC_THRESHOLD_DIS_TB_CLEAR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_DIS_TB_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SL_ECC_THRESHOLD_DIS_TB_CLEAR]

//>> SET_[DLP_SL_ECC_THRESHOLD_DIS_TB_CLEAR]
static inline fapi2::buffer<uint64_t>& SET_DLP_SL_ECC_THRESHOLD_DIS_TB_CLEAR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return o_data.setBit<DLP_SL_ECC_THRESHOLD_DIS_TB_CLEAR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_DIS_TB_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SL_ECC_THRESHOLD_DIS_TB_CLEAR]

//>> CLEAR_[DLP_SL_ECC_THRESHOLD_DIS_TB_CLEAR]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_SL_ECC_THRESHOLD_DIS_TB_CLEAR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return o_data.clearBit<DLP_SL_ECC_THRESHOLD_DIS_TB_CLEAR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_DIS_TB_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_SL_ECC_THRESHOLD_DIS_TB_CLEAR]

//>> GET_[DLP_SL_ECC_THRESHOLD_DIS_TB_CLEAR]
static inline fapi2::buffer<uint64_t>& GET_DLP_SL_ECC_THRESHOLD_DIS_TB_CLEAR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return i_data.extractToRight<DLP_SL_ECC_THRESHOLD_DIS_TB_CLEAR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_DIS_TB_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_SL_ECC_THRESHOLD_DIS_TB_CLEAR]

//>> GET_[DLP_SL_ECC_THRESHOLD_DIS_TB_CLEAR]
static inline bool GET_DLP_SL_ECC_THRESHOLD_DIS_TB_CLEAR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return i_data.getBit<DLP_SL_ECC_THRESHOLD_DIS_TB_CLEAR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_DIS_TB_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_SL_ECC_THRESHOLD_DIS_TB_CLEAR]

//>> SET_[DLP_SL_ECC_THRESHOLD_DIS_TAP_CLEAR]
static inline fapi2::buffer<uint64_t>& SET_DLP_SL_ECC_THRESHOLD_DIS_TAP_CLEAR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_SL_ECC_THRESHOLD_DIS_TAP_CLEAR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_DIS_TAP_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SL_ECC_THRESHOLD_DIS_TAP_CLEAR]

//>> SET_[DLP_SL_ECC_THRESHOLD_DIS_TAP_CLEAR]
static inline fapi2::buffer<uint64_t>& SET_DLP_SL_ECC_THRESHOLD_DIS_TAP_CLEAR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_SL_ECC_THRESHOLD_DIS_TAP_CLEAR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_DIS_TAP_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SL_ECC_THRESHOLD_DIS_TAP_CLEAR]

//>> SET_[DLP_SL_ECC_THRESHOLD_DIS_TAP_CLEAR]
static inline fapi2::buffer<uint64_t>& SET_DLP_SL_ECC_THRESHOLD_DIS_TAP_CLEAR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return o_data.setBit<DLP_SL_ECC_THRESHOLD_DIS_TAP_CLEAR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_DIS_TAP_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SL_ECC_THRESHOLD_DIS_TAP_CLEAR]

//>> CLEAR_[DLP_SL_ECC_THRESHOLD_DIS_TAP_CLEAR]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_SL_ECC_THRESHOLD_DIS_TAP_CLEAR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return o_data.clearBit<DLP_SL_ECC_THRESHOLD_DIS_TAP_CLEAR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_DIS_TAP_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_SL_ECC_THRESHOLD_DIS_TAP_CLEAR]

//>> GET_[DLP_SL_ECC_THRESHOLD_DIS_TAP_CLEAR]
static inline fapi2::buffer<uint64_t>& GET_DLP_SL_ECC_THRESHOLD_DIS_TAP_CLEAR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return i_data.extractToRight<DLP_SL_ECC_THRESHOLD_DIS_TAP_CLEAR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_DIS_TAP_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_SL_ECC_THRESHOLD_DIS_TAP_CLEAR]

//>> GET_[DLP_SL_ECC_THRESHOLD_DIS_TAP_CLEAR]
static inline bool GET_DLP_SL_ECC_THRESHOLD_DIS_TAP_CLEAR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return i_data.getBit<DLP_SL_ECC_THRESHOLD_DIS_TAP_CLEAR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_DIS_TAP_CLEAR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_SL_ECC_THRESHOLD_DIS_TAP_CLEAR]

//>> SET_[DLP_SL_ECC_THRESHOLD_DIS_TAP_STOP]
static inline fapi2::buffer<uint64_t>& SET_DLP_SL_ECC_THRESHOLD_DIS_TAP_STOP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_SL_ECC_THRESHOLD_DIS_TAP_STOP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_DIS_TAP_STOP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SL_ECC_THRESHOLD_DIS_TAP_STOP]

//>> SET_[DLP_SL_ECC_THRESHOLD_DIS_TAP_STOP]
static inline fapi2::buffer<uint64_t>& SET_DLP_SL_ECC_THRESHOLD_DIS_TAP_STOP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_SL_ECC_THRESHOLD_DIS_TAP_STOP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_DIS_TAP_STOP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SL_ECC_THRESHOLD_DIS_TAP_STOP]

//>> SET_[DLP_SL_ECC_THRESHOLD_DIS_TAP_STOP]
static inline fapi2::buffer<uint64_t>& SET_DLP_SL_ECC_THRESHOLD_DIS_TAP_STOP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return o_data.setBit<DLP_SL_ECC_THRESHOLD_DIS_TAP_STOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_DIS_TAP_STOP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SL_ECC_THRESHOLD_DIS_TAP_STOP]

//>> CLEAR_[DLP_SL_ECC_THRESHOLD_DIS_TAP_STOP]
static inline fapi2::buffer<uint64_t>& CLEAR_DLP_SL_ECC_THRESHOLD_DIS_TAP_STOP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return o_data.clearBit<DLP_SL_ECC_THRESHOLD_DIS_TAP_STOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_DIS_TAP_STOP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[DLP_SL_ECC_THRESHOLD_DIS_TAP_STOP]

//>> GET_[DLP_SL_ECC_THRESHOLD_DIS_TAP_STOP]
static inline fapi2::buffer<uint64_t>& GET_DLP_SL_ECC_THRESHOLD_DIS_TAP_STOP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return i_data.extractToRight<DLP_SL_ECC_THRESHOLD_DIS_TAP_STOP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_DIS_TAP_STOP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_SL_ECC_THRESHOLD_DIS_TAP_STOP]

//>> GET_[DLP_SL_ECC_THRESHOLD_DIS_TAP_STOP]
static inline bool GET_DLP_SL_ECC_THRESHOLD_DIS_TAP_STOP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return i_data.getBit<DLP_SL_ECC_THRESHOLD_DIS_TAP_STOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_DIS_TAP_STOP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_SL_ECC_THRESHOLD_DIS_TAP_STOP]

//>> SET_[DLP_SL_ECC_THRESHOLD_LINK0_COUNT]
static inline fapi2::buffer<uint64_t>& SET_DLP_SL_ECC_THRESHOLD_LINK0_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_SL_ECC_THRESHOLD_LINK0_COUNT,
           DLP_SL_ECC_THRESHOLD_LINK0_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_LINK0_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SL_ECC_THRESHOLD_LINK0_COUNT]

//>> SET_[DLP_SL_ECC_THRESHOLD_LINK0_COUNT]
static inline fapi2::buffer<uint64_t>& SET_DLP_SL_ECC_THRESHOLD_LINK0_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_SL_ECC_THRESHOLD_LINK0_COUNT,
           DLP_SL_ECC_THRESHOLD_LINK0_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_LINK0_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SL_ECC_THRESHOLD_LINK0_COUNT]

//>> GET_[DLP_SL_ECC_THRESHOLD_LINK0_COUNT]
static inline fapi2::buffer<uint64_t>& GET_DLP_SL_ECC_THRESHOLD_LINK0_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return i_data.extractToRight<DLP_SL_ECC_THRESHOLD_LINK0_COUNT,
           DLP_SL_ECC_THRESHOLD_LINK0_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_LINK0_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_SL_ECC_THRESHOLD_LINK0_COUNT]

//>> SET_[DLP_SL_ECC_THRESHOLD_LINK1_COUNT]
static inline fapi2::buffer<uint64_t>& SET_DLP_SL_ECC_THRESHOLD_LINK1_COUNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_SL_ECC_THRESHOLD_LINK1_COUNT,
           DLP_SL_ECC_THRESHOLD_LINK1_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_LINK1_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SL_ECC_THRESHOLD_LINK1_COUNT]

//>> SET_[DLP_SL_ECC_THRESHOLD_LINK1_COUNT]
static inline fapi2::buffer<uint64_t>& SET_DLP_SL_ECC_THRESHOLD_LINK1_COUNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return o_data.insertFromRight<DLP_SL_ECC_THRESHOLD_LINK1_COUNT,
           DLP_SL_ECC_THRESHOLD_LINK1_COUNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_LINK1_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[DLP_SL_ECC_THRESHOLD_LINK1_COUNT]

//>> GET_[DLP_SL_ECC_THRESHOLD_LINK1_COUNT]
static inline fapi2::buffer<uint64_t>& GET_DLP_SL_ECC_THRESHOLD_LINK1_COUNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(DLP_SL_ECC_THRESHOLD));
#endif
    return i_data.extractToRight<DLP_SL_ECC_THRESHOLD_LINK1_COUNT,
           DLP_SL_ECC_THRESHOLD_LINK1_COUNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access DLP_SL_ECC_THRESHOLD_LINK1_COUNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[DLP_SL_ECC_THRESHOLD_LINK1_COUNT]

//>> PREP_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG]

//>> GET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG;
#endif
    return fapi2::getScom(i_target, IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG]

//>> PUT_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG));
#endif
    return fapi2::putScom(i_target, IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG]


//>> SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_1_FILTER_ENA]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_1_FILTER_ENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_1_FILTER_ENA,
           IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_1_FILTER_ENA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_1_FILTER_ENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_1_FILTER_ENA]

//>> SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_1_FILTER_ENA]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_1_FILTER_ENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_1_FILTER_ENA,
           IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_1_FILTER_ENA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_1_FILTER_ENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_1_FILTER_ENA]

//>> GET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_1_FILTER_ENA]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_1_FILTER_ENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_1_FILTER_ENA,
           IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_1_FILTER_ENA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_1_FILTER_ENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_1_FILTER_ENA]

//>> SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_1_FILTER_PAT]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_1_FILTER_PAT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_1_FILTER_PAT,
           IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_1_FILTER_PAT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_1_FILTER_PAT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_1_FILTER_PAT]

//>> SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_1_FILTER_PAT]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_1_FILTER_PAT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_1_FILTER_PAT,
           IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_1_FILTER_PAT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_1_FILTER_PAT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_1_FILTER_PAT]

//>> GET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_1_FILTER_PAT]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_1_FILTER_PAT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_1_FILTER_PAT,
           IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_1_FILTER_PAT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_1_FILTER_PAT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_1_FILTER_PAT]

//>> SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_2_FILTER_ENA]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_2_FILTER_ENA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_2_FILTER_ENA,
           IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_2_FILTER_ENA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_2_FILTER_ENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_2_FILTER_ENA]

//>> SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_2_FILTER_ENA]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_2_FILTER_ENA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_2_FILTER_ENA,
           IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_2_FILTER_ENA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_2_FILTER_ENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_2_FILTER_ENA]

//>> GET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_2_FILTER_ENA]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_2_FILTER_ENA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_2_FILTER_ENA,
           IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_2_FILTER_ENA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_2_FILTER_ENA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_2_FILTER_ENA]

//>> SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_2_FILTER_PAT]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_2_FILTER_PAT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_2_FILTER_PAT,
           IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_2_FILTER_PAT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_2_FILTER_PAT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_2_FILTER_PAT]

//>> SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_2_FILTER_PAT]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_2_FILTER_PAT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_2_FILTER_PAT,
           IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_2_FILTER_PAT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_2_FILTER_PAT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_2_FILTER_PAT]

//>> GET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_2_FILTER_PAT]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_2_FILTER_PAT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_2_FILTER_PAT,
           IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_2_FILTER_PAT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_2_FILTER_PAT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE13_PG_2_FILTER_PAT]

//>> PREP_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG]

//>> GET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG;
#endif
    return fapi2::getScom(i_target, IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG]

//>> PUT_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG));
#endif
    return fapi2::putScom(i_target, IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG]


//>> SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_H_SEL]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_H_SEL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_H_SEL,
           IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_H_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_H_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_H_SEL]

//>> SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_H_SEL]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_H_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_H_SEL,
           IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_H_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_H_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_H_SEL]

//>> GET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_H_SEL]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_H_SEL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_H_SEL,
           IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_H_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_H_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_H_SEL]

//>> SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_H_SEL]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_H_SEL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_H_SEL,
           IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_H_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_H_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_H_SEL]

//>> SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_H_SEL]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_H_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_H_SEL,
           IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_H_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_H_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_H_SEL]

//>> GET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_H_SEL]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_H_SEL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_H_SEL,
           IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_H_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_H_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_H_SEL]

//>> SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_INVALID_LOCK_EN]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_INVALID_LOCK_EN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_INVALID_LOCK_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_INVALID_LOCK_EN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_INVALID_LOCK_EN]

//>> SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_INVALID_LOCK_EN]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_INVALID_LOCK_EN(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_INVALID_LOCK_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_INVALID_LOCK_EN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_INVALID_LOCK_EN]

//>> SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_INVALID_LOCK_EN]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_INVALID_LOCK_EN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG));
#endif
    return o_data.setBit<IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_INVALID_LOCK_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_INVALID_LOCK_EN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_INVALID_LOCK_EN]

//>> CLEAR_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_INVALID_LOCK_EN]
static inline fapi2::buffer<uint64_t>& CLEAR_IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_INVALID_LOCK_EN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG));
#endif
    return o_data.clearBit<IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_INVALID_LOCK_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_INVALID_LOCK_EN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_INVALID_LOCK_EN]

//>> GET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_INVALID_LOCK_EN]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_INVALID_LOCK_EN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_INVALID_LOCK_EN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_INVALID_LOCK_EN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_INVALID_LOCK_EN]

//>> GET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_INVALID_LOCK_EN]
static inline bool GET_IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_INVALID_LOCK_EN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG));
#endif
    return i_data.getBit<IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_INVALID_LOCK_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_INVALID_LOCK_EN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK1_INVALID_LOCK_EN]

//>> SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_INVALID_LOCK_EN]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_INVALID_LOCK_EN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_INVALID_LOCK_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_INVALID_LOCK_EN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_INVALID_LOCK_EN]

//>> SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_INVALID_LOCK_EN]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_INVALID_LOCK_EN(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_INVALID_LOCK_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_INVALID_LOCK_EN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_INVALID_LOCK_EN]

//>> SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_INVALID_LOCK_EN]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_INVALID_LOCK_EN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG));
#endif
    return o_data.setBit<IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_INVALID_LOCK_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_INVALID_LOCK_EN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_INVALID_LOCK_EN]

//>> CLEAR_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_INVALID_LOCK_EN]
static inline fapi2::buffer<uint64_t>& CLEAR_IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_INVALID_LOCK_EN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG));
#endif
    return o_data.clearBit<IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_INVALID_LOCK_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_INVALID_LOCK_EN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_INVALID_LOCK_EN]

//>> GET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_INVALID_LOCK_EN]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_INVALID_LOCK_EN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_INVALID_LOCK_EN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_INVALID_LOCK_EN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_INVALID_LOCK_EN]

//>> GET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_INVALID_LOCK_EN]
static inline bool GET_IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_INVALID_LOCK_EN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG));
#endif
    return i_data.getBit<IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_INVALID_LOCK_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_INVALID_LOCK_EN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_PEAK2_INVALID_LOCK_EN]

//>> SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_UP_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_UP_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_UP_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_UP_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_UP_ENABLE]

//>> SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_UP_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_UP_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_UP_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_UP_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_UP_ENABLE]

//>> SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_UP_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_UP_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG));
#endif
    return o_data.setBit<IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_UP_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_UP_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_UP_ENABLE]

//>> CLEAR_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_UP_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_UP_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG));
#endif
    return o_data.clearBit<IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_UP_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_UP_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_UP_ENABLE]

//>> GET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_UP_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_UP_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_UP_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_UP_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_UP_ENABLE]

//>> GET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_UP_ENABLE]
static inline bool GET_IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_UP_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG));
#endif
    return i_data.getBit<IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_UP_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_UP_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_UP_ENABLE]

//>> SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_DOWN_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_DOWN_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_DOWN_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_DOWN_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_DOWN_ENABLE]

//>> SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_DOWN_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_DOWN_ENABLE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_DOWN_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_DOWN_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_DOWN_ENABLE]

//>> SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_DOWN_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_DOWN_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG));
#endif
    return o_data.setBit<IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_DOWN_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_DOWN_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_DOWN_ENABLE]

//>> CLEAR_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_DOWN_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_DOWN_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG));
#endif
    return o_data.clearBit<IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_DOWN_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_DOWN_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_DOWN_ENABLE]

//>> GET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_DOWN_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_DOWN_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_DOWN_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_DOWN_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_DOWN_ENABLE]

//>> GET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_DOWN_ENABLE]
static inline bool GET_IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_DOWN_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG));
#endif
    return i_data.getBit<IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_DOWN_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_DOWN_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_CTL_REGS_RX_MODE23_PG_CONVERGE_DOWN_ENABLE]

//>> PREP_[IOO_RX0_RXCTL_DATASM_REGS_RX_CNT11_PG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_IOO_RX0_RXCTL_DATASM_REGS_RX_CNT11_PG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_RXCTL_DATASM_REGS_RX_CNT11_PG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[IOO_RX0_RXCTL_DATASM_REGS_RX_CNT11_PG]

//>> GET_[IOO_RX0_RXCTL_DATASM_REGS_RX_CNT11_PG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_IOO_RX0_RXCTL_DATASM_REGS_RX_CNT11_PG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_RXCTL_DATASM_REGS_RX_CNT11_PG;
#endif
    return fapi2::getScom(i_target, IOO_RX0_RXCTL_DATASM_REGS_RX_CNT11_PG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_REGS_RX_CNT11_PG]

//>> PUT_[IOO_RX0_RXCTL_DATASM_REGS_RX_CNT11_PG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_IOO_RX0_RXCTL_DATASM_REGS_RX_CNT11_PG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_REGS_RX_CNT11_PG));
#endif
    return fapi2::putScom(i_target, IOO_RX0_RXCTL_DATASM_REGS_RX_CNT11_PG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[IOO_RX0_RXCTL_DATASM_REGS_RX_CNT11_PG]


//>> SET_[IOO_RX0_RXCTL_DATASM_REGS_RX_CNT11_PG_RX_PSAVE_FORCE_STS_0_15]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_REGS_RX_CNT11_PG_RX_PSAVE_FORCE_STS_0_15(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_REGS_RX_CNT11_PG));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_REGS_RX_CNT11_PG_RX_PSAVE_FORCE_STS_0_15,
           IOO_RX0_RXCTL_DATASM_REGS_RX_CNT11_PG_RX_PSAVE_FORCE_STS_0_15_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_REGS_RX_CNT11_PG_RX_PSAVE_FORCE_STS_0_15 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_REGS_RX_CNT11_PG_RX_PSAVE_FORCE_STS_0_15]

//>> SET_[IOO_RX0_RXCTL_DATASM_REGS_RX_CNT11_PG_RX_PSAVE_FORCE_STS_0_15]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_REGS_RX_CNT11_PG_RX_PSAVE_FORCE_STS_0_15(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_REGS_RX_CNT11_PG));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_REGS_RX_CNT11_PG_RX_PSAVE_FORCE_STS_0_15,
           IOO_RX0_RXCTL_DATASM_REGS_RX_CNT11_PG_RX_PSAVE_FORCE_STS_0_15_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_REGS_RX_CNT11_PG_RX_PSAVE_FORCE_STS_0_15 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_REGS_RX_CNT11_PG_RX_PSAVE_FORCE_STS_0_15]

//>> GET_[IOO_RX0_RXCTL_DATASM_REGS_RX_CNT11_PG_RX_PSAVE_FORCE_STS_0_15]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_RXCTL_DATASM_REGS_RX_CNT11_PG_RX_PSAVE_FORCE_STS_0_15(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_REGS_RX_CNT11_PG));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_DATASM_REGS_RX_CNT11_PG_RX_PSAVE_FORCE_STS_0_15,
           IOO_RX0_RXCTL_DATASM_REGS_RX_CNT11_PG_RX_PSAVE_FORCE_STS_0_15_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_REGS_RX_CNT11_PG_RX_PSAVE_FORCE_STS_0_15 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_REGS_RX_CNT11_PG_RX_PSAVE_FORCE_STS_0_15]

//>> PREP_[IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG]

//>> GET_[IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG;
#endif
    return fapi2::getScom(i_target, IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG]

//>> PUT_[IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG));
#endif
    return fapi2::putScom(i_target, IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG]


//>> SET_[IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG_RX_IO_PB_NV_IOBIST_RESET]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG_RX_IO_PB_NV_IOBIST_RESET(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG_RX_IO_PB_NV_IOBIST_RESET,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG_RX_IO_PB_NV_IOBIST_RESET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG_RX_IO_PB_NV_IOBIST_RESET]

//>> SET_[IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG_RX_IO_PB_NV_IOBIST_RESET]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG_RX_IO_PB_NV_IOBIST_RESET(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG_RX_IO_PB_NV_IOBIST_RESET,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG_RX_IO_PB_NV_IOBIST_RESET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG_RX_IO_PB_NV_IOBIST_RESET]

//>> SET_[IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG_RX_IO_PB_NV_IOBIST_RESET]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG_RX_IO_PB_NV_IOBIST_RESET(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG));
#endif
    return o_data.setBit<IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG_RX_IO_PB_NV_IOBIST_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG_RX_IO_PB_NV_IOBIST_RESET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG_RX_IO_PB_NV_IOBIST_RESET]

//>> CLEAR_[IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG_RX_IO_PB_NV_IOBIST_RESET]
static inline fapi2::buffer<uint64_t>& CLEAR_IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG_RX_IO_PB_NV_IOBIST_RESET(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG));
#endif
    return o_data.clearBit<IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG_RX_IO_PB_NV_IOBIST_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG_RX_IO_PB_NV_IOBIST_RESET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG_RX_IO_PB_NV_IOBIST_RESET]

//>> GET_[IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG_RX_IO_PB_NV_IOBIST_RESET]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG_RX_IO_PB_NV_IOBIST_RESET(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG_RX_IO_PB_NV_IOBIST_RESET,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG_RX_IO_PB_NV_IOBIST_RESET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG_RX_IO_PB_NV_IOBIST_RESET]

//>> GET_[IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG_RX_IO_PB_NV_IOBIST_RESET]
static inline bool GET_IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG_RX_IO_PB_NV_IOBIST_RESET(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG));
#endif
    return i_data.getBit<IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG_RX_IO_PB_NV_IOBIST_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG_RX_IO_PB_NV_IOBIST_RESET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_REGS_RX_CNT21_PG_RX_IO_PB_NV_IOBIST_RESET]

//>> PREP_[IOO_RX0_RXCTL_DATASM_REGS_RX_CNTL2_PG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_IOO_RX0_RXCTL_DATASM_REGS_RX_CNTL2_PG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_RXCTL_DATASM_REGS_RX_CNTL2_PG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[IOO_RX0_RXCTL_DATASM_REGS_RX_CNTL2_PG]

//>> GET_[IOO_RX0_RXCTL_DATASM_REGS_RX_CNTL2_PG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_IOO_RX0_RXCTL_DATASM_REGS_RX_CNTL2_PG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_RXCTL_DATASM_REGS_RX_CNTL2_PG;
#endif
    return fapi2::getScom(i_target, IOO_RX0_RXCTL_DATASM_REGS_RX_CNTL2_PG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_REGS_RX_CNTL2_PG]

//>> PUT_[IOO_RX0_RXCTL_DATASM_REGS_RX_CNTL2_PG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_IOO_RX0_RXCTL_DATASM_REGS_RX_CNTL2_PG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_REGS_RX_CNTL2_PG));
#endif
    return fapi2::putScom(i_target, IOO_RX0_RXCTL_DATASM_REGS_RX_CNTL2_PG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[IOO_RX0_RXCTL_DATASM_REGS_RX_CNTL2_PG]


//>> SET_[IOO_RX0_RXCTL_DATASM_REGS_RX_CNTL2_PG_RX_SERVO_OP_QUEUE0_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
SET_IOO_RX0_RXCTL_DATASM_REGS_RX_CNTL2_PG_RX_SERVO_OP_QUEUE0_WO_PULSE_SLOW_SIGNAL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_REGS_RX_CNTL2_PG));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_REGS_RX_CNTL2_PG_RX_SERVO_OP_QUEUE0_WO_PULSE_SLOW_SIGNAL,
           IOO_RX0_RXCTL_DATASM_REGS_RX_CNTL2_PG_RX_SERVO_OP_QUEUE0_WO_PULSE_SLOW_SIGNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_REGS_RX_CNTL2_PG_RX_SERVO_OP_QUEUE0_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_REGS_RX_CNTL2_PG_RX_SERVO_OP_QUEUE0_WO_PULSE_SLOW_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_REGS_RX_CNTL2_PG_RX_SERVO_OP_QUEUE0_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
SET_IOO_RX0_RXCTL_DATASM_REGS_RX_CNTL2_PG_RX_SERVO_OP_QUEUE0_WO_PULSE_SLOW_SIGNAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_REGS_RX_CNTL2_PG));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_REGS_RX_CNTL2_PG_RX_SERVO_OP_QUEUE0_WO_PULSE_SLOW_SIGNAL,
           IOO_RX0_RXCTL_DATASM_REGS_RX_CNTL2_PG_RX_SERVO_OP_QUEUE0_WO_PULSE_SLOW_SIGNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_REGS_RX_CNTL2_PG_RX_SERVO_OP_QUEUE0_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_REGS_RX_CNTL2_PG_RX_SERVO_OP_QUEUE0_WO_PULSE_SLOW_SIGNAL]

//>> GET_[IOO_RX0_RXCTL_DATASM_REGS_RX_CNTL2_PG_RX_SERVO_OP_QUEUE0_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
GET_IOO_RX0_RXCTL_DATASM_REGS_RX_CNTL2_PG_RX_SERVO_OP_QUEUE0_WO_PULSE_SLOW_SIGNAL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_REGS_RX_CNTL2_PG));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_DATASM_REGS_RX_CNTL2_PG_RX_SERVO_OP_QUEUE0_WO_PULSE_SLOW_SIGNAL,
           IOO_RX0_RXCTL_DATASM_REGS_RX_CNTL2_PG_RX_SERVO_OP_QUEUE0_WO_PULSE_SLOW_SIGNAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_REGS_RX_CNTL2_PG_RX_SERVO_OP_QUEUE0_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_REGS_RX_CNTL2_PG_RX_SERVO_OP_QUEUE0_WO_PULSE_SLOW_SIGNAL]

//>> PREP_[IOO_RX0_RXCTL_DATASM_REGS_RX_STAT17_PG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_IOO_RX0_RXCTL_DATASM_REGS_RX_STAT17_PG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_RXCTL_DATASM_REGS_RX_STAT17_PG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[IOO_RX0_RXCTL_DATASM_REGS_RX_STAT17_PG]

//>> GET_[IOO_RX0_RXCTL_DATASM_REGS_RX_STAT17_PG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_IOO_RX0_RXCTL_DATASM_REGS_RX_STAT17_PG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_RXCTL_DATASM_REGS_RX_STAT17_PG;
#endif
    return fapi2::getScom(i_target, IOO_RX0_RXCTL_DATASM_REGS_RX_STAT17_PG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_REGS_RX_STAT17_PG]

//>> PUT_[IOO_RX0_RXCTL_DATASM_REGS_RX_STAT17_PG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_IOO_RX0_RXCTL_DATASM_REGS_RX_STAT17_PG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_REGS_RX_STAT17_PG));
#endif
    return fapi2::putScom(i_target, IOO_RX0_RXCTL_DATASM_REGS_RX_STAT17_PG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[IOO_RX0_RXCTL_DATASM_REGS_RX_STAT17_PG]


//>> SET_[IOO_RX0_RXCTL_DATASM_REGS_RX_STAT17_PG_RX_LOFF_HYST_MAX_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_REGS_RX_STAT17_PG_RX_LOFF_HYST_MAX_RO_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_REGS_RX_STAT17_PG));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_REGS_RX_STAT17_PG_RX_LOFF_HYST_MAX_RO_SIGNAL,
           IOO_RX0_RXCTL_DATASM_REGS_RX_STAT17_PG_RX_LOFF_HYST_MAX_RO_SIGNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_REGS_RX_STAT17_PG_RX_LOFF_HYST_MAX_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_REGS_RX_STAT17_PG_RX_LOFF_HYST_MAX_RO_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_REGS_RX_STAT17_PG_RX_LOFF_HYST_MAX_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_REGS_RX_STAT17_PG_RX_LOFF_HYST_MAX_RO_SIGNAL(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_REGS_RX_STAT17_PG));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_REGS_RX_STAT17_PG_RX_LOFF_HYST_MAX_RO_SIGNAL,
           IOO_RX0_RXCTL_DATASM_REGS_RX_STAT17_PG_RX_LOFF_HYST_MAX_RO_SIGNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_REGS_RX_STAT17_PG_RX_LOFF_HYST_MAX_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_REGS_RX_STAT17_PG_RX_LOFF_HYST_MAX_RO_SIGNAL]

//>> GET_[IOO_RX0_RXCTL_DATASM_REGS_RX_STAT17_PG_RX_LOFF_HYST_MAX_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_RXCTL_DATASM_REGS_RX_STAT17_PG_RX_LOFF_HYST_MAX_RO_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_REGS_RX_STAT17_PG));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_DATASM_REGS_RX_STAT17_PG_RX_LOFF_HYST_MAX_RO_SIGNAL,
           IOO_RX0_RXCTL_DATASM_REGS_RX_STAT17_PG_RX_LOFF_HYST_MAX_RO_SIGNAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_REGS_RX_STAT17_PG_RX_LOFF_HYST_MAX_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_REGS_RX_STAT17_PG_RX_LOFF_HYST_MAX_RO_SIGNAL]

//>> PREP_[IOO_RX0_RXCTL_DATASM_REGS_RX_STAT27_PG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_IOO_RX0_RXCTL_DATASM_REGS_RX_STAT27_PG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_RXCTL_DATASM_REGS_RX_STAT27_PG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[IOO_RX0_RXCTL_DATASM_REGS_RX_STAT27_PG]

//>> GET_[IOO_RX0_RXCTL_DATASM_REGS_RX_STAT27_PG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_IOO_RX0_RXCTL_DATASM_REGS_RX_STAT27_PG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_RXCTL_DATASM_REGS_RX_STAT27_PG;
#endif
    return fapi2::getScom(i_target, IOO_RX0_RXCTL_DATASM_REGS_RX_STAT27_PG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_REGS_RX_STAT27_PG]

//>> PUT_[IOO_RX0_RXCTL_DATASM_REGS_RX_STAT27_PG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_IOO_RX0_RXCTL_DATASM_REGS_RX_STAT27_PG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_REGS_RX_STAT27_PG));
#endif
    return fapi2::putScom(i_target, IOO_RX0_RXCTL_DATASM_REGS_RX_STAT27_PG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[IOO_RX0_RXCTL_DATASM_REGS_RX_STAT27_PG]


//>> SET_[IOO_RX0_RXCTL_DATASM_REGS_RX_STAT27_PG_RX_PSAVE_STS_PHY_16_23_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_REGS_RX_STAT27_PG_RX_PSAVE_STS_PHY_16_23_RO_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_REGS_RX_STAT27_PG));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_REGS_RX_STAT27_PG_RX_PSAVE_STS_PHY_16_23_RO_SIGNAL,
           IOO_RX0_RXCTL_DATASM_REGS_RX_STAT27_PG_RX_PSAVE_STS_PHY_16_23_RO_SIGNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_REGS_RX_STAT27_PG_RX_PSAVE_STS_PHY_16_23_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_REGS_RX_STAT27_PG_RX_PSAVE_STS_PHY_16_23_RO_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_REGS_RX_STAT27_PG_RX_PSAVE_STS_PHY_16_23_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_REGS_RX_STAT27_PG_RX_PSAVE_STS_PHY_16_23_RO_SIGNAL(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_REGS_RX_STAT27_PG));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_REGS_RX_STAT27_PG_RX_PSAVE_STS_PHY_16_23_RO_SIGNAL,
           IOO_RX0_RXCTL_DATASM_REGS_RX_STAT27_PG_RX_PSAVE_STS_PHY_16_23_RO_SIGNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_REGS_RX_STAT27_PG_RX_PSAVE_STS_PHY_16_23_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_REGS_RX_STAT27_PG_RX_PSAVE_STS_PHY_16_23_RO_SIGNAL]

//>> GET_[IOO_RX0_RXCTL_DATASM_REGS_RX_STAT27_PG_RX_PSAVE_STS_PHY_16_23_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_RXCTL_DATASM_REGS_RX_STAT27_PG_RX_PSAVE_STS_PHY_16_23_RO_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_REGS_RX_STAT27_PG));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_DATASM_REGS_RX_STAT27_PG_RX_PSAVE_STS_PHY_16_23_RO_SIGNAL,
           IOO_RX0_RXCTL_DATASM_REGS_RX_STAT27_PG_RX_PSAVE_STS_PHY_16_23_RO_SIGNAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_REGS_RX_STAT27_PG_RX_PSAVE_STS_PHY_16_23_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_REGS_RX_STAT27_PG_RX_PSAVE_STS_PHY_16_23_RO_SIGNAL]

//>> PREP_[IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG]

//>> GET_[IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG;
#endif
    return fapi2::getScom(i_target, IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG]

//>> PUT_[IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG));
#endif
    return fapi2::putScom(i_target, IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG]


//>> SET_[IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG_DIR_CHG_CNT_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG_DIR_CHG_CNT_RO_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG_DIR_CHG_CNT_RO_SIGNAL,
           IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG_DIR_CHG_CNT_RO_SIGNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG_DIR_CHG_CNT_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG_DIR_CHG_CNT_RO_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG_DIR_CHG_CNT_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG_DIR_CHG_CNT_RO_SIGNAL(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG_DIR_CHG_CNT_RO_SIGNAL,
           IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG_DIR_CHG_CNT_RO_SIGNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG_DIR_CHG_CNT_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG_DIR_CHG_CNT_RO_SIGNAL]

//>> GET_[IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG_DIR_CHG_CNT_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG_DIR_CHG_CNT_RO_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG_DIR_CHG_CNT_RO_SIGNAL,
           IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG_DIR_CHG_CNT_RO_SIGNAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG_DIR_CHG_CNT_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG_DIR_CHG_CNT_RO_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG_VOTE_DIFF_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG_VOTE_DIFF_RO_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG_VOTE_DIFF_RO_SIGNAL,
           IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG_VOTE_DIFF_RO_SIGNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG_VOTE_DIFF_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG_VOTE_DIFF_RO_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG_VOTE_DIFF_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG_VOTE_DIFF_RO_SIGNAL(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG_VOTE_DIFF_RO_SIGNAL,
           IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG_VOTE_DIFF_RO_SIGNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG_VOTE_DIFF_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG_VOTE_DIFF_RO_SIGNAL]

//>> GET_[IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG_VOTE_DIFF_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG_VOTE_DIFF_RO_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG_VOTE_DIFF_RO_SIGNAL,
           IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG_VOTE_DIFF_RO_SIGNAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG_VOTE_DIFF_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_REGS_RX_STAT2_PG_VOTE_DIFF_RO_SIGNAL]

//>> PREP_[IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL]

//>> GET_[IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL;
#endif
    return fapi2::getScom(i_target, IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL]

//>> PUT_[IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL));
#endif
    return fapi2::putScom(i_target, IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL]


//>> SET_[IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_REQ_ALT]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_REQ_ALT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_REQ_ALT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_REQ_ALT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_REQ_ALT]

//>> SET_[IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_REQ_ALT]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_REQ_ALT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_REQ_ALT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_REQ_ALT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_REQ_ALT]

//>> SET_[IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_REQ_ALT]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_REQ_ALT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL));
#endif
    return o_data.setBit<IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_REQ_ALT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_REQ_ALT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_REQ_ALT]

//>> CLEAR_[IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_REQ_ALT]
static inline fapi2::buffer<uint64_t>& CLEAR_IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_REQ_ALT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL));
#endif
    return o_data.clearBit<IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_REQ_ALT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_REQ_ALT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_REQ_ALT]

//>> GET_[IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_REQ_ALT]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_REQ_ALT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_REQ_ALT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_REQ_ALT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_REQ_ALT]

//>> GET_[IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_REQ_ALT]
static inline bool GET_IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_REQ_ALT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL));
#endif
    return i_data.getBit<IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_REQ_ALT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_REQ_ALT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_REQ_ALT]

//>> SET_[IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_STS_ALT]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_STS_ALT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_STS_ALT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_STS_ALT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_STS_ALT]

//>> SET_[IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_STS_ALT]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_STS_ALT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_STS_ALT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_STS_ALT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_STS_ALT]

//>> SET_[IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_STS_ALT]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_STS_ALT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL));
#endif
    return o_data.setBit<IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_STS_ALT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_STS_ALT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_STS_ALT]

//>> CLEAR_[IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_STS_ALT]
static inline fapi2::buffer<uint64_t>& CLEAR_IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_STS_ALT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL));
#endif
    return o_data.clearBit<IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_STS_ALT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_STS_ALT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_STS_ALT]

//>> GET_[IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_STS_ALT]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_STS_ALT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_STS_ALT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_STS_ALT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_STS_ALT]

//>> GET_[IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_STS_ALT]
static inline bool GET_IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_STS_ALT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL));
#endif
    return i_data.getBit<IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_STS_ALT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_STS_ALT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_13_PLREGS_RX_CNTL3_PL_STS_ALT]

//>> PREP_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL]

//>> GET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL;
#endif
    return fapi2::getScom(i_target, IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL]

//>> PUT_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL));
#endif
    return fapi2::putScom(i_target, IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL]


//>> SET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK]

//>> SET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK]

//>> SET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL));
#endif
    return o_data.setBit<IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK]

//>> CLEAR_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL));
#endif
    return o_data.clearBit<IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK]

//>> GET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK]

//>> GET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK]
static inline bool GET_IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL));
#endif
    return i_data.getBit<IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK]

//>> SET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK]

//>> SET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK]

//>> SET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL));
#endif
    return o_data.setBit<IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK]

//>> CLEAR_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL));
#endif
    return o_data.clearBit<IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK]

//>> GET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK]

//>> GET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK]
static inline bool GET_IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL));
#endif
    return i_data.getBit<IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK]

//>> SET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK]

//>> SET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK]

//>> SET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL));
#endif
    return o_data.setBit<IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK]

//>> CLEAR_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL));
#endif
    return o_data.clearBit<IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK]

//>> GET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK]

//>> GET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK]
static inline bool GET_IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL));
#endif
    return i_data.getBit<IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK]

//>> SET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK]

//>> SET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK]

//>> SET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL));
#endif
    return o_data.setBit<IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK]

//>> CLEAR_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL));
#endif
    return o_data.clearBit<IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK]

//>> GET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK]

//>> GET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK]
static inline bool GET_IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL));
#endif
    return i_data.getBit<IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK]

//>> SET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK]

//>> SET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK]

//>> SET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL));
#endif
    return o_data.setBit<IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK]

//>> CLEAR_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL));
#endif
    return o_data.clearBit<IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK]

//>> GET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK]

//>> GET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK]
static inline bool GET_IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL));
#endif
    return i_data.getBit<IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_15_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK]

//>> PREP_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL]

//>> GET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL;
#endif
    return fapi2::getScom(i_target, IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL]

//>> PUT_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL));
#endif
    return fapi2::putScom(i_target, IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL]


//>> SET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
SET_IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
SET_IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
SET_IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL));
#endif
    return o_data.setBit<IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL]

//>> CLEAR_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
CLEAR_IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL));
#endif
    return o_data.clearBit<IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL]

//>> GET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
GET_IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL]

//>> GET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL]
static inline bool GET_IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL));
#endif
    return i_data.getBit<IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
SET_IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
SET_IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
SET_IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL));
#endif
    return o_data.setBit<IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL]

//>> CLEAR_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
CLEAR_IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL));
#endif
    return o_data.clearBit<IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL]

//>> GET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
GET_IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL]

//>> GET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL]
static inline bool GET_IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL));
#endif
    return i_data.getBit<IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
SET_IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
SET_IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
SET_IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL));
#endif
    return o_data.setBit<IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL]

//>> CLEAR_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
CLEAR_IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL));
#endif
    return o_data.clearBit<IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL]

//>> GET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
GET_IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL]

//>> GET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL]
static inline bool GET_IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL));
#endif
    return i_data.getBit<IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
SET_IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
SET_IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
SET_IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL));
#endif
    return o_data.setBit<IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL]

//>> CLEAR_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
CLEAR_IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL));
#endif
    return o_data.clearBit<IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL]

//>> GET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
GET_IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL]

//>> GET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL]
static inline bool GET_IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL));
#endif
    return i_data.getBit<IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
SET_IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
SET_IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
SET_IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL));
#endif
    return o_data.setBit<IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL]

//>> CLEAR_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
CLEAR_IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL));
#endif
    return o_data.clearBit<IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL]

//>> GET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
GET_IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL]

//>> GET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL]
static inline bool GET_IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL));
#endif
    return i_data.getBit<IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_17_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL]

//>> PREP_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL]

//>> GET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL;
#endif
    return fapi2::getScom(i_target, IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL]

//>> PUT_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL));
#endif
    return fapi2::putScom(i_target, IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL]


//>> SET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
SET_IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
SET_IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
SET_IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL));
#endif
    return o_data.setBit<IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL]

//>> CLEAR_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
CLEAR_IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL));
#endif
    return o_data.clearBit<IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL]

//>> GET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
GET_IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL]

//>> GET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL]
static inline bool GET_IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL));
#endif
    return i_data.getBit<IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_SET_WO_PULSE_SLOW_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
SET_IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
SET_IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
SET_IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL));
#endif
    return o_data.setBit<IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL]

//>> CLEAR_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
CLEAR_IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL));
#endif
    return o_data.clearBit<IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL]

//>> GET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
GET_IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL]

//>> GET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL]
static inline bool GET_IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL));
#endif
    return i_data.getBit<IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_INIT_DONE_CLR_WO_PULSE_SLOW_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
SET_IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
SET_IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
SET_IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL));
#endif
    return o_data.setBit<IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL]

//>> CLEAR_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
CLEAR_IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL));
#endif
    return o_data.clearBit<IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL]

//>> GET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
GET_IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL]

//>> GET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL]
static inline bool GET_IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL));
#endif
    return i_data.getBit<IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_SET_WO_PULSE_SLOW_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
SET_IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
SET_IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
SET_IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL));
#endif
    return o_data.setBit<IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL]

//>> CLEAR_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
CLEAR_IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL));
#endif
    return o_data.clearBit<IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL]

//>> GET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
GET_IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL]

//>> GET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL]
static inline bool GET_IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL));
#endif
    return i_data.getBit<IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_PHY_DL_RECAL_DONE_CLR_WO_PULSE_SLOW_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
SET_IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
SET_IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
SET_IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL));
#endif
    return o_data.setBit<IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL]

//>> CLEAR_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
CLEAR_IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL));
#endif
    return o_data.clearBit<IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL]

//>> GET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL]
static inline fapi2::buffer<uint64_t>&
GET_IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL]

//>> GET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL]
static inline bool GET_IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL));
#endif
    return i_data.getBit<IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_21_PLREGS_RX_CNTL2_PL_DL_PHY_RECAL_ABORT_STICKY_CLR_WO_PULSE_SLOW_SIGNAL]

//>> PREP_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL]

//>> GET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL;
#endif
    return fapi2::getScom(i_target, IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL]

//>> PUT_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL));
#endif
    return fapi2::putScom(i_target, IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL]


//>> SET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK]

//>> SET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK]

//>> SET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL));
#endif
    return o_data.setBit<IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK]

//>> CLEAR_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL));
#endif
    return o_data.clearBit<IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK]

//>> GET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK]

//>> GET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK]
static inline bool GET_IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL));
#endif
    return i_data.getBit<IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_REQ_DL_MASK]

//>> SET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK]

//>> SET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK]

//>> SET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL));
#endif
    return o_data.setBit<IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK]

//>> CLEAR_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL));
#endif
    return o_data.clearBit<IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK]

//>> GET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK]

//>> GET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK]
static inline bool GET_IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL));
#endif
    return i_data.getBit<IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_DONE_DL_MASK]

//>> SET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK]

//>> SET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK]

//>> SET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL));
#endif
    return o_data.setBit<IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK]

//>> CLEAR_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL));
#endif
    return o_data.clearBit<IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK]

//>> GET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK]

//>> GET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK]
static inline bool GET_IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL));
#endif
    return i_data.getBit<IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RUN_LANE_DL_MASK]

//>> SET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK]

//>> SET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK]

//>> SET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL));
#endif
    return o_data.setBit<IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK]

//>> CLEAR_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL));
#endif
    return o_data.clearBit<IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK]

//>> GET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK]

//>> GET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK]
static inline bool GET_IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL));
#endif
    return i_data.getBit<IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_RECAL_ABORT_DL_MASK]

//>> SET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK]

//>> SET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK]

//>> SET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL));
#endif
    return o_data.setBit<IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK]

//>> CLEAR_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL));
#endif
    return o_data.clearBit<IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK]

//>> GET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK]

//>> GET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK]
static inline bool GET_IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL));
#endif
    return i_data.getBit<IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_23_PLREGS_RX_MODE1_PL_INIT_DONE_DL_MASK]

//>> PREP_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL]

//>> GET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL;
#endif
    return fapi2::getScom(i_target, IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL]

//>> PUT_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL));
#endif
    return fapi2::putScom(i_target, IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL]


//>> SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_INIT_DONE]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_INIT_DONE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_INIT_DONE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_INIT_DONE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_INIT_DONE]

//>> SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_INIT_DONE]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_INIT_DONE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_INIT_DONE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_INIT_DONE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_INIT_DONE]

//>> SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_INIT_DONE]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_INIT_DONE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL));
#endif
    return o_data.setBit<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_INIT_DONE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_INIT_DONE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_INIT_DONE]

//>> CLEAR_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_INIT_DONE]
static inline fapi2::buffer<uint64_t>& CLEAR_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_INIT_DONE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL));
#endif
    return o_data.clearBit<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_INIT_DONE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_INIT_DONE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_INIT_DONE]

//>> GET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_INIT_DONE]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_INIT_DONE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_INIT_DONE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_INIT_DONE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_INIT_DONE]

//>> GET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_INIT_DONE]
static inline bool GET_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_INIT_DONE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL));
#endif
    return i_data.getBit<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_INIT_DONE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_INIT_DONE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_INIT_DONE]

//>> SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_RECAL_DONE]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_RECAL_DONE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_RECAL_DONE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_RECAL_DONE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_RECAL_DONE]

//>> SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_RECAL_DONE]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_RECAL_DONE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_RECAL_DONE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_RECAL_DONE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_RECAL_DONE]

//>> SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_RECAL_DONE]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_RECAL_DONE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL));
#endif
    return o_data.setBit<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_RECAL_DONE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_RECAL_DONE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_RECAL_DONE]

//>> CLEAR_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_RECAL_DONE]
static inline fapi2::buffer<uint64_t>& CLEAR_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_RECAL_DONE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL));
#endif
    return o_data.clearBit<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_RECAL_DONE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_RECAL_DONE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_RECAL_DONE]

//>> GET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_RECAL_DONE]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_RECAL_DONE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_RECAL_DONE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_RECAL_DONE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_RECAL_DONE]

//>> GET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_RECAL_DONE]
static inline bool GET_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_RECAL_DONE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL));
#endif
    return i_data.getBit<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_RECAL_DONE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_RECAL_DONE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_CNTL1_PL_RECAL_DONE]

//>> PREP_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL]

//>> GET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL;
#endif
    return fapi2::getScom(i_target, IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL]

//>> PUT_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL));
#endif
    return fapi2::putScom(i_target, IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL]


//>> SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RUN_LANE_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RUN_LANE_RO_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RUN_LANE_RO_SIGNAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RUN_LANE_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RUN_LANE_RO_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RUN_LANE_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RUN_LANE_RO_SIGNAL(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RUN_LANE_RO_SIGNAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RUN_LANE_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RUN_LANE_RO_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RUN_LANE_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RUN_LANE_RO_SIGNAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL));
#endif
    return o_data.setBit<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RUN_LANE_RO_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RUN_LANE_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RUN_LANE_RO_SIGNAL]

//>> CLEAR_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RUN_LANE_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& CLEAR_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RUN_LANE_RO_SIGNAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL));
#endif
    return o_data.clearBit<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RUN_LANE_RO_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RUN_LANE_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RUN_LANE_RO_SIGNAL]

//>> GET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RUN_LANE_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RUN_LANE_RO_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RUN_LANE_RO_SIGNAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RUN_LANE_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RUN_LANE_RO_SIGNAL]

//>> GET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RUN_LANE_RO_SIGNAL]
static inline bool GET_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RUN_LANE_RO_SIGNAL(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL));
#endif
    return i_data.getBit<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RUN_LANE_RO_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RUN_LANE_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RUN_LANE_RO_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_REQ_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_REQ_RO_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_REQ_RO_SIGNAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_REQ_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_REQ_RO_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_REQ_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_REQ_RO_SIGNAL(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_REQ_RO_SIGNAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_REQ_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_REQ_RO_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_REQ_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_REQ_RO_SIGNAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL));
#endif
    return o_data.setBit<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_REQ_RO_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_REQ_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_REQ_RO_SIGNAL]

//>> CLEAR_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_REQ_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& CLEAR_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_REQ_RO_SIGNAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL));
#endif
    return o_data.clearBit<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_REQ_RO_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_REQ_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_REQ_RO_SIGNAL]

//>> GET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_REQ_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_REQ_RO_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_REQ_RO_SIGNAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_REQ_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_REQ_RO_SIGNAL]

//>> GET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_REQ_RO_SIGNAL]
static inline bool GET_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_REQ_RO_SIGNAL(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL));
#endif
    return i_data.getBit<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_REQ_RO_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_REQ_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_REQ_RO_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_RO_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_RO_SIGNAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_RO_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_RO_SIGNAL(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_RO_SIGNAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_RO_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_RO_SIGNAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL));
#endif
    return o_data.setBit<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_RO_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_RO_SIGNAL]

//>> CLEAR_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& CLEAR_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_RO_SIGNAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL));
#endif
    return o_data.clearBit<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_RO_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_RO_SIGNAL]

//>> GET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_RO_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_RO_SIGNAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_RO_SIGNAL]

//>> GET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_RO_SIGNAL]
static inline bool GET_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_RO_SIGNAL(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL));
#endif
    return i_data.getBit<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_RO_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_RO_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_STICKY_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>&
SET_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_STICKY_RO_SIGNAL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_STICKY_RO_SIGNAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_STICKY_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_STICKY_RO_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_STICKY_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>&
SET_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_STICKY_RO_SIGNAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_STICKY_RO_SIGNAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_STICKY_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_STICKY_RO_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_STICKY_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>&
SET_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_STICKY_RO_SIGNAL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL));
#endif
    return o_data.setBit<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_STICKY_RO_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_STICKY_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_STICKY_RO_SIGNAL]

//>> CLEAR_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_STICKY_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>&
CLEAR_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_STICKY_RO_SIGNAL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL));
#endif
    return o_data.clearBit<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_STICKY_RO_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_STICKY_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_STICKY_RO_SIGNAL]

//>> GET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_STICKY_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>&
GET_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_STICKY_RO_SIGNAL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_STICKY_RO_SIGNAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_STICKY_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_STICKY_RO_SIGNAL]

//>> GET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_STICKY_RO_SIGNAL]
static inline bool GET_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_STICKY_RO_SIGNAL(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL));
#endif
    return i_data.getBit<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_STICKY_RO_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_STICKY_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_DL_PHY_RECAL_ABORT_STICKY_RO_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_REQ_DL_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_REQ_DL_RO_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_REQ_DL_RO_SIGNAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_REQ_DL_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_REQ_DL_RO_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_REQ_DL_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_REQ_DL_RO_SIGNAL(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_REQ_DL_RO_SIGNAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_REQ_DL_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_REQ_DL_RO_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_REQ_DL_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_REQ_DL_RO_SIGNAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL));
#endif
    return o_data.setBit<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_REQ_DL_RO_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_REQ_DL_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_REQ_DL_RO_SIGNAL]

//>> CLEAR_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_REQ_DL_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& CLEAR_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_REQ_DL_RO_SIGNAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL));
#endif
    return o_data.clearBit<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_REQ_DL_RO_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_REQ_DL_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_REQ_DL_RO_SIGNAL]

//>> GET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_REQ_DL_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_REQ_DL_RO_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_REQ_DL_RO_SIGNAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_REQ_DL_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_REQ_DL_RO_SIGNAL]

//>> GET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_REQ_DL_RO_SIGNAL]
static inline bool GET_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_REQ_DL_RO_SIGNAL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL));
#endif
    return i_data.getBit<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_REQ_DL_RO_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_REQ_DL_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_REQ_DL_RO_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_STS_PHY_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_STS_PHY_RO_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_STS_PHY_RO_SIGNAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_STS_PHY_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_STS_PHY_RO_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_STS_PHY_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_STS_PHY_RO_SIGNAL(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_STS_PHY_RO_SIGNAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_STS_PHY_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_STS_PHY_RO_SIGNAL]

//>> SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_STS_PHY_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_STS_PHY_RO_SIGNAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL));
#endif
    return o_data.setBit<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_STS_PHY_RO_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_STS_PHY_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_STS_PHY_RO_SIGNAL]

//>> CLEAR_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_STS_PHY_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& CLEAR_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_STS_PHY_RO_SIGNAL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL));
#endif
    return o_data.clearBit<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_STS_PHY_RO_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_STS_PHY_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_STS_PHY_RO_SIGNAL]

//>> GET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_STS_PHY_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_STS_PHY_RO_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL));
#endif
    return i_data.extractToRight<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_STS_PHY_RO_SIGNAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_STS_PHY_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_STS_PHY_RO_SIGNAL]

//>> GET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_STS_PHY_RO_SIGNAL]
static inline bool GET_IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_STS_PHY_RO_SIGNAL(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL));
#endif
    return i_data.getBit<IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_STS_PHY_RO_SIGNAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_STS_PHY_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_RXCTL_DATASM_3_PLREGS_RX_STAT1_PL_PSAVE_STS_PHY_RO_SIGNAL]

//>> PREP_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL]

//>> GET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL;
#endif
    return fapi2::getScom(i_target, IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL]

//>> PUT_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL));
#endif
    return fapi2::putScom(i_target, IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL]


//>> SET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_A]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_A(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_A]

//>> SET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_A]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_A]

//>> SET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_A]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL));
#endif
    return o_data.setBit<IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_A]

//>> CLEAR_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_A]
static inline fapi2::buffer<uint64_t>& CLEAR_IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL));
#endif
    return o_data.clearBit<IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_A]

//>> GET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_A]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_A(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL));
#endif
    return i_data.extractToRight<IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_A,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_A]

//>> GET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_A]
static inline bool GET_IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_A(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL));
#endif
    return i_data.getBit<IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_A]

//>> SET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_A]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_A(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_A]

//>> SET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_A]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_A]

//>> SET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_A]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_A(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL));
#endif
    return o_data.setBit<IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_A]

//>> CLEAR_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_A]
static inline fapi2::buffer<uint64_t>& CLEAR_IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_A(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL));
#endif
    return o_data.clearBit<IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_A]

//>> GET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_A]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_A(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL));
#endif
    return i_data.extractToRight<IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_A,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_A]

//>> GET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_A]
static inline bool GET_IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_A(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL));
#endif
    return i_data.getBit<IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_A]

//>> SET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_A]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_A(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_A]

//>> SET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_A]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_A]

//>> SET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_A]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_A(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL));
#endif
    return o_data.setBit<IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_A]

//>> CLEAR_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_A]
static inline fapi2::buffer<uint64_t>& CLEAR_IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_A(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL));
#endif
    return o_data.clearBit<IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_A]

//>> GET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_A]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_A(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL));
#endif
    return i_data.extractToRight<IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_A,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_A]

//>> GET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_A]
static inline bool GET_IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_A(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL));
#endif
    return i_data.getBit<IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_A]

//>> SET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_B]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_B(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_B]

//>> SET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_B]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_B]

//>> SET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_B]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_B(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL));
#endif
    return o_data.setBit<IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_B]

//>> CLEAR_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_B]
static inline fapi2::buffer<uint64_t>& CLEAR_IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_B(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL));
#endif
    return o_data.clearBit<IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_B]

//>> GET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_B]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_B(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL));
#endif
    return i_data.extractToRight<IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_B,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_B]

//>> GET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_B]
static inline bool GET_IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_B(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL));
#endif
    return i_data.getBit<IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_ENABLE_B]

//>> SET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_B]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_B(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_B]

//>> SET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_B]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_B]

//>> SET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_B]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL));
#endif
    return o_data.setBit<IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_B]

//>> CLEAR_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_B]
static inline fapi2::buffer<uint64_t>& CLEAR_IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL));
#endif
    return o_data.clearBit<IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_B]

//>> GET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_B]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_B(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL));
#endif
    return i_data.extractToRight<IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_B,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_B]

//>> GET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_B]
static inline bool GET_IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_B(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL));
#endif
    return i_data.getBit<IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_SLAVE_MODE_B]

//>> SET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_B]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_B(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_B]

//>> SET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_B]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_B,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_B]

//>> SET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_B]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL));
#endif
    return o_data.setBit<IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_B]

//>> CLEAR_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_B]
static inline fapi2::buffer<uint64_t>& CLEAR_IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_B(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL));
#endif
    return o_data.clearBit<IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_B]

//>> GET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_B]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_B(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL));
#endif
    return i_data.extractToRight<IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_B,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_B]

//>> GET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_B]
static inline bool GET_IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_B(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL));
#endif
    return i_data.getBit<IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_B>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_B chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_0_RD_RX_BIT_REGS_CNTL2_PL_QUAD_MODE_B]

//>> PREP_[IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL]

//>> GET_[IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL;
#endif
    return fapi2::getScom(i_target, IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL]

//>> PUT_[IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL));
#endif
    return fapi2::putScom(i_target, IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL]


//>> SET_[IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL_FW_INERTIA_AMT]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL_FW_INERTIA_AMT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL_FW_INERTIA_AMT,
           IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL_FW_INERTIA_AMT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL_FW_INERTIA_AMT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL_FW_INERTIA_AMT]

//>> SET_[IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL_FW_INERTIA_AMT]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL_FW_INERTIA_AMT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL_FW_INERTIA_AMT,
           IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL_FW_INERTIA_AMT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL_FW_INERTIA_AMT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL_FW_INERTIA_AMT]

//>> GET_[IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL_FW_INERTIA_AMT]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL_FW_INERTIA_AMT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL));
#endif
    return i_data.extractToRight<IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL_FW_INERTIA_AMT,
           IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL_FW_INERTIA_AMT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL_FW_INERTIA_AMT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL_FW_INERTIA_AMT]

//>> SET_[IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL_PHASE_STEP]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL_PHASE_STEP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL_PHASE_STEP,
           IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL_PHASE_STEP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL_PHASE_STEP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL_PHASE_STEP]

//>> SET_[IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL_PHASE_STEP]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL_PHASE_STEP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL_PHASE_STEP,
           IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL_PHASE_STEP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL_PHASE_STEP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL_PHASE_STEP]

//>> GET_[IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL_PHASE_STEP]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL_PHASE_STEP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL));
#endif
    return i_data.extractToRight<IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL_PHASE_STEP,
           IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL_PHASE_STEP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL_PHASE_STEP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_0_RD_RX_BIT_REGS_MODE4_PL_PHASE_STEP]

//>> PREP_[IOO_RX0_0_RD_RX_BIT_REGS_STAT2_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_IOO_RX0_0_RD_RX_BIT_REGS_STAT2_PL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_0_RD_RX_BIT_REGS_STAT2_PL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[IOO_RX0_0_RD_RX_BIT_REGS_STAT2_PL]

//>> GET_[IOO_RX0_0_RD_RX_BIT_REGS_STAT2_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_IOO_RX0_0_RD_RX_BIT_REGS_STAT2_PL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_0_RD_RX_BIT_REGS_STAT2_PL;
#endif
    return fapi2::getScom(i_target, IOO_RX0_0_RD_RX_BIT_REGS_STAT2_PL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[IOO_RX0_0_RD_RX_BIT_REGS_STAT2_PL]

//>> PUT_[IOO_RX0_0_RD_RX_BIT_REGS_STAT2_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_IOO_RX0_0_RD_RX_BIT_REGS_STAT2_PL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_STAT2_PL));
#endif
    return fapi2::putScom(i_target, IOO_RX0_0_RD_RX_BIT_REGS_STAT2_PL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[IOO_RX0_0_RD_RX_BIT_REGS_STAT2_PL]


//>> SET_[IOO_RX0_0_RD_RX_BIT_REGS_STAT2_PL_RX_PR_FW_SNAPSHOT_A_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_RX_BIT_REGS_STAT2_PL_RX_PR_FW_SNAPSHOT_A_RO_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_STAT2_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_RX_BIT_REGS_STAT2_PL_RX_PR_FW_SNAPSHOT_A_RO_SIGNAL,
           IOO_RX0_0_RD_RX_BIT_REGS_STAT2_PL_RX_PR_FW_SNAPSHOT_A_RO_SIGNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_STAT2_PL_RX_PR_FW_SNAPSHOT_A_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_RX_BIT_REGS_STAT2_PL_RX_PR_FW_SNAPSHOT_A_RO_SIGNAL]

//>> SET_[IOO_RX0_0_RD_RX_BIT_REGS_STAT2_PL_RX_PR_FW_SNAPSHOT_A_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_RX_BIT_REGS_STAT2_PL_RX_PR_FW_SNAPSHOT_A_RO_SIGNAL(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_STAT2_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_RX_BIT_REGS_STAT2_PL_RX_PR_FW_SNAPSHOT_A_RO_SIGNAL,
           IOO_RX0_0_RD_RX_BIT_REGS_STAT2_PL_RX_PR_FW_SNAPSHOT_A_RO_SIGNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_STAT2_PL_RX_PR_FW_SNAPSHOT_A_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_RX_BIT_REGS_STAT2_PL_RX_PR_FW_SNAPSHOT_A_RO_SIGNAL]

//>> GET_[IOO_RX0_0_RD_RX_BIT_REGS_STAT2_PL_RX_PR_FW_SNAPSHOT_A_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_0_RD_RX_BIT_REGS_STAT2_PL_RX_PR_FW_SNAPSHOT_A_RO_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_STAT2_PL));
#endif
    return i_data.extractToRight<IOO_RX0_0_RD_RX_BIT_REGS_STAT2_PL_RX_PR_FW_SNAPSHOT_A_RO_SIGNAL,
           IOO_RX0_0_RD_RX_BIT_REGS_STAT2_PL_RX_PR_FW_SNAPSHOT_A_RO_SIGNAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_STAT2_PL_RX_PR_FW_SNAPSHOT_A_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_0_RD_RX_BIT_REGS_STAT2_PL_RX_PR_FW_SNAPSHOT_A_RO_SIGNAL]

//>> PREP_[IOO_RX0_0_RD_RX_BIT_REGS_FIR_ERROR_INJECT_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_IOO_RX0_0_RD_RX_BIT_REGS_FIR_ERROR_INJECT_PL(const fapi2::Target<K, M, V>&
        i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_0_RD_RX_BIT_REGS_FIR_ERROR_INJECT_PL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[IOO_RX0_0_RD_RX_BIT_REGS_FIR_ERROR_INJECT_PL]

//>> GET_[IOO_RX0_0_RD_RX_BIT_REGS_FIR_ERROR_INJECT_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_IOO_RX0_0_RD_RX_BIT_REGS_FIR_ERROR_INJECT_PL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_0_RD_RX_BIT_REGS_FIR_ERROR_INJECT_PL;
#endif
    return fapi2::getScom(i_target, IOO_RX0_0_RD_RX_BIT_REGS_FIR_ERROR_INJECT_PL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[IOO_RX0_0_RD_RX_BIT_REGS_FIR_ERROR_INJECT_PL]

//>> PUT_[IOO_RX0_0_RD_RX_BIT_REGS_FIR_ERROR_INJECT_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_IOO_RX0_0_RD_RX_BIT_REGS_FIR_ERROR_INJECT_PL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_FIR_ERROR_INJECT_PL));
#endif
    return fapi2::putScom(i_target, IOO_RX0_0_RD_RX_BIT_REGS_FIR_ERROR_INJECT_PL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[IOO_RX0_0_RD_RX_BIT_REGS_FIR_ERROR_INJECT_PL]


//>> SET_[IOO_RX0_0_RD_RX_BIT_REGS_FIR_ERROR_INJECT_PL_RX_PL_FIR_ERR_INJ]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_RX_BIT_REGS_FIR_ERROR_INJECT_PL_RX_PL_FIR_ERR_INJ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_FIR_ERROR_INJECT_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_RX_BIT_REGS_FIR_ERROR_INJECT_PL_RX_PL_FIR_ERR_INJ,
           IOO_RX0_0_RD_RX_BIT_REGS_FIR_ERROR_INJECT_PL_RX_PL_FIR_ERR_INJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_FIR_ERROR_INJECT_PL_RX_PL_FIR_ERR_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_RX_BIT_REGS_FIR_ERROR_INJECT_PL_RX_PL_FIR_ERR_INJ]

//>> SET_[IOO_RX0_0_RD_RX_BIT_REGS_FIR_ERROR_INJECT_PL_RX_PL_FIR_ERR_INJ]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_RX_BIT_REGS_FIR_ERROR_INJECT_PL_RX_PL_FIR_ERR_INJ(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_FIR_ERROR_INJECT_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_RX_BIT_REGS_FIR_ERROR_INJECT_PL_RX_PL_FIR_ERR_INJ,
           IOO_RX0_0_RD_RX_BIT_REGS_FIR_ERROR_INJECT_PL_RX_PL_FIR_ERR_INJ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_FIR_ERROR_INJECT_PL_RX_PL_FIR_ERR_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_RX_BIT_REGS_FIR_ERROR_INJECT_PL_RX_PL_FIR_ERR_INJ]

//>> GET_[IOO_RX0_0_RD_RX_BIT_REGS_FIR_ERROR_INJECT_PL_RX_PL_FIR_ERR_INJ]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_0_RD_RX_BIT_REGS_FIR_ERROR_INJECT_PL_RX_PL_FIR_ERR_INJ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_BIT_REGS_FIR_ERROR_INJECT_PL));
#endif
    return i_data.extractToRight<IOO_RX0_0_RD_RX_BIT_REGS_FIR_ERROR_INJECT_PL_RX_PL_FIR_ERR_INJ,
           IOO_RX0_0_RD_RX_BIT_REGS_FIR_ERROR_INJECT_PL_RX_PL_FIR_ERR_INJ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_BIT_REGS_FIR_ERROR_INJECT_PL_RX_PL_FIR_ERR_INJ chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_0_RD_RX_BIT_REGS_FIR_ERROR_INJECT_PL_RX_PL_FIR_ERR_INJ]

//>> PREP_[IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX26_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX26_PL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX26_PL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX26_PL]

//>> GET_[IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX26_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX26_PL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX26_PL;
#endif
    return fapi2::getScom(i_target, IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX26_PL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX26_PL]

//>> PUT_[IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX26_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX26_PL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX26_PL));
#endif
    return fapi2::putScom(i_target, IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX26_PL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX26_PL]


//>> SET_[IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX26_PL_RX_BE_LATCH_DAC_W]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX26_PL_RX_BE_LATCH_DAC_W(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX26_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX26_PL_RX_BE_LATCH_DAC_W,
           IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX26_PL_RX_BE_LATCH_DAC_W_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX26_PL_RX_BE_LATCH_DAC_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX26_PL_RX_BE_LATCH_DAC_W]

//>> SET_[IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX26_PL_RX_BE_LATCH_DAC_W]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX26_PL_RX_BE_LATCH_DAC_W(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX26_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX26_PL_RX_BE_LATCH_DAC_W,
           IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX26_PL_RX_BE_LATCH_DAC_W_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX26_PL_RX_BE_LATCH_DAC_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX26_PL_RX_BE_LATCH_DAC_W]

//>> GET_[IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX26_PL_RX_BE_LATCH_DAC_W]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX26_PL_RX_BE_LATCH_DAC_W(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX26_PL));
#endif
    return i_data.extractToRight<IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX26_PL_RX_BE_LATCH_DAC_W,
           IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX26_PL_RX_BE_LATCH_DAC_W_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX26_PL_RX_BE_LATCH_DAC_W chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX26_PL_RX_BE_LATCH_DAC_W]

//>> PREP_[IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX66_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX66_PL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX66_PL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX66_PL]

//>> GET_[IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX66_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX66_PL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX66_PL;
#endif
    return fapi2::getScom(i_target, IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX66_PL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX66_PL]

//>> PUT_[IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX66_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX66_PL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX66_PL));
#endif
    return fapi2::putScom(i_target, IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX66_PL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX66_PL]


//>> SET_[IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX66_PL_RX_BD_LATCH_DAC_N111]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX66_PL_RX_BD_LATCH_DAC_N111(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX66_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX66_PL_RX_BD_LATCH_DAC_N111,
           IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX66_PL_RX_BD_LATCH_DAC_N111_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX66_PL_RX_BD_LATCH_DAC_N111 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX66_PL_RX_BD_LATCH_DAC_N111]

//>> SET_[IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX66_PL_RX_BD_LATCH_DAC_N111]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX66_PL_RX_BD_LATCH_DAC_N111(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX66_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX66_PL_RX_BD_LATCH_DAC_N111,
           IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX66_PL_RX_BD_LATCH_DAC_N111_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX66_PL_RX_BD_LATCH_DAC_N111 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX66_PL_RX_BD_LATCH_DAC_N111]

//>> GET_[IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX66_PL_RX_BD_LATCH_DAC_N111]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX66_PL_RX_BD_LATCH_DAC_N111(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX66_PL));
#endif
    return i_data.extractToRight<IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX66_PL_RX_BD_LATCH_DAC_N111,
           IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX66_PL_RX_BD_LATCH_DAC_N111_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX66_PL_RX_BD_LATCH_DAC_N111 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX66_PL_RX_BD_LATCH_DAC_N111]

//>> PREP_[IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX76_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX76_PL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX76_PL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX76_PL]

//>> GET_[IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX76_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX76_PL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX76_PL;
#endif
    return fapi2::getScom(i_target, IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX76_PL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX76_PL]

//>> PUT_[IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX76_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX76_PL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX76_PL));
#endif
    return fapi2::putScom(i_target, IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX76_PL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX76_PL]


//>> SET_[IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX76_PL_RX_BD_LATCH_DAC_S001]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX76_PL_RX_BD_LATCH_DAC_S001(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX76_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX76_PL_RX_BD_LATCH_DAC_S001,
           IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX76_PL_RX_BD_LATCH_DAC_S001_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX76_PL_RX_BD_LATCH_DAC_S001 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX76_PL_RX_BD_LATCH_DAC_S001]

//>> SET_[IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX76_PL_RX_BD_LATCH_DAC_S001]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX76_PL_RX_BD_LATCH_DAC_S001(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX76_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX76_PL_RX_BD_LATCH_DAC_S001,
           IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX76_PL_RX_BD_LATCH_DAC_S001_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX76_PL_RX_BD_LATCH_DAC_S001 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX76_PL_RX_BD_LATCH_DAC_S001]

//>> GET_[IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX76_PL_RX_BD_LATCH_DAC_S001]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX76_PL_RX_BD_LATCH_DAC_S001(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX76_PL));
#endif
    return i_data.extractToRight<IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX76_PL_RX_BD_LATCH_DAC_S001,
           IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX76_PL_RX_BD_LATCH_DAC_S001_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX76_PL_RX_BD_LATCH_DAC_S001 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_0_RD_RX_DAC_REGS_LOFF_B_CNTLX76_PL_RX_BD_LATCH_DAC_S001]

//>> PREP_[IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL]

//>> GET_[IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL;
#endif
    return fapi2::getScom(i_target, IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL]

//>> PUT_[IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL));
#endif
    return fapi2::putScom(i_target, IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL]


//>> SET_[IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL_DATA]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL_DATA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL_DATA,
           IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL_DATA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL_DATA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL_DATA]

//>> SET_[IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL_DATA]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL_DATA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL_DATA,
           IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL_DATA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL_DATA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL_DATA]

//>> GET_[IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL_DATA]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL_DATA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL));
#endif
    return i_data.extractToRight<IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL_DATA,
           IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL_DATA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL_DATA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL_DATA]

//>> SET_[IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL_EDGE]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL_EDGE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL_EDGE,
           IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL_EDGE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL_EDGE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL_EDGE]

//>> SET_[IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL_EDGE]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL_EDGE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL_EDGE,
           IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL_EDGE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL_EDGE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL_EDGE]

//>> GET_[IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL_EDGE]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL_EDGE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL));
#endif
    return i_data.extractToRight<IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL_EDGE,
           IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL_EDGE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL_EDGE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_0_RD_RX_DAC_REGS_CNTL14_PL_EDGE]

//>> PREP_[IOO_RX0_0_RD_1_RX_BIT_REGS_MODE8_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_IOO_RX0_0_RD_1_RX_BIT_REGS_MODE8_PL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_0_RD_1_RX_BIT_REGS_MODE8_PL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[IOO_RX0_0_RD_1_RX_BIT_REGS_MODE8_PL]

//>> GET_[IOO_RX0_0_RD_1_RX_BIT_REGS_MODE8_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_IOO_RX0_0_RD_1_RX_BIT_REGS_MODE8_PL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_0_RD_1_RX_BIT_REGS_MODE8_PL;
#endif
    return fapi2::getScom(i_target, IOO_RX0_0_RD_1_RX_BIT_REGS_MODE8_PL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[IOO_RX0_0_RD_1_RX_BIT_REGS_MODE8_PL]

//>> PUT_[IOO_RX0_0_RD_1_RX_BIT_REGS_MODE8_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_IOO_RX0_0_RD_1_RX_BIT_REGS_MODE8_PL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_1_RX_BIT_REGS_MODE8_PL));
#endif
    return fapi2::putScom(i_target, IOO_RX0_0_RD_1_RX_BIT_REGS_MODE8_PL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[IOO_RX0_0_RD_1_RX_BIT_REGS_MODE8_PL]


//>> SET_[IOO_RX0_0_RD_1_RX_BIT_REGS_MODE8_PL_RX_BERPL_SAT_THRESH]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_1_RX_BIT_REGS_MODE8_PL_RX_BERPL_SAT_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_1_RX_BIT_REGS_MODE8_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_1_RX_BIT_REGS_MODE8_PL_RX_BERPL_SAT_THRESH,
           IOO_RX0_0_RD_1_RX_BIT_REGS_MODE8_PL_RX_BERPL_SAT_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_0_RD_1_RX_BIT_REGS_MODE8_PL_RX_BERPL_SAT_THRESH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_1_RX_BIT_REGS_MODE8_PL_RX_BERPL_SAT_THRESH]

//>> SET_[IOO_RX0_0_RD_1_RX_BIT_REGS_MODE8_PL_RX_BERPL_SAT_THRESH]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_1_RX_BIT_REGS_MODE8_PL_RX_BERPL_SAT_THRESH(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_1_RX_BIT_REGS_MODE8_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_1_RX_BIT_REGS_MODE8_PL_RX_BERPL_SAT_THRESH,
           IOO_RX0_0_RD_1_RX_BIT_REGS_MODE8_PL_RX_BERPL_SAT_THRESH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_0_RD_1_RX_BIT_REGS_MODE8_PL_RX_BERPL_SAT_THRESH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_1_RX_BIT_REGS_MODE8_PL_RX_BERPL_SAT_THRESH]

//>> GET_[IOO_RX0_0_RD_1_RX_BIT_REGS_MODE8_PL_RX_BERPL_SAT_THRESH]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_0_RD_1_RX_BIT_REGS_MODE8_PL_RX_BERPL_SAT_THRESH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_1_RX_BIT_REGS_MODE8_PL));
#endif
    return i_data.extractToRight<IOO_RX0_0_RD_1_RX_BIT_REGS_MODE8_PL_RX_BERPL_SAT_THRESH,
           IOO_RX0_0_RD_1_RX_BIT_REGS_MODE8_PL_RX_BERPL_SAT_THRESH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_0_RD_1_RX_BIT_REGS_MODE8_PL_RX_BERPL_SAT_THRESH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_0_RD_1_RX_BIT_REGS_MODE8_PL_RX_BERPL_SAT_THRESH]

//>> PREP_[IOO_RX0_0_RD_1_RX_BIT_REGS_FIR_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_IOO_RX0_0_RD_1_RX_BIT_REGS_FIR_PL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_0_RD_1_RX_BIT_REGS_FIR_PL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[IOO_RX0_0_RD_1_RX_BIT_REGS_FIR_PL]

//>> GET_[IOO_RX0_0_RD_1_RX_BIT_REGS_FIR_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_IOO_RX0_0_RD_1_RX_BIT_REGS_FIR_PL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_0_RD_1_RX_BIT_REGS_FIR_PL;
#endif
    return fapi2::getScom(i_target, IOO_RX0_0_RD_1_RX_BIT_REGS_FIR_PL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[IOO_RX0_0_RD_1_RX_BIT_REGS_FIR_PL]

//>> PUT_[IOO_RX0_0_RD_1_RX_BIT_REGS_FIR_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_IOO_RX0_0_RD_1_RX_BIT_REGS_FIR_PL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_1_RX_BIT_REGS_FIR_PL));
#endif
    return fapi2::putScom(i_target, IOO_RX0_0_RD_1_RX_BIT_REGS_FIR_PL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[IOO_RX0_0_RD_1_RX_BIT_REGS_FIR_PL]


//>> SET_[IOO_RX0_0_RD_1_RX_BIT_REGS_FIR_PL_RX_PL_FIR_ERRS_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_1_RX_BIT_REGS_FIR_PL_RX_PL_FIR_ERRS_RO_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_1_RX_BIT_REGS_FIR_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_1_RX_BIT_REGS_FIR_PL_RX_PL_FIR_ERRS_RO_SIGNAL,
           IOO_RX0_0_RD_1_RX_BIT_REGS_FIR_PL_RX_PL_FIR_ERRS_RO_SIGNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_0_RD_1_RX_BIT_REGS_FIR_PL_RX_PL_FIR_ERRS_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_1_RX_BIT_REGS_FIR_PL_RX_PL_FIR_ERRS_RO_SIGNAL]

//>> SET_[IOO_RX0_0_RD_1_RX_BIT_REGS_FIR_PL_RX_PL_FIR_ERRS_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_1_RX_BIT_REGS_FIR_PL_RX_PL_FIR_ERRS_RO_SIGNAL(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_1_RX_BIT_REGS_FIR_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_1_RX_BIT_REGS_FIR_PL_RX_PL_FIR_ERRS_RO_SIGNAL,
           IOO_RX0_0_RD_1_RX_BIT_REGS_FIR_PL_RX_PL_FIR_ERRS_RO_SIGNAL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_0_RD_1_RX_BIT_REGS_FIR_PL_RX_PL_FIR_ERRS_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_1_RX_BIT_REGS_FIR_PL_RX_PL_FIR_ERRS_RO_SIGNAL]

//>> GET_[IOO_RX0_0_RD_1_RX_BIT_REGS_FIR_PL_RX_PL_FIR_ERRS_RO_SIGNAL]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_0_RD_1_RX_BIT_REGS_FIR_PL_RX_PL_FIR_ERRS_RO_SIGNAL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_1_RX_BIT_REGS_FIR_PL));
#endif
    return i_data.extractToRight<IOO_RX0_0_RD_1_RX_BIT_REGS_FIR_PL_RX_PL_FIR_ERRS_RO_SIGNAL,
           IOO_RX0_0_RD_1_RX_BIT_REGS_FIR_PL_RX_PL_FIR_ERRS_RO_SIGNAL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_0_RD_1_RX_BIT_REGS_FIR_PL_RX_PL_FIR_ERRS_RO_SIGNAL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_0_RD_1_RX_BIT_REGS_FIR_PL_RX_PL_FIR_ERRS_RO_SIGNAL]

//>> PREP_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX21_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX21_PL(const fapi2::Target<K, M, V>&
        i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX21_PL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX21_PL]

//>> GET_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX21_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX21_PL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX21_PL;
#endif
    return fapi2::getScom(i_target, IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX21_PL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX21_PL]

//>> PUT_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX21_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX21_PL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX21_PL));
#endif
    return fapi2::putScom(i_target, IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX21_PL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX21_PL]


//>> SET_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX21_PL_RX_AE_LATCH_DAC_S]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX21_PL_RX_AE_LATCH_DAC_S(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX21_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX21_PL_RX_AE_LATCH_DAC_S,
           IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX21_PL_RX_AE_LATCH_DAC_S_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX21_PL_RX_AE_LATCH_DAC_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX21_PL_RX_AE_LATCH_DAC_S]

//>> SET_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX21_PL_RX_AE_LATCH_DAC_S]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX21_PL_RX_AE_LATCH_DAC_S(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX21_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX21_PL_RX_AE_LATCH_DAC_S,
           IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX21_PL_RX_AE_LATCH_DAC_S_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX21_PL_RX_AE_LATCH_DAC_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX21_PL_RX_AE_LATCH_DAC_S]

//>> GET_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX21_PL_RX_AE_LATCH_DAC_S]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX21_PL_RX_AE_LATCH_DAC_S(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX21_PL));
#endif
    return i_data.extractToRight<IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX21_PL_RX_AE_LATCH_DAC_S,
           IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX21_PL_RX_AE_LATCH_DAC_S_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX21_PL_RX_AE_LATCH_DAC_S chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX21_PL_RX_AE_LATCH_DAC_S]

//>> PREP_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX31_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX31_PL(const fapi2::Target<K, M, V>&
        i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX31_PL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX31_PL]

//>> GET_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX31_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX31_PL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX31_PL;
#endif
    return fapi2::getScom(i_target, IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX31_PL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX31_PL]

//>> PUT_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX31_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX31_PL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX31_PL));
#endif
    return fapi2::putScom(i_target, IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX31_PL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX31_PL]


//>> SET_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX31_PL_RX_AD_LATCH_DAC_N100]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX31_PL_RX_AD_LATCH_DAC_N100(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX31_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX31_PL_RX_AD_LATCH_DAC_N100,
           IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX31_PL_RX_AD_LATCH_DAC_N100_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX31_PL_RX_AD_LATCH_DAC_N100 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX31_PL_RX_AD_LATCH_DAC_N100]

//>> SET_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX31_PL_RX_AD_LATCH_DAC_N100]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX31_PL_RX_AD_LATCH_DAC_N100(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX31_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX31_PL_RX_AD_LATCH_DAC_N100,
           IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX31_PL_RX_AD_LATCH_DAC_N100_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX31_PL_RX_AD_LATCH_DAC_N100 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX31_PL_RX_AD_LATCH_DAC_N100]

//>> GET_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX31_PL_RX_AD_LATCH_DAC_N100]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX31_PL_RX_AD_LATCH_DAC_N100(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX31_PL));
#endif
    return i_data.extractToRight<IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX31_PL_RX_AD_LATCH_DAC_N100,
           IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX31_PL_RX_AD_LATCH_DAC_N100_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX31_PL_RX_AD_LATCH_DAC_N100 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX31_PL_RX_AD_LATCH_DAC_N100]

//>> PREP_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX41_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX41_PL(const fapi2::Target<K, M, V>&
        i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX41_PL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX41_PL]

//>> GET_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX41_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX41_PL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX41_PL;
#endif
    return fapi2::getScom(i_target, IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX41_PL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX41_PL]

//>> PUT_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX41_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX41_PL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX41_PL));
#endif
    return fapi2::putScom(i_target, IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX41_PL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX41_PL]


//>> SET_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX41_PL_RX_AD_LATCH_DAC_E110]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX41_PL_RX_AD_LATCH_DAC_E110(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX41_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX41_PL_RX_AD_LATCH_DAC_E110,
           IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX41_PL_RX_AD_LATCH_DAC_E110_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX41_PL_RX_AD_LATCH_DAC_E110 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX41_PL_RX_AD_LATCH_DAC_E110]

//>> SET_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX41_PL_RX_AD_LATCH_DAC_E110]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX41_PL_RX_AD_LATCH_DAC_E110(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX41_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX41_PL_RX_AD_LATCH_DAC_E110,
           IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX41_PL_RX_AD_LATCH_DAC_E110_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX41_PL_RX_AD_LATCH_DAC_E110 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX41_PL_RX_AD_LATCH_DAC_E110]

//>> GET_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX41_PL_RX_AD_LATCH_DAC_E110]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX41_PL_RX_AD_LATCH_DAC_E110(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX41_PL));
#endif
    return i_data.extractToRight<IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX41_PL_RX_AD_LATCH_DAC_E110,
           IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX41_PL_RX_AD_LATCH_DAC_E110_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX41_PL_RX_AD_LATCH_DAC_E110 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX41_PL_RX_AD_LATCH_DAC_E110]

//>> PREP_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX51_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX51_PL(const fapi2::Target<K, M, V>&
        i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX51_PL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX51_PL]

//>> GET_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX51_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX51_PL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX51_PL;
#endif
    return fapi2::getScom(i_target, IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX51_PL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX51_PL]

//>> PUT_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX51_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX51_PL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX51_PL));
#endif
    return fapi2::putScom(i_target, IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX51_PL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX51_PL]


//>> SET_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX51_PL_RX_AD_LATCH_DAC_W000]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX51_PL_RX_AD_LATCH_DAC_W000(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX51_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX51_PL_RX_AD_LATCH_DAC_W000,
           IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX51_PL_RX_AD_LATCH_DAC_W000_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX51_PL_RX_AD_LATCH_DAC_W000 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX51_PL_RX_AD_LATCH_DAC_W000]

//>> SET_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX51_PL_RX_AD_LATCH_DAC_W000]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX51_PL_RX_AD_LATCH_DAC_W000(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX51_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX51_PL_RX_AD_LATCH_DAC_W000,
           IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX51_PL_RX_AD_LATCH_DAC_W000_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX51_PL_RX_AD_LATCH_DAC_W000 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX51_PL_RX_AD_LATCH_DAC_W000]

//>> GET_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX51_PL_RX_AD_LATCH_DAC_W000]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX51_PL_RX_AD_LATCH_DAC_W000(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX51_PL));
#endif
    return i_data.extractToRight<IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX51_PL_RX_AD_LATCH_DAC_W000,
           IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX51_PL_RX_AD_LATCH_DAC_W000_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX51_PL_RX_AD_LATCH_DAC_W000 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_A_CNTLX51_PL_RX_AD_LATCH_DAC_W000]

//>> PREP_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_B_CNTLX86_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_B_CNTLX86_PL(const fapi2::Target<K, M, V>&
        i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_B_CNTLX86_PL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_B_CNTLX86_PL]

//>> GET_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_B_CNTLX86_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_B_CNTLX86_PL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_B_CNTLX86_PL;
#endif
    return fapi2::getScom(i_target, IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_B_CNTLX86_PL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_B_CNTLX86_PL]

//>> PUT_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_B_CNTLX86_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_B_CNTLX86_PL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_B_CNTLX86_PL));
#endif
    return fapi2::putScom(i_target, IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_B_CNTLX86_PL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_B_CNTLX86_PL]


//>> SET_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_B_CNTLX86_PL_RX_BD_LATCH_DAC_W011]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_B_CNTLX86_PL_RX_BD_LATCH_DAC_W011(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_B_CNTLX86_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_B_CNTLX86_PL_RX_BD_LATCH_DAC_W011,
           IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_B_CNTLX86_PL_RX_BD_LATCH_DAC_W011_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_B_CNTLX86_PL_RX_BD_LATCH_DAC_W011 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_B_CNTLX86_PL_RX_BD_LATCH_DAC_W011]

//>> SET_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_B_CNTLX86_PL_RX_BD_LATCH_DAC_W011]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_B_CNTLX86_PL_RX_BD_LATCH_DAC_W011(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_B_CNTLX86_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_B_CNTLX86_PL_RX_BD_LATCH_DAC_W011,
           IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_B_CNTLX86_PL_RX_BD_LATCH_DAC_W011_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_B_CNTLX86_PL_RX_BD_LATCH_DAC_W011 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_B_CNTLX86_PL_RX_BD_LATCH_DAC_W011]

//>> GET_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_B_CNTLX86_PL_RX_BD_LATCH_DAC_W011]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_B_CNTLX86_PL_RX_BD_LATCH_DAC_W011(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_B_CNTLX86_PL));
#endif
    return i_data.extractToRight<IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_B_CNTLX86_PL_RX_BD_LATCH_DAC_W011,
           IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_B_CNTLX86_PL_RX_BD_LATCH_DAC_W011_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_B_CNTLX86_PL_RX_BD_LATCH_DAC_W011 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_0_RD_1_RX_DAC_REGS_LOFF_B_CNTLX86_PL_RX_BD_LATCH_DAC_W011]

//>> PREP_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX23_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX23_PL(const fapi2::Target<K, M, V>&
        i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX23_PL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX23_PL]

//>> GET_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX23_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX23_PL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX23_PL;
#endif
    return fapi2::getScom(i_target, IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX23_PL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX23_PL]

//>> PUT_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX23_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX23_PL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX23_PL));
#endif
    return fapi2::putScom(i_target, IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX23_PL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX23_PL]


//>> SET_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX23_PL_RX_BE_LATCH_DAC_N]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX23_PL_RX_BE_LATCH_DAC_N(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX23_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX23_PL_RX_BE_LATCH_DAC_N,
           IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX23_PL_RX_BE_LATCH_DAC_N_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX23_PL_RX_BE_LATCH_DAC_N chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX23_PL_RX_BE_LATCH_DAC_N]

//>> SET_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX23_PL_RX_BE_LATCH_DAC_N]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX23_PL_RX_BE_LATCH_DAC_N(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX23_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX23_PL_RX_BE_LATCH_DAC_N,
           IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX23_PL_RX_BE_LATCH_DAC_N_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX23_PL_RX_BE_LATCH_DAC_N chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX23_PL_RX_BE_LATCH_DAC_N]

//>> GET_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX23_PL_RX_BE_LATCH_DAC_N]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX23_PL_RX_BE_LATCH_DAC_N(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX23_PL));
#endif
    return i_data.extractToRight<IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX23_PL_RX_BE_LATCH_DAC_N,
           IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX23_PL_RX_BE_LATCH_DAC_N_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX23_PL_RX_BE_LATCH_DAC_N chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX23_PL_RX_BE_LATCH_DAC_N]

//>> PREP_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX63_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX63_PL(const fapi2::Target<K, M, V>&
        i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX63_PL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX63_PL]

//>> GET_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX63_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX63_PL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX63_PL;
#endif
    return fapi2::getScom(i_target, IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX63_PL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX63_PL]

//>> PUT_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX63_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX63_PL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX63_PL));
#endif
    return fapi2::putScom(i_target, IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX63_PL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX63_PL]


//>> SET_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX63_PL_RX_BD_LATCH_DAC_N100]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX63_PL_RX_BD_LATCH_DAC_N100(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX63_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX63_PL_RX_BD_LATCH_DAC_N100,
           IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX63_PL_RX_BD_LATCH_DAC_N100_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX63_PL_RX_BD_LATCH_DAC_N100 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX63_PL_RX_BD_LATCH_DAC_N100]

//>> SET_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX63_PL_RX_BD_LATCH_DAC_N100]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX63_PL_RX_BD_LATCH_DAC_N100(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX63_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX63_PL_RX_BD_LATCH_DAC_N100,
           IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX63_PL_RX_BD_LATCH_DAC_N100_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX63_PL_RX_BD_LATCH_DAC_N100 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX63_PL_RX_BD_LATCH_DAC_N100]

//>> GET_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX63_PL_RX_BD_LATCH_DAC_N100]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX63_PL_RX_BD_LATCH_DAC_N100(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX63_PL));
#endif
    return i_data.extractToRight<IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX63_PL_RX_BD_LATCH_DAC_N100,
           IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX63_PL_RX_BD_LATCH_DAC_N100_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX63_PL_RX_BD_LATCH_DAC_N100 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX63_PL_RX_BD_LATCH_DAC_N100]

//>> PREP_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX73_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX73_PL(const fapi2::Target<K, M, V>&
        i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX73_PL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX73_PL]

//>> GET_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX73_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX73_PL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX73_PL;
#endif
    return fapi2::getScom(i_target, IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX73_PL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX73_PL]

//>> PUT_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX73_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX73_PL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX73_PL));
#endif
    return fapi2::putScom(i_target, IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX73_PL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX73_PL]


//>> SET_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX73_PL_RX_BD_LATCH_DAC_E110]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX73_PL_RX_BD_LATCH_DAC_E110(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX73_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX73_PL_RX_BD_LATCH_DAC_E110,
           IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX73_PL_RX_BD_LATCH_DAC_E110_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX73_PL_RX_BD_LATCH_DAC_E110 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX73_PL_RX_BD_LATCH_DAC_E110]

//>> SET_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX73_PL_RX_BD_LATCH_DAC_E110]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX73_PL_RX_BD_LATCH_DAC_E110(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX73_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX73_PL_RX_BD_LATCH_DAC_E110,
           IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX73_PL_RX_BD_LATCH_DAC_E110_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX73_PL_RX_BD_LATCH_DAC_E110 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX73_PL_RX_BD_LATCH_DAC_E110]

//>> GET_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX73_PL_RX_BD_LATCH_DAC_E110]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX73_PL_RX_BD_LATCH_DAC_E110(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX73_PL));
#endif
    return i_data.extractToRight<IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX73_PL_RX_BD_LATCH_DAC_E110,
           IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX73_PL_RX_BD_LATCH_DAC_E110_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX73_PL_RX_BD_LATCH_DAC_E110 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX73_PL_RX_BD_LATCH_DAC_E110]

//>> PREP_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX88_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX88_PL(const fapi2::Target<K, M, V>&
        i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX88_PL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX88_PL]

//>> GET_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX88_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX88_PL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX88_PL;
#endif
    return fapi2::getScom(i_target, IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX88_PL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX88_PL]

//>> PUT_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX88_PL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX88_PL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX88_PL));
#endif
    return fapi2::putScom(i_target, IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX88_PL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX88_PL]


//>> SET_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX88_PL_RX_BD_LATCH_DAC_W101]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX88_PL_RX_BD_LATCH_DAC_W101(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX88_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX88_PL_RX_BD_LATCH_DAC_W101,
           IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX88_PL_RX_BD_LATCH_DAC_W101_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_iohs Invalid dial access IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX88_PL_RX_BD_LATCH_DAC_W101 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX88_PL_RX_BD_LATCH_DAC_W101]

//>> SET_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX88_PL_RX_BD_LATCH_DAC_W101]
static inline fapi2::buffer<uint64_t>& SET_IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX88_PL_RX_BD_LATCH_DAC_W101(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX88_PL));
#endif
    return o_data.insertFromRight<IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX88_PL_RX_BD_LATCH_DAC_W101,
           IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX88_PL_RX_BD_LATCH_DAC_W101_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_iohs Invalid dial access IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX88_PL_RX_BD_LATCH_DAC_W101 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX88_PL_RX_BD_LATCH_DAC_W101]

//>> GET_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX88_PL_RX_BD_LATCH_DAC_W101]
static inline fapi2::buffer<uint64_t>& GET_IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX88_PL_RX_BD_LATCH_DAC_W101(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX88_PL));
#endif
    return i_data.extractToRight<IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX88_PL_RX_BD_LATCH_DAC_W101,
           IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX88_PL_RX_BD_LATCH_DAC_W101_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_iohs Invalid dial access IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX88_PL_RX_BD_LATCH_DAC_W101 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[IOO_RX0_0_RD_2_RX_DAC_REGS_LOFF_B_CNTLX88_PL_RX_BD_LATCH_DAC_W101]


//>>THE END<<

#ifndef __PPE_HCODE__
}
}

#endif
#endif
