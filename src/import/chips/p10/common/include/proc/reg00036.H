/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: src/import/chips/p10/common/include/proc/reg00036.H $         */
/*                                                                        */
/* OpenPOWER sbe Project                                                  */
/*                                                                        */
/* Contributors Listed Below - COPYRIGHT 2019,2020                        */
/* [+] International Business Machines Corp.                              */
/*                                                                        */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */
#include "fapi2.H"

#ifndef __PROC_REG00036_H_
#define __PROC_REG00036_H_

#ifndef __PPE_HCODE__
namespace scomt
{
namespace proc
{
#endif


//>> PREP_[INT_CQ_PBI_CTL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_CQ_PBI_CTL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_PBI_CTL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_CQ_PBI_CTL]

//>> GET_[INT_CQ_PBI_CTL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_CQ_PBI_CTL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_PBI_CTL;
#endif
    return fapi2::getScom(i_target, INT_CQ_PBI_CTL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_CQ_PBI_CTL]

//>> PUT_[INT_CQ_PBI_CTL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_CQ_PBI_CTL(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return fapi2::putScom(i_target, INT_CQ_PBI_CTL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_CQ_PBI_CTL]


//>> SET_[INT_CQ_PBI_CTL_DIS_ECCCHK_PBI]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBI_CTL_DIS_ECCCHK_PBI(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBI_CTL_DIS_ECCCHK_PBI,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBI_CTL_DIS_ECCCHK_PBI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBI_CTL_DIS_ECCCHK_PBI]

//>> SET_[INT_CQ_PBI_CTL_DIS_ECCCHK_PBI]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBI_CTL_DIS_ECCCHK_PBI(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBI_CTL_DIS_ECCCHK_PBI,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBI_CTL_DIS_ECCCHK_PBI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBI_CTL_DIS_ECCCHK_PBI]

//>> SET_[INT_CQ_PBI_CTL_DIS_ECCCHK_PBI]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBI_CTL_DIS_ECCCHK_PBI(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.setBit<INT_CQ_PBI_CTL_DIS_ECCCHK_PBI>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBI_CTL_DIS_ECCCHK_PBI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBI_CTL_DIS_ECCCHK_PBI]

//>> CLEAR_[INT_CQ_PBI_CTL_DIS_ECCCHK_PBI]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBI_CTL_DIS_ECCCHK_PBI(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBI_CTL_DIS_ECCCHK_PBI>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBI_CTL_DIS_ECCCHK_PBI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBI_CTL_DIS_ECCCHK_PBI]

//>> GET_[INT_CQ_PBI_CTL_DIS_ECCCHK_PBI]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBI_CTL_DIS_ECCCHK_PBI(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBI_CTL_DIS_ECCCHK_PBI,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBI_CTL_DIS_ECCCHK_PBI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBI_CTL_DIS_ECCCHK_PBI]

//>> GET_[INT_CQ_PBI_CTL_DIS_ECCCHK_PBI]
static inline bool GET_INT_CQ_PBI_CTL_DIS_ECCCHK_PBI(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return i_data.getBit<INT_CQ_PBI_CTL_DIS_ECCCHK_PBI>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBI_CTL_DIS_ECCCHK_PBI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBI_CTL_DIS_ECCCHK_PBI]

//>> SET_[INT_CQ_PBI_CTL_DIS_ECCCHK_PBDI]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBI_CTL_DIS_ECCCHK_PBDI(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBI_CTL_DIS_ECCCHK_PBDI,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBI_CTL_DIS_ECCCHK_PBDI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBI_CTL_DIS_ECCCHK_PBDI]

//>> SET_[INT_CQ_PBI_CTL_DIS_ECCCHK_PBDI]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBI_CTL_DIS_ECCCHK_PBDI(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBI_CTL_DIS_ECCCHK_PBDI,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBI_CTL_DIS_ECCCHK_PBDI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBI_CTL_DIS_ECCCHK_PBDI]

//>> SET_[INT_CQ_PBI_CTL_DIS_ECCCHK_PBDI]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBI_CTL_DIS_ECCCHK_PBDI(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.setBit<INT_CQ_PBI_CTL_DIS_ECCCHK_PBDI>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBI_CTL_DIS_ECCCHK_PBDI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBI_CTL_DIS_ECCCHK_PBDI]

//>> CLEAR_[INT_CQ_PBI_CTL_DIS_ECCCHK_PBDI]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBI_CTL_DIS_ECCCHK_PBDI(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBI_CTL_DIS_ECCCHK_PBDI>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBI_CTL_DIS_ECCCHK_PBDI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBI_CTL_DIS_ECCCHK_PBDI]

//>> GET_[INT_CQ_PBI_CTL_DIS_ECCCHK_PBDI]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBI_CTL_DIS_ECCCHK_PBDI(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBI_CTL_DIS_ECCCHK_PBDI,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBI_CTL_DIS_ECCCHK_PBDI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBI_CTL_DIS_ECCCHK_PBDI]

//>> GET_[INT_CQ_PBI_CTL_DIS_ECCCHK_PBDI]
static inline bool GET_INT_CQ_PBI_CTL_DIS_ECCCHK_PBDI(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return i_data.getBit<INT_CQ_PBI_CTL_DIS_ECCCHK_PBDI>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBI_CTL_DIS_ECCCHK_PBDI chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBI_CTL_DIS_ECCCHK_PBDI]

//>> SET_[INT_CQ_PBI_CTL_EN_TUNNEL_THR]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBI_CTL_EN_TUNNEL_THR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBI_CTL_EN_TUNNEL_THR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBI_CTL_EN_TUNNEL_THR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBI_CTL_EN_TUNNEL_THR]

//>> SET_[INT_CQ_PBI_CTL_EN_TUNNEL_THR]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBI_CTL_EN_TUNNEL_THR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBI_CTL_EN_TUNNEL_THR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBI_CTL_EN_TUNNEL_THR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBI_CTL_EN_TUNNEL_THR]

//>> SET_[INT_CQ_PBI_CTL_EN_TUNNEL_THR]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBI_CTL_EN_TUNNEL_THR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.setBit<INT_CQ_PBI_CTL_EN_TUNNEL_THR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBI_CTL_EN_TUNNEL_THR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBI_CTL_EN_TUNNEL_THR]

//>> CLEAR_[INT_CQ_PBI_CTL_EN_TUNNEL_THR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBI_CTL_EN_TUNNEL_THR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBI_CTL_EN_TUNNEL_THR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBI_CTL_EN_TUNNEL_THR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBI_CTL_EN_TUNNEL_THR]

//>> GET_[INT_CQ_PBI_CTL_EN_TUNNEL_THR]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBI_CTL_EN_TUNNEL_THR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBI_CTL_EN_TUNNEL_THR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBI_CTL_EN_TUNNEL_THR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBI_CTL_EN_TUNNEL_THR]

//>> GET_[INT_CQ_PBI_CTL_EN_TUNNEL_THR]
static inline bool GET_INT_CQ_PBI_CTL_EN_TUNNEL_THR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return i_data.getBit<INT_CQ_PBI_CTL_EN_TUNNEL_THR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBI_CTL_EN_TUNNEL_THR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBI_CTL_EN_TUNNEL_THR]

//>> SET_[INT_CQ_PBI_CTL_EN_TUNNEL_NXC]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBI_CTL_EN_TUNNEL_NXC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBI_CTL_EN_TUNNEL_NXC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBI_CTL_EN_TUNNEL_NXC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBI_CTL_EN_TUNNEL_NXC]

//>> SET_[INT_CQ_PBI_CTL_EN_TUNNEL_NXC]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBI_CTL_EN_TUNNEL_NXC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBI_CTL_EN_TUNNEL_NXC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBI_CTL_EN_TUNNEL_NXC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBI_CTL_EN_TUNNEL_NXC]

//>> SET_[INT_CQ_PBI_CTL_EN_TUNNEL_NXC]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBI_CTL_EN_TUNNEL_NXC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.setBit<INT_CQ_PBI_CTL_EN_TUNNEL_NXC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBI_CTL_EN_TUNNEL_NXC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBI_CTL_EN_TUNNEL_NXC]

//>> CLEAR_[INT_CQ_PBI_CTL_EN_TUNNEL_NXC]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBI_CTL_EN_TUNNEL_NXC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBI_CTL_EN_TUNNEL_NXC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBI_CTL_EN_TUNNEL_NXC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBI_CTL_EN_TUNNEL_NXC]

//>> GET_[INT_CQ_PBI_CTL_EN_TUNNEL_NXC]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBI_CTL_EN_TUNNEL_NXC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBI_CTL_EN_TUNNEL_NXC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBI_CTL_EN_TUNNEL_NXC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBI_CTL_EN_TUNNEL_NXC]

//>> GET_[INT_CQ_PBI_CTL_EN_TUNNEL_NXC]
static inline bool GET_INT_CQ_PBI_CTL_EN_TUNNEL_NXC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return i_data.getBit<INT_CQ_PBI_CTL_EN_TUNNEL_NXC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBI_CTL_EN_TUNNEL_NXC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBI_CTL_EN_TUNNEL_NXC]

//>> SET_[INT_CQ_PBI_CTL_RESERVED_4_7]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBI_CTL_RESERVED_4_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBI_CTL_RESERVED_4_7,
           INT_CQ_PBI_CTL_RESERVED_4_7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBI_CTL_RESERVED_4_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBI_CTL_RESERVED_4_7]

//>> SET_[INT_CQ_PBI_CTL_RESERVED_4_7]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBI_CTL_RESERVED_4_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBI_CTL_RESERVED_4_7,
           INT_CQ_PBI_CTL_RESERVED_4_7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBI_CTL_RESERVED_4_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBI_CTL_RESERVED_4_7]

//>> GET_[INT_CQ_PBI_CTL_RESERVED_4_7]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBI_CTL_RESERVED_4_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBI_CTL_RESERVED_4_7,
           INT_CQ_PBI_CTL_RESERVED_4_7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBI_CTL_RESERVED_4_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBI_CTL_RESERVED_4_7]

//>> SET_[INT_CQ_PBI_CTL_TRACE_BUS_SEL_0_1]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBI_CTL_TRACE_BUS_SEL_0_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBI_CTL_TRACE_BUS_SEL_0_1,
           INT_CQ_PBI_CTL_TRACE_BUS_SEL_0_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBI_CTL_TRACE_BUS_SEL_0_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBI_CTL_TRACE_BUS_SEL_0_1]

//>> SET_[INT_CQ_PBI_CTL_TRACE_BUS_SEL_0_1]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBI_CTL_TRACE_BUS_SEL_0_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBI_CTL_TRACE_BUS_SEL_0_1,
           INT_CQ_PBI_CTL_TRACE_BUS_SEL_0_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBI_CTL_TRACE_BUS_SEL_0_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBI_CTL_TRACE_BUS_SEL_0_1]

//>> GET_[INT_CQ_PBI_CTL_TRACE_BUS_SEL_0_1]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBI_CTL_TRACE_BUS_SEL_0_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBI_CTL_TRACE_BUS_SEL_0_1,
           INT_CQ_PBI_CTL_TRACE_BUS_SEL_0_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBI_CTL_TRACE_BUS_SEL_0_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBI_CTL_TRACE_BUS_SEL_0_1]

//>> SET_[INT_CQ_PBI_CTL_CQ_TRACE_SEL_0_1]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBI_CTL_CQ_TRACE_SEL_0_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBI_CTL_CQ_TRACE_SEL_0_1,
           INT_CQ_PBI_CTL_CQ_TRACE_SEL_0_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBI_CTL_CQ_TRACE_SEL_0_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBI_CTL_CQ_TRACE_SEL_0_1]

//>> SET_[INT_CQ_PBI_CTL_CQ_TRACE_SEL_0_1]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBI_CTL_CQ_TRACE_SEL_0_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBI_CTL_CQ_TRACE_SEL_0_1,
           INT_CQ_PBI_CTL_CQ_TRACE_SEL_0_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBI_CTL_CQ_TRACE_SEL_0_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBI_CTL_CQ_TRACE_SEL_0_1]

//>> GET_[INT_CQ_PBI_CTL_CQ_TRACE_SEL_0_1]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBI_CTL_CQ_TRACE_SEL_0_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBI_CTL_CQ_TRACE_SEL_0_1,
           INT_CQ_PBI_CTL_CQ_TRACE_SEL_0_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBI_CTL_CQ_TRACE_SEL_0_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBI_CTL_CQ_TRACE_SEL_0_1]

//>> SET_[INT_CQ_PBI_CTL_DIS_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBI_CTL_DIS_DMA_W(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBI_CTL_DIS_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBI_CTL_DIS_DMA_W chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBI_CTL_DIS_DMA_W]

//>> SET_[INT_CQ_PBI_CTL_DIS_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBI_CTL_DIS_DMA_W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBI_CTL_DIS_DMA_W,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBI_CTL_DIS_DMA_W chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBI_CTL_DIS_DMA_W]

//>> SET_[INT_CQ_PBI_CTL_DIS_DMA_W]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBI_CTL_DIS_DMA_W(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.setBit<INT_CQ_PBI_CTL_DIS_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBI_CTL_DIS_DMA_W chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBI_CTL_DIS_DMA_W]

//>> CLEAR_[INT_CQ_PBI_CTL_DIS_DMA_W]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBI_CTL_DIS_DMA_W(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBI_CTL_DIS_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBI_CTL_DIS_DMA_W chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBI_CTL_DIS_DMA_W]

//>> GET_[INT_CQ_PBI_CTL_DIS_DMA_W]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBI_CTL_DIS_DMA_W(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBI_CTL_DIS_DMA_W,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBI_CTL_DIS_DMA_W chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBI_CTL_DIS_DMA_W]

//>> GET_[INT_CQ_PBI_CTL_DIS_DMA_W]
static inline bool GET_INT_CQ_PBI_CTL_DIS_DMA_W(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return i_data.getBit<INT_CQ_PBI_CTL_DIS_DMA_W>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBI_CTL_DIS_DMA_W chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBI_CTL_DIS_DMA_W]

//>> SET_[INT_CQ_PBI_CTL_DMA_W_CRESP]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBI_CTL_DMA_W_CRESP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBI_CTL_DMA_W_CRESP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBI_CTL_DMA_W_CRESP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBI_CTL_DMA_W_CRESP]

//>> SET_[INT_CQ_PBI_CTL_DMA_W_CRESP]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBI_CTL_DMA_W_CRESP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBI_CTL_DMA_W_CRESP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBI_CTL_DMA_W_CRESP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBI_CTL_DMA_W_CRESP]

//>> SET_[INT_CQ_PBI_CTL_DMA_W_CRESP]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBI_CTL_DMA_W_CRESP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.setBit<INT_CQ_PBI_CTL_DMA_W_CRESP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBI_CTL_DMA_W_CRESP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBI_CTL_DMA_W_CRESP]

//>> CLEAR_[INT_CQ_PBI_CTL_DMA_W_CRESP]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBI_CTL_DMA_W_CRESP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBI_CTL_DMA_W_CRESP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBI_CTL_DMA_W_CRESP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBI_CTL_DMA_W_CRESP]

//>> GET_[INT_CQ_PBI_CTL_DMA_W_CRESP]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBI_CTL_DMA_W_CRESP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBI_CTL_DMA_W_CRESP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBI_CTL_DMA_W_CRESP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBI_CTL_DMA_W_CRESP]

//>> GET_[INT_CQ_PBI_CTL_DMA_W_CRESP]
static inline bool GET_INT_CQ_PBI_CTL_DMA_W_CRESP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return i_data.getBit<INT_CQ_PBI_CTL_DMA_W_CRESP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBI_CTL_DMA_W_CRESP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBI_CTL_DMA_W_CRESP]

//>> SET_[INT_CQ_PBI_CTL_FORCE_ECC_CE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBI_CTL_FORCE_ECC_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBI_CTL_FORCE_ECC_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBI_CTL_FORCE_ECC_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBI_CTL_FORCE_ECC_CE]

//>> SET_[INT_CQ_PBI_CTL_FORCE_ECC_CE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBI_CTL_FORCE_ECC_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBI_CTL_FORCE_ECC_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBI_CTL_FORCE_ECC_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBI_CTL_FORCE_ECC_CE]

//>> SET_[INT_CQ_PBI_CTL_FORCE_ECC_CE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBI_CTL_FORCE_ECC_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.setBit<INT_CQ_PBI_CTL_FORCE_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBI_CTL_FORCE_ECC_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBI_CTL_FORCE_ECC_CE]

//>> CLEAR_[INT_CQ_PBI_CTL_FORCE_ECC_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBI_CTL_FORCE_ECC_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBI_CTL_FORCE_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBI_CTL_FORCE_ECC_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBI_CTL_FORCE_ECC_CE]

//>> GET_[INT_CQ_PBI_CTL_FORCE_ECC_CE]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBI_CTL_FORCE_ECC_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBI_CTL_FORCE_ECC_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBI_CTL_FORCE_ECC_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBI_CTL_FORCE_ECC_CE]

//>> GET_[INT_CQ_PBI_CTL_FORCE_ECC_CE]
static inline bool GET_INT_CQ_PBI_CTL_FORCE_ECC_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return i_data.getBit<INT_CQ_PBI_CTL_FORCE_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBI_CTL_FORCE_ECC_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBI_CTL_FORCE_ECC_CE]

//>> SET_[INT_CQ_PBI_CTL_FORCE_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBI_CTL_FORCE_ECC_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBI_CTL_FORCE_ECC_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBI_CTL_FORCE_ECC_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBI_CTL_FORCE_ECC_UE]

//>> SET_[INT_CQ_PBI_CTL_FORCE_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBI_CTL_FORCE_ECC_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBI_CTL_FORCE_ECC_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBI_CTL_FORCE_ECC_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBI_CTL_FORCE_ECC_UE]

//>> SET_[INT_CQ_PBI_CTL_FORCE_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBI_CTL_FORCE_ECC_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.setBit<INT_CQ_PBI_CTL_FORCE_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBI_CTL_FORCE_ECC_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBI_CTL_FORCE_ECC_UE]

//>> CLEAR_[INT_CQ_PBI_CTL_FORCE_ECC_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBI_CTL_FORCE_ECC_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBI_CTL_FORCE_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBI_CTL_FORCE_ECC_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBI_CTL_FORCE_ECC_UE]

//>> GET_[INT_CQ_PBI_CTL_FORCE_ECC_UE]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBI_CTL_FORCE_ECC_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBI_CTL_FORCE_ECC_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBI_CTL_FORCE_ECC_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBI_CTL_FORCE_ECC_UE]

//>> GET_[INT_CQ_PBI_CTL_FORCE_ECC_UE]
static inline bool GET_INT_CQ_PBI_CTL_FORCE_ECC_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return i_data.getBit<INT_CQ_PBI_CTL_FORCE_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBI_CTL_FORCE_ECC_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBI_CTL_FORCE_ECC_UE]

//>> SET_[INT_CQ_PBI_CTL_REG_ORDER_ALL]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBI_CTL_REG_ORDER_ALL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBI_CTL_REG_ORDER_ALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBI_CTL_REG_ORDER_ALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBI_CTL_REG_ORDER_ALL]

//>> SET_[INT_CQ_PBI_CTL_REG_ORDER_ALL]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBI_CTL_REG_ORDER_ALL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBI_CTL_REG_ORDER_ALL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBI_CTL_REG_ORDER_ALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBI_CTL_REG_ORDER_ALL]

//>> SET_[INT_CQ_PBI_CTL_REG_ORDER_ALL]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBI_CTL_REG_ORDER_ALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.setBit<INT_CQ_PBI_CTL_REG_ORDER_ALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBI_CTL_REG_ORDER_ALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBI_CTL_REG_ORDER_ALL]

//>> CLEAR_[INT_CQ_PBI_CTL_REG_ORDER_ALL]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBI_CTL_REG_ORDER_ALL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBI_CTL_REG_ORDER_ALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBI_CTL_REG_ORDER_ALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBI_CTL_REG_ORDER_ALL]

//>> GET_[INT_CQ_PBI_CTL_REG_ORDER_ALL]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBI_CTL_REG_ORDER_ALL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBI_CTL_REG_ORDER_ALL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBI_CTL_REG_ORDER_ALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBI_CTL_REG_ORDER_ALL]

//>> GET_[INT_CQ_PBI_CTL_REG_ORDER_ALL]
static inline bool GET_INT_CQ_PBI_CTL_REG_ORDER_ALL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return i_data.getBit<INT_CQ_PBI_CTL_REG_ORDER_ALL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBI_CTL_REG_ORDER_ALL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBI_CTL_REG_ORDER_ALL]

//>> SET_[INT_CQ_PBI_CTL_RESERVED_17_21]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBI_CTL_RESERVED_17_21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBI_CTL_RESERVED_17_21,
           INT_CQ_PBI_CTL_RESERVED_17_21_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBI_CTL_RESERVED_17_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBI_CTL_RESERVED_17_21]

//>> SET_[INT_CQ_PBI_CTL_RESERVED_17_21]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBI_CTL_RESERVED_17_21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBI_CTL_RESERVED_17_21,
           INT_CQ_PBI_CTL_RESERVED_17_21_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBI_CTL_RESERVED_17_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBI_CTL_RESERVED_17_21]

//>> GET_[INT_CQ_PBI_CTL_RESERVED_17_21]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBI_CTL_RESERVED_17_21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBI_CTL_RESERVED_17_21,
           INT_CQ_PBI_CTL_RESERVED_17_21_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBI_CTL_RESERVED_17_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBI_CTL_RESERVED_17_21]

//>> SET_[INT_CQ_PBI_CTL_FORCE_TM_LOCAL]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBI_CTL_FORCE_TM_LOCAL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBI_CTL_FORCE_TM_LOCAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBI_CTL_FORCE_TM_LOCAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBI_CTL_FORCE_TM_LOCAL]

//>> SET_[INT_CQ_PBI_CTL_FORCE_TM_LOCAL]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBI_CTL_FORCE_TM_LOCAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBI_CTL_FORCE_TM_LOCAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBI_CTL_FORCE_TM_LOCAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBI_CTL_FORCE_TM_LOCAL]

//>> SET_[INT_CQ_PBI_CTL_FORCE_TM_LOCAL]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBI_CTL_FORCE_TM_LOCAL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.setBit<INT_CQ_PBI_CTL_FORCE_TM_LOCAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBI_CTL_FORCE_TM_LOCAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBI_CTL_FORCE_TM_LOCAL]

//>> CLEAR_[INT_CQ_PBI_CTL_FORCE_TM_LOCAL]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBI_CTL_FORCE_TM_LOCAL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBI_CTL_FORCE_TM_LOCAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBI_CTL_FORCE_TM_LOCAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBI_CTL_FORCE_TM_LOCAL]

//>> GET_[INT_CQ_PBI_CTL_FORCE_TM_LOCAL]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBI_CTL_FORCE_TM_LOCAL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBI_CTL_FORCE_TM_LOCAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBI_CTL_FORCE_TM_LOCAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBI_CTL_FORCE_TM_LOCAL]

//>> GET_[INT_CQ_PBI_CTL_FORCE_TM_LOCAL]
static inline bool GET_INT_CQ_PBI_CTL_FORCE_TM_LOCAL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return i_data.getBit<INT_CQ_PBI_CTL_FORCE_TM_LOCAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBI_CTL_FORCE_TM_LOCAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBI_CTL_FORCE_TM_LOCAL]

//>> SET_[INT_CQ_PBI_CTL_RESERVED_23_31]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBI_CTL_RESERVED_23_31(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBI_CTL_RESERVED_23_31,
           INT_CQ_PBI_CTL_RESERVED_23_31_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBI_CTL_RESERVED_23_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBI_CTL_RESERVED_23_31]

//>> SET_[INT_CQ_PBI_CTL_RESERVED_23_31]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBI_CTL_RESERVED_23_31(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBI_CTL_RESERVED_23_31,
           INT_CQ_PBI_CTL_RESERVED_23_31_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBI_CTL_RESERVED_23_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBI_CTL_RESERVED_23_31]

//>> GET_[INT_CQ_PBI_CTL_RESERVED_23_31]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBI_CTL_RESERVED_23_31(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBI_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBI_CTL_RESERVED_23_31,
           INT_CQ_PBI_CTL_RESERVED_23_31_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBI_CTL_RESERVED_23_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBI_CTL_RESERVED_23_31]

//>> PREP_[INT_CQ_PBO_CTL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_CQ_PBO_CTL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_PBO_CTL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_CQ_PBO_CTL]

//>> GET_[INT_CQ_PBO_CTL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_CQ_PBO_CTL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_PBO_CTL;
#endif
    return fapi2::getScom(i_target, INT_CQ_PBO_CTL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_CQ_PBO_CTL]

//>> PUT_[INT_CQ_PBO_CTL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_CQ_PBO_CTL(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return fapi2::putScom(i_target, INT_CQ_PBO_CTL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_CQ_PBO_CTL]


//>> SET_[INT_CQ_PBO_CTL_DIS_ECCCHK_PBDO]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_DIS_ECCCHK_PBDO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_DIS_ECCCHK_PBDO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_DIS_ECCCHK_PBDO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_DIS_ECCCHK_PBDO]

//>> SET_[INT_CQ_PBO_CTL_DIS_ECCCHK_PBDO]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_DIS_ECCCHK_PBDO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_DIS_ECCCHK_PBDO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_DIS_ECCCHK_PBDO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_DIS_ECCCHK_PBDO]

//>> SET_[INT_CQ_PBO_CTL_DIS_ECCCHK_PBDO]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_DIS_ECCCHK_PBDO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.setBit<INT_CQ_PBO_CTL_DIS_ECCCHK_PBDO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBO_CTL_DIS_ECCCHK_PBDO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_DIS_ECCCHK_PBDO]

//>> CLEAR_[INT_CQ_PBO_CTL_DIS_ECCCHK_PBDO]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBO_CTL_DIS_ECCCHK_PBDO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBO_CTL_DIS_ECCCHK_PBDO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBO_CTL_DIS_ECCCHK_PBDO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBO_CTL_DIS_ECCCHK_PBDO]

//>> GET_[INT_CQ_PBO_CTL_DIS_ECCCHK_PBDO]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_DIS_ECCCHK_PBDO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_DIS_ECCCHK_PBDO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_DIS_ECCCHK_PBDO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_DIS_ECCCHK_PBDO]

//>> GET_[INT_CQ_PBO_CTL_DIS_ECCCHK_PBDO]
static inline bool GET_INT_CQ_PBO_CTL_DIS_ECCCHK_PBDO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.getBit<INT_CQ_PBO_CTL_DIS_ECCCHK_PBDO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBO_CTL_DIS_ECCCHK_PBDO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_DIS_ECCCHK_PBDO]

//>> SET_[INT_CQ_PBO_CTL_RESERVED_1]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_RESERVED_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_RESERVED_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_RESERVED_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_RESERVED_1]

//>> SET_[INT_CQ_PBO_CTL_RESERVED_1]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_RESERVED_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_RESERVED_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_RESERVED_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_RESERVED_1]

//>> SET_[INT_CQ_PBO_CTL_RESERVED_1]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_RESERVED_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.setBit<INT_CQ_PBO_CTL_RESERVED_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBO_CTL_RESERVED_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_RESERVED_1]

//>> CLEAR_[INT_CQ_PBO_CTL_RESERVED_1]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBO_CTL_RESERVED_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBO_CTL_RESERVED_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBO_CTL_RESERVED_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBO_CTL_RESERVED_1]

//>> GET_[INT_CQ_PBO_CTL_RESERVED_1]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_RESERVED_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_RESERVED_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_RESERVED_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_RESERVED_1]

//>> GET_[INT_CQ_PBO_CTL_RESERVED_1]
static inline bool GET_INT_CQ_PBO_CTL_RESERVED_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.getBit<INT_CQ_PBO_CTL_RESERVED_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBO_CTL_RESERVED_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_RESERVED_1]

//>> SET_[INT_CQ_PBO_CTL_FORCE_P9_GRP_INTRP]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_FORCE_P9_GRP_INTRP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_FORCE_P9_GRP_INTRP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_P9_GRP_INTRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_FORCE_P9_GRP_INTRP]

//>> SET_[INT_CQ_PBO_CTL_FORCE_P9_GRP_INTRP]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_FORCE_P9_GRP_INTRP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_FORCE_P9_GRP_INTRP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_P9_GRP_INTRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_FORCE_P9_GRP_INTRP]

//>> SET_[INT_CQ_PBO_CTL_FORCE_P9_GRP_INTRP]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_FORCE_P9_GRP_INTRP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.setBit<INT_CQ_PBO_CTL_FORCE_P9_GRP_INTRP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_P9_GRP_INTRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_FORCE_P9_GRP_INTRP]

//>> CLEAR_[INT_CQ_PBO_CTL_FORCE_P9_GRP_INTRP]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBO_CTL_FORCE_P9_GRP_INTRP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBO_CTL_FORCE_P9_GRP_INTRP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_P9_GRP_INTRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBO_CTL_FORCE_P9_GRP_INTRP]

//>> GET_[INT_CQ_PBO_CTL_FORCE_P9_GRP_INTRP]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_FORCE_P9_GRP_INTRP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_FORCE_P9_GRP_INTRP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_P9_GRP_INTRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_FORCE_P9_GRP_INTRP]

//>> GET_[INT_CQ_PBO_CTL_FORCE_P9_GRP_INTRP]
static inline bool GET_INT_CQ_PBO_CTL_FORCE_P9_GRP_INTRP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.getBit<INT_CQ_PBO_CTL_FORCE_P9_GRP_INTRP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_P9_GRP_INTRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_FORCE_P9_GRP_INTRP]

//>> SET_[INT_CQ_PBO_CTL_FORCE_VH_LS_INTRP]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_FORCE_VH_LS_INTRP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_FORCE_VH_LS_INTRP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_VH_LS_INTRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_FORCE_VH_LS_INTRP]

//>> SET_[INT_CQ_PBO_CTL_FORCE_VH_LS_INTRP]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_FORCE_VH_LS_INTRP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_FORCE_VH_LS_INTRP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_VH_LS_INTRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_FORCE_VH_LS_INTRP]

//>> SET_[INT_CQ_PBO_CTL_FORCE_VH_LS_INTRP]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_FORCE_VH_LS_INTRP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.setBit<INT_CQ_PBO_CTL_FORCE_VH_LS_INTRP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_VH_LS_INTRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_FORCE_VH_LS_INTRP]

//>> CLEAR_[INT_CQ_PBO_CTL_FORCE_VH_LS_INTRP]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBO_CTL_FORCE_VH_LS_INTRP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBO_CTL_FORCE_VH_LS_INTRP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_VH_LS_INTRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBO_CTL_FORCE_VH_LS_INTRP]

//>> GET_[INT_CQ_PBO_CTL_FORCE_VH_LS_INTRP]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_FORCE_VH_LS_INTRP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_FORCE_VH_LS_INTRP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_VH_LS_INTRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_FORCE_VH_LS_INTRP]

//>> GET_[INT_CQ_PBO_CTL_FORCE_VH_LS_INTRP]
static inline bool GET_INT_CQ_PBO_CTL_FORCE_VH_LS_INTRP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.getBit<INT_CQ_PBO_CTL_FORCE_VH_LS_INTRP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_VH_LS_INTRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_FORCE_VH_LS_INTRP]

//>> SET_[INT_CQ_PBO_CTL_FORCE_VH_VP_INTRP]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_FORCE_VH_VP_INTRP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_FORCE_VH_VP_INTRP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_VH_VP_INTRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_FORCE_VH_VP_INTRP]

//>> SET_[INT_CQ_PBO_CTL_FORCE_VH_VP_INTRP]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_FORCE_VH_VP_INTRP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_FORCE_VH_VP_INTRP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_VH_VP_INTRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_FORCE_VH_VP_INTRP]

//>> SET_[INT_CQ_PBO_CTL_FORCE_VH_VP_INTRP]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_FORCE_VH_VP_INTRP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.setBit<INT_CQ_PBO_CTL_FORCE_VH_VP_INTRP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_VH_VP_INTRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_FORCE_VH_VP_INTRP]

//>> CLEAR_[INT_CQ_PBO_CTL_FORCE_VH_VP_INTRP]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBO_CTL_FORCE_VH_VP_INTRP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBO_CTL_FORCE_VH_VP_INTRP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_VH_VP_INTRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBO_CTL_FORCE_VH_VP_INTRP]

//>> GET_[INT_CQ_PBO_CTL_FORCE_VH_VP_INTRP]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_FORCE_VH_VP_INTRP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_FORCE_VH_VP_INTRP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_VH_VP_INTRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_FORCE_VH_VP_INTRP]

//>> GET_[INT_CQ_PBO_CTL_FORCE_VH_VP_INTRP]
static inline bool GET_INT_CQ_PBO_CTL_FORCE_VH_VP_INTRP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.getBit<INT_CQ_PBO_CTL_FORCE_VH_VP_INTRP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_VH_VP_INTRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_FORCE_VH_VP_INTRP]

//>> SET_[INT_CQ_PBO_CTL_FORCE_MAX_SCOPE_INTRP]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_FORCE_MAX_SCOPE_INTRP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_FORCE_MAX_SCOPE_INTRP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_MAX_SCOPE_INTRP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_FORCE_MAX_SCOPE_INTRP]

//>> SET_[INT_CQ_PBO_CTL_FORCE_MAX_SCOPE_INTRP]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_FORCE_MAX_SCOPE_INTRP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_FORCE_MAX_SCOPE_INTRP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_MAX_SCOPE_INTRP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_FORCE_MAX_SCOPE_INTRP]

//>> SET_[INT_CQ_PBO_CTL_FORCE_MAX_SCOPE_INTRP]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_FORCE_MAX_SCOPE_INTRP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.setBit<INT_CQ_PBO_CTL_FORCE_MAX_SCOPE_INTRP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_MAX_SCOPE_INTRP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_FORCE_MAX_SCOPE_INTRP]

//>> CLEAR_[INT_CQ_PBO_CTL_FORCE_MAX_SCOPE_INTRP]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBO_CTL_FORCE_MAX_SCOPE_INTRP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBO_CTL_FORCE_MAX_SCOPE_INTRP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_MAX_SCOPE_INTRP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBO_CTL_FORCE_MAX_SCOPE_INTRP]

//>> GET_[INT_CQ_PBO_CTL_FORCE_MAX_SCOPE_INTRP]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_FORCE_MAX_SCOPE_INTRP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_FORCE_MAX_SCOPE_INTRP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_MAX_SCOPE_INTRP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_FORCE_MAX_SCOPE_INTRP]

//>> GET_[INT_CQ_PBO_CTL_FORCE_MAX_SCOPE_INTRP]
static inline bool GET_INT_CQ_PBO_CTL_FORCE_MAX_SCOPE_INTRP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.getBit<INT_CQ_PBO_CTL_FORCE_MAX_SCOPE_INTRP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_MAX_SCOPE_INTRP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_FORCE_MAX_SCOPE_INTRP]

//>> SET_[INT_CQ_PBO_CTL_RESERVED_6]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_RESERVED_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_RESERVED_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_RESERVED_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_RESERVED_6]

//>> SET_[INT_CQ_PBO_CTL_RESERVED_6]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_RESERVED_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_RESERVED_6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_RESERVED_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_RESERVED_6]

//>> SET_[INT_CQ_PBO_CTL_RESERVED_6]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_RESERVED_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.setBit<INT_CQ_PBO_CTL_RESERVED_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBO_CTL_RESERVED_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_RESERVED_6]

//>> CLEAR_[INT_CQ_PBO_CTL_RESERVED_6]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBO_CTL_RESERVED_6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBO_CTL_RESERVED_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBO_CTL_RESERVED_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBO_CTL_RESERVED_6]

//>> GET_[INT_CQ_PBO_CTL_RESERVED_6]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_RESERVED_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_RESERVED_6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_RESERVED_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_RESERVED_6]

//>> GET_[INT_CQ_PBO_CTL_RESERVED_6]
static inline bool GET_INT_CQ_PBO_CTL_RESERVED_6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.getBit<INT_CQ_PBO_CTL_RESERVED_6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBO_CTL_RESERVED_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_RESERVED_6]

//>> SET_[INT_CQ_PBO_CTL_DROP_PRI_INTRP]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_DROP_PRI_INTRP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_DROP_PRI_INTRP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_DROP_PRI_INTRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_DROP_PRI_INTRP]

//>> SET_[INT_CQ_PBO_CTL_DROP_PRI_INTRP]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_DROP_PRI_INTRP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_DROP_PRI_INTRP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_DROP_PRI_INTRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_DROP_PRI_INTRP]

//>> SET_[INT_CQ_PBO_CTL_DROP_PRI_INTRP]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_DROP_PRI_INTRP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.setBit<INT_CQ_PBO_CTL_DROP_PRI_INTRP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBO_CTL_DROP_PRI_INTRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_DROP_PRI_INTRP]

//>> CLEAR_[INT_CQ_PBO_CTL_DROP_PRI_INTRP]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBO_CTL_DROP_PRI_INTRP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBO_CTL_DROP_PRI_INTRP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBO_CTL_DROP_PRI_INTRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBO_CTL_DROP_PRI_INTRP]

//>> GET_[INT_CQ_PBO_CTL_DROP_PRI_INTRP]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_DROP_PRI_INTRP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_DROP_PRI_INTRP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_DROP_PRI_INTRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_DROP_PRI_INTRP]

//>> GET_[INT_CQ_PBO_CTL_DROP_PRI_INTRP]
static inline bool GET_INT_CQ_PBO_CTL_DROP_PRI_INTRP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.getBit<INT_CQ_PBO_CTL_DROP_PRI_INTRP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBO_CTL_DROP_PRI_INTRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_DROP_PRI_INTRP]

//>> SET_[INT_CQ_PBO_CTL_RESERVED_8]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_RESERVED_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_RESERVED_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_RESERVED_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_RESERVED_8]

//>> SET_[INT_CQ_PBO_CTL_RESERVED_8]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_RESERVED_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_RESERVED_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_RESERVED_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_RESERVED_8]

//>> SET_[INT_CQ_PBO_CTL_RESERVED_8]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_RESERVED_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.setBit<INT_CQ_PBO_CTL_RESERVED_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBO_CTL_RESERVED_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_RESERVED_8]

//>> CLEAR_[INT_CQ_PBO_CTL_RESERVED_8]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBO_CTL_RESERVED_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBO_CTL_RESERVED_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBO_CTL_RESERVED_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBO_CTL_RESERVED_8]

//>> GET_[INT_CQ_PBO_CTL_RESERVED_8]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_RESERVED_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_RESERVED_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_RESERVED_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_RESERVED_8]

//>> GET_[INT_CQ_PBO_CTL_RESERVED_8]
static inline bool GET_INT_CQ_PBO_CTL_RESERVED_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.getBit<INT_CQ_PBO_CTL_RESERVED_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBO_CTL_RESERVED_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_RESERVED_8]

//>> SET_[INT_CQ_PBO_CTL_DROP_PRI_DMA]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_DROP_PRI_DMA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_DROP_PRI_DMA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_DROP_PRI_DMA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_DROP_PRI_DMA]

//>> SET_[INT_CQ_PBO_CTL_DROP_PRI_DMA]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_DROP_PRI_DMA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_DROP_PRI_DMA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_DROP_PRI_DMA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_DROP_PRI_DMA]

//>> SET_[INT_CQ_PBO_CTL_DROP_PRI_DMA]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_DROP_PRI_DMA(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.setBit<INT_CQ_PBO_CTL_DROP_PRI_DMA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBO_CTL_DROP_PRI_DMA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_DROP_PRI_DMA]

//>> CLEAR_[INT_CQ_PBO_CTL_DROP_PRI_DMA]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBO_CTL_DROP_PRI_DMA(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBO_CTL_DROP_PRI_DMA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBO_CTL_DROP_PRI_DMA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBO_CTL_DROP_PRI_DMA]

//>> GET_[INT_CQ_PBO_CTL_DROP_PRI_DMA]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_DROP_PRI_DMA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_DROP_PRI_DMA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_DROP_PRI_DMA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_DROP_PRI_DMA]

//>> GET_[INT_CQ_PBO_CTL_DROP_PRI_DMA]
static inline bool GET_INT_CQ_PBO_CTL_DROP_PRI_DMA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.getBit<INT_CQ_PBO_CTL_DROP_PRI_DMA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBO_CTL_DROP_PRI_DMA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_DROP_PRI_DMA]

//>> SET_[INT_CQ_PBO_CTL_DROP_MASK_0_5]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_DROP_MASK_0_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_DROP_MASK_0_5,
           INT_CQ_PBO_CTL_DROP_MASK_0_5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_DROP_MASK_0_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_DROP_MASK_0_5]

//>> SET_[INT_CQ_PBO_CTL_DROP_MASK_0_5]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_DROP_MASK_0_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_DROP_MASK_0_5,
           INT_CQ_PBO_CTL_DROP_MASK_0_5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_DROP_MASK_0_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_DROP_MASK_0_5]

//>> GET_[INT_CQ_PBO_CTL_DROP_MASK_0_5]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_DROP_MASK_0_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_DROP_MASK_0_5,
           INT_CQ_PBO_CTL_DROP_MASK_0_5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_DROP_MASK_0_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_DROP_MASK_0_5]

//>> SET_[INT_CQ_PBO_CTL_SLOW_CMD_RATE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_SLOW_CMD_RATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_SLOW_CMD_RATE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_SLOW_CMD_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_SLOW_CMD_RATE]

//>> SET_[INT_CQ_PBO_CTL_SLOW_CMD_RATE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_SLOW_CMD_RATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_SLOW_CMD_RATE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_SLOW_CMD_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_SLOW_CMD_RATE]

//>> SET_[INT_CQ_PBO_CTL_SLOW_CMD_RATE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_SLOW_CMD_RATE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.setBit<INT_CQ_PBO_CTL_SLOW_CMD_RATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBO_CTL_SLOW_CMD_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_SLOW_CMD_RATE]

//>> CLEAR_[INT_CQ_PBO_CTL_SLOW_CMD_RATE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBO_CTL_SLOW_CMD_RATE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBO_CTL_SLOW_CMD_RATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBO_CTL_SLOW_CMD_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBO_CTL_SLOW_CMD_RATE]

//>> GET_[INT_CQ_PBO_CTL_SLOW_CMD_RATE]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_SLOW_CMD_RATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_SLOW_CMD_RATE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_SLOW_CMD_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_SLOW_CMD_RATE]

//>> GET_[INT_CQ_PBO_CTL_SLOW_CMD_RATE]
static inline bool GET_INT_CQ_PBO_CTL_SLOW_CMD_RATE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.getBit<INT_CQ_PBO_CTL_SLOW_CMD_RATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBO_CTL_SLOW_CMD_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_SLOW_CMD_RATE]

//>> SET_[INT_CQ_PBO_CTL_EN_RANDOM_BACKOFF]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_EN_RANDOM_BACKOFF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_EN_RANDOM_BACKOFF,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_EN_RANDOM_BACKOFF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_EN_RANDOM_BACKOFF]

//>> SET_[INT_CQ_PBO_CTL_EN_RANDOM_BACKOFF]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_EN_RANDOM_BACKOFF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_EN_RANDOM_BACKOFF,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_EN_RANDOM_BACKOFF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_EN_RANDOM_BACKOFF]

//>> SET_[INT_CQ_PBO_CTL_EN_RANDOM_BACKOFF]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_EN_RANDOM_BACKOFF(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.setBit<INT_CQ_PBO_CTL_EN_RANDOM_BACKOFF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBO_CTL_EN_RANDOM_BACKOFF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_EN_RANDOM_BACKOFF]

//>> CLEAR_[INT_CQ_PBO_CTL_EN_RANDOM_BACKOFF]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBO_CTL_EN_RANDOM_BACKOFF(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBO_CTL_EN_RANDOM_BACKOFF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBO_CTL_EN_RANDOM_BACKOFF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBO_CTL_EN_RANDOM_BACKOFF]

//>> GET_[INT_CQ_PBO_CTL_EN_RANDOM_BACKOFF]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_EN_RANDOM_BACKOFF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_EN_RANDOM_BACKOFF,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_EN_RANDOM_BACKOFF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_EN_RANDOM_BACKOFF]

//>> GET_[INT_CQ_PBO_CTL_EN_RANDOM_BACKOFF]
static inline bool GET_INT_CQ_PBO_CTL_EN_RANDOM_BACKOFF(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.getBit<INT_CQ_PBO_CTL_EN_RANDOM_BACKOFF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBO_CTL_EN_RANDOM_BACKOFF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_EN_RANDOM_BACKOFF]

//>> SET_[INT_CQ_PBO_CTL_RESERVED_18]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_RESERVED_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_RESERVED_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_RESERVED_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_RESERVED_18]

//>> SET_[INT_CQ_PBO_CTL_RESERVED_18]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_RESERVED_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_RESERVED_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_RESERVED_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_RESERVED_18]

//>> SET_[INT_CQ_PBO_CTL_RESERVED_18]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_RESERVED_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.setBit<INT_CQ_PBO_CTL_RESERVED_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBO_CTL_RESERVED_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_RESERVED_18]

//>> CLEAR_[INT_CQ_PBO_CTL_RESERVED_18]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBO_CTL_RESERVED_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBO_CTL_RESERVED_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBO_CTL_RESERVED_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBO_CTL_RESERVED_18]

//>> GET_[INT_CQ_PBO_CTL_RESERVED_18]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_RESERVED_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_RESERVED_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_RESERVED_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_RESERVED_18]

//>> GET_[INT_CQ_PBO_CTL_RESERVED_18]
static inline bool GET_INT_CQ_PBO_CTL_RESERVED_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.getBit<INT_CQ_PBO_CTL_RESERVED_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBO_CTL_RESERVED_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_RESERVED_18]

//>> SET_[INT_CQ_PBO_CTL_EN_CILD_BACKOFF]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_EN_CILD_BACKOFF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_EN_CILD_BACKOFF,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_EN_CILD_BACKOFF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_EN_CILD_BACKOFF]

//>> SET_[INT_CQ_PBO_CTL_EN_CILD_BACKOFF]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_EN_CILD_BACKOFF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_EN_CILD_BACKOFF,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_EN_CILD_BACKOFF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_EN_CILD_BACKOFF]

//>> SET_[INT_CQ_PBO_CTL_EN_CILD_BACKOFF]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_EN_CILD_BACKOFF(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.setBit<INT_CQ_PBO_CTL_EN_CILD_BACKOFF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBO_CTL_EN_CILD_BACKOFF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_EN_CILD_BACKOFF]

//>> CLEAR_[INT_CQ_PBO_CTL_EN_CILD_BACKOFF]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBO_CTL_EN_CILD_BACKOFF(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBO_CTL_EN_CILD_BACKOFF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBO_CTL_EN_CILD_BACKOFF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBO_CTL_EN_CILD_BACKOFF]

//>> GET_[INT_CQ_PBO_CTL_EN_CILD_BACKOFF]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_EN_CILD_BACKOFF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_EN_CILD_BACKOFF,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_EN_CILD_BACKOFF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_EN_CILD_BACKOFF]

//>> GET_[INT_CQ_PBO_CTL_EN_CILD_BACKOFF]
static inline bool GET_INT_CQ_PBO_CTL_EN_CILD_BACKOFF(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.getBit<INT_CQ_PBO_CTL_EN_CILD_BACKOFF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBO_CTL_EN_CILD_BACKOFF chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_EN_CILD_BACKOFF]

//>> SET_[INT_CQ_PBO_CTL_FORCE_ECC_CE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_FORCE_ECC_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_FORCE_ECC_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_ECC_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_FORCE_ECC_CE]

//>> SET_[INT_CQ_PBO_CTL_FORCE_ECC_CE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_FORCE_ECC_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_FORCE_ECC_CE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_ECC_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_FORCE_ECC_CE]

//>> SET_[INT_CQ_PBO_CTL_FORCE_ECC_CE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_FORCE_ECC_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.setBit<INT_CQ_PBO_CTL_FORCE_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_ECC_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_FORCE_ECC_CE]

//>> CLEAR_[INT_CQ_PBO_CTL_FORCE_ECC_CE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBO_CTL_FORCE_ECC_CE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBO_CTL_FORCE_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_ECC_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBO_CTL_FORCE_ECC_CE]

//>> GET_[INT_CQ_PBO_CTL_FORCE_ECC_CE]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_FORCE_ECC_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_FORCE_ECC_CE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_ECC_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_FORCE_ECC_CE]

//>> GET_[INT_CQ_PBO_CTL_FORCE_ECC_CE]
static inline bool GET_INT_CQ_PBO_CTL_FORCE_ECC_CE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.getBit<INT_CQ_PBO_CTL_FORCE_ECC_CE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_ECC_CE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_FORCE_ECC_CE]

//>> SET_[INT_CQ_PBO_CTL_FORCE_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_FORCE_ECC_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_FORCE_ECC_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_ECC_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_FORCE_ECC_UE]

//>> SET_[INT_CQ_PBO_CTL_FORCE_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_FORCE_ECC_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_FORCE_ECC_UE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_ECC_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_FORCE_ECC_UE]

//>> SET_[INT_CQ_PBO_CTL_FORCE_ECC_UE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_FORCE_ECC_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.setBit<INT_CQ_PBO_CTL_FORCE_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_ECC_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_FORCE_ECC_UE]

//>> CLEAR_[INT_CQ_PBO_CTL_FORCE_ECC_UE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBO_CTL_FORCE_ECC_UE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBO_CTL_FORCE_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_ECC_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBO_CTL_FORCE_ECC_UE]

//>> GET_[INT_CQ_PBO_CTL_FORCE_ECC_UE]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_FORCE_ECC_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_FORCE_ECC_UE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_ECC_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_FORCE_ECC_UE]

//>> GET_[INT_CQ_PBO_CTL_FORCE_ECC_UE]
static inline bool GET_INT_CQ_PBO_CTL_FORCE_ECC_UE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.getBit<INT_CQ_PBO_CTL_FORCE_ECC_UE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_ECC_UE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_FORCE_ECC_UE]

//>> SET_[INT_CQ_PBO_CTL_INJ_DIST]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_INJ_DIST(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_INJ_DIST,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_INJ_DIST chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_INJ_DIST]

//>> SET_[INT_CQ_PBO_CTL_INJ_DIST]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_INJ_DIST(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_INJ_DIST,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_INJ_DIST chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_INJ_DIST]

//>> SET_[INT_CQ_PBO_CTL_INJ_DIST]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_INJ_DIST(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.setBit<INT_CQ_PBO_CTL_INJ_DIST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBO_CTL_INJ_DIST chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_INJ_DIST]

//>> CLEAR_[INT_CQ_PBO_CTL_INJ_DIST]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBO_CTL_INJ_DIST(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBO_CTL_INJ_DIST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBO_CTL_INJ_DIST chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBO_CTL_INJ_DIST]

//>> GET_[INT_CQ_PBO_CTL_INJ_DIST]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_INJ_DIST(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_INJ_DIST,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_INJ_DIST chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_INJ_DIST]

//>> GET_[INT_CQ_PBO_CTL_INJ_DIST]
static inline bool GET_INT_CQ_PBO_CTL_INJ_DIST(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.getBit<INT_CQ_PBO_CTL_INJ_DIST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBO_CTL_INJ_DIST chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_INJ_DIST]

//>> SET_[INT_CQ_PBO_CTL_RESERVED_23]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_RESERVED_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_RESERVED_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_RESERVED_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_RESERVED_23]

//>> SET_[INT_CQ_PBO_CTL_RESERVED_23]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_RESERVED_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_RESERVED_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_RESERVED_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_RESERVED_23]

//>> SET_[INT_CQ_PBO_CTL_RESERVED_23]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_RESERVED_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.setBit<INT_CQ_PBO_CTL_RESERVED_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBO_CTL_RESERVED_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_RESERVED_23]

//>> CLEAR_[INT_CQ_PBO_CTL_RESERVED_23]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBO_CTL_RESERVED_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBO_CTL_RESERVED_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBO_CTL_RESERVED_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBO_CTL_RESERVED_23]

//>> GET_[INT_CQ_PBO_CTL_RESERVED_23]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_RESERVED_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_RESERVED_23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_RESERVED_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_RESERVED_23]

//>> GET_[INT_CQ_PBO_CTL_RESERVED_23]
static inline bool GET_INT_CQ_PBO_CTL_RESERVED_23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.getBit<INT_CQ_PBO_CTL_RESERVED_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBO_CTL_RESERVED_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_RESERVED_23]

//>> SET_[INT_CQ_PBO_CTL_DISABLE_INJECT]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_DISABLE_INJECT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_DISABLE_INJECT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_DISABLE_INJECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_DISABLE_INJECT]

//>> SET_[INT_CQ_PBO_CTL_DISABLE_INJECT]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_DISABLE_INJECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_DISABLE_INJECT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_DISABLE_INJECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_DISABLE_INJECT]

//>> SET_[INT_CQ_PBO_CTL_DISABLE_INJECT]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_DISABLE_INJECT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.setBit<INT_CQ_PBO_CTL_DISABLE_INJECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBO_CTL_DISABLE_INJECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_DISABLE_INJECT]

//>> CLEAR_[INT_CQ_PBO_CTL_DISABLE_INJECT]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBO_CTL_DISABLE_INJECT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBO_CTL_DISABLE_INJECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBO_CTL_DISABLE_INJECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBO_CTL_DISABLE_INJECT]

//>> GET_[INT_CQ_PBO_CTL_DISABLE_INJECT]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_DISABLE_INJECT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_DISABLE_INJECT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_DISABLE_INJECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_DISABLE_INJECT]

//>> GET_[INT_CQ_PBO_CTL_DISABLE_INJECT]
static inline bool GET_INT_CQ_PBO_CTL_DISABLE_INJECT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.getBit<INT_CQ_PBO_CTL_DISABLE_INJECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBO_CTL_DISABLE_INJECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_DISABLE_INJECT]

//>> SET_[INT_CQ_PBO_CTL_FORCE_CL_INJECT]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_FORCE_CL_INJECT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_FORCE_CL_INJECT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_CL_INJECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_FORCE_CL_INJECT]

//>> SET_[INT_CQ_PBO_CTL_FORCE_CL_INJECT]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_FORCE_CL_INJECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_FORCE_CL_INJECT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_CL_INJECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_FORCE_CL_INJECT]

//>> SET_[INT_CQ_PBO_CTL_FORCE_CL_INJECT]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_FORCE_CL_INJECT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.setBit<INT_CQ_PBO_CTL_FORCE_CL_INJECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_CL_INJECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_FORCE_CL_INJECT]

//>> CLEAR_[INT_CQ_PBO_CTL_FORCE_CL_INJECT]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBO_CTL_FORCE_CL_INJECT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBO_CTL_FORCE_CL_INJECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_CL_INJECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBO_CTL_FORCE_CL_INJECT]

//>> GET_[INT_CQ_PBO_CTL_FORCE_CL_INJECT]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_FORCE_CL_INJECT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_FORCE_CL_INJECT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_CL_INJECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_FORCE_CL_INJECT]

//>> GET_[INT_CQ_PBO_CTL_FORCE_CL_INJECT]
static inline bool GET_INT_CQ_PBO_CTL_FORCE_CL_INJECT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.getBit<INT_CQ_PBO_CTL_FORCE_CL_INJECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_CL_INJECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_FORCE_CL_INJECT]

//>> SET_[INT_CQ_PBO_CTL_FORCE_PR_INJECT]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_FORCE_PR_INJECT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_FORCE_PR_INJECT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_PR_INJECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_FORCE_PR_INJECT]

//>> SET_[INT_CQ_PBO_CTL_FORCE_PR_INJECT]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_FORCE_PR_INJECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_FORCE_PR_INJECT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_PR_INJECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_FORCE_PR_INJECT]

//>> SET_[INT_CQ_PBO_CTL_FORCE_PR_INJECT]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_FORCE_PR_INJECT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.setBit<INT_CQ_PBO_CTL_FORCE_PR_INJECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_PR_INJECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_FORCE_PR_INJECT]

//>> CLEAR_[INT_CQ_PBO_CTL_FORCE_PR_INJECT]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBO_CTL_FORCE_PR_INJECT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBO_CTL_FORCE_PR_INJECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_PR_INJECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBO_CTL_FORCE_PR_INJECT]

//>> GET_[INT_CQ_PBO_CTL_FORCE_PR_INJECT]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_FORCE_PR_INJECT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_FORCE_PR_INJECT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_PR_INJECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_FORCE_PR_INJECT]

//>> GET_[INT_CQ_PBO_CTL_FORCE_PR_INJECT]
static inline bool GET_INT_CQ_PBO_CTL_FORCE_PR_INJECT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.getBit<INT_CQ_PBO_CTL_FORCE_PR_INJECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBO_CTL_FORCE_PR_INJECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_FORCE_PR_INJECT]

//>> SET_[INT_CQ_PBO_CTL_HANG_ON_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_HANG_ON_ADDR_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_HANG_ON_ADDR_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_HANG_ON_ADDR_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_HANG_ON_ADDR_ERROR]

//>> SET_[INT_CQ_PBO_CTL_HANG_ON_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_HANG_ON_ADDR_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_HANG_ON_ADDR_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_HANG_ON_ADDR_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_HANG_ON_ADDR_ERROR]

//>> SET_[INT_CQ_PBO_CTL_HANG_ON_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_HANG_ON_ADDR_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.setBit<INT_CQ_PBO_CTL_HANG_ON_ADDR_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBO_CTL_HANG_ON_ADDR_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_HANG_ON_ADDR_ERROR]

//>> CLEAR_[INT_CQ_PBO_CTL_HANG_ON_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBO_CTL_HANG_ON_ADDR_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBO_CTL_HANG_ON_ADDR_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBO_CTL_HANG_ON_ADDR_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBO_CTL_HANG_ON_ADDR_ERROR]

//>> GET_[INT_CQ_PBO_CTL_HANG_ON_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_HANG_ON_ADDR_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_HANG_ON_ADDR_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_HANG_ON_ADDR_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_HANG_ON_ADDR_ERROR]

//>> GET_[INT_CQ_PBO_CTL_HANG_ON_ADDR_ERROR]
static inline bool GET_INT_CQ_PBO_CTL_HANG_ON_ADDR_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.getBit<INT_CQ_PBO_CTL_HANG_ON_ADDR_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBO_CTL_HANG_ON_ADDR_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_HANG_ON_ADDR_ERROR]

//>> SET_[INT_CQ_PBO_CTL_HISTCNT_MAX]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_HISTCNT_MAX(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_HISTCNT_MAX,
           INT_CQ_PBO_CTL_HISTCNT_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_HISTCNT_MAX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_HISTCNT_MAX]

//>> SET_[INT_CQ_PBO_CTL_HISTCNT_MAX]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_HISTCNT_MAX(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_HISTCNT_MAX,
           INT_CQ_PBO_CTL_HISTCNT_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_HISTCNT_MAX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_HISTCNT_MAX]

//>> GET_[INT_CQ_PBO_CTL_HISTCNT_MAX]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_HISTCNT_MAX(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_HISTCNT_MAX,
           INT_CQ_PBO_CTL_HISTCNT_MAX_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_HISTCNT_MAX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_HISTCNT_MAX]

//>> SET_[INT_CQ_PBO_CTL_POLLCNT_MAX]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_POLLCNT_MAX(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_POLLCNT_MAX,
           INT_CQ_PBO_CTL_POLLCNT_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_POLLCNT_MAX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_POLLCNT_MAX]

//>> SET_[INT_CQ_PBO_CTL_POLLCNT_MAX]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_POLLCNT_MAX(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_POLLCNT_MAX,
           INT_CQ_PBO_CTL_POLLCNT_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_POLLCNT_MAX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_POLLCNT_MAX]

//>> GET_[INT_CQ_PBO_CTL_POLLCNT_MAX]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_POLLCNT_MAX(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_POLLCNT_MAX,
           INT_CQ_PBO_CTL_POLLCNT_MAX_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_POLLCNT_MAX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_POLLCNT_MAX]

//>> SET_[INT_CQ_PBO_CTL_POLLCNT_RTY_VP]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_POLLCNT_RTY_VP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_POLLCNT_RTY_VP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_POLLCNT_RTY_VP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_POLLCNT_RTY_VP]

//>> SET_[INT_CQ_PBO_CTL_POLLCNT_RTY_VP]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_POLLCNT_RTY_VP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_POLLCNT_RTY_VP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_POLLCNT_RTY_VP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_POLLCNT_RTY_VP]

//>> SET_[INT_CQ_PBO_CTL_POLLCNT_RTY_VP]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_POLLCNT_RTY_VP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.setBit<INT_CQ_PBO_CTL_POLLCNT_RTY_VP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBO_CTL_POLLCNT_RTY_VP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_POLLCNT_RTY_VP]

//>> CLEAR_[INT_CQ_PBO_CTL_POLLCNT_RTY_VP]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBO_CTL_POLLCNT_RTY_VP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBO_CTL_POLLCNT_RTY_VP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBO_CTL_POLLCNT_RTY_VP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBO_CTL_POLLCNT_RTY_VP]

//>> GET_[INT_CQ_PBO_CTL_POLLCNT_RTY_VP]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_POLLCNT_RTY_VP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_POLLCNT_RTY_VP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_POLLCNT_RTY_VP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_POLLCNT_RTY_VP]

//>> GET_[INT_CQ_PBO_CTL_POLLCNT_RTY_VP]
static inline bool GET_INT_CQ_PBO_CTL_POLLCNT_RTY_VP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.getBit<INT_CQ_PBO_CTL_POLLCNT_RTY_VP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBO_CTL_POLLCNT_RTY_VP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_POLLCNT_RTY_VP]

//>> SET_[INT_CQ_PBO_CTL_POLLCNT_RTY_GRP]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_POLLCNT_RTY_GRP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_POLLCNT_RTY_GRP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_POLLCNT_RTY_GRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_POLLCNT_RTY_GRP]

//>> SET_[INT_CQ_PBO_CTL_POLLCNT_RTY_GRP]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_POLLCNT_RTY_GRP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_POLLCNT_RTY_GRP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_POLLCNT_RTY_GRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_POLLCNT_RTY_GRP]

//>> SET_[INT_CQ_PBO_CTL_POLLCNT_RTY_GRP]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_POLLCNT_RTY_GRP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.setBit<INT_CQ_PBO_CTL_POLLCNT_RTY_GRP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBO_CTL_POLLCNT_RTY_GRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_POLLCNT_RTY_GRP]

//>> CLEAR_[INT_CQ_PBO_CTL_POLLCNT_RTY_GRP]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBO_CTL_POLLCNT_RTY_GRP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBO_CTL_POLLCNT_RTY_GRP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBO_CTL_POLLCNT_RTY_GRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBO_CTL_POLLCNT_RTY_GRP]

//>> GET_[INT_CQ_PBO_CTL_POLLCNT_RTY_GRP]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_POLLCNT_RTY_GRP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_POLLCNT_RTY_GRP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_POLLCNT_RTY_GRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_POLLCNT_RTY_GRP]

//>> GET_[INT_CQ_PBO_CTL_POLLCNT_RTY_GRP]
static inline bool GET_INT_CQ_PBO_CTL_POLLCNT_RTY_GRP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.getBit<INT_CQ_PBO_CTL_POLLCNT_RTY_GRP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBO_CTL_POLLCNT_RTY_GRP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_POLLCNT_RTY_GRP]

//>> SET_[INT_CQ_PBO_CTL_POLLCNT_BCASTN]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_POLLCNT_BCASTN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_POLLCNT_BCASTN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_POLLCNT_BCASTN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_POLLCNT_BCASTN]

//>> SET_[INT_CQ_PBO_CTL_POLLCNT_BCASTN]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_POLLCNT_BCASTN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_POLLCNT_BCASTN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_POLLCNT_BCASTN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_POLLCNT_BCASTN]

//>> SET_[INT_CQ_PBO_CTL_POLLCNT_BCASTN]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_POLLCNT_BCASTN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.setBit<INT_CQ_PBO_CTL_POLLCNT_BCASTN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBO_CTL_POLLCNT_BCASTN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_POLLCNT_BCASTN]

//>> CLEAR_[INT_CQ_PBO_CTL_POLLCNT_BCASTN]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBO_CTL_POLLCNT_BCASTN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBO_CTL_POLLCNT_BCASTN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBO_CTL_POLLCNT_BCASTN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBO_CTL_POLLCNT_BCASTN]

//>> GET_[INT_CQ_PBO_CTL_POLLCNT_BCASTN]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_POLLCNT_BCASTN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_POLLCNT_BCASTN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_POLLCNT_BCASTN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_POLLCNT_BCASTN]

//>> GET_[INT_CQ_PBO_CTL_POLLCNT_BCASTN]
static inline bool GET_INT_CQ_PBO_CTL_POLLCNT_BCASTN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.getBit<INT_CQ_PBO_CTL_POLLCNT_BCASTN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBO_CTL_POLLCNT_BCASTN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_POLLCNT_BCASTN]

//>> SET_[INT_CQ_PBO_CTL_RESERVED_37_44]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_RESERVED_37_44(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_RESERVED_37_44,
           INT_CQ_PBO_CTL_RESERVED_37_44_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_RESERVED_37_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_RESERVED_37_44]

//>> SET_[INT_CQ_PBO_CTL_RESERVED_37_44]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_RESERVED_37_44(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_RESERVED_37_44,
           INT_CQ_PBO_CTL_RESERVED_37_44_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_RESERVED_37_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_RESERVED_37_44]

//>> GET_[INT_CQ_PBO_CTL_RESERVED_37_44]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_RESERVED_37_44(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_RESERVED_37_44,
           INT_CQ_PBO_CTL_RESERVED_37_44_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_RESERVED_37_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_RESERVED_37_44]

//>> SET_[INT_CQ_PBO_CTL_DISABLE_NN_RN]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_DISABLE_NN_RN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_DISABLE_NN_RN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_DISABLE_NN_RN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_DISABLE_NN_RN]

//>> SET_[INT_CQ_PBO_CTL_DISABLE_NN_RN]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_DISABLE_NN_RN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_DISABLE_NN_RN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_DISABLE_NN_RN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_DISABLE_NN_RN]

//>> SET_[INT_CQ_PBO_CTL_DISABLE_NN_RN]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_DISABLE_NN_RN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.setBit<INT_CQ_PBO_CTL_DISABLE_NN_RN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBO_CTL_DISABLE_NN_RN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_DISABLE_NN_RN]

//>> CLEAR_[INT_CQ_PBO_CTL_DISABLE_NN_RN]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBO_CTL_DISABLE_NN_RN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBO_CTL_DISABLE_NN_RN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBO_CTL_DISABLE_NN_RN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBO_CTL_DISABLE_NN_RN]

//>> GET_[INT_CQ_PBO_CTL_DISABLE_NN_RN]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_DISABLE_NN_RN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_DISABLE_NN_RN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_DISABLE_NN_RN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_DISABLE_NN_RN]

//>> GET_[INT_CQ_PBO_CTL_DISABLE_NN_RN]
static inline bool GET_INT_CQ_PBO_CTL_DISABLE_NN_RN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.getBit<INT_CQ_PBO_CTL_DISABLE_NN_RN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBO_CTL_DISABLE_NN_RN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_DISABLE_NN_RN]

//>> SET_[INT_CQ_PBO_CTL_DISABLE_VG_NOT_SYS]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_DISABLE_VG_NOT_SYS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_DISABLE_VG_NOT_SYS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_DISABLE_VG_NOT_SYS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_DISABLE_VG_NOT_SYS]

//>> SET_[INT_CQ_PBO_CTL_DISABLE_VG_NOT_SYS]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_DISABLE_VG_NOT_SYS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_DISABLE_VG_NOT_SYS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_DISABLE_VG_NOT_SYS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_DISABLE_VG_NOT_SYS]

//>> SET_[INT_CQ_PBO_CTL_DISABLE_VG_NOT_SYS]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_DISABLE_VG_NOT_SYS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.setBit<INT_CQ_PBO_CTL_DISABLE_VG_NOT_SYS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBO_CTL_DISABLE_VG_NOT_SYS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_DISABLE_VG_NOT_SYS]

//>> CLEAR_[INT_CQ_PBO_CTL_DISABLE_VG_NOT_SYS]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBO_CTL_DISABLE_VG_NOT_SYS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBO_CTL_DISABLE_VG_NOT_SYS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBO_CTL_DISABLE_VG_NOT_SYS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBO_CTL_DISABLE_VG_NOT_SYS]

//>> GET_[INT_CQ_PBO_CTL_DISABLE_VG_NOT_SYS]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_DISABLE_VG_NOT_SYS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_DISABLE_VG_NOT_SYS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_DISABLE_VG_NOT_SYS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_DISABLE_VG_NOT_SYS]

//>> GET_[INT_CQ_PBO_CTL_DISABLE_VG_NOT_SYS]
static inline bool GET_INT_CQ_PBO_CTL_DISABLE_VG_NOT_SYS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.getBit<INT_CQ_PBO_CTL_DISABLE_VG_NOT_SYS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBO_CTL_DISABLE_VG_NOT_SYS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_DISABLE_VG_NOT_SYS]

//>> SET_[INT_CQ_PBO_CTL_DISABLE_G]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_DISABLE_G(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_DISABLE_G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_DISABLE_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_DISABLE_G]

//>> SET_[INT_CQ_PBO_CTL_DISABLE_G]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_DISABLE_G(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_DISABLE_G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_DISABLE_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_DISABLE_G]

//>> SET_[INT_CQ_PBO_CTL_DISABLE_G]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_DISABLE_G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.setBit<INT_CQ_PBO_CTL_DISABLE_G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBO_CTL_DISABLE_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_DISABLE_G]

//>> CLEAR_[INT_CQ_PBO_CTL_DISABLE_G]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBO_CTL_DISABLE_G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBO_CTL_DISABLE_G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBO_CTL_DISABLE_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBO_CTL_DISABLE_G]

//>> GET_[INT_CQ_PBO_CTL_DISABLE_G]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_DISABLE_G(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_DISABLE_G,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_DISABLE_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_DISABLE_G]

//>> GET_[INT_CQ_PBO_CTL_DISABLE_G]
static inline bool GET_INT_CQ_PBO_CTL_DISABLE_G(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.getBit<INT_CQ_PBO_CTL_DISABLE_G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBO_CTL_DISABLE_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_DISABLE_G]

//>> SET_[INT_CQ_PBO_CTL_DISABLE_LN]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_DISABLE_LN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_DISABLE_LN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_DISABLE_LN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_DISABLE_LN]

//>> SET_[INT_CQ_PBO_CTL_DISABLE_LN]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_DISABLE_LN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_DISABLE_LN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_DISABLE_LN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_DISABLE_LN]

//>> SET_[INT_CQ_PBO_CTL_DISABLE_LN]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_DISABLE_LN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.setBit<INT_CQ_PBO_CTL_DISABLE_LN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBO_CTL_DISABLE_LN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_DISABLE_LN]

//>> CLEAR_[INT_CQ_PBO_CTL_DISABLE_LN]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBO_CTL_DISABLE_LN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBO_CTL_DISABLE_LN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBO_CTL_DISABLE_LN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBO_CTL_DISABLE_LN]

//>> GET_[INT_CQ_PBO_CTL_DISABLE_LN]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_DISABLE_LN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_DISABLE_LN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_DISABLE_LN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_DISABLE_LN]

//>> GET_[INT_CQ_PBO_CTL_DISABLE_LN]
static inline bool GET_INT_CQ_PBO_CTL_DISABLE_LN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.getBit<INT_CQ_PBO_CTL_DISABLE_LN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBO_CTL_DISABLE_LN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_DISABLE_LN]

//>> SET_[INT_CQ_PBO_CTL_SKIP_G]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_SKIP_G(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_SKIP_G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_SKIP_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_SKIP_G]

//>> SET_[INT_CQ_PBO_CTL_SKIP_G]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_SKIP_G(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_SKIP_G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_SKIP_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_SKIP_G]

//>> SET_[INT_CQ_PBO_CTL_SKIP_G]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_SKIP_G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.setBit<INT_CQ_PBO_CTL_SKIP_G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBO_CTL_SKIP_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_SKIP_G]

//>> CLEAR_[INT_CQ_PBO_CTL_SKIP_G]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBO_CTL_SKIP_G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBO_CTL_SKIP_G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBO_CTL_SKIP_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBO_CTL_SKIP_G]

//>> GET_[INT_CQ_PBO_CTL_SKIP_G]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_SKIP_G(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_SKIP_G,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_SKIP_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_SKIP_G]

//>> GET_[INT_CQ_PBO_CTL_SKIP_G]
static inline bool GET_INT_CQ_PBO_CTL_SKIP_G(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.getBit<INT_CQ_PBO_CTL_SKIP_G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBO_CTL_SKIP_G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_SKIP_G]

//>> SET_[INT_CQ_PBO_CTL_WRQ_CMD_REJ_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_WRQ_CMD_REJ_DISABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_WRQ_CMD_REJ_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_WRQ_CMD_REJ_DISABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_WRQ_CMD_REJ_DISABLE]

//>> SET_[INT_CQ_PBO_CTL_WRQ_CMD_REJ_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_WRQ_CMD_REJ_DISABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_WRQ_CMD_REJ_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_WRQ_CMD_REJ_DISABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_WRQ_CMD_REJ_DISABLE]

//>> SET_[INT_CQ_PBO_CTL_WRQ_CMD_REJ_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_WRQ_CMD_REJ_DISABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.setBit<INT_CQ_PBO_CTL_WRQ_CMD_REJ_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBO_CTL_WRQ_CMD_REJ_DISABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_WRQ_CMD_REJ_DISABLE]

//>> CLEAR_[INT_CQ_PBO_CTL_WRQ_CMD_REJ_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBO_CTL_WRQ_CMD_REJ_DISABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBO_CTL_WRQ_CMD_REJ_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBO_CTL_WRQ_CMD_REJ_DISABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBO_CTL_WRQ_CMD_REJ_DISABLE]

//>> GET_[INT_CQ_PBO_CTL_WRQ_CMD_REJ_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_WRQ_CMD_REJ_DISABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_WRQ_CMD_REJ_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_WRQ_CMD_REJ_DISABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_WRQ_CMD_REJ_DISABLE]

//>> GET_[INT_CQ_PBO_CTL_WRQ_CMD_REJ_DISABLE]
static inline bool GET_INT_CQ_PBO_CTL_WRQ_CMD_REJ_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.getBit<INT_CQ_PBO_CTL_WRQ_CMD_REJ_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBO_CTL_WRQ_CMD_REJ_DISABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_WRQ_CMD_REJ_DISABLE]

//>> SET_[INT_CQ_PBO_CTL_RDQ_CMD_REJ_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_RDQ_CMD_REJ_DISABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_RDQ_CMD_REJ_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_RDQ_CMD_REJ_DISABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_RDQ_CMD_REJ_DISABLE]

//>> SET_[INT_CQ_PBO_CTL_RDQ_CMD_REJ_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_RDQ_CMD_REJ_DISABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_RDQ_CMD_REJ_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_RDQ_CMD_REJ_DISABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_RDQ_CMD_REJ_DISABLE]

//>> SET_[INT_CQ_PBO_CTL_RDQ_CMD_REJ_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_RDQ_CMD_REJ_DISABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.setBit<INT_CQ_PBO_CTL_RDQ_CMD_REJ_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBO_CTL_RDQ_CMD_REJ_DISABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_RDQ_CMD_REJ_DISABLE]

//>> CLEAR_[INT_CQ_PBO_CTL_RDQ_CMD_REJ_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBO_CTL_RDQ_CMD_REJ_DISABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBO_CTL_RDQ_CMD_REJ_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBO_CTL_RDQ_CMD_REJ_DISABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBO_CTL_RDQ_CMD_REJ_DISABLE]

//>> GET_[INT_CQ_PBO_CTL_RDQ_CMD_REJ_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_RDQ_CMD_REJ_DISABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_RDQ_CMD_REJ_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_RDQ_CMD_REJ_DISABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_RDQ_CMD_REJ_DISABLE]

//>> GET_[INT_CQ_PBO_CTL_RDQ_CMD_REJ_DISABLE]
static inline bool GET_INT_CQ_PBO_CTL_RDQ_CMD_REJ_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.getBit<INT_CQ_PBO_CTL_RDQ_CMD_REJ_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBO_CTL_RDQ_CMD_REJ_DISABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_RDQ_CMD_REJ_DISABLE]

//>> SET_[INT_CQ_PBO_CTL_INTQ_CMD_REJ_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_INTQ_CMD_REJ_DISABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_INTQ_CMD_REJ_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_INTQ_CMD_REJ_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_INTQ_CMD_REJ_DISABLE]

//>> SET_[INT_CQ_PBO_CTL_INTQ_CMD_REJ_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_INTQ_CMD_REJ_DISABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_INTQ_CMD_REJ_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_INTQ_CMD_REJ_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_INTQ_CMD_REJ_DISABLE]

//>> SET_[INT_CQ_PBO_CTL_INTQ_CMD_REJ_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_INTQ_CMD_REJ_DISABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.setBit<INT_CQ_PBO_CTL_INTQ_CMD_REJ_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBO_CTL_INTQ_CMD_REJ_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_INTQ_CMD_REJ_DISABLE]

//>> CLEAR_[INT_CQ_PBO_CTL_INTQ_CMD_REJ_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBO_CTL_INTQ_CMD_REJ_DISABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBO_CTL_INTQ_CMD_REJ_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBO_CTL_INTQ_CMD_REJ_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBO_CTL_INTQ_CMD_REJ_DISABLE]

//>> GET_[INT_CQ_PBO_CTL_INTQ_CMD_REJ_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_INTQ_CMD_REJ_DISABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_INTQ_CMD_REJ_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_INTQ_CMD_REJ_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_INTQ_CMD_REJ_DISABLE]

//>> GET_[INT_CQ_PBO_CTL_INTQ_CMD_REJ_DISABLE]
static inline bool GET_INT_CQ_PBO_CTL_INTQ_CMD_REJ_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.getBit<INT_CQ_PBO_CTL_INTQ_CMD_REJ_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBO_CTL_INTQ_CMD_REJ_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_INTQ_CMD_REJ_DISABLE]

//>> SET_[INT_CQ_PBO_CTL_REDUCE_ORDER_EQPOST]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_REDUCE_ORDER_EQPOST(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_REDUCE_ORDER_EQPOST,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_REDUCE_ORDER_EQPOST chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_REDUCE_ORDER_EQPOST]

//>> SET_[INT_CQ_PBO_CTL_REDUCE_ORDER_EQPOST]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_REDUCE_ORDER_EQPOST(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_REDUCE_ORDER_EQPOST,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_REDUCE_ORDER_EQPOST chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_REDUCE_ORDER_EQPOST]

//>> SET_[INT_CQ_PBO_CTL_REDUCE_ORDER_EQPOST]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_REDUCE_ORDER_EQPOST(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.setBit<INT_CQ_PBO_CTL_REDUCE_ORDER_EQPOST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBO_CTL_REDUCE_ORDER_EQPOST chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_REDUCE_ORDER_EQPOST]

//>> CLEAR_[INT_CQ_PBO_CTL_REDUCE_ORDER_EQPOST]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBO_CTL_REDUCE_ORDER_EQPOST(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBO_CTL_REDUCE_ORDER_EQPOST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBO_CTL_REDUCE_ORDER_EQPOST chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBO_CTL_REDUCE_ORDER_EQPOST]

//>> GET_[INT_CQ_PBO_CTL_REDUCE_ORDER_EQPOST]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_REDUCE_ORDER_EQPOST(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_REDUCE_ORDER_EQPOST,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_REDUCE_ORDER_EQPOST chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_REDUCE_ORDER_EQPOST]

//>> GET_[INT_CQ_PBO_CTL_REDUCE_ORDER_EQPOST]
static inline bool GET_INT_CQ_PBO_CTL_REDUCE_ORDER_EQPOST(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.getBit<INT_CQ_PBO_CTL_REDUCE_ORDER_EQPOST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBO_CTL_REDUCE_ORDER_EQPOST chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_REDUCE_ORDER_EQPOST]

//>> SET_[INT_CQ_PBO_CTL_REDUCE_ORDER_DMA]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_REDUCE_ORDER_DMA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_REDUCE_ORDER_DMA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_REDUCE_ORDER_DMA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_REDUCE_ORDER_DMA]

//>> SET_[INT_CQ_PBO_CTL_REDUCE_ORDER_DMA]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_REDUCE_ORDER_DMA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_REDUCE_ORDER_DMA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_REDUCE_ORDER_DMA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_REDUCE_ORDER_DMA]

//>> SET_[INT_CQ_PBO_CTL_REDUCE_ORDER_DMA]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_REDUCE_ORDER_DMA(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.setBit<INT_CQ_PBO_CTL_REDUCE_ORDER_DMA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBO_CTL_REDUCE_ORDER_DMA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_REDUCE_ORDER_DMA]

//>> CLEAR_[INT_CQ_PBO_CTL_REDUCE_ORDER_DMA]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBO_CTL_REDUCE_ORDER_DMA(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBO_CTL_REDUCE_ORDER_DMA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBO_CTL_REDUCE_ORDER_DMA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBO_CTL_REDUCE_ORDER_DMA]

//>> GET_[INT_CQ_PBO_CTL_REDUCE_ORDER_DMA]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_REDUCE_ORDER_DMA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_REDUCE_ORDER_DMA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_REDUCE_ORDER_DMA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_REDUCE_ORDER_DMA]

//>> GET_[INT_CQ_PBO_CTL_REDUCE_ORDER_DMA]
static inline bool GET_INT_CQ_PBO_CTL_REDUCE_ORDER_DMA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.getBit<INT_CQ_PBO_CTL_REDUCE_ORDER_DMA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBO_CTL_REDUCE_ORDER_DMA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_REDUCE_ORDER_DMA]

//>> SET_[INT_CQ_PBO_CTL_DROP_PRI_CI_WR]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_DROP_PRI_CI_WR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_DROP_PRI_CI_WR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_DROP_PRI_CI_WR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_DROP_PRI_CI_WR]

//>> SET_[INT_CQ_PBO_CTL_DROP_PRI_CI_WR]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_DROP_PRI_CI_WR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_DROP_PRI_CI_WR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_DROP_PRI_CI_WR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_DROP_PRI_CI_WR]

//>> SET_[INT_CQ_PBO_CTL_DROP_PRI_CI_WR]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_DROP_PRI_CI_WR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.setBit<INT_CQ_PBO_CTL_DROP_PRI_CI_WR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBO_CTL_DROP_PRI_CI_WR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_DROP_PRI_CI_WR]

//>> CLEAR_[INT_CQ_PBO_CTL_DROP_PRI_CI_WR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBO_CTL_DROP_PRI_CI_WR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBO_CTL_DROP_PRI_CI_WR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBO_CTL_DROP_PRI_CI_WR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBO_CTL_DROP_PRI_CI_WR]

//>> GET_[INT_CQ_PBO_CTL_DROP_PRI_CI_WR]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_DROP_PRI_CI_WR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_DROP_PRI_CI_WR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_DROP_PRI_CI_WR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_DROP_PRI_CI_WR]

//>> GET_[INT_CQ_PBO_CTL_DROP_PRI_CI_WR]
static inline bool GET_INT_CQ_PBO_CTL_DROP_PRI_CI_WR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.getBit<INT_CQ_PBO_CTL_DROP_PRI_CI_WR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBO_CTL_DROP_PRI_CI_WR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_DROP_PRI_CI_WR]

//>> SET_[INT_CQ_PBO_CTL_DROP_PRI_CI_RD]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_DROP_PRI_CI_RD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_DROP_PRI_CI_RD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_DROP_PRI_CI_RD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_DROP_PRI_CI_RD]

//>> SET_[INT_CQ_PBO_CTL_DROP_PRI_CI_RD]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_DROP_PRI_CI_RD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_DROP_PRI_CI_RD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_DROP_PRI_CI_RD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_DROP_PRI_CI_RD]

//>> SET_[INT_CQ_PBO_CTL_DROP_PRI_CI_RD]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_DROP_PRI_CI_RD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.setBit<INT_CQ_PBO_CTL_DROP_PRI_CI_RD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBO_CTL_DROP_PRI_CI_RD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_DROP_PRI_CI_RD]

//>> CLEAR_[INT_CQ_PBO_CTL_DROP_PRI_CI_RD]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBO_CTL_DROP_PRI_CI_RD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBO_CTL_DROP_PRI_CI_RD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBO_CTL_DROP_PRI_CI_RD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBO_CTL_DROP_PRI_CI_RD]

//>> GET_[INT_CQ_PBO_CTL_DROP_PRI_CI_RD]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_DROP_PRI_CI_RD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_DROP_PRI_CI_RD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_DROP_PRI_CI_RD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_DROP_PRI_CI_RD]

//>> GET_[INT_CQ_PBO_CTL_DROP_PRI_CI_RD]
static inline bool GET_INT_CQ_PBO_CTL_DROP_PRI_CI_RD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.getBit<INT_CQ_PBO_CTL_DROP_PRI_CI_RD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBO_CTL_DROP_PRI_CI_RD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_DROP_PRI_CI_RD]

//>> SET_[INT_CQ_PBO_CTL_DISABLE_EARLY_HIST]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_DISABLE_EARLY_HIST(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_DISABLE_EARLY_HIST,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_DISABLE_EARLY_HIST chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_DISABLE_EARLY_HIST]

//>> SET_[INT_CQ_PBO_CTL_DISABLE_EARLY_HIST]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_DISABLE_EARLY_HIST(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_DISABLE_EARLY_HIST,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_DISABLE_EARLY_HIST chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_DISABLE_EARLY_HIST]

//>> SET_[INT_CQ_PBO_CTL_DISABLE_EARLY_HIST]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_DISABLE_EARLY_HIST(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.setBit<INT_CQ_PBO_CTL_DISABLE_EARLY_HIST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBO_CTL_DISABLE_EARLY_HIST chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_DISABLE_EARLY_HIST]

//>> CLEAR_[INT_CQ_PBO_CTL_DISABLE_EARLY_HIST]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBO_CTL_DISABLE_EARLY_HIST(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBO_CTL_DISABLE_EARLY_HIST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBO_CTL_DISABLE_EARLY_HIST chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBO_CTL_DISABLE_EARLY_HIST]

//>> GET_[INT_CQ_PBO_CTL_DISABLE_EARLY_HIST]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_DISABLE_EARLY_HIST(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_DISABLE_EARLY_HIST,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_DISABLE_EARLY_HIST chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_DISABLE_EARLY_HIST]

//>> GET_[INT_CQ_PBO_CTL_DISABLE_EARLY_HIST]
static inline bool GET_INT_CQ_PBO_CTL_DISABLE_EARLY_HIST(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.getBit<INT_CQ_PBO_CTL_DISABLE_EARLY_HIST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBO_CTL_DISABLE_EARLY_HIST chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_DISABLE_EARLY_HIST]

//>> SET_[INT_CQ_PBO_CTL_ALTER_EARLY_HIST]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_ALTER_EARLY_HIST(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_ALTER_EARLY_HIST,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_ALTER_EARLY_HIST chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_ALTER_EARLY_HIST]

//>> SET_[INT_CQ_PBO_CTL_ALTER_EARLY_HIST]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_ALTER_EARLY_HIST(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_ALTER_EARLY_HIST,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_ALTER_EARLY_HIST chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_ALTER_EARLY_HIST]

//>> SET_[INT_CQ_PBO_CTL_ALTER_EARLY_HIST]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_ALTER_EARLY_HIST(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.setBit<INT_CQ_PBO_CTL_ALTER_EARLY_HIST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_PBO_CTL_ALTER_EARLY_HIST chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_ALTER_EARLY_HIST]

//>> CLEAR_[INT_CQ_PBO_CTL_ALTER_EARLY_HIST]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_PBO_CTL_ALTER_EARLY_HIST(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.clearBit<INT_CQ_PBO_CTL_ALTER_EARLY_HIST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_PBO_CTL_ALTER_EARLY_HIST chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_PBO_CTL_ALTER_EARLY_HIST]

//>> GET_[INT_CQ_PBO_CTL_ALTER_EARLY_HIST]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_ALTER_EARLY_HIST(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_ALTER_EARLY_HIST,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_ALTER_EARLY_HIST chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_ALTER_EARLY_HIST]

//>> GET_[INT_CQ_PBO_CTL_ALTER_EARLY_HIST]
static inline bool GET_INT_CQ_PBO_CTL_ALTER_EARLY_HIST(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.getBit<INT_CQ_PBO_CTL_ALTER_EARLY_HIST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_PBO_CTL_ALTER_EARLY_HIST chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_ALTER_EARLY_HIST]

//>> SET_[INT_CQ_PBO_CTL_RESERVED_59_63]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_RESERVED_59_63(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_RESERVED_59_63,
           INT_CQ_PBO_CTL_RESERVED_59_63_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PBO_CTL_RESERVED_59_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_RESERVED_59_63]

//>> SET_[INT_CQ_PBO_CTL_RESERVED_59_63]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PBO_CTL_RESERVED_59_63(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_PBO_CTL_RESERVED_59_63,
           INT_CQ_PBO_CTL_RESERVED_59_63_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PBO_CTL_RESERVED_59_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PBO_CTL_RESERVED_59_63]

//>> GET_[INT_CQ_PBO_CTL_RESERVED_59_63]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PBO_CTL_RESERVED_59_63(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PBO_CTL));
#endif
    return i_data.extractToRight<INT_CQ_PBO_CTL_RESERVED_59_63,
           INT_CQ_PBO_CTL_RESERVED_59_63_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PBO_CTL_RESERVED_59_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PBO_CTL_RESERVED_59_63]

//>> PREP_[INT_CQ_PMC_6]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_CQ_PMC_6(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_PMC_6;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_CQ_PMC_6]

//>> GET_[INT_CQ_PMC_6]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_CQ_PMC_6(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_PMC_6;
#endif
    return fapi2::getScom(i_target, INT_CQ_PMC_6, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_CQ_PMC_6]

//>> PUT_[INT_CQ_PMC_6]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_CQ_PMC_6(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_CQ_PMC_6));
#endif
    return fapi2::putScom(i_target, INT_CQ_PMC_6, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_CQ_PMC_6]


//>> SET_[INT_CQ_PMC_6_INT_CQ_PMC_6_COUNT_0_47]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PMC_6_INT_CQ_PMC_6_COUNT_0_47(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PMC_6));
#endif
    return o_data.insertFromRight<INT_CQ_PMC_6_INT_CQ_PMC_6_COUNT_0_47,
           INT_CQ_PMC_6_INT_CQ_PMC_6_COUNT_0_47_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_PMC_6_INT_CQ_PMC_6_COUNT_0_47 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PMC_6_INT_CQ_PMC_6_COUNT_0_47]

//>> SET_[INT_CQ_PMC_6_INT_CQ_PMC_6_COUNT_0_47]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PMC_6_INT_CQ_PMC_6_COUNT_0_47(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PMC_6));
#endif
    return o_data.insertFromRight<INT_CQ_PMC_6_INT_CQ_PMC_6_COUNT_0_47,
           INT_CQ_PMC_6_INT_CQ_PMC_6_COUNT_0_47_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_PMC_6_INT_CQ_PMC_6_COUNT_0_47 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_PMC_6_INT_CQ_PMC_6_COUNT_0_47]

//>> GET_[INT_CQ_PMC_6_INT_CQ_PMC_6_COUNT_0_47]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PMC_6_INT_CQ_PMC_6_COUNT_0_47(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PMC_6));
#endif
    return i_data.extractToRight<INT_CQ_PMC_6_INT_CQ_PMC_6_COUNT_0_47,
           INT_CQ_PMC_6_INT_CQ_PMC_6_COUNT_0_47_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_PMC_6_INT_CQ_PMC_6_COUNT_0_47 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_PMC_6_INT_CQ_PMC_6_COUNT_0_47]

//>> PREP_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_NXC_REGS_ADDITIONAL_PERF_2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_ADDITIONAL_PERF_2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2]

//>> GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_ADDITIONAL_PERF_2;
#endif
    return fapi2::getScom(i_target, INT_PC_NXC_REGS_ADDITIONAL_PERF_2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2]

//>> PUT_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_NXC_REGS_ADDITIONAL_PERF_2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return fapi2::putScom(i_target, INT_PC_NXC_REGS_ADDITIONAL_PERF_2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2]


//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_0_1]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_0_1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_0_1,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_0_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_0_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_0_1]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_0_1]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_0_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_0_1,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_0_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_0_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_0_1]

//>> GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_0_1]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_0_1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_0_1,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_0_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_0_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_0_1]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_NXC_FETCH]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_NXC_FETCH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_NXC_FETCH,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_NXC_FETCH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_NXC_FETCH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_NXC_FETCH]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_NXC_FETCH]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_NXC_FETCH(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_NXC_FETCH,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_NXC_FETCH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_NXC_FETCH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_NXC_FETCH]

//>> GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_NXC_FETCH]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_NXC_FETCH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_NXC_FETCH,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_NXC_FETCH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_NXC_FETCH chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_NXC_FETCH]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_8_9]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_8_9(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_8_9,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_8_9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_8_9 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_8_9]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_8_9]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_8_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_8_9,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_8_9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_8_9 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_8_9]

//>> GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_8_9]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_8_9(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_8_9,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_8_9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_8_9 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_8_9]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_RMT_PC]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_RMT_PC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_RMT_PC,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_RMT_PC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_RMT_PC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_RMT_PC]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_RMT_PC]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_RMT_PC(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_RMT_PC,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_RMT_PC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_RMT_PC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_RMT_PC]

//>> GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_RMT_PC]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_RMT_PC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_RMT_PC,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_RMT_PC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_RMT_PC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_RMT_PC]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_16_17]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_16_17(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_16_17,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_16_17_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_16_17 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_16_17]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_16_17]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_16_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_16_17,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_16_17_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_16_17 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_16_17]

//>> GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_16_17]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_16_17(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_16_17,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_16_17_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_16_17 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_16_17]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_ST_RMT_PC]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_ST_RMT_PC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_ST_RMT_PC,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_ST_RMT_PC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_ST_RMT_PC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_ST_RMT_PC]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_ST_RMT_PC]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_ST_RMT_PC(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_ST_RMT_PC,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_ST_RMT_PC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_ST_RMT_PC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_ST_RMT_PC]

//>> GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_ST_RMT_PC]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_ST_RMT_PC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_ST_RMT_PC,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_ST_RMT_PC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_ST_RMT_PC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_ST_RMT_PC]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_24_25]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_24_25(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_24_25,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_24_25_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_24_25 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_24_25]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_24_25]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_24_25(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_24_25,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_24_25_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_24_25 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_24_25]

//>> GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_24_25]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_24_25(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_24_25,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_24_25_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_24_25 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_24_25]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_ST_RMT_VC]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_ST_RMT_VC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_ST_RMT_VC,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_ST_RMT_VC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_ST_RMT_VC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_ST_RMT_VC]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_ST_RMT_VC]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_ST_RMT_VC(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_ST_RMT_VC,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_ST_RMT_VC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_ST_RMT_VC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_ST_RMT_VC]

//>> GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_ST_RMT_VC]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_ST_RMT_VC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_ST_RMT_VC,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_ST_RMT_VC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_ST_RMT_VC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_ST_RMT_VC]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_32_33]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_32_33(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_32_33,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_32_33_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_32_33 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_32_33]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_32_33]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_32_33(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_32_33,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_32_33_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_32_33 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_32_33]

//>> GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_32_33]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_32_33(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_32_33,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_32_33_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_32_33 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_32_33]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_LCL_VC]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_LCL_VC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_LCL_VC,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_LCL_VC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_LCL_VC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_LCL_VC]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_LCL_VC]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_LCL_VC(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_LCL_VC,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_LCL_VC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_LCL_VC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_LCL_VC]

//>> GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_LCL_VC]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_LCL_VC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_LCL_VC,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_LCL_VC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_LCL_VC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_LCL_VC]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_40_41]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_40_41(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_40_41,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_40_41_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_40_41 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_40_41]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_40_41]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_40_41(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_40_41,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_40_41_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_40_41 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_40_41]

//>> GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_40_41]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_40_41(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_40_41,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_40_41_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_40_41 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_40_41]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_RMT_VC]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_RMT_VC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_RMT_VC,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_RMT_VC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_RMT_VC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_RMT_VC]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_RMT_VC]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_RMT_VC(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_RMT_VC,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_RMT_VC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_RMT_VC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_RMT_VC]

//>> GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_RMT_VC]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_RMT_VC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_RMT_VC,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_RMT_VC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_RMT_VC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_LD_RMT_VC]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_48_49]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_48_49(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_48_49,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_48_49_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_48_49 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_48_49]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_48_49]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_48_49(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_48_49,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_48_49_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_48_49 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_48_49]

//>> GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_48_49]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_48_49(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_48_49,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_48_49_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_48_49 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_48_49]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_CHKO_LD_RMT_PC]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_CHKO_LD_RMT_PC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_CHKO_LD_RMT_PC,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_CHKO_LD_RMT_PC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_CHKO_LD_RMT_PC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_CHKO_LD_RMT_PC]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_CHKO_LD_RMT_PC]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_CHKO_LD_RMT_PC(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_CHKO_LD_RMT_PC,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_CHKO_LD_RMT_PC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_CHKO_LD_RMT_PC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_CHKO_LD_RMT_PC]

//>> GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_CHKO_LD_RMT_PC]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_CHKO_LD_RMT_PC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_CHKO_LD_RMT_PC,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_CHKO_LD_RMT_PC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_CHKO_LD_RMT_PC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_CHKO_LD_RMT_PC]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_56_57]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_56_57(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_56_57,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_56_57_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_56_57 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_56_57]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_56_57]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_56_57(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_56_57,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_56_57_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_56_57 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_56_57]

//>> GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_56_57]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_56_57(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_56_57,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_56_57_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_56_57 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_RESERVED_56_57]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_CHKI_ST_RMT_PC]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_CHKI_ST_RMT_PC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_CHKI_ST_RMT_PC,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_CHKI_ST_RMT_PC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_CHKI_ST_RMT_PC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_CHKI_ST_RMT_PC]

//>> SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_CHKI_ST_RMT_PC]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_CHKI_ST_RMT_PC(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_CHKI_ST_RMT_PC,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_CHKI_ST_RMT_PC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_CHKI_ST_RMT_PC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_CHKI_ST_RMT_PC]

//>> GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_CHKI_ST_RMT_PC]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_CHKI_ST_RMT_PC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_ADDITIONAL_PERF_2));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_CHKI_ST_RMT_PC,
           INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_CHKI_ST_RMT_PC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_CHKI_ST_RMT_PC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_ADDITIONAL_PERF_2_MAX_OUTSTANDING_CHKI_ST_RMT_PC]

//>> PREP_[INT_PC_NXC_REGS_FLUSH_INJECT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_NXC_REGS_FLUSH_INJECT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_FLUSH_INJECT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_NXC_REGS_FLUSH_INJECT]

//>> GET_[INT_PC_NXC_REGS_FLUSH_INJECT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_NXC_REGS_FLUSH_INJECT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_FLUSH_INJECT;
#endif
    return fapi2::getScom(i_target, INT_PC_NXC_REGS_FLUSH_INJECT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_NXC_REGS_FLUSH_INJECT]

//>> PUT_[INT_PC_NXC_REGS_FLUSH_INJECT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_NXC_REGS_FLUSH_INJECT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_INJECT));
#endif
    return fapi2::putScom(i_target, INT_PC_NXC_REGS_FLUSH_INJECT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_NXC_REGS_FLUSH_INJECT]


//>> SET_[INT_PC_NXC_REGS_FLUSH_INJECT_RESERVED_0_1]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_FLUSH_INJECT_RESERVED_0_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_INJECT));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_FLUSH_INJECT_RESERVED_0_1,
           INT_PC_NXC_REGS_FLUSH_INJECT_RESERVED_0_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_INJECT_RESERVED_0_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_FLUSH_INJECT_RESERVED_0_1]

//>> SET_[INT_PC_NXC_REGS_FLUSH_INJECT_RESERVED_0_1]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_FLUSH_INJECT_RESERVED_0_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_INJECT));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_FLUSH_INJECT_RESERVED_0_1,
           INT_PC_NXC_REGS_FLUSH_INJECT_RESERVED_0_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_INJECT_RESERVED_0_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_FLUSH_INJECT_RESERVED_0_1]

//>> GET_[INT_PC_NXC_REGS_FLUSH_INJECT_RESERVED_0_1]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_FLUSH_INJECT_RESERVED_0_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_INJECT));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_FLUSH_INJECT_RESERVED_0_1,
           INT_PC_NXC_REGS_FLUSH_INJECT_RESERVED_0_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_INJECT_RESERVED_0_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_FLUSH_INJECT_RESERVED_0_1]

//>> SET_[INT_PC_NXC_REGS_FLUSH_INJECT_NXC_TYPE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_FLUSH_INJECT_NXC_TYPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_INJECT));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_FLUSH_INJECT_NXC_TYPE,
           INT_PC_NXC_REGS_FLUSH_INJECT_NXC_TYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_INJECT_NXC_TYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_FLUSH_INJECT_NXC_TYPE]

//>> SET_[INT_PC_NXC_REGS_FLUSH_INJECT_NXC_TYPE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_FLUSH_INJECT_NXC_TYPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_INJECT));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_FLUSH_INJECT_NXC_TYPE,
           INT_PC_NXC_REGS_FLUSH_INJECT_NXC_TYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_INJECT_NXC_TYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_FLUSH_INJECT_NXC_TYPE]

//>> GET_[INT_PC_NXC_REGS_FLUSH_INJECT_NXC_TYPE]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_FLUSH_INJECT_NXC_TYPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_INJECT));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_FLUSH_INJECT_NXC_TYPE,
           INT_PC_NXC_REGS_FLUSH_INJECT_NXC_TYPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_INJECT_NXC_TYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_FLUSH_INJECT_NXC_TYPE]

//>> SET_[INT_PC_NXC_REGS_FLUSH_INJECT_BLOCKID]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_FLUSH_INJECT_BLOCKID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_INJECT));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_FLUSH_INJECT_BLOCKID,
           INT_PC_NXC_REGS_FLUSH_INJECT_BLOCKID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_INJECT_BLOCKID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_FLUSH_INJECT_BLOCKID]

//>> SET_[INT_PC_NXC_REGS_FLUSH_INJECT_BLOCKID]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_FLUSH_INJECT_BLOCKID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_INJECT));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_FLUSH_INJECT_BLOCKID,
           INT_PC_NXC_REGS_FLUSH_INJECT_BLOCKID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_INJECT_BLOCKID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_FLUSH_INJECT_BLOCKID]

//>> GET_[INT_PC_NXC_REGS_FLUSH_INJECT_BLOCKID]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_FLUSH_INJECT_BLOCKID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_INJECT));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_FLUSH_INJECT_BLOCKID,
           INT_PC_NXC_REGS_FLUSH_INJECT_BLOCKID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_INJECT_BLOCKID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_FLUSH_INJECT_BLOCKID]

//>> SET_[INT_PC_NXC_REGS_FLUSH_INJECT_OFFSET]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_FLUSH_INJECT_OFFSET(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_INJECT));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_FLUSH_INJECT_OFFSET,
           INT_PC_NXC_REGS_FLUSH_INJECT_OFFSET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_INJECT_OFFSET chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_FLUSH_INJECT_OFFSET]

//>> SET_[INT_PC_NXC_REGS_FLUSH_INJECT_OFFSET]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_FLUSH_INJECT_OFFSET(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_INJECT));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_FLUSH_INJECT_OFFSET,
           INT_PC_NXC_REGS_FLUSH_INJECT_OFFSET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_INJECT_OFFSET chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_FLUSH_INJECT_OFFSET]

//>> GET_[INT_PC_NXC_REGS_FLUSH_INJECT_OFFSET]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_FLUSH_INJECT_OFFSET(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_INJECT));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_FLUSH_INJECT_OFFSET,
           INT_PC_NXC_REGS_FLUSH_INJECT_OFFSET_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_INJECT_OFFSET chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_FLUSH_INJECT_OFFSET]

//>> SET_[INT_PC_NXC_REGS_FLUSH_INJECT_RESERVED_32_33]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_FLUSH_INJECT_RESERVED_32_33(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_INJECT));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_FLUSH_INJECT_RESERVED_32_33,
           INT_PC_NXC_REGS_FLUSH_INJECT_RESERVED_32_33_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_INJECT_RESERVED_32_33 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_FLUSH_INJECT_RESERVED_32_33]

//>> SET_[INT_PC_NXC_REGS_FLUSH_INJECT_RESERVED_32_33]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_FLUSH_INJECT_RESERVED_32_33(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_INJECT));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_FLUSH_INJECT_RESERVED_32_33,
           INT_PC_NXC_REGS_FLUSH_INJECT_RESERVED_32_33_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_INJECT_RESERVED_32_33 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_FLUSH_INJECT_RESERVED_32_33]

//>> GET_[INT_PC_NXC_REGS_FLUSH_INJECT_RESERVED_32_33]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_FLUSH_INJECT_RESERVED_32_33(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_INJECT));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_FLUSH_INJECT_RESERVED_32_33,
           INT_PC_NXC_REGS_FLUSH_INJECT_RESERVED_32_33_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_INJECT_RESERVED_32_33 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_FLUSH_INJECT_RESERVED_32_33]

//>> SET_[INT_PC_NXC_REGS_FLUSH_INJECT_NXC_TYPE_MASK]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_FLUSH_INJECT_NXC_TYPE_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_INJECT));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_FLUSH_INJECT_NXC_TYPE_MASK,
           INT_PC_NXC_REGS_FLUSH_INJECT_NXC_TYPE_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_INJECT_NXC_TYPE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_FLUSH_INJECT_NXC_TYPE_MASK]

//>> SET_[INT_PC_NXC_REGS_FLUSH_INJECT_NXC_TYPE_MASK]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_FLUSH_INJECT_NXC_TYPE_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_INJECT));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_FLUSH_INJECT_NXC_TYPE_MASK,
           INT_PC_NXC_REGS_FLUSH_INJECT_NXC_TYPE_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_INJECT_NXC_TYPE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_FLUSH_INJECT_NXC_TYPE_MASK]

//>> GET_[INT_PC_NXC_REGS_FLUSH_INJECT_NXC_TYPE_MASK]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_FLUSH_INJECT_NXC_TYPE_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_INJECT));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_FLUSH_INJECT_NXC_TYPE_MASK,
           INT_PC_NXC_REGS_FLUSH_INJECT_NXC_TYPE_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_INJECT_NXC_TYPE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_FLUSH_INJECT_NXC_TYPE_MASK]

//>> SET_[INT_PC_NXC_REGS_FLUSH_INJECT_BLOCKID_MASK]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_FLUSH_INJECT_BLOCKID_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_INJECT));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_FLUSH_INJECT_BLOCKID_MASK,
           INT_PC_NXC_REGS_FLUSH_INJECT_BLOCKID_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_INJECT_BLOCKID_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_FLUSH_INJECT_BLOCKID_MASK]

//>> SET_[INT_PC_NXC_REGS_FLUSH_INJECT_BLOCKID_MASK]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_FLUSH_INJECT_BLOCKID_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_INJECT));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_FLUSH_INJECT_BLOCKID_MASK,
           INT_PC_NXC_REGS_FLUSH_INJECT_BLOCKID_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_INJECT_BLOCKID_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_FLUSH_INJECT_BLOCKID_MASK]

//>> GET_[INT_PC_NXC_REGS_FLUSH_INJECT_BLOCKID_MASK]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_FLUSH_INJECT_BLOCKID_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_INJECT));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_FLUSH_INJECT_BLOCKID_MASK,
           INT_PC_NXC_REGS_FLUSH_INJECT_BLOCKID_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_INJECT_BLOCKID_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_FLUSH_INJECT_BLOCKID_MASK]

//>> SET_[INT_PC_NXC_REGS_FLUSH_INJECT_OFFSET_MASK]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_FLUSH_INJECT_OFFSET_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_INJECT));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_FLUSH_INJECT_OFFSET_MASK,
           INT_PC_NXC_REGS_FLUSH_INJECT_OFFSET_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_INJECT_OFFSET_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_FLUSH_INJECT_OFFSET_MASK]

//>> SET_[INT_PC_NXC_REGS_FLUSH_INJECT_OFFSET_MASK]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_FLUSH_INJECT_OFFSET_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_INJECT));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_FLUSH_INJECT_OFFSET_MASK,
           INT_PC_NXC_REGS_FLUSH_INJECT_OFFSET_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_INJECT_OFFSET_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_FLUSH_INJECT_OFFSET_MASK]

//>> GET_[INT_PC_NXC_REGS_FLUSH_INJECT_OFFSET_MASK]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_FLUSH_INJECT_OFFSET_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_INJECT));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_FLUSH_INJECT_OFFSET_MASK,
           INT_PC_NXC_REGS_FLUSH_INJECT_OFFSET_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_INJECT_OFFSET_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_FLUSH_INJECT_OFFSET_MASK]

//>> PREP_[INT_PC_NXC_REGS_WATCH2_DATA2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_NXC_REGS_WATCH2_DATA2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_WATCH2_DATA2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_NXC_REGS_WATCH2_DATA2]

//>> GET_[INT_PC_NXC_REGS_WATCH2_DATA2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_NXC_REGS_WATCH2_DATA2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_WATCH2_DATA2;
#endif
    return fapi2::getScom(i_target, INT_PC_NXC_REGS_WATCH2_DATA2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WATCH2_DATA2]

//>> PUT_[INT_PC_NXC_REGS_WATCH2_DATA2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_NXC_REGS_WATCH2_DATA2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WATCH2_DATA2));
#endif
    return fapi2::putScom(i_target, INT_PC_NXC_REGS_WATCH2_DATA2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_NXC_REGS_WATCH2_DATA2]


//>> PREP_[INT_PC_REGS_AIB_TX_ORDER]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_REGS_AIB_TX_ORDER(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_AIB_TX_ORDER;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_REGS_AIB_TX_ORDER]

//>> GET_[INT_PC_REGS_AIB_TX_ORDER]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_REGS_AIB_TX_ORDER(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_AIB_TX_ORDER;
#endif
    return fapi2::getScom(i_target, INT_PC_REGS_AIB_TX_ORDER, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_REGS_AIB_TX_ORDER]

//>> PUT_[INT_PC_REGS_AIB_TX_ORDER]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_REGS_AIB_TX_ORDER(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return fapi2::putScom(i_target, INT_PC_REGS_AIB_TX_ORDER, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_REGS_AIB_TX_ORDER]


//>> SET_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_DMA_RD_WR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_DMA_RD_WR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_DMA_RD_WR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_DMA_RD_WR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_DMA_RD_WR]

//>> SET_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_DMA_RD_WR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_DMA_RD_WR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_DMA_RD_WR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_DMA_RD_WR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_DMA_RD_WR]

//>> SET_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_DMA_RD_WR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_DMA_RD_WR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return o_data.setBit<INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_DMA_RD_WR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_DMA_RD_WR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_DMA_RD_WR]

//>> CLEAR_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_DMA_RD_WR]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_DMA_RD_WR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return o_data.clearBit<INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_DMA_RD_WR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_DMA_RD_WR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_DMA_RD_WR]

//>> GET_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_DMA_RD_WR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_DMA_RD_WR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return i_data.extractToRight<INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_DMA_RD_WR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_DMA_RD_WR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_DMA_RD_WR]

//>> GET_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_DMA_RD_WR]
static inline bool GET_INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_DMA_RD_WR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return i_data.getBit<INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_DMA_RD_WR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_DMA_RD_WR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_DMA_RD_WR]

//>> SET_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_CHKI]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_CHKI(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_CHKI,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_CHKI chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_CHKI]

//>> SET_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_CHKI]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_CHKI(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_CHKI,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_CHKI chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_CHKI]

//>> SET_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_CHKI]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_CHKI(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return o_data.setBit<INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_CHKI>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_CHKI chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_CHKI]

//>> CLEAR_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_CHKI]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_CHKI(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return o_data.clearBit<INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_CHKI>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_CHKI chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_CHKI]

//>> GET_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_CHKI]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_CHKI(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return i_data.extractToRight<INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_CHKI,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_CHKI chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_CHKI]

//>> GET_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_CHKI]
static inline bool GET_INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_CHKI(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return i_data.getBit<INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_CHKI>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_CHKI chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_CHKI]

//>> SET_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_NCKI]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_NCKI(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_NCKI,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_NCKI chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_NCKI]

//>> SET_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_NCKI]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_NCKI(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_NCKI,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_NCKI chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_NCKI]

//>> SET_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_NCKI]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_NCKI(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return o_data.setBit<INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_NCKI>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_NCKI chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_NCKI]

//>> CLEAR_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_NCKI]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_NCKI(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return o_data.clearBit<INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_NCKI>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_NCKI chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_NCKI]

//>> GET_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_NCKI]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_NCKI(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return i_data.extractToRight<INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_NCKI,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_NCKI chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_NCKI]

//>> GET_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_NCKI]
static inline bool GET_INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_NCKI(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return i_data.getBit<INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_NCKI>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_NCKI chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_PC_NCKI]

//>> SET_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_VC]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_VC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_VC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_VC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_VC]

//>> SET_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_VC]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_VC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_VC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_VC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_VC]

//>> SET_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_VC]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_VC(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return o_data.setBit<INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_VC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_VC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_VC]

//>> CLEAR_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_VC]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_VC(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return o_data.clearBit<INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_VC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_VC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_VC]

//>> GET_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_VC]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_VC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return i_data.extractToRight<INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_VC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_VC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_VC]

//>> GET_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_VC]
static inline bool GET_INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_VC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return i_data.getBit<INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_VC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_VC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AIB_TX_ORDER_NO_ORDERING_ST_RMT_VC]

//>> SET_[INT_PC_REGS_AIB_TX_ORDER_RESERVED_16_18]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_ORDER_RESERVED_16_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_ORDER_RESERVED_16_18,
           INT_PC_REGS_AIB_TX_ORDER_RESERVED_16_18_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_RESERVED_16_18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_ORDER_RESERVED_16_18]

//>> SET_[INT_PC_REGS_AIB_TX_ORDER_RESERVED_16_18]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_ORDER_RESERVED_16_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_ORDER_RESERVED_16_18,
           INT_PC_REGS_AIB_TX_ORDER_RESERVED_16_18_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_RESERVED_16_18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_ORDER_RESERVED_16_18]

//>> GET_[INT_PC_REGS_AIB_TX_ORDER_RESERVED_16_18]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_AIB_TX_ORDER_RESERVED_16_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return i_data.extractToRight<INT_PC_REGS_AIB_TX_ORDER_RESERVED_16_18,
           INT_PC_REGS_AIB_TX_ORDER_RESERVED_16_18_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_RESERVED_16_18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AIB_TX_ORDER_RESERVED_16_18]

//>> SET_[INT_PC_REGS_AIB_TX_ORDER_REGS_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_ORDER_REGS_ORDERING_TAG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_ORDER_REGS_ORDERING_TAG,
           INT_PC_REGS_AIB_TX_ORDER_REGS_ORDERING_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_REGS_ORDERING_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_ORDER_REGS_ORDERING_TAG]

//>> SET_[INT_PC_REGS_AIB_TX_ORDER_REGS_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_ORDER_REGS_ORDERING_TAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_ORDER_REGS_ORDERING_TAG,
           INT_PC_REGS_AIB_TX_ORDER_REGS_ORDERING_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_REGS_ORDERING_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_ORDER_REGS_ORDERING_TAG]

//>> GET_[INT_PC_REGS_AIB_TX_ORDER_REGS_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_AIB_TX_ORDER_REGS_ORDERING_TAG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return i_data.extractToRight<INT_PC_REGS_AIB_TX_ORDER_REGS_ORDERING_TAG,
           INT_PC_REGS_AIB_TX_ORDER_REGS_ORDERING_TAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_REGS_ORDERING_TAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AIB_TX_ORDER_REGS_ORDERING_TAG]

//>> SET_[INT_PC_REGS_AIB_TX_ORDER_RESERVED_24_26]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_ORDER_RESERVED_24_26(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_ORDER_RESERVED_24_26,
           INT_PC_REGS_AIB_TX_ORDER_RESERVED_24_26_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_RESERVED_24_26 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_ORDER_RESERVED_24_26]

//>> SET_[INT_PC_REGS_AIB_TX_ORDER_RESERVED_24_26]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_ORDER_RESERVED_24_26(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_ORDER_RESERVED_24_26,
           INT_PC_REGS_AIB_TX_ORDER_RESERVED_24_26_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_RESERVED_24_26 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_ORDER_RESERVED_24_26]

//>> GET_[INT_PC_REGS_AIB_TX_ORDER_RESERVED_24_26]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_AIB_TX_ORDER_RESERVED_24_26(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return i_data.extractToRight<INT_PC_REGS_AIB_TX_ORDER_RESERVED_24_26,
           INT_PC_REGS_AIB_TX_ORDER_RESERVED_24_26_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_RESERVED_24_26 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AIB_TX_ORDER_RESERVED_24_26]

//>> SET_[INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_PC_CHKI_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_PC_CHKI_ORDERING_TAG(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_PC_CHKI_ORDERING_TAG,
           INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_PC_CHKI_ORDERING_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_PC_CHKI_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_PC_CHKI_ORDERING_TAG]

//>> SET_[INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_PC_CHKI_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_PC_CHKI_ORDERING_TAG(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_PC_CHKI_ORDERING_TAG,
           INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_PC_CHKI_ORDERING_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_PC_CHKI_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_PC_CHKI_ORDERING_TAG]

//>> GET_[INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_PC_CHKI_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_PC_CHKI_ORDERING_TAG(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return i_data.extractToRight<INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_PC_CHKI_ORDERING_TAG,
           INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_PC_CHKI_ORDERING_TAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_PC_CHKI_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_PC_CHKI_ORDERING_TAG]

//>> SET_[INT_PC_REGS_AIB_TX_ORDER_RESERVED_32_34]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_ORDER_RESERVED_32_34(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_ORDER_RESERVED_32_34,
           INT_PC_REGS_AIB_TX_ORDER_RESERVED_32_34_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_RESERVED_32_34 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_ORDER_RESERVED_32_34]

//>> SET_[INT_PC_REGS_AIB_TX_ORDER_RESERVED_32_34]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_ORDER_RESERVED_32_34(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_ORDER_RESERVED_32_34,
           INT_PC_REGS_AIB_TX_ORDER_RESERVED_32_34_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_RESERVED_32_34 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_ORDER_RESERVED_32_34]

//>> GET_[INT_PC_REGS_AIB_TX_ORDER_RESERVED_32_34]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_AIB_TX_ORDER_RESERVED_32_34(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return i_data.extractToRight<INT_PC_REGS_AIB_TX_ORDER_RESERVED_32_34,
           INT_PC_REGS_AIB_TX_ORDER_RESERVED_32_34_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_RESERVED_32_34 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AIB_TX_ORDER_RESERVED_32_34]

//>> SET_[INT_PC_REGS_AIB_TX_ORDER_NXC_LD_RSP_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_ORDER_NXC_LD_RSP_ORDERING_TAG(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_ORDER_NXC_LD_RSP_ORDERING_TAG,
           INT_PC_REGS_AIB_TX_ORDER_NXC_LD_RSP_ORDERING_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_NXC_LD_RSP_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_ORDER_NXC_LD_RSP_ORDERING_TAG]

//>> SET_[INT_PC_REGS_AIB_TX_ORDER_NXC_LD_RSP_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_ORDER_NXC_LD_RSP_ORDERING_TAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_ORDER_NXC_LD_RSP_ORDERING_TAG,
           INT_PC_REGS_AIB_TX_ORDER_NXC_LD_RSP_ORDERING_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_NXC_LD_RSP_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_ORDER_NXC_LD_RSP_ORDERING_TAG]

//>> GET_[INT_PC_REGS_AIB_TX_ORDER_NXC_LD_RSP_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_AIB_TX_ORDER_NXC_LD_RSP_ORDERING_TAG(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return i_data.extractToRight<INT_PC_REGS_AIB_TX_ORDER_NXC_LD_RSP_ORDERING_TAG,
           INT_PC_REGS_AIB_TX_ORDER_NXC_LD_RSP_ORDERING_TAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_NXC_LD_RSP_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AIB_TX_ORDER_NXC_LD_RSP_ORDERING_TAG]

//>> SET_[INT_PC_REGS_AIB_TX_ORDER_RESERVED_40_42]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_ORDER_RESERVED_40_42(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_ORDER_RESERVED_40_42,
           INT_PC_REGS_AIB_TX_ORDER_RESERVED_40_42_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_RESERVED_40_42 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_ORDER_RESERVED_40_42]

//>> SET_[INT_PC_REGS_AIB_TX_ORDER_RESERVED_40_42]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_ORDER_RESERVED_40_42(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_ORDER_RESERVED_40_42,
           INT_PC_REGS_AIB_TX_ORDER_RESERVED_40_42_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_RESERVED_40_42 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_ORDER_RESERVED_40_42]

//>> GET_[INT_PC_REGS_AIB_TX_ORDER_RESERVED_40_42]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_AIB_TX_ORDER_RESERVED_40_42(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return i_data.extractToRight<INT_PC_REGS_AIB_TX_ORDER_RESERVED_40_42,
           INT_PC_REGS_AIB_TX_ORDER_RESERVED_40_42_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_RESERVED_40_42 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AIB_TX_ORDER_RESERVED_40_42]

//>> SET_[INT_PC_REGS_AIB_TX_ORDER_NXC_LD_RMT_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_ORDER_NXC_LD_RMT_ORDERING_TAG(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_ORDER_NXC_LD_RMT_ORDERING_TAG,
           INT_PC_REGS_AIB_TX_ORDER_NXC_LD_RMT_ORDERING_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_NXC_LD_RMT_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_ORDER_NXC_LD_RMT_ORDERING_TAG]

//>> SET_[INT_PC_REGS_AIB_TX_ORDER_NXC_LD_RMT_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_ORDER_NXC_LD_RMT_ORDERING_TAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_ORDER_NXC_LD_RMT_ORDERING_TAG,
           INT_PC_REGS_AIB_TX_ORDER_NXC_LD_RMT_ORDERING_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_NXC_LD_RMT_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_ORDER_NXC_LD_RMT_ORDERING_TAG]

//>> GET_[INT_PC_REGS_AIB_TX_ORDER_NXC_LD_RMT_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_AIB_TX_ORDER_NXC_LD_RMT_ORDERING_TAG(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return i_data.extractToRight<INT_PC_REGS_AIB_TX_ORDER_NXC_LD_RMT_ORDERING_TAG,
           INT_PC_REGS_AIB_TX_ORDER_NXC_LD_RMT_ORDERING_TAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_NXC_LD_RMT_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AIB_TX_ORDER_NXC_LD_RMT_ORDERING_TAG]

//>> SET_[INT_PC_REGS_AIB_TX_ORDER_RESERVED_48_50]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_ORDER_RESERVED_48_50(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_ORDER_RESERVED_48_50,
           INT_PC_REGS_AIB_TX_ORDER_RESERVED_48_50_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_RESERVED_48_50 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_ORDER_RESERVED_48_50]

//>> SET_[INT_PC_REGS_AIB_TX_ORDER_RESERVED_48_50]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_ORDER_RESERVED_48_50(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_ORDER_RESERVED_48_50,
           INT_PC_REGS_AIB_TX_ORDER_RESERVED_48_50_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_RESERVED_48_50 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_ORDER_RESERVED_48_50]

//>> GET_[INT_PC_REGS_AIB_TX_ORDER_RESERVED_48_50]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_AIB_TX_ORDER_RESERVED_48_50(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return i_data.extractToRight<INT_PC_REGS_AIB_TX_ORDER_RESERVED_48_50,
           INT_PC_REGS_AIB_TX_ORDER_RESERVED_48_50_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_RESERVED_48_50 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AIB_TX_ORDER_RESERVED_48_50]

//>> SET_[INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_PC_NCKI_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_PC_NCKI_ORDERING_TAG(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_PC_NCKI_ORDERING_TAG,
           INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_PC_NCKI_ORDERING_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_PC_NCKI_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_PC_NCKI_ORDERING_TAG]

//>> SET_[INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_PC_NCKI_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_PC_NCKI_ORDERING_TAG(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_PC_NCKI_ORDERING_TAG,
           INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_PC_NCKI_ORDERING_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_PC_NCKI_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_PC_NCKI_ORDERING_TAG]

//>> GET_[INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_PC_NCKI_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_PC_NCKI_ORDERING_TAG(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return i_data.extractToRight<INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_PC_NCKI_ORDERING_TAG,
           INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_PC_NCKI_ORDERING_TAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_PC_NCKI_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_PC_NCKI_ORDERING_TAG]

//>> SET_[INT_PC_REGS_AIB_TX_ORDER_RESERVED_56_58]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_ORDER_RESERVED_56_58(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_ORDER_RESERVED_56_58,
           INT_PC_REGS_AIB_TX_ORDER_RESERVED_56_58_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_RESERVED_56_58 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_ORDER_RESERVED_56_58]

//>> SET_[INT_PC_REGS_AIB_TX_ORDER_RESERVED_56_58]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_ORDER_RESERVED_56_58(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_ORDER_RESERVED_56_58,
           INT_PC_REGS_AIB_TX_ORDER_RESERVED_56_58_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_RESERVED_56_58 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_ORDER_RESERVED_56_58]

//>> GET_[INT_PC_REGS_AIB_TX_ORDER_RESERVED_56_58]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_AIB_TX_ORDER_RESERVED_56_58(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return i_data.extractToRight<INT_PC_REGS_AIB_TX_ORDER_RESERVED_56_58,
           INT_PC_REGS_AIB_TX_ORDER_RESERVED_56_58_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_RESERVED_56_58 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AIB_TX_ORDER_RESERVED_56_58]

//>> SET_[INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_VC_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_VC_ORDERING_TAG(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_VC_ORDERING_TAG,
           INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_VC_ORDERING_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_VC_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_VC_ORDERING_TAG]

//>> SET_[INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_VC_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_VC_ORDERING_TAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return o_data.insertFromRight<INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_VC_ORDERING_TAG,
           INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_VC_ORDERING_TAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_VC_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_VC_ORDERING_TAG]

//>> GET_[INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_VC_ORDERING_TAG]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_VC_ORDERING_TAG(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_AIB_TX_ORDER));
#endif
    return i_data.extractToRight<INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_VC_ORDERING_TAG,
           INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_VC_ORDERING_TAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_VC_ORDERING_TAG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_AIB_TX_ORDER_NXC_ST_RMT_VC_ORDERING_TAG]

//>> PREP_[INT_PC_REGS_DBG_ATX_ORDER_1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_REGS_DBG_ATX_ORDER_1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_DBG_ATX_ORDER_1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_REGS_DBG_ATX_ORDER_1]

//>> GET_[INT_PC_REGS_DBG_ATX_ORDER_1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_REGS_DBG_ATX_ORDER_1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_DBG_ATX_ORDER_1;
#endif
    return fapi2::getScom(i_target, INT_PC_REGS_DBG_ATX_ORDER_1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_REGS_DBG_ATX_ORDER_1]

//>> PUT_[INT_PC_REGS_DBG_ATX_ORDER_1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_REGS_DBG_ATX_ORDER_1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_ATX_ORDER_1));
#endif
    return fapi2::putScom(i_target, INT_PC_REGS_DBG_ATX_ORDER_1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_REGS_DBG_ATX_ORDER_1]


//>> PREP_[INT_PC_REGS_END_BLOCK_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_REGS_END_BLOCK_MODE(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_END_BLOCK_MODE;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_REGS_END_BLOCK_MODE]

//>> GET_[INT_PC_REGS_END_BLOCK_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_REGS_END_BLOCK_MODE(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_END_BLOCK_MODE;
#endif
    return fapi2::getScom(i_target, INT_PC_REGS_END_BLOCK_MODE, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_REGS_END_BLOCK_MODE]

//>> PUT_[INT_PC_REGS_END_BLOCK_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_REGS_END_BLOCK_MODE(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_END_BLOCK_MODE));
#endif
    return fapi2::putScom(i_target, INT_PC_REGS_END_BLOCK_MODE, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_REGS_END_BLOCK_MODE]


//>> SET_[INT_PC_REGS_END_BLOCK_MODE_INT_PC_END_BLOCK_MODE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_END_BLOCK_MODE_INT_PC_END_BLOCK_MODE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_END_BLOCK_MODE));
#endif
    return o_data.insertFromRight<INT_PC_REGS_END_BLOCK_MODE_INT_PC_END_BLOCK_MODE,
           INT_PC_REGS_END_BLOCK_MODE_INT_PC_END_BLOCK_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_END_BLOCK_MODE_INT_PC_END_BLOCK_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_END_BLOCK_MODE_INT_PC_END_BLOCK_MODE]

//>> SET_[INT_PC_REGS_END_BLOCK_MODE_INT_PC_END_BLOCK_MODE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_END_BLOCK_MODE_INT_PC_END_BLOCK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_END_BLOCK_MODE));
#endif
    return o_data.insertFromRight<INT_PC_REGS_END_BLOCK_MODE_INT_PC_END_BLOCK_MODE,
           INT_PC_REGS_END_BLOCK_MODE_INT_PC_END_BLOCK_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_END_BLOCK_MODE_INT_PC_END_BLOCK_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_END_BLOCK_MODE_INT_PC_END_BLOCK_MODE]

//>> GET_[INT_PC_REGS_END_BLOCK_MODE_INT_PC_END_BLOCK_MODE]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_END_BLOCK_MODE_INT_PC_END_BLOCK_MODE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_END_BLOCK_MODE));
#endif
    return i_data.extractToRight<INT_PC_REGS_END_BLOCK_MODE_INT_PC_END_BLOCK_MODE,
           INT_PC_REGS_END_BLOCK_MODE_INT_PC_END_BLOCK_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_END_BLOCK_MODE_INT_PC_END_BLOCK_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_END_BLOCK_MODE_INT_PC_END_BLOCK_MODE]

//>> PREP_[INT_PC_REGS_ERR1_WOF_DETAIL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_REGS_ERR1_WOF_DETAIL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_ERR1_WOF_DETAIL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_REGS_ERR1_WOF_DETAIL]

//>> GET_[INT_PC_REGS_ERR1_WOF_DETAIL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_REGS_ERR1_WOF_DETAIL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_ERR1_WOF_DETAIL;
#endif
    return fapi2::getScom(i_target, INT_PC_REGS_ERR1_WOF_DETAIL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_REGS_ERR1_WOF_DETAIL]

//>> PUT_[INT_PC_REGS_ERR1_WOF_DETAIL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_REGS_ERR1_WOF_DETAIL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_ERR1_WOF_DETAIL));
#endif
    return fapi2::putScom(i_target, INT_PC_REGS_ERR1_WOF_DETAIL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_REGS_ERR1_WOF_DETAIL]


//>> SET_[INT_PC_REGS_ERR1_WOF_DETAIL_INT_PC_ERR1_WOF_DETAIL]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_ERR1_WOF_DETAIL_INT_PC_ERR1_WOF_DETAIL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_ERR1_WOF_DETAIL));
#endif
    return o_data.insertFromRight<INT_PC_REGS_ERR1_WOF_DETAIL_INT_PC_ERR1_WOF_DETAIL,
           INT_PC_REGS_ERR1_WOF_DETAIL_INT_PC_ERR1_WOF_DETAIL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_ERR1_WOF_DETAIL_INT_PC_ERR1_WOF_DETAIL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_ERR1_WOF_DETAIL_INT_PC_ERR1_WOF_DETAIL]

//>> SET_[INT_PC_REGS_ERR1_WOF_DETAIL_INT_PC_ERR1_WOF_DETAIL]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_ERR1_WOF_DETAIL_INT_PC_ERR1_WOF_DETAIL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_ERR1_WOF_DETAIL));
#endif
    return o_data.insertFromRight<INT_PC_REGS_ERR1_WOF_DETAIL_INT_PC_ERR1_WOF_DETAIL,
           INT_PC_REGS_ERR1_WOF_DETAIL_INT_PC_ERR1_WOF_DETAIL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_ERR1_WOF_DETAIL_INT_PC_ERR1_WOF_DETAIL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_ERR1_WOF_DETAIL_INT_PC_ERR1_WOF_DETAIL]

//>> GET_[INT_PC_REGS_ERR1_WOF_DETAIL_INT_PC_ERR1_WOF_DETAIL]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_ERR1_WOF_DETAIL_INT_PC_ERR1_WOF_DETAIL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_ERR1_WOF_DETAIL));
#endif
    return i_data.extractToRight<INT_PC_REGS_ERR1_WOF_DETAIL_INT_PC_ERR1_WOF_DETAIL,
           INT_PC_REGS_ERR1_WOF_DETAIL_INT_PC_ERR1_WOF_DETAIL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_ERR1_WOF_DETAIL_INT_PC_ERR1_WOF_DETAIL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_ERR1_WOF_DETAIL_INT_PC_ERR1_WOF_DETAIL]

//>> PREP_[INT_PC_REGS_TCTXT_EN1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_REGS_TCTXT_EN1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_TCTXT_EN1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_REGS_TCTXT_EN1]

//>> GET_[INT_PC_REGS_TCTXT_EN1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_REGS_TCTXT_EN1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_TCTXT_EN1;
#endif
    return fapi2::getScom(i_target, INT_PC_REGS_TCTXT_EN1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_REGS_TCTXT_EN1]

//>> PUT_[INT_PC_REGS_TCTXT_EN1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_REGS_TCTXT_EN1(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN1));
#endif
    return fapi2::putScom(i_target, INT_PC_REGS_TCTXT_EN1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_REGS_TCTXT_EN1]


//>> SET_[INT_PC_REGS_TCTXT_EN1_8_EN]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_EN1_8_EN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_EN1_8_EN,
           INT_PC_REGS_TCTXT_EN1_8_EN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN1_8_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_TCTXT_EN1_8_EN]

//>> SET_[INT_PC_REGS_TCTXT_EN1_8_EN]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_EN1_8_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_EN1_8_EN,
           INT_PC_REGS_TCTXT_EN1_8_EN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN1_8_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_TCTXT_EN1_8_EN]

//>> GET_[INT_PC_REGS_TCTXT_EN1_8_EN]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_TCTXT_EN1_8_EN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN1));
#endif
    return i_data.extractToRight<INT_PC_REGS_TCTXT_EN1_8_EN,
           INT_PC_REGS_TCTXT_EN1_8_EN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN1_8_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_TCTXT_EN1_8_EN]

//>> SET_[INT_PC_REGS_TCTXT_EN1_9_EN]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_EN1_9_EN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_EN1_9_EN,
           INT_PC_REGS_TCTXT_EN1_9_EN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN1_9_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_TCTXT_EN1_9_EN]

//>> SET_[INT_PC_REGS_TCTXT_EN1_9_EN]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_EN1_9_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_EN1_9_EN,
           INT_PC_REGS_TCTXT_EN1_9_EN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN1_9_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_TCTXT_EN1_9_EN]

//>> GET_[INT_PC_REGS_TCTXT_EN1_9_EN]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_TCTXT_EN1_9_EN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN1));
#endif
    return i_data.extractToRight<INT_PC_REGS_TCTXT_EN1_9_EN,
           INT_PC_REGS_TCTXT_EN1_9_EN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN1_9_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_TCTXT_EN1_9_EN]

//>> SET_[INT_PC_REGS_TCTXT_EN1_10_EN]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_EN1_10_EN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_EN1_10_EN,
           INT_PC_REGS_TCTXT_EN1_10_EN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN1_10_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_TCTXT_EN1_10_EN]

//>> SET_[INT_PC_REGS_TCTXT_EN1_10_EN]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_EN1_10_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_EN1_10_EN,
           INT_PC_REGS_TCTXT_EN1_10_EN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN1_10_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_TCTXT_EN1_10_EN]

//>> GET_[INT_PC_REGS_TCTXT_EN1_10_EN]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_TCTXT_EN1_10_EN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN1));
#endif
    return i_data.extractToRight<INT_PC_REGS_TCTXT_EN1_10_EN,
           INT_PC_REGS_TCTXT_EN1_10_EN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN1_10_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_TCTXT_EN1_10_EN]

//>> SET_[INT_PC_REGS_TCTXT_EN1_11_EN]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_EN1_11_EN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_EN1_11_EN,
           INT_PC_REGS_TCTXT_EN1_11_EN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN1_11_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_TCTXT_EN1_11_EN]

//>> SET_[INT_PC_REGS_TCTXT_EN1_11_EN]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_EN1_11_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_EN1_11_EN,
           INT_PC_REGS_TCTXT_EN1_11_EN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN1_11_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_TCTXT_EN1_11_EN]

//>> GET_[INT_PC_REGS_TCTXT_EN1_11_EN]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_TCTXT_EN1_11_EN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN1));
#endif
    return i_data.extractToRight<INT_PC_REGS_TCTXT_EN1_11_EN,
           INT_PC_REGS_TCTXT_EN1_11_EN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN1_11_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_TCTXT_EN1_11_EN]

//>> SET_[INT_PC_REGS_TCTXT_EN1_12_EN]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_EN1_12_EN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_EN1_12_EN,
           INT_PC_REGS_TCTXT_EN1_12_EN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN1_12_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_TCTXT_EN1_12_EN]

//>> SET_[INT_PC_REGS_TCTXT_EN1_12_EN]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_EN1_12_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_EN1_12_EN,
           INT_PC_REGS_TCTXT_EN1_12_EN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN1_12_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_TCTXT_EN1_12_EN]

//>> GET_[INT_PC_REGS_TCTXT_EN1_12_EN]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_TCTXT_EN1_12_EN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN1));
#endif
    return i_data.extractToRight<INT_PC_REGS_TCTXT_EN1_12_EN,
           INT_PC_REGS_TCTXT_EN1_12_EN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN1_12_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_TCTXT_EN1_12_EN]

//>> SET_[INT_PC_REGS_TCTXT_EN1_13_EN]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_EN1_13_EN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_EN1_13_EN,
           INT_PC_REGS_TCTXT_EN1_13_EN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN1_13_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_TCTXT_EN1_13_EN]

//>> SET_[INT_PC_REGS_TCTXT_EN1_13_EN]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_EN1_13_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_EN1_13_EN,
           INT_PC_REGS_TCTXT_EN1_13_EN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN1_13_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_TCTXT_EN1_13_EN]

//>> GET_[INT_PC_REGS_TCTXT_EN1_13_EN]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_TCTXT_EN1_13_EN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN1));
#endif
    return i_data.extractToRight<INT_PC_REGS_TCTXT_EN1_13_EN,
           INT_PC_REGS_TCTXT_EN1_13_EN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN1_13_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_TCTXT_EN1_13_EN]

//>> SET_[INT_PC_REGS_TCTXT_EN1_14_EN]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_EN1_14_EN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_EN1_14_EN,
           INT_PC_REGS_TCTXT_EN1_14_EN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN1_14_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_TCTXT_EN1_14_EN]

//>> SET_[INT_PC_REGS_TCTXT_EN1_14_EN]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_EN1_14_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_EN1_14_EN,
           INT_PC_REGS_TCTXT_EN1_14_EN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN1_14_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_TCTXT_EN1_14_EN]

//>> GET_[INT_PC_REGS_TCTXT_EN1_14_EN]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_TCTXT_EN1_14_EN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN1));
#endif
    return i_data.extractToRight<INT_PC_REGS_TCTXT_EN1_14_EN,
           INT_PC_REGS_TCTXT_EN1_14_EN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN1_14_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_TCTXT_EN1_14_EN]

//>> SET_[INT_PC_REGS_TCTXT_EN1_15_EN]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_EN1_15_EN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_EN1_15_EN,
           INT_PC_REGS_TCTXT_EN1_15_EN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN1_15_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_TCTXT_EN1_15_EN]

//>> SET_[INT_PC_REGS_TCTXT_EN1_15_EN]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_EN1_15_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN1));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_EN1_15_EN,
           INT_PC_REGS_TCTXT_EN1_15_EN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN1_15_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_TCTXT_EN1_15_EN]

//>> GET_[INT_PC_REGS_TCTXT_EN1_15_EN]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_TCTXT_EN1_15_EN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN1));
#endif
    return i_data.extractToRight<INT_PC_REGS_TCTXT_EN1_15_EN,
           INT_PC_REGS_TCTXT_EN1_15_EN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_TCTXT_EN1_15_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_TCTXT_EN1_15_EN]

//>> PREP_[INT_VC_AIB_TIMEOUT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_AIB_TIMEOUT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_AIB_TIMEOUT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_AIB_TIMEOUT]

//>> GET_[INT_VC_AIB_TIMEOUT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_AIB_TIMEOUT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_AIB_TIMEOUT;
#endif
    return fapi2::getScom(i_target, INT_VC_AIB_TIMEOUT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_AIB_TIMEOUT]

//>> PUT_[INT_VC_AIB_TIMEOUT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_AIB_TIMEOUT(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TIMEOUT));
#endif
    return fapi2::putScom(i_target, INT_VC_AIB_TIMEOUT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_AIB_TIMEOUT]


//>> SET_[INT_VC_AIB_TIMEOUT_INT_VC_AIB_TIMEOUT_DELAY]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TIMEOUT_INT_VC_AIB_TIMEOUT_DELAY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TIMEOUT));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TIMEOUT_INT_VC_AIB_TIMEOUT_DELAY,
           INT_VC_AIB_TIMEOUT_INT_VC_AIB_TIMEOUT_DELAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_AIB_TIMEOUT_INT_VC_AIB_TIMEOUT_DELAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TIMEOUT_INT_VC_AIB_TIMEOUT_DELAY]

//>> SET_[INT_VC_AIB_TIMEOUT_INT_VC_AIB_TIMEOUT_DELAY]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_AIB_TIMEOUT_INT_VC_AIB_TIMEOUT_DELAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TIMEOUT));
#endif
    return o_data.insertFromRight<INT_VC_AIB_TIMEOUT_INT_VC_AIB_TIMEOUT_DELAY,
           INT_VC_AIB_TIMEOUT_INT_VC_AIB_TIMEOUT_DELAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_AIB_TIMEOUT_INT_VC_AIB_TIMEOUT_DELAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_AIB_TIMEOUT_INT_VC_AIB_TIMEOUT_DELAY]

//>> GET_[INT_VC_AIB_TIMEOUT_INT_VC_AIB_TIMEOUT_DELAY]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_AIB_TIMEOUT_INT_VC_AIB_TIMEOUT_DELAY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_AIB_TIMEOUT));
#endif
    return i_data.extractToRight<INT_VC_AIB_TIMEOUT_INT_VC_AIB_TIMEOUT_DELAY,
           INT_VC_AIB_TIMEOUT_INT_VC_AIB_TIMEOUT_DELAY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_AIB_TIMEOUT_INT_VC_AIB_TIMEOUT_DELAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_AIB_TIMEOUT_INT_VC_AIB_TIMEOUT_DELAY]

//>> PREP_[INT_VC_ENDC_WATCH1_DATA0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_ENDC_WATCH1_DATA0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ENDC_WATCH1_DATA0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_ENDC_WATCH1_DATA0]

//>> GET_[INT_VC_ENDC_WATCH1_DATA0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_ENDC_WATCH1_DATA0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ENDC_WATCH1_DATA0;
#endif
    return fapi2::getScom(i_target, INT_VC_ENDC_WATCH1_DATA0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_ENDC_WATCH1_DATA0]

//>> PUT_[INT_VC_ENDC_WATCH1_DATA0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_ENDC_WATCH1_DATA0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH1_DATA0));
#endif
    return fapi2::putScom(i_target, INT_VC_ENDC_WATCH1_DATA0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_ENDC_WATCH1_DATA0]


//>> PREP_[INT_VC_ERR_CFG_G0R1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_ERR_CFG_G0R1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ERR_CFG_G0R1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_ERR_CFG_G0R1]

//>> GET_[INT_VC_ERR_CFG_G0R1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_ERR_CFG_G0R1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ERR_CFG_G0R1;
#endif
    return fapi2::getScom(i_target, INT_VC_ERR_CFG_G0R1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_ERR_CFG_G0R1]

//>> PUT_[INT_VC_ERR_CFG_G0R1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_ERR_CFG_G0R1(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_ERR_CFG_G0R1));
#endif
    return fapi2::putScom(i_target, INT_VC_ERR_CFG_G0R1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_ERR_CFG_G0R1]


//>> SET_[INT_VC_ERR_CFG_G0R1_INT_VC_ERR_CFG_G0R1_ERROR_CONFIG]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ERR_CFG_G0R1_INT_VC_ERR_CFG_G0R1_ERROR_CONFIG(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ERR_CFG_G0R1));
#endif
    return o_data.insertFromRight<INT_VC_ERR_CFG_G0R1_INT_VC_ERR_CFG_G0R1_ERROR_CONFIG,
           INT_VC_ERR_CFG_G0R1_INT_VC_ERR_CFG_G0R1_ERROR_CONFIG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ERR_CFG_G0R1_INT_VC_ERR_CFG_G0R1_ERROR_CONFIG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ERR_CFG_G0R1_INT_VC_ERR_CFG_G0R1_ERROR_CONFIG]

//>> SET_[INT_VC_ERR_CFG_G0R1_INT_VC_ERR_CFG_G0R1_ERROR_CONFIG]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ERR_CFG_G0R1_INT_VC_ERR_CFG_G0R1_ERROR_CONFIG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ERR_CFG_G0R1));
#endif
    return o_data.insertFromRight<INT_VC_ERR_CFG_G0R1_INT_VC_ERR_CFG_G0R1_ERROR_CONFIG,
           INT_VC_ERR_CFG_G0R1_INT_VC_ERR_CFG_G0R1_ERROR_CONFIG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ERR_CFG_G0R1_INT_VC_ERR_CFG_G0R1_ERROR_CONFIG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ERR_CFG_G0R1_INT_VC_ERR_CFG_G0R1_ERROR_CONFIG]

//>> GET_[INT_VC_ERR_CFG_G0R1_INT_VC_ERR_CFG_G0R1_ERROR_CONFIG]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ERR_CFG_G0R1_INT_VC_ERR_CFG_G0R1_ERROR_CONFIG(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ERR_CFG_G0R1));
#endif
    return i_data.extractToRight<INT_VC_ERR_CFG_G0R1_INT_VC_ERR_CFG_G0R1_ERROR_CONFIG,
           INT_VC_ERR_CFG_G0R1_INT_VC_ERR_CFG_G0R1_ERROR_CONFIG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ERR_CFG_G0R1_INT_VC_ERR_CFG_G0R1_ERROR_CONFIG chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ERR_CFG_G0R1_INT_VC_ERR_CFG_G0R1_ERROR_CONFIG]

//>> PREP_[INT_VC_QUEUES_CFG_REM_1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_QUEUES_CFG_REM_1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_QUEUES_CFG_REM_1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_QUEUES_CFG_REM_1]

//>> GET_[INT_VC_QUEUES_CFG_REM_1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_QUEUES_CFG_REM_1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_QUEUES_CFG_REM_1;
#endif
    return fapi2::getScom(i_target, INT_VC_QUEUES_CFG_REM_1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_1]

//>> PUT_[INT_VC_QUEUES_CFG_REM_1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_QUEUES_CFG_REM_1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return fapi2::putScom(i_target, INT_VC_QUEUES_CFG_REM_1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_QUEUES_CFG_REM_1]


//>> SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_IRQ_DISABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_1_IRQ_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_IRQ_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_DISABLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_IRQ_DISABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_1_IRQ_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_IRQ_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_DISABLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_IRQ_DISABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.setBit<INT_VC_QUEUES_CFG_REM_1_IRQ_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_IRQ_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_DISABLE]

//>> CLEAR_[INT_VC_QUEUES_CFG_REM_1_IRQ_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_QUEUES_CFG_REM_1_IRQ_DISABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.clearBit<INT_VC_QUEUES_CFG_REM_1_IRQ_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_IRQ_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_QUEUES_CFG_REM_1_IRQ_DISABLE]

//>> GET_[INT_VC_QUEUES_CFG_REM_1_IRQ_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_1_IRQ_DISABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_1_IRQ_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_IRQ_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_1_IRQ_DISABLE]

//>> GET_[INT_VC_QUEUES_CFG_REM_1_IRQ_DISABLE]
static inline bool GET_INT_VC_QUEUES_CFG_REM_1_IRQ_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return i_data.getBit<INT_VC_QUEUES_CFG_REM_1_IRQ_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_IRQ_DISABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_1_IRQ_DISABLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_DROP_EQ_INJECT_FROM_CORE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_IRQ_DROP_EQ_INJECT_FROM_CORE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_1_IRQ_DROP_EQ_INJECT_FROM_CORE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_IRQ_DROP_EQ_INJECT_FROM_CORE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_DROP_EQ_INJECT_FROM_CORE]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_DROP_EQ_INJECT_FROM_CORE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_IRQ_DROP_EQ_INJECT_FROM_CORE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_1_IRQ_DROP_EQ_INJECT_FROM_CORE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_IRQ_DROP_EQ_INJECT_FROM_CORE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_DROP_EQ_INJECT_FROM_CORE]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_DROP_EQ_INJECT_FROM_CORE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_IRQ_DROP_EQ_INJECT_FROM_CORE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.setBit<INT_VC_QUEUES_CFG_REM_1_IRQ_DROP_EQ_INJECT_FROM_CORE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_IRQ_DROP_EQ_INJECT_FROM_CORE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_DROP_EQ_INJECT_FROM_CORE]

//>> CLEAR_[INT_VC_QUEUES_CFG_REM_1_IRQ_DROP_EQ_INJECT_FROM_CORE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_QUEUES_CFG_REM_1_IRQ_DROP_EQ_INJECT_FROM_CORE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.clearBit<INT_VC_QUEUES_CFG_REM_1_IRQ_DROP_EQ_INJECT_FROM_CORE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_IRQ_DROP_EQ_INJECT_FROM_CORE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_QUEUES_CFG_REM_1_IRQ_DROP_EQ_INJECT_FROM_CORE]

//>> GET_[INT_VC_QUEUES_CFG_REM_1_IRQ_DROP_EQ_INJECT_FROM_CORE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_1_IRQ_DROP_EQ_INJECT_FROM_CORE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_1_IRQ_DROP_EQ_INJECT_FROM_CORE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_IRQ_DROP_EQ_INJECT_FROM_CORE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_1_IRQ_DROP_EQ_INJECT_FROM_CORE]

//>> GET_[INT_VC_QUEUES_CFG_REM_1_IRQ_DROP_EQ_INJECT_FROM_CORE]
static inline bool GET_INT_VC_QUEUES_CFG_REM_1_IRQ_DROP_EQ_INJECT_FROM_CORE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return i_data.getBit<INT_VC_QUEUES_CFG_REM_1_IRQ_DROP_EQ_INJECT_FROM_CORE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_IRQ_DROP_EQ_INJECT_FROM_CORE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_1_IRQ_DROP_EQ_INJECT_FROM_CORE]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_PREFETCH_DISTANCE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_IRQ_PREFETCH_DISTANCE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_1_IRQ_PREFETCH_DISTANCE,
           INT_VC_QUEUES_CFG_REM_1_IRQ_PREFETCH_DISTANCE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_IRQ_PREFETCH_DISTANCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_PREFETCH_DISTANCE]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_PREFETCH_DISTANCE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_IRQ_PREFETCH_DISTANCE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_1_IRQ_PREFETCH_DISTANCE,
           INT_VC_QUEUES_CFG_REM_1_IRQ_PREFETCH_DISTANCE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_IRQ_PREFETCH_DISTANCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_PREFETCH_DISTANCE]

//>> GET_[INT_VC_QUEUES_CFG_REM_1_IRQ_PREFETCH_DISTANCE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_1_IRQ_PREFETCH_DISTANCE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_1_IRQ_PREFETCH_DISTANCE,
           INT_VC_QUEUES_CFG_REM_1_IRQ_PREFETCH_DISTANCE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_IRQ_PREFETCH_DISTANCE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_1_IRQ_PREFETCH_DISTANCE]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_RESERVED_8_10]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_RESERVED_8_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_1_RESERVED_8_10,
           INT_VC_QUEUES_CFG_REM_1_RESERVED_8_10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_RESERVED_8_10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_RESERVED_8_10]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_RESERVED_8_10]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_RESERVED_8_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_1_RESERVED_8_10,
           INT_VC_QUEUES_CFG_REM_1_RESERVED_8_10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_RESERVED_8_10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_RESERVED_8_10]

//>> GET_[INT_VC_QUEUES_CFG_REM_1_RESERVED_8_10]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_1_RESERVED_8_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_1_RESERVED_8_10,
           INT_VC_QUEUES_CFG_REM_1_RESERVED_8_10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_RESERVED_8_10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_1_RESERVED_8_10]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_CRD_TO_CQ]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_CRD_TO_CQ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_CRD_TO_CQ,
           INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_CRD_TO_CQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_CRD_TO_CQ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_CRD_TO_CQ]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_CRD_TO_CQ]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_CRD_TO_CQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_CRD_TO_CQ,
           INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_CRD_TO_CQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_CRD_TO_CQ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_CRD_TO_CQ]

//>> GET_[INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_CRD_TO_CQ]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_CRD_TO_CQ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_CRD_TO_CQ,
           INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_CRD_TO_CQ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_CRD_TO_CQ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_CRD_TO_CQ]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_RESERVED_16_18]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_RESERVED_16_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_1_RESERVED_16_18,
           INT_VC_QUEUES_CFG_REM_1_RESERVED_16_18_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_RESERVED_16_18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_RESERVED_16_18]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_RESERVED_16_18]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_RESERVED_16_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_1_RESERVED_16_18,
           INT_VC_QUEUES_CFG_REM_1_RESERVED_16_18_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_RESERVED_16_18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_RESERVED_16_18]

//>> GET_[INT_VC_QUEUES_CFG_REM_1_RESERVED_16_18]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_1_RESERVED_16_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_1_RESERVED_16_18,
           INT_VC_QUEUES_CFG_REM_1_RESERVED_16_18_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_RESERVED_16_18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_1_RESERVED_16_18]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_CRD_TO_PC]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_CRD_TO_PC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_CRD_TO_PC,
           INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_CRD_TO_PC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_CRD_TO_PC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_CRD_TO_PC]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_CRD_TO_PC]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_CRD_TO_PC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_CRD_TO_PC,
           INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_CRD_TO_PC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_CRD_TO_PC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_CRD_TO_PC]

//>> GET_[INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_CRD_TO_PC]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_CRD_TO_PC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_CRD_TO_PC,
           INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_CRD_TO_PC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_CRD_TO_PC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_CRD_TO_PC]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_NB_OUTSTANDING_DEM]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_NB_OUTSTANDING_DEM(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_NB_OUTSTANDING_DEM,
           INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_NB_OUTSTANDING_DEM_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_NB_OUTSTANDING_DEM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_NB_OUTSTANDING_DEM]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_NB_OUTSTANDING_DEM]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_NB_OUTSTANDING_DEM(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_NB_OUTSTANDING_DEM,
           INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_NB_OUTSTANDING_DEM_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_NB_OUTSTANDING_DEM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_NB_OUTSTANDING_DEM]

//>> GET_[INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_NB_OUTSTANDING_DEM]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_NB_OUTSTANDING_DEM(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_NB_OUTSTANDING_DEM,
           INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_NB_OUTSTANDING_DEM_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_NB_OUTSTANDING_DEM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_1_IRQ_MAX_NB_OUTSTANDING_DEM]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_MIN_NB_OUTSTANDING_DEM]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_IRQ_MIN_NB_OUTSTANDING_DEM(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_1_IRQ_MIN_NB_OUTSTANDING_DEM,
           INT_VC_QUEUES_CFG_REM_1_IRQ_MIN_NB_OUTSTANDING_DEM_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_IRQ_MIN_NB_OUTSTANDING_DEM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_MIN_NB_OUTSTANDING_DEM]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_MIN_NB_OUTSTANDING_DEM]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_IRQ_MIN_NB_OUTSTANDING_DEM(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_1_IRQ_MIN_NB_OUTSTANDING_DEM,
           INT_VC_QUEUES_CFG_REM_1_IRQ_MIN_NB_OUTSTANDING_DEM_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_IRQ_MIN_NB_OUTSTANDING_DEM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_MIN_NB_OUTSTANDING_DEM]

//>> GET_[INT_VC_QUEUES_CFG_REM_1_IRQ_MIN_NB_OUTSTANDING_DEM]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_1_IRQ_MIN_NB_OUTSTANDING_DEM(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_1_IRQ_MIN_NB_OUTSTANDING_DEM,
           INT_VC_QUEUES_CFG_REM_1_IRQ_MIN_NB_OUTSTANDING_DEM_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_IRQ_MIN_NB_OUTSTANDING_DEM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_1_IRQ_MIN_NB_OUTSTANDING_DEM]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_RESERVED_32_33]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_RESERVED_32_33(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_1_RESERVED_32_33,
           INT_VC_QUEUES_CFG_REM_1_RESERVED_32_33_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_RESERVED_32_33 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_RESERVED_32_33]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_RESERVED_32_33]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_RESERVED_32_33(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_1_RESERVED_32_33,
           INT_VC_QUEUES_CFG_REM_1_RESERVED_32_33_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_RESERVED_32_33 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_RESERVED_32_33]

//>> GET_[INT_VC_QUEUES_CFG_REM_1_RESERVED_32_33]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_1_RESERVED_32_33(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_1_RESERVED_32_33,
           INT_VC_QUEUES_CFG_REM_1_RESERVED_32_33_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_RESERVED_32_33 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_1_RESERVED_32_33]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_FULL]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_IRQ_FULL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_1_IRQ_FULL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_IRQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_FULL]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_FULL]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_IRQ_FULL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_1_IRQ_FULL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_IRQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_FULL]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_FULL]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_IRQ_FULL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.setBit<INT_VC_QUEUES_CFG_REM_1_IRQ_FULL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_IRQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_FULL]

//>> CLEAR_[INT_VC_QUEUES_CFG_REM_1_IRQ_FULL]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_QUEUES_CFG_REM_1_IRQ_FULL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.clearBit<INT_VC_QUEUES_CFG_REM_1_IRQ_FULL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_IRQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_QUEUES_CFG_REM_1_IRQ_FULL]

//>> GET_[INT_VC_QUEUES_CFG_REM_1_IRQ_FULL]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_1_IRQ_FULL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_1_IRQ_FULL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_IRQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_1_IRQ_FULL]

//>> GET_[INT_VC_QUEUES_CFG_REM_1_IRQ_FULL]
static inline bool GET_INT_VC_QUEUES_CFG_REM_1_IRQ_FULL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return i_data.getBit<INT_VC_QUEUES_CFG_REM_1_IRQ_FULL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_IRQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_1_IRQ_FULL]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_IRQ_IDLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_1_IRQ_IDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_IRQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_IDLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_IRQ_IDLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_1_IRQ_IDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_IRQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_IDLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_IRQ_IDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.setBit<INT_VC_QUEUES_CFG_REM_1_IRQ_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_IRQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_IRQ_IDLE]

//>> CLEAR_[INT_VC_QUEUES_CFG_REM_1_IRQ_IDLE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_QUEUES_CFG_REM_1_IRQ_IDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.clearBit<INT_VC_QUEUES_CFG_REM_1_IRQ_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_IRQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_QUEUES_CFG_REM_1_IRQ_IDLE]

//>> GET_[INT_VC_QUEUES_CFG_REM_1_IRQ_IDLE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_1_IRQ_IDLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_1_IRQ_IDLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_IRQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_1_IRQ_IDLE]

//>> GET_[INT_VC_QUEUES_CFG_REM_1_IRQ_IDLE]
static inline bool GET_INT_VC_QUEUES_CFG_REM_1_IRQ_IDLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return i_data.getBit<INT_VC_QUEUES_CFG_REM_1_IRQ_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_IRQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_1_IRQ_IDLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_RESERVED_36_37]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_RESERVED_36_37(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_1_RESERVED_36_37,
           INT_VC_QUEUES_CFG_REM_1_RESERVED_36_37_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_RESERVED_36_37 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_RESERVED_36_37]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_RESERVED_36_37]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_RESERVED_36_37(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_1_RESERVED_36_37,
           INT_VC_QUEUES_CFG_REM_1_RESERVED_36_37_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_RESERVED_36_37 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_RESERVED_36_37]

//>> GET_[INT_VC_QUEUES_CFG_REM_1_RESERVED_36_37]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_1_RESERVED_36_37(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_1_RESERVED_36_37,
           INT_VC_QUEUES_CFG_REM_1_RESERVED_36_37_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_RESERVED_36_37 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_1_RESERVED_36_37]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_ERQ_ENABLE_MEMORY_BACKING]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_ERQ_ENABLE_MEMORY_BACKING(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_1_ERQ_ENABLE_MEMORY_BACKING,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_ERQ_ENABLE_MEMORY_BACKING chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_ERQ_ENABLE_MEMORY_BACKING]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_ERQ_ENABLE_MEMORY_BACKING]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_ERQ_ENABLE_MEMORY_BACKING(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_1_ERQ_ENABLE_MEMORY_BACKING,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_ERQ_ENABLE_MEMORY_BACKING chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_ERQ_ENABLE_MEMORY_BACKING]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_ERQ_ENABLE_MEMORY_BACKING]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_ERQ_ENABLE_MEMORY_BACKING(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.setBit<INT_VC_QUEUES_CFG_REM_1_ERQ_ENABLE_MEMORY_BACKING>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_ERQ_ENABLE_MEMORY_BACKING chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_ERQ_ENABLE_MEMORY_BACKING]

//>> CLEAR_[INT_VC_QUEUES_CFG_REM_1_ERQ_ENABLE_MEMORY_BACKING]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_QUEUES_CFG_REM_1_ERQ_ENABLE_MEMORY_BACKING(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.clearBit<INT_VC_QUEUES_CFG_REM_1_ERQ_ENABLE_MEMORY_BACKING>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_ERQ_ENABLE_MEMORY_BACKING chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_QUEUES_CFG_REM_1_ERQ_ENABLE_MEMORY_BACKING]

//>> GET_[INT_VC_QUEUES_CFG_REM_1_ERQ_ENABLE_MEMORY_BACKING]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_1_ERQ_ENABLE_MEMORY_BACKING(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_1_ERQ_ENABLE_MEMORY_BACKING,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_ERQ_ENABLE_MEMORY_BACKING chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_1_ERQ_ENABLE_MEMORY_BACKING]

//>> GET_[INT_VC_QUEUES_CFG_REM_1_ERQ_ENABLE_MEMORY_BACKING]
static inline bool GET_INT_VC_QUEUES_CFG_REM_1_ERQ_ENABLE_MEMORY_BACKING(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return i_data.getBit<INT_VC_QUEUES_CFG_REM_1_ERQ_ENABLE_MEMORY_BACKING>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_ERQ_ENABLE_MEMORY_BACKING chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_1_ERQ_ENABLE_MEMORY_BACKING]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_ERQ_FULL_WRITEBACK_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_ERQ_FULL_WRITEBACK_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_1_ERQ_FULL_WRITEBACK_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_ERQ_FULL_WRITEBACK_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_ERQ_FULL_WRITEBACK_ENABLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_ERQ_FULL_WRITEBACK_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_ERQ_FULL_WRITEBACK_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_1_ERQ_FULL_WRITEBACK_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_ERQ_FULL_WRITEBACK_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_ERQ_FULL_WRITEBACK_ENABLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_ERQ_FULL_WRITEBACK_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_ERQ_FULL_WRITEBACK_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.setBit<INT_VC_QUEUES_CFG_REM_1_ERQ_FULL_WRITEBACK_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_ERQ_FULL_WRITEBACK_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_ERQ_FULL_WRITEBACK_ENABLE]

//>> CLEAR_[INT_VC_QUEUES_CFG_REM_1_ERQ_FULL_WRITEBACK_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_QUEUES_CFG_REM_1_ERQ_FULL_WRITEBACK_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.clearBit<INT_VC_QUEUES_CFG_REM_1_ERQ_FULL_WRITEBACK_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_ERQ_FULL_WRITEBACK_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_QUEUES_CFG_REM_1_ERQ_FULL_WRITEBACK_ENABLE]

//>> GET_[INT_VC_QUEUES_CFG_REM_1_ERQ_FULL_WRITEBACK_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_1_ERQ_FULL_WRITEBACK_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_1_ERQ_FULL_WRITEBACK_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_ERQ_FULL_WRITEBACK_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_1_ERQ_FULL_WRITEBACK_ENABLE]

//>> GET_[INT_VC_QUEUES_CFG_REM_1_ERQ_FULL_WRITEBACK_ENABLE]
static inline bool GET_INT_VC_QUEUES_CFG_REM_1_ERQ_FULL_WRITEBACK_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return i_data.getBit<INT_VC_QUEUES_CFG_REM_1_ERQ_FULL_WRITEBACK_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_ERQ_FULL_WRITEBACK_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_1_ERQ_FULL_WRITEBACK_ENABLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_RESERVED_40_41]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_RESERVED_40_41(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_1_RESERVED_40_41,
           INT_VC_QUEUES_CFG_REM_1_RESERVED_40_41_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_RESERVED_40_41 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_RESERVED_40_41]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_RESERVED_40_41]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_RESERVED_40_41(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_1_RESERVED_40_41,
           INT_VC_QUEUES_CFG_REM_1_RESERVED_40_41_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_RESERVED_40_41 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_RESERVED_40_41]

//>> GET_[INT_VC_QUEUES_CFG_REM_1_RESERVED_40_41]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_1_RESERVED_40_41(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_1_RESERVED_40_41,
           INT_VC_QUEUES_CFG_REM_1_RESERVED_40_41_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_RESERVED_40_41 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_1_RESERVED_40_41]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_ERQ_MEM_SIZE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_ERQ_MEM_SIZE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_1_ERQ_MEM_SIZE,
           INT_VC_QUEUES_CFG_REM_1_ERQ_MEM_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_ERQ_MEM_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_ERQ_MEM_SIZE]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_ERQ_MEM_SIZE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_ERQ_MEM_SIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_1_ERQ_MEM_SIZE,
           INT_VC_QUEUES_CFG_REM_1_ERQ_MEM_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_ERQ_MEM_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_ERQ_MEM_SIZE]

//>> GET_[INT_VC_QUEUES_CFG_REM_1_ERQ_MEM_SIZE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_1_ERQ_MEM_SIZE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_1_ERQ_MEM_SIZE,
           INT_VC_QUEUES_CFG_REM_1_ERQ_MEM_SIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_ERQ_MEM_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_1_ERQ_MEM_SIZE]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_RESERVED_48_49]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_RESERVED_48_49(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_1_RESERVED_48_49,
           INT_VC_QUEUES_CFG_REM_1_RESERVED_48_49_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_RESERVED_48_49 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_RESERVED_48_49]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_RESERVED_48_49]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_RESERVED_48_49(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_1_RESERVED_48_49,
           INT_VC_QUEUES_CFG_REM_1_RESERVED_48_49_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_RESERVED_48_49 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_RESERVED_48_49]

//>> GET_[INT_VC_QUEUES_CFG_REM_1_RESERVED_48_49]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_1_RESERVED_48_49(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_1_RESERVED_48_49,
           INT_VC_QUEUES_CFG_REM_1_RESERVED_48_49_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_RESERVED_48_49 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_1_RESERVED_48_49]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_ERQ_FULL]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_ERQ_FULL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_1_ERQ_FULL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_ERQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_ERQ_FULL]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_ERQ_FULL]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_ERQ_FULL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_1_ERQ_FULL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_ERQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_ERQ_FULL]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_ERQ_FULL]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_ERQ_FULL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.setBit<INT_VC_QUEUES_CFG_REM_1_ERQ_FULL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_ERQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_ERQ_FULL]

//>> CLEAR_[INT_VC_QUEUES_CFG_REM_1_ERQ_FULL]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_QUEUES_CFG_REM_1_ERQ_FULL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.clearBit<INT_VC_QUEUES_CFG_REM_1_ERQ_FULL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_ERQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_QUEUES_CFG_REM_1_ERQ_FULL]

//>> GET_[INT_VC_QUEUES_CFG_REM_1_ERQ_FULL]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_1_ERQ_FULL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_1_ERQ_FULL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_ERQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_1_ERQ_FULL]

//>> GET_[INT_VC_QUEUES_CFG_REM_1_ERQ_FULL]
static inline bool GET_INT_VC_QUEUES_CFG_REM_1_ERQ_FULL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return i_data.getBit<INT_VC_QUEUES_CFG_REM_1_ERQ_FULL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_ERQ_FULL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_1_ERQ_FULL]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_ERQ_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_ERQ_IDLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_1_ERQ_IDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_ERQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_ERQ_IDLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_ERQ_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_ERQ_IDLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_1_ERQ_IDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_ERQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_ERQ_IDLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_ERQ_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_ERQ_IDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.setBit<INT_VC_QUEUES_CFG_REM_1_ERQ_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_ERQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_ERQ_IDLE]

//>> CLEAR_[INT_VC_QUEUES_CFG_REM_1_ERQ_IDLE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_QUEUES_CFG_REM_1_ERQ_IDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.clearBit<INT_VC_QUEUES_CFG_REM_1_ERQ_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_ERQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_QUEUES_CFG_REM_1_ERQ_IDLE]

//>> GET_[INT_VC_QUEUES_CFG_REM_1_ERQ_IDLE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_1_ERQ_IDLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_1_ERQ_IDLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_ERQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_1_ERQ_IDLE]

//>> GET_[INT_VC_QUEUES_CFG_REM_1_ERQ_IDLE]
static inline bool GET_INT_VC_QUEUES_CFG_REM_1_ERQ_IDLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return i_data.getBit<INT_VC_QUEUES_CFG_REM_1_ERQ_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_ERQ_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_1_ERQ_IDLE]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_ERQ_CFG_UPD_PND]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_ERQ_CFG_UPD_PND(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_1_ERQ_CFG_UPD_PND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_ERQ_CFG_UPD_PND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_ERQ_CFG_UPD_PND]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_ERQ_CFG_UPD_PND]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_ERQ_CFG_UPD_PND(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_CFG_REM_1_ERQ_CFG_UPD_PND,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_ERQ_CFG_UPD_PND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_ERQ_CFG_UPD_PND]

//>> SET_[INT_VC_QUEUES_CFG_REM_1_ERQ_CFG_UPD_PND]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_CFG_REM_1_ERQ_CFG_UPD_PND(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.setBit<INT_VC_QUEUES_CFG_REM_1_ERQ_CFG_UPD_PND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_ERQ_CFG_UPD_PND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_CFG_REM_1_ERQ_CFG_UPD_PND]

//>> CLEAR_[INT_VC_QUEUES_CFG_REM_1_ERQ_CFG_UPD_PND]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_QUEUES_CFG_REM_1_ERQ_CFG_UPD_PND(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return o_data.clearBit<INT_VC_QUEUES_CFG_REM_1_ERQ_CFG_UPD_PND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_ERQ_CFG_UPD_PND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_QUEUES_CFG_REM_1_ERQ_CFG_UPD_PND]

//>> GET_[INT_VC_QUEUES_CFG_REM_1_ERQ_CFG_UPD_PND]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_CFG_REM_1_ERQ_CFG_UPD_PND(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_CFG_REM_1_ERQ_CFG_UPD_PND,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_ERQ_CFG_UPD_PND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_1_ERQ_CFG_UPD_PND]

//>> GET_[INT_VC_QUEUES_CFG_REM_1_ERQ_CFG_UPD_PND]
static inline bool GET_INT_VC_QUEUES_CFG_REM_1_ERQ_CFG_UPD_PND(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_CFG_REM_1));
#endif
    return i_data.getBit<INT_VC_QUEUES_CFG_REM_1_ERQ_CFG_UPD_PND>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_QUEUES_CFG_REM_1_ERQ_CFG_UPD_PND chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_CFG_REM_1_ERQ_CFG_UPD_PND]

//>> PREP_[INT_VC_QUEUES_PERF_EVENT_SEL_2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_QUEUES_PERF_EVENT_SEL_2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_QUEUES_PERF_EVENT_SEL_2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_QUEUES_PERF_EVENT_SEL_2]

//>> GET_[INT_VC_QUEUES_PERF_EVENT_SEL_2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_QUEUES_PERF_EVENT_SEL_2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_QUEUES_PERF_EVENT_SEL_2;
#endif
    return fapi2::getScom(i_target, INT_VC_QUEUES_PERF_EVENT_SEL_2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_QUEUES_PERF_EVENT_SEL_2]

//>> PUT_[INT_VC_QUEUES_PERF_EVENT_SEL_2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_QUEUES_PERF_EVENT_SEL_2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_2));
#endif
    return fapi2::putScom(i_target, INT_VC_QUEUES_PERF_EVENT_SEL_2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_QUEUES_PERF_EVENT_SEL_2]


//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_FROM_AIB]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_2_FROM_AIB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_2_FROM_AIB,
           INT_VC_QUEUES_PERF_EVENT_SEL_2_FROM_AIB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_2_FROM_AIB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_FROM_AIB]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_FROM_AIB]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_2_FROM_AIB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_2_FROM_AIB,
           INT_VC_QUEUES_PERF_EVENT_SEL_2_FROM_AIB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_2_FROM_AIB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_FROM_AIB]

//>> GET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_FROM_AIB]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_PERF_EVENT_SEL_2_FROM_AIB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_2));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_PERF_EVENT_SEL_2_FROM_AIB,
           INT_VC_QUEUES_PERF_EVENT_SEL_2_FROM_AIB_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_2_FROM_AIB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_FROM_AIB]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_IRQ_TO_IQA]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_2_IRQ_TO_IQA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_2_IRQ_TO_IQA,
           INT_VC_QUEUES_PERF_EVENT_SEL_2_IRQ_TO_IQA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_2_IRQ_TO_IQA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_IRQ_TO_IQA]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_IRQ_TO_IQA]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_2_IRQ_TO_IQA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_2_IRQ_TO_IQA,
           INT_VC_QUEUES_PERF_EVENT_SEL_2_IRQ_TO_IQA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_2_IRQ_TO_IQA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_IRQ_TO_IQA]

//>> GET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_IRQ_TO_IQA]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_PERF_EVENT_SEL_2_IRQ_TO_IQA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_2));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_PERF_EVENT_SEL_2_IRQ_TO_IQA,
           INT_VC_QUEUES_PERF_EVENT_SEL_2_IRQ_TO_IQA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_2_IRQ_TO_IQA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_IRQ_TO_IQA]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_IQA_TO_DPS]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_2_IQA_TO_DPS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_2_IQA_TO_DPS,
           INT_VC_QUEUES_PERF_EVENT_SEL_2_IQA_TO_DPS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_2_IQA_TO_DPS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_IQA_TO_DPS]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_IQA_TO_DPS]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_2_IQA_TO_DPS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_2_IQA_TO_DPS,
           INT_VC_QUEUES_PERF_EVENT_SEL_2_IQA_TO_DPS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_2_IQA_TO_DPS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_IQA_TO_DPS]

//>> GET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_IQA_TO_DPS]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_PERF_EVENT_SEL_2_IQA_TO_DPS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_2));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_PERF_EVENT_SEL_2_IQA_TO_DPS,
           INT_VC_QUEUES_PERF_EVENT_SEL_2_IQA_TO_DPS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_2_IQA_TO_DPS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_IQA_TO_DPS]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_IQA_TO_IQS]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_2_IQA_TO_IQS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_2_IQA_TO_IQS,
           INT_VC_QUEUES_PERF_EVENT_SEL_2_IQA_TO_IQS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_2_IQA_TO_IQS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_IQA_TO_IQS]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_IQA_TO_IQS]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_2_IQA_TO_IQS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_2_IQA_TO_IQS,
           INT_VC_QUEUES_PERF_EVENT_SEL_2_IQA_TO_IQS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_2_IQA_TO_IQS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_IQA_TO_IQS]

//>> GET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_IQA_TO_IQS]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_PERF_EVENT_SEL_2_IQA_TO_IQS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_2));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_PERF_EVENT_SEL_2_IQA_TO_IQS,
           INT_VC_QUEUES_PERF_EVENT_SEL_2_IQA_TO_IQS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_2_IQA_TO_IQS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_IQA_TO_IQS]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_IQS_TO_EQA]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_2_IQS_TO_EQA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_2_IQS_TO_EQA,
           INT_VC_QUEUES_PERF_EVENT_SEL_2_IQS_TO_EQA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_2_IQS_TO_EQA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_IQS_TO_EQA]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_IQS_TO_EQA]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_2_IQS_TO_EQA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_2_IQS_TO_EQA,
           INT_VC_QUEUES_PERF_EVENT_SEL_2_IQS_TO_EQA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_2_IQS_TO_EQA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_IQS_TO_EQA]

//>> GET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_IQS_TO_EQA]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_PERF_EVENT_SEL_2_IQS_TO_EQA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_2));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_PERF_EVENT_SEL_2_IQS_TO_EQA,
           INT_VC_QUEUES_PERF_EVENT_SEL_2_IQS_TO_EQA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_2_IQS_TO_EQA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_IQS_TO_EQA]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ERQ]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ERQ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ERQ,
           INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ERQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ERQ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ERQ]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ERQ]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ERQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ERQ,
           INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ERQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ERQ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ERQ]

//>> GET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ERQ]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ERQ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_2));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ERQ,
           INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ERQ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ERQ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ERQ]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ATX]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ATX(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ATX,
           INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ATX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ATX chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ATX]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ATX]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ATX(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ATX,
           INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ATX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ATX chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ATX]

//>> GET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ATX]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ATX(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_2));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ATX,
           INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ATX_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ATX chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ATX]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ENDC]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ENDC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ENDC,
           INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ENDC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ENDC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ENDC]

//>> SET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ENDC]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ENDC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_2));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ENDC,
           INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ENDC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ENDC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ENDC]

//>> GET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ENDC]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ENDC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_2));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ENDC,
           INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ENDC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ENDC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_QUEUES_PERF_EVENT_SEL_2_EQA_TO_ENDC]

//>> PREP_[INT_VC_RECOV_ERR_G1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_RECOV_ERR_G1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_RECOV_ERR_G1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_RECOV_ERR_G1]

//>> GET_[INT_VC_RECOV_ERR_G1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_RECOV_ERR_G1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_RECOV_ERR_G1;
#endif
    return fapi2::getScom(i_target, INT_VC_RECOV_ERR_G1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_RECOV_ERR_G1]

//>> PUT_[INT_VC_RECOV_ERR_G1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_RECOV_ERR_G1(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_RECOV_ERR_G1));
#endif
    return fapi2::putScom(i_target, INT_VC_RECOV_ERR_G1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_RECOV_ERR_G1]


//>> SET_[INT_VC_RECOV_ERR_G1_INT_VC_RECOV_ERR_G1_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_RECOV_ERR_G1_INT_VC_RECOV_ERR_G1_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_RECOV_ERR_G1));
#endif
    return o_data.insertFromRight<INT_VC_RECOV_ERR_G1_INT_VC_RECOV_ERR_G1_ERROR,
           INT_VC_RECOV_ERR_G1_INT_VC_RECOV_ERR_G1_ERROR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_RECOV_ERR_G1_INT_VC_RECOV_ERR_G1_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_RECOV_ERR_G1_INT_VC_RECOV_ERR_G1_ERROR]

//>> SET_[INT_VC_RECOV_ERR_G1_INT_VC_RECOV_ERR_G1_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_RECOV_ERR_G1_INT_VC_RECOV_ERR_G1_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_RECOV_ERR_G1));
#endif
    return o_data.insertFromRight<INT_VC_RECOV_ERR_G1_INT_VC_RECOV_ERR_G1_ERROR,
           INT_VC_RECOV_ERR_G1_INT_VC_RECOV_ERR_G1_ERROR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_RECOV_ERR_G1_INT_VC_RECOV_ERR_G1_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_RECOV_ERR_G1_INT_VC_RECOV_ERR_G1_ERROR]

//>> GET_[INT_VC_RECOV_ERR_G1_INT_VC_RECOV_ERR_G1_ERROR]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_RECOV_ERR_G1_INT_VC_RECOV_ERR_G1_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_RECOV_ERR_G1));
#endif
    return i_data.extractToRight<INT_VC_RECOV_ERR_G1_INT_VC_RECOV_ERR_G1_ERROR,
           INT_VC_RECOV_ERR_G1_INT_VC_RECOV_ERR_G1_ERROR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_RECOV_ERR_G1_INT_VC_RECOV_ERR_G1_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_RECOV_ERR_G1_INT_VC_RECOV_ERR_G1_ERROR]

//>> PREP_[NX_CH4_ADDR_3_HASH_FUNCTION_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_CH4_ADDR_3_HASH_FUNCTION_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_CH4_ADDR_3_HASH_FUNCTION_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_CH4_ADDR_3_HASH_FUNCTION_REG]

//>> GET_[NX_CH4_ADDR_3_HASH_FUNCTION_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_CH4_ADDR_3_HASH_FUNCTION_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_CH4_ADDR_3_HASH_FUNCTION_REG;
#endif
    return fapi2::getScom(i_target, NX_CH4_ADDR_3_HASH_FUNCTION_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_CH4_ADDR_3_HASH_FUNCTION_REG]

//>> PUT_[NX_CH4_ADDR_3_HASH_FUNCTION_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_CH4_ADDR_3_HASH_FUNCTION_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_CH4_ADDR_3_HASH_FUNCTION_REG));
#endif
    return fapi2::putScom(i_target, NX_CH4_ADDR_3_HASH_FUNCTION_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_CH4_ADDR_3_HASH_FUNCTION_REG]


//>> SET_[NX_CH4_ADDR_3_HASH_FUNCTION_REG_ADDRESS_3_HASH_FUNCTION]
static inline fapi2::buffer<uint64_t>& SET_NX_CH4_ADDR_3_HASH_FUNCTION_REG_ADDRESS_3_HASH_FUNCTION(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_CH4_ADDR_3_HASH_FUNCTION_REG));
#endif
    return o_data.insertFromRight<NX_CH4_ADDR_3_HASH_FUNCTION_REG_ADDRESS_3_HASH_FUNCTION,
           NX_CH4_ADDR_3_HASH_FUNCTION_REG_ADDRESS_3_HASH_FUNCTION_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_CH4_ADDR_3_HASH_FUNCTION_REG_ADDRESS_3_HASH_FUNCTION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_CH4_ADDR_3_HASH_FUNCTION_REG_ADDRESS_3_HASH_FUNCTION]

//>> SET_[NX_CH4_ADDR_3_HASH_FUNCTION_REG_ADDRESS_3_HASH_FUNCTION]
static inline fapi2::buffer<uint64_t>& SET_NX_CH4_ADDR_3_HASH_FUNCTION_REG_ADDRESS_3_HASH_FUNCTION(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_CH4_ADDR_3_HASH_FUNCTION_REG));
#endif
    return o_data.insertFromRight<NX_CH4_ADDR_3_HASH_FUNCTION_REG_ADDRESS_3_HASH_FUNCTION,
           NX_CH4_ADDR_3_HASH_FUNCTION_REG_ADDRESS_3_HASH_FUNCTION_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_CH4_ADDR_3_HASH_FUNCTION_REG_ADDRESS_3_HASH_FUNCTION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_CH4_ADDR_3_HASH_FUNCTION_REG_ADDRESS_3_HASH_FUNCTION]

//>> GET_[NX_CH4_ADDR_3_HASH_FUNCTION_REG_ADDRESS_3_HASH_FUNCTION]
static inline fapi2::buffer<uint64_t>& GET_NX_CH4_ADDR_3_HASH_FUNCTION_REG_ADDRESS_3_HASH_FUNCTION(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_CH4_ADDR_3_HASH_FUNCTION_REG));
#endif
    return i_data.extractToRight<NX_CH4_ADDR_3_HASH_FUNCTION_REG_ADDRESS_3_HASH_FUNCTION,
           NX_CH4_ADDR_3_HASH_FUNCTION_REG_ADDRESS_3_HASH_FUNCTION_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_CH4_ADDR_3_HASH_FUNCTION_REG_ADDRESS_3_HASH_FUNCTION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_CH4_ADDR_3_HASH_FUNCTION_REG_ADDRESS_3_HASH_FUNCTION]

//>> PREP_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW;
#endif
    return fapi2::getScom(i_target, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW]

//>> PUT_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW]

//>> PREP_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND;
#endif
    return fapi2::getScom(i_target, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND]

//>> PUT_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND]

//>> PREP_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR;
#endif
    return fapi2::getScom(i_target, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR]

//>> PUT_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR]


//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_PE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_PE_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_PE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_PE_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_PE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_PE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_PE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_PE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_PE_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_PE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_PE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_PE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_PE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_PE_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_PE_FIR]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_PE_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_PE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_PE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_PE_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_PE_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_PE_FIR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_PE_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_PE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_PE_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_PE_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_PE_FIR]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_PE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_PE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_PE_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_PE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_CE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_CE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_CE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_CE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_CE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_CE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_CE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_CE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_CE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_CE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_CE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_CE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_CE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_CE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_CE_FIR]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_CE_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_CE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_CE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_CE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_CE_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_CE_FIR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_CE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_CE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_CE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_CE_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_CE_FIR]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_CE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_CE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_CE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_CE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_UE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_UE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_UE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_UE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_UE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_UE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_UE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_UE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_UE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_UE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_UE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_UE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_UE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_UE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_UE_FIR]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_UE_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_UE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_UE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_UE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_UE_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_UE_FIR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_UE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_UE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_UE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_UE_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_UE_FIR]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_UE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_UE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_UE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_UE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_SUE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_SUE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_SUE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_SUE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_SUE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_SUE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_SUE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_SUE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_SUE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_SUE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_SUE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_SUE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_SUE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_SUE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_SUE_FIR]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_SUE_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_SUE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_SUE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_SUE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_SUE_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_SUE_FIR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_SUE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_SUE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_SUE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_SUE_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_SUE_FIR]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_SUE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_SUE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_SUE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_ECC_SUE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_CE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_CE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_CE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_CE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_CE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_CE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_CE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_CE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_CE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_CE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_CE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_CE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_CE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_CE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_CE_FIR]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_CE_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_CE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_CE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_CE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_CE_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_CE_FIR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_CE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_CE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_CE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_CE_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_CE_FIR]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_CE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_CE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_CE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_CE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_UE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_UE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_UE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_UE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_UE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_UE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_UE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_UE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_UE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_UE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_UE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_UE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_UE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_UE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_UE_FIR]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_UE_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_UE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_UE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_UE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_UE_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_UE_FIR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_UE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_UE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_UE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_UE_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_UE_FIR]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_UE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_UE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_UE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_INBD_ARRAY_ECC_UE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PASTE_REJECT_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PASTE_REJECT_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PASTE_REJECT_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PASTE_REJECT_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PASTE_REJECT_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PASTE_REJECT_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PASTE_REJECT_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PASTE_REJECT_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PASTE_REJECT_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PASTE_REJECT_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PASTE_REJECT_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PASTE_REJECT_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PASTE_REJECT_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PASTE_REJECT_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PASTE_REJECT_FIR]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PASTE_REJECT_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PASTE_REJECT_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PASTE_REJECT_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PASTE_REJECT_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PASTE_REJECT_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PASTE_REJECT_FIR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PASTE_REJECT_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PASTE_REJECT_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PASTE_REJECT_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PASTE_REJECT_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PASTE_REJECT_FIR]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PASTE_REJECT_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PASTE_REJECT_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PASTE_REJECT_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PASTE_REJECT_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_CMD_HANG_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_CMD_HANG_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_CMD_HANG_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_CMD_HANG_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_CMD_HANG_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_CMD_HANG_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_CMD_HANG_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_CMD_HANG_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_CMD_HANG_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_CMD_HANG_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_CMD_HANG_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_CMD_HANG_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_CMD_HANG_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_CMD_HANG_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_CMD_HANG_FIR]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_CMD_HANG_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_CMD_HANG_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_CMD_HANG_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_CMD_HANG_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_CMD_HANG_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_CMD_HANG_FIR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_CMD_HANG_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_CMD_HANG_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_CMD_HANG_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_CMD_HANG_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_CMD_HANG_FIR]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_CMD_HANG_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_CMD_HANG_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_CMD_HANG_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_CMD_HANG_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_READ_ARE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_READ_ARE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_READ_ARE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_READ_ARE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_READ_ARE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_READ_ARE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_READ_ARE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_READ_ARE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_READ_ARE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_READ_ARE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_READ_ARE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_READ_ARE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_READ_ARE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_READ_ARE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_READ_ARE_FIR]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_READ_ARE_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_READ_ARE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_READ_ARE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_READ_ARE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_READ_ARE_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_READ_ARE_FIR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_READ_ARE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_READ_ARE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_READ_ARE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_READ_ARE_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_READ_ARE_FIR]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_READ_ARE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_READ_ARE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_READ_ARE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_READ_ARE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_WRITE_ARE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_WRITE_ARE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_WRITE_ARE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_WRITE_ARE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_WRITE_ARE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_WRITE_ARE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_WRITE_ARE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_WRITE_ARE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_WRITE_ARE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_WRITE_ARE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_WRITE_ARE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_WRITE_ARE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_WRITE_ARE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_WRITE_ARE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_WRITE_ARE_FIR]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_WRITE_ARE_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_WRITE_ARE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_WRITE_ARE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_WRITE_ARE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_WRITE_ARE_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_WRITE_ARE_FIR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_WRITE_ARE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_WRITE_ARE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_WRITE_ARE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_WRITE_ARE_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_WRITE_ARE_FIR]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_WRITE_ARE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_WRITE_ARE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_WRITE_ARE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_WRITE_ARE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_MISC_HW_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_MISC_HW_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_MISC_HW_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_MISC_HW_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_MISC_HW_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_MISC_HW_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_MISC_HW_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_MISC_HW_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_MISC_HW_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_MISC_HW_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_MISC_HW_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_MISC_HW_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_MISC_HW_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_MISC_HW_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_MISC_HW_FIR]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_MISC_HW_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_MISC_HW_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_MISC_HW_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_MISC_HW_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_MISC_HW_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_MISC_HW_FIR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_MISC_HW_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_MISC_HW_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_MISC_HW_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_MISC_HW_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_MISC_HW_FIR]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_MISC_HW_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_MISC_HW_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_MISC_HW_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_MISC_HW_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_MMIO_BAR_PE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_MMIO_BAR_PE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_MMIO_BAR_PE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_MMIO_BAR_PE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_MMIO_BAR_PE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_MMIO_BAR_PE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_MMIO_BAR_PE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_MMIO_BAR_PE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_MMIO_BAR_PE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_MMIO_BAR_PE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_MMIO_BAR_PE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_MMIO_BAR_PE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_MMIO_BAR_PE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_MMIO_BAR_PE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_MMIO_BAR_PE_FIR]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_MMIO_BAR_PE_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_MMIO_BAR_PE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_MMIO_BAR_PE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_MMIO_BAR_PE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_MMIO_BAR_PE_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_MMIO_BAR_PE_FIR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_MMIO_BAR_PE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_MMIO_BAR_PE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_MMIO_BAR_PE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_MMIO_BAR_PE_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_MMIO_BAR_PE_FIR]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_MMIO_BAR_PE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_MMIO_BAR_PE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_MMIO_BAR_PE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_MMIO_BAR_PE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_UE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_UE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_UE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_UE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_UE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_UE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_UE_FIR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_UE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_UE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_UE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_UE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_UE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_UE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_UE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_UE_FIR]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_UE_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_UE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_UE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_UE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_UE_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_UE_FIR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_UE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_UE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_UE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_UE_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_UE_FIR]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_UE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_UE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_UE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_UE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_LOAD_LINK_ERR_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_LOAD_LINK_ERR_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_LOAD_LINK_ERR_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_LOAD_LINK_ERR_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_LOAD_LINK_ERR_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_LOAD_LINK_ERR_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_LOAD_LINK_ERR_FIR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_LOAD_LINK_ERR_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_LOAD_LINK_ERR_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_LOAD_LINK_ERR_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_LOAD_LINK_ERR_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_LOAD_LINK_ERR_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_LOAD_LINK_ERR_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_LOAD_LINK_ERR_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_LOAD_LINK_ERR_FIR]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_LOAD_LINK_ERR_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_LOAD_LINK_ERR_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_LOAD_LINK_ERR_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_LOAD_LINK_ERR_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_LOAD_LINK_ERR_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_LOAD_LINK_ERR_FIR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_LOAD_LINK_ERR_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_LOAD_LINK_ERR_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_LOAD_LINK_ERR_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_LOAD_LINK_ERR_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_LOAD_LINK_ERR_FIR]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_LOAD_LINK_ERR_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_LOAD_LINK_ERR_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_LOAD_LINK_ERR_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_LOAD_LINK_ERR_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_STORE_LINK_ERR_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_STORE_LINK_ERR_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_STORE_LINK_ERR_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_STORE_LINK_ERR_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_STORE_LINK_ERR_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_STORE_LINK_ERR_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_STORE_LINK_ERR_FIR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_STORE_LINK_ERR_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_STORE_LINK_ERR_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_STORE_LINK_ERR_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_STORE_LINK_ERR_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_STORE_LINK_ERR_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_STORE_LINK_ERR_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_STORE_LINK_ERR_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_STORE_LINK_ERR_FIR]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_STORE_LINK_ERR_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_STORE_LINK_ERR_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_STORE_LINK_ERR_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_STORE_LINK_ERR_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_STORE_LINK_ERR_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_STORE_LINK_ERR_FIR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_STORE_LINK_ERR_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_STORE_LINK_ERR_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_STORE_LINK_ERR_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_STORE_LINK_ERR_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_STORE_LINK_ERR_FIR]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_STORE_LINK_ERR_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_STORE_LINK_ERR_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_STORE_LINK_ERR_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_STORE_LINK_ERR_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RESERVED_15_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RESERVED_15_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RESERVED_15_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RESERVED_15_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RESERVED_15_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RESERVED_15_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RESERVED_15_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RESERVED_15_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RESERVED_15_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RESERVED_15_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RESERVED_15_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RESERVED_15_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RESERVED_15_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RESERVED_15_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RESERVED_15_FIR]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RESERVED_15_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RESERVED_15_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RESERVED_15_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RESERVED_15_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RESERVED_15_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RESERVED_15_FIR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RESERVED_15_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RESERVED_15_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RESERVED_15_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RESERVED_15_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RESERVED_15_FIR]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RESERVED_15_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RESERVED_15_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RESERVED_15_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RESERVED_15_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_INTERNAL_HANG_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_INTERNAL_HANG_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_INTERNAL_HANG_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_INTERNAL_HANG_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_INTERNAL_HANG_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_INTERNAL_HANG_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_INTERNAL_HANG_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_INTERNAL_HANG_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_INTERNAL_HANG_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_INTERNAL_HANG_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_INTERNAL_HANG_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_INTERNAL_HANG_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_INTERNAL_HANG_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_INTERNAL_HANG_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_INTERNAL_HANG_FIR]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_INTERNAL_HANG_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_INTERNAL_HANG_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_INTERNAL_HANG_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_INTERNAL_HANG_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_INTERNAL_HANG_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_INTERNAL_HANG_FIR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_INTERNAL_HANG_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_INTERNAL_HANG_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_INTERNAL_HANG_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_INTERNAL_HANG_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_INTERNAL_HANG_FIR]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_INTERNAL_HANG_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_INTERNAL_HANG_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_INTERNAL_HANG_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBI_INTERNAL_HANG_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_PE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_PE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_PE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_PE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_PE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_PE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_PE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_PE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_PE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_PE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_PE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_PE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_PE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_PE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_PE_FIR]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_PE_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_PE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_PE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_PE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_PE_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_PE_FIR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_PE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_PE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_PE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_PE_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_PE_FIR]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_PE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_PE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_PE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_PE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_CE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_CE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_CE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_CE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_CE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_CE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_CE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_CE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_CE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_CE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_CE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_CE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_CE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_CE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_CE_FIR]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_CE_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_CE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_CE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_CE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_CE_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_CE_FIR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_CE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_CE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_CE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_CE_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_CE_FIR]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_CE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_CE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_CE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_CE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_UE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_UE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_UE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_UE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_UE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_UE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_UE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_UE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_UE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_UE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_UE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_UE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_UE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_UE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_UE_FIR]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_UE_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_UE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_UE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_UE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_UE_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_UE_FIR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_UE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_UE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_UE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_UE_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_UE_FIR]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_UE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_UE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_UE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_UE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_SUE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_SUE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_SUE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_SUE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_SUE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_SUE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_SUE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_SUE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_SUE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_SUE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_SUE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_SUE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_SUE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_SUE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_SUE_FIR]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_SUE_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_SUE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_SUE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_SUE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_SUE_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_SUE_FIR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_SUE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_SUE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_SUE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_SUE_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_SUE_FIR]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_SUE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_SUE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_SUE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_ARRAY_SUE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CICO_HANG_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CICO_HANG_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CICO_HANG_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CICO_HANG_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CICO_HANG_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CICO_HANG_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CICO_HANG_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CICO_HANG_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CICO_HANG_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CICO_HANG_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CICO_HANG_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CICO_HANG_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CICO_HANG_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CICO_HANG_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CICO_HANG_FIR]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CICO_HANG_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CICO_HANG_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CICO_HANG_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CICO_HANG_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CICO_HANG_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CICO_HANG_FIR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CICO_HANG_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CICO_HANG_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CICO_HANG_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CICO_HANG_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CICO_HANG_FIR]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CICO_HANG_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CICO_HANG_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CICO_HANG_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CICO_HANG_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CNTRL_ERR_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CNTRL_ERR_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CNTRL_ERR_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CNTRL_ERR_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CNTRL_ERR_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CNTRL_ERR_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CNTRL_ERR_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CNTRL_ERR_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CNTRL_ERR_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CNTRL_ERR_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CNTRL_ERR_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CNTRL_ERR_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CNTRL_ERR_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CNTRL_ERR_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CNTRL_ERR_FIR]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CNTRL_ERR_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CNTRL_ERR_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CNTRL_ERR_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CNTRL_ERR_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CNTRL_ERR_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CNTRL_ERR_FIR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CNTRL_ERR_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CNTRL_ERR_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CNTRL_ERR_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CNTRL_ERR_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CNTRL_ERR_FIR]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CNTRL_ERR_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CNTRL_ERR_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CNTRL_ERR_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_CNTRL_ERR_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_UE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_UE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_UE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_UE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_UE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_UE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_UE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_UE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_UE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_UE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_UE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_UE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_UE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_UE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_UE_FIR]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_UE_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_UE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_UE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_UE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_UE_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_UE_FIR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_UE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_UE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_UE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_UE_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_UE_FIR]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_UE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_UE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_UE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_UE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_SUE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_SUE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_SUE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_SUE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_SUE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_SUE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_SUE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_SUE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_SUE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_SUE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_SUE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_SUE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_SUE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_SUE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_SUE_FIR]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_SUE_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_SUE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_SUE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_SUE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_SUE_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_SUE_FIR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_SUE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_SUE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_SUE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_SUE_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_SUE_FIR]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_SUE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_SUE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_SUE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PB_XLAT_DATA_SUE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LD_LINK_ERR_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LD_LINK_ERR_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LD_LINK_ERR_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LD_LINK_ERR_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LD_LINK_ERR_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LD_LINK_ERR_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LD_LINK_ERR_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LD_LINK_ERR_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LD_LINK_ERR_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LD_LINK_ERR_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LD_LINK_ERR_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LD_LINK_ERR_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LD_LINK_ERR_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LD_LINK_ERR_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LD_LINK_ERR_FIR]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LD_LINK_ERR_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LD_LINK_ERR_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LD_LINK_ERR_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LD_LINK_ERR_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LD_LINK_ERR_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LD_LINK_ERR_FIR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LD_LINK_ERR_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LD_LINK_ERR_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LD_LINK_ERR_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LD_LINK_ERR_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LD_LINK_ERR_FIR]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LD_LINK_ERR_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LD_LINK_ERR_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LD_LINK_ERR_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LD_LINK_ERR_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LINK_ABORT_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LINK_ABORT_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LINK_ABORT_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LINK_ABORT_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LINK_ABORT_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LINK_ABORT_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LINK_ABORT_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LINK_ABORT_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LINK_ABORT_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LINK_ABORT_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LINK_ABORT_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LINK_ABORT_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LINK_ABORT_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LINK_ABORT_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LINK_ABORT_FIR]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LINK_ABORT_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LINK_ABORT_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LINK_ABORT_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LINK_ABORT_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LINK_ABORT_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LINK_ABORT_FIR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LINK_ABORT_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LINK_ABORT_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LINK_ABORT_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LINK_ABORT_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LINK_ABORT_FIR]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LINK_ABORT_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LINK_ABORT_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LINK_ABORT_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_LINK_ABORT_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_UE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_UE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_UE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_UE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_UE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_UE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_UE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_UE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_UE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_UE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_UE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_UE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_UE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_UE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_UE_FIR]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_UE_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_UE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_UE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_UE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_UE_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_UE_FIR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_UE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_UE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_UE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_UE_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_UE_FIR]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_UE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_UE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_UE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_UE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_SUE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_SUE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_SUE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_SUE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_SUE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_SUE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_SUE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_SUE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_SUE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_SUE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_SUE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_SUE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_SUE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_SUE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_SUE_FIR]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_SUE_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_SUE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_SUE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_SUE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_SUE_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_SUE_FIR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_SUE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_SUE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_SUE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_SUE_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_SUE_FIR]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_SUE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_SUE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_SUE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_CRB_SUE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_LOCAL_CSTOP_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_LOCAL_CSTOP_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_LOCAL_CSTOP_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_LOCAL_CSTOP_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_LOCAL_CSTOP_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_LOCAL_CSTOP_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_LOCAL_CSTOP_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_LOCAL_CSTOP_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_LOCAL_CSTOP_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_LOCAL_CSTOP_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_LOCAL_CSTOP_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_LOCAL_CSTOP_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_LOCAL_CSTOP_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_LOCAL_CSTOP_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_LOCAL_CSTOP_FIR]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_LOCAL_CSTOP_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_LOCAL_CSTOP_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_LOCAL_CSTOP_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_LOCAL_CSTOP_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_LOCAL_CSTOP_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_LOCAL_CSTOP_FIR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_LOCAL_CSTOP_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_LOCAL_CSTOP_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_LOCAL_CSTOP_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_LOCAL_CSTOP_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_LOCAL_CSTOP_FIR]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_LOCAL_CSTOP_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_LOCAL_CSTOP_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_LOCAL_CSTOP_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_ERAT_LOCAL_CSTOP_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_OTHER_SCOM_PE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_OTHER_SCOM_PE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_OTHER_SCOM_PE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_OTHER_SCOM_PE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_OTHER_SCOM_PE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_OTHER_SCOM_PE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_OTHER_SCOM_PE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_OTHER_SCOM_PE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_OTHER_SCOM_PE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_OTHER_SCOM_PE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_OTHER_SCOM_PE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_OTHER_SCOM_PE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_OTHER_SCOM_PE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_OTHER_SCOM_PE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_OTHER_SCOM_PE_FIR]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_OTHER_SCOM_PE_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_OTHER_SCOM_PE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_OTHER_SCOM_PE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_OTHER_SCOM_PE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_OTHER_SCOM_PE_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_OTHER_SCOM_PE_FIR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_OTHER_SCOM_PE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_OTHER_SCOM_PE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_OTHER_SCOM_PE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_OTHER_SCOM_PE_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_OTHER_SCOM_PE_FIR]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_OTHER_SCOM_PE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_OTHER_SCOM_PE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_OTHER_SCOM_PE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_OTHER_SCOM_PE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SCOM_WRITE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SCOM_WRITE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SCOM_WRITE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SCOM_WRITE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SCOM_WRITE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SCOM_WRITE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SCOM_WRITE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SCOM_WRITE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SCOM_WRITE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SCOM_WRITE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SCOM_WRITE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SCOM_WRITE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SCOM_WRITE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SCOM_WRITE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SCOM_WRITE_FIR]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SCOM_WRITE_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SCOM_WRITE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SCOM_WRITE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SCOM_WRITE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SCOM_WRITE_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SCOM_WRITE_FIR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SCOM_WRITE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SCOM_WRITE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SCOM_WRITE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SCOM_WRITE_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SCOM_WRITE_FIR]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SCOM_WRITE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SCOM_WRITE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SCOM_WRITE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SCOM_WRITE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_FIRST_FAIL_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_FIRST_FAIL_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_FIRST_FAIL_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_FIRST_FAIL_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_FIRST_FAIL_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_FIRST_FAIL_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_FIRST_FAIL_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_FIRST_FAIL_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_FIRST_FAIL_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_FIRST_FAIL_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_FIRST_FAIL_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_FIRST_FAIL_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_FIRST_FAIL_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_FIRST_FAIL_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_FIRST_FAIL_FIR]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_FIRST_FAIL_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_FIRST_FAIL_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_FIRST_FAIL_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_FIRST_FAIL_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_FIRST_FAIL_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_FIRST_FAIL_FIR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_FIRST_FAIL_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_FIRST_FAIL_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_FIRST_FAIL_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_FIRST_FAIL_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_FIRST_FAIL_FIR]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_FIRST_FAIL_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_FIRST_FAIL_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_FIRST_FAIL_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_FIRST_FAIL_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SECOND_FAIL_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SECOND_FAIL_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SECOND_FAIL_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SECOND_FAIL_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SECOND_FAIL_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SECOND_FAIL_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SECOND_FAIL_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SECOND_FAIL_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SECOND_FAIL_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SECOND_FAIL_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SECOND_FAIL_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SECOND_FAIL_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SECOND_FAIL_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SECOND_FAIL_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SECOND_FAIL_FIR]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SECOND_FAIL_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SECOND_FAIL_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SECOND_FAIL_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SECOND_FAIL_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SECOND_FAIL_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SECOND_FAIL_FIR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SECOND_FAIL_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SECOND_FAIL_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SECOND_FAIL_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SECOND_FAIL_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SECOND_FAIL_FIR]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SECOND_FAIL_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SECOND_FAIL_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SECOND_FAIL_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_SECOND_FAIL_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_CNTRL_LOGIC_ERR_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_CNTRL_LOGIC_ERR_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_CNTRL_LOGIC_ERR_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_CNTRL_LOGIC_ERR_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_CNTRL_LOGIC_ERR_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_CNTRL_LOGIC_ERR_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_CNTRL_LOGIC_ERR_FIR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_CNTRL_LOGIC_ERR_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_CNTRL_LOGIC_ERR_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_CNTRL_LOGIC_ERR_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_CNTRL_LOGIC_ERR_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_CNTRL_LOGIC_ERR_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_CNTRL_LOGIC_ERR_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_CNTRL_LOGIC_ERR_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_CNTRL_LOGIC_ERR_FIR]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_CNTRL_LOGIC_ERR_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_CNTRL_LOGIC_ERR_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_CNTRL_LOGIC_ERR_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_CNTRL_LOGIC_ERR_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_CNTRL_LOGIC_ERR_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_CNTRL_LOGIC_ERR_FIR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_CNTRL_LOGIC_ERR_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_CNTRL_LOGIC_ERR_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_CNTRL_LOGIC_ERR_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_CNTRL_LOGIC_ERR_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_CNTRL_LOGIC_ERR_FIR]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_CNTRL_LOGIC_ERR_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_CNTRL_LOGIC_ERR_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_CNTRL_LOGIC_ERR_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RNG_CNTRL_LOGIC_ERR_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_NMMU_LOCAL_XSTOP_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_NMMU_LOCAL_XSTOP_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_NMMU_LOCAL_XSTOP_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_NMMU_LOCAL_XSTOP_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_NMMU_LOCAL_XSTOP_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_NMMU_LOCAL_XSTOP_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_NMMU_LOCAL_XSTOP_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_NMMU_LOCAL_XSTOP_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_NMMU_LOCAL_XSTOP_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_NMMU_LOCAL_XSTOP_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_NMMU_LOCAL_XSTOP_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_NMMU_LOCAL_XSTOP_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_NMMU_LOCAL_XSTOP_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_NMMU_LOCAL_XSTOP_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_NMMU_LOCAL_XSTOP_FIR]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_NMMU_LOCAL_XSTOP_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_NMMU_LOCAL_XSTOP_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_NMMU_LOCAL_XSTOP_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_NMMU_LOCAL_XSTOP_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_NMMU_LOCAL_XSTOP_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_NMMU_LOCAL_XSTOP_FIR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_NMMU_LOCAL_XSTOP_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_NMMU_LOCAL_XSTOP_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_NMMU_LOCAL_XSTOP_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_NMMU_LOCAL_XSTOP_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_NMMU_LOCAL_XSTOP_FIR]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_NMMU_LOCAL_XSTOP_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_NMMU_LOCAL_XSTOP_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_NMMU_LOCAL_XSTOP_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_NMMU_LOCAL_XSTOP_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_VAS_LOCAL_XSTOP_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_VAS_LOCAL_XSTOP_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_VAS_LOCAL_XSTOP_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_VAS_LOCAL_XSTOP_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_VAS_LOCAL_XSTOP_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_VAS_LOCAL_XSTOP_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_VAS_LOCAL_XSTOP_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_VAS_LOCAL_XSTOP_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_VAS_LOCAL_XSTOP_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_VAS_LOCAL_XSTOP_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_VAS_LOCAL_XSTOP_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_VAS_LOCAL_XSTOP_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_VAS_LOCAL_XSTOP_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_VAS_LOCAL_XSTOP_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_VAS_LOCAL_XSTOP_FIR]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_VAS_LOCAL_XSTOP_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_VAS_LOCAL_XSTOP_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_VAS_LOCAL_XSTOP_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_VAS_LOCAL_XSTOP_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_VAS_LOCAL_XSTOP_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_VAS_LOCAL_XSTOP_FIR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_VAS_LOCAL_XSTOP_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_VAS_LOCAL_XSTOP_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_VAS_LOCAL_XSTOP_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_VAS_LOCAL_XSTOP_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_VAS_LOCAL_XSTOP_FIR]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_VAS_LOCAL_XSTOP_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_VAS_LOCAL_XSTOP_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_VAS_LOCAL_XSTOP_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_VAS_LOCAL_XSTOP_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBCQ_CNTRL_LOGIC_ERR_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBCQ_CNTRL_LOGIC_ERR_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBCQ_CNTRL_LOGIC_ERR_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBCQ_CNTRL_LOGIC_ERR_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBCQ_CNTRL_LOGIC_ERR_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBCQ_CNTRL_LOGIC_ERR_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBCQ_CNTRL_LOGIC_ERR_FIR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBCQ_CNTRL_LOGIC_ERR_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBCQ_CNTRL_LOGIC_ERR_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBCQ_CNTRL_LOGIC_ERR_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBCQ_CNTRL_LOGIC_ERR_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBCQ_CNTRL_LOGIC_ERR_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBCQ_CNTRL_LOGIC_ERR_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBCQ_CNTRL_LOGIC_ERR_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBCQ_CNTRL_LOGIC_ERR_FIR]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBCQ_CNTRL_LOGIC_ERR_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBCQ_CNTRL_LOGIC_ERR_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBCQ_CNTRL_LOGIC_ERR_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBCQ_CNTRL_LOGIC_ERR_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBCQ_CNTRL_LOGIC_ERR_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBCQ_CNTRL_LOGIC_ERR_FIR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBCQ_CNTRL_LOGIC_ERR_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBCQ_CNTRL_LOGIC_ERR_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBCQ_CNTRL_LOGIC_ERR_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBCQ_CNTRL_LOGIC_ERR_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBCQ_CNTRL_LOGIC_ERR_FIR]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBCQ_CNTRL_LOGIC_ERR_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBCQ_CNTRL_LOGIC_ERR_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBCQ_CNTRL_LOGIC_ERR_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBCQ_CNTRL_LOGIC_ERR_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_FAILED_LINK_ON_INTERRUPT_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_FAILED_LINK_ON_INTERRUPT_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_FAILED_LINK_ON_INTERRUPT_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_FAILED_LINK_ON_INTERRUPT_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_FAILED_LINK_ON_INTERRUPT_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_FAILED_LINK_ON_INTERRUPT_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_FAILED_LINK_ON_INTERRUPT_FIR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_FAILED_LINK_ON_INTERRUPT_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_FAILED_LINK_ON_INTERRUPT_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_FAILED_LINK_ON_INTERRUPT_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_FAILED_LINK_ON_INTERRUPT_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_FAILED_LINK_ON_INTERRUPT_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_FAILED_LINK_ON_INTERRUPT_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_FAILED_LINK_ON_INTERRUPT_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_FAILED_LINK_ON_INTERRUPT_FIR]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_FAILED_LINK_ON_INTERRUPT_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_FAILED_LINK_ON_INTERRUPT_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_FAILED_LINK_ON_INTERRUPT_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_FAILED_LINK_ON_INTERRUPT_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_FAILED_LINK_ON_INTERRUPT_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_FAILED_LINK_ON_INTERRUPT_FIR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_FAILED_LINK_ON_INTERRUPT_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_FAILED_LINK_ON_INTERRUPT_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_FAILED_LINK_ON_INTERRUPT_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_FAILED_LINK_ON_INTERRUPT_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_FAILED_LINK_ON_INTERRUPT_FIR]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_FAILED_LINK_ON_INTERRUPT_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_FAILED_LINK_ON_INTERRUPT_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_FAILED_LINK_ON_INTERRUPT_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_FAILED_LINK_ON_INTERRUPT_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_SUE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_SUE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_SUE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_SUE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_SUE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_SUE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_SUE_FIR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_SUE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_SUE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_SUE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_SUE_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_SUE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_SUE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_SUE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_SUE_FIR]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_SUE_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_SUE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_SUE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_SUE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_SUE_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_SUE_FIR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_SUE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_SUE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_SUE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_SUE_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_SUE_FIR]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_SUE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_SUE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_SUE_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_UMAC_WC_INT_ADDR_SUE_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_SMF_ERROR_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_SMF_ERROR_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_SMF_ERROR_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_SMF_ERROR_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_SMF_ERROR_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_SMF_ERROR_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_SMF_ERROR_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_SMF_ERROR_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_SMF_ERROR_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_SMF_ERROR_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_SMF_ERROR_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_SMF_ERROR_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_SMF_ERROR_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_SMF_ERROR_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_SMF_ERROR_FIR]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_SMF_ERROR_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_SMF_ERROR_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_SMF_ERROR_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_SMF_ERROR_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_SMF_ERROR_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_SMF_ERROR_FIR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_SMF_ERROR_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_SMF_ERROR_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_SMF_ERROR_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_SMF_ERROR_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_SMF_ERROR_FIR]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_SMF_ERROR_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_SMF_ERROR_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_SMF_ERROR_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_SMF_ERROR_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_NX_TOPOLOGY_INDEX_ERROR_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_NX_TOPOLOGY_INDEX_ERROR_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_NX_TOPOLOGY_INDEX_ERROR_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_NX_TOPOLOGY_INDEX_ERROR_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_NX_TOPOLOGY_INDEX_ERROR_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_NX_TOPOLOGY_INDEX_ERROR_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_NX_TOPOLOGY_INDEX_ERROR_FIR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_NX_TOPOLOGY_INDEX_ERROR_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_NX_TOPOLOGY_INDEX_ERROR_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_NX_TOPOLOGY_INDEX_ERROR_FIR]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_NX_TOPOLOGY_INDEX_ERROR_FIR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_NX_TOPOLOGY_INDEX_ERROR_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_NX_TOPOLOGY_INDEX_ERROR_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_NX_TOPOLOGY_INDEX_ERROR_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_NX_TOPOLOGY_INDEX_ERROR_FIR]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_NX_TOPOLOGY_INDEX_ERROR_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_NX_TOPOLOGY_INDEX_ERROR_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_NX_TOPOLOGY_INDEX_ERROR_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_NX_TOPOLOGY_INDEX_ERROR_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_NX_TOPOLOGY_INDEX_ERROR_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_NX_TOPOLOGY_INDEX_ERROR_FIR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_NX_TOPOLOGY_INDEX_ERROR_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_NX_TOPOLOGY_INDEX_ERROR_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_NX_TOPOLOGY_INDEX_ERROR_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_NX_TOPOLOGY_INDEX_ERROR_FIR]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_NX_TOPOLOGY_INDEX_ERROR_FIR]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_NX_TOPOLOGY_INDEX_ERROR_FIR(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_RW, NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_AND,
                           NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_WO_OR));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_NX_TOPOLOGY_INDEX_ERROR_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_NX_TOPOLOGY_INDEX_ERROR_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_FIR_REG_PBUS_NX_TOPOLOGY_INDEX_ERROR_FIR]

//>> PREP_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG;
#endif
    return fapi2::getScom(i_target, NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG]

//>> PUT_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return fapi2::putScom(i_target, NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG]


//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_ENABLE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_ENABLE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_ENABLE]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_ENABLE]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_ENABLE]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_ENABLE]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_ENABLE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_RESET]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_RESET(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_RESET,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_RESET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_RESET]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_RESET]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_RESET(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_RESET,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_RESET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_RESET]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_RESET]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_RESET(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_RESET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_RESET]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_RESET]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_RESET(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_RESET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_RESET]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_RESET]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_RESET(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_RESET,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_RESET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_RESET]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_RESET]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_RESET(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_RESET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_RESET]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_DIS_GLOB_SCOM]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_DIS_GLOB_SCOM(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_DIS_GLOB_SCOM,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_DIS_GLOB_SCOM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_DIS_GLOB_SCOM]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_DIS_GLOB_SCOM]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_DIS_GLOB_SCOM(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_DIS_GLOB_SCOM,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_DIS_GLOB_SCOM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_DIS_GLOB_SCOM]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_DIS_GLOB_SCOM]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_DIS_GLOB_SCOM(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_DIS_GLOB_SCOM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_DIS_GLOB_SCOM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_DIS_GLOB_SCOM]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_DIS_GLOB_SCOM]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_DIS_GLOB_SCOM(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_DIS_GLOB_SCOM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_DIS_GLOB_SCOM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_DIS_GLOB_SCOM]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_DIS_GLOB_SCOM]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_DIS_GLOB_SCOM(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_DIS_GLOB_SCOM,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_DIS_GLOB_SCOM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_DIS_GLOB_SCOM]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_DIS_GLOB_SCOM]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_DIS_GLOB_SCOM(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_DIS_GLOB_SCOM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_DIS_GLOB_SCOM chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_DIS_GLOB_SCOM]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL0]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL0,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL0]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL0]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL0,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL0]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL0]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL0,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL0]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL1]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL1,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL1]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL1]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL1,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL1]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL1]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL1,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL1]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL2]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL2,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL2]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL2]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL2,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL2]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL2]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL2,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL2]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL3]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL3,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL3]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL3]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL3,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL3]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL3]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL3,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_PRESCALAR_SEL3]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT0_PAIR_OP]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT0_PAIR_OP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT0_PAIR_OP,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT0_PAIR_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT0_PAIR_OP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT0_PAIR_OP]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT0_PAIR_OP]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT0_PAIR_OP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT0_PAIR_OP,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT0_PAIR_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT0_PAIR_OP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT0_PAIR_OP]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT0_PAIR_OP]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT0_PAIR_OP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT0_PAIR_OP,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT0_PAIR_OP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT0_PAIR_OP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT0_PAIR_OP]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT1_PAIR_OP]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT1_PAIR_OP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT1_PAIR_OP,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT1_PAIR_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT1_PAIR_OP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT1_PAIR_OP]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT1_PAIR_OP]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT1_PAIR_OP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT1_PAIR_OP,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT1_PAIR_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT1_PAIR_OP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT1_PAIR_OP]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT1_PAIR_OP]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT1_PAIR_OP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT1_PAIR_OP,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT1_PAIR_OP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT1_PAIR_OP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT1_PAIR_OP]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT2_PAIR_OP]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT2_PAIR_OP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT2_PAIR_OP,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT2_PAIR_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT2_PAIR_OP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT2_PAIR_OP]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT2_PAIR_OP]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT2_PAIR_OP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT2_PAIR_OP,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT2_PAIR_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT2_PAIR_OP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT2_PAIR_OP]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT2_PAIR_OP]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT2_PAIR_OP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT2_PAIR_OP,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT2_PAIR_OP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT2_PAIR_OP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT2_PAIR_OP]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT3_PAIR_OP]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT3_PAIR_OP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT3_PAIR_OP,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT3_PAIR_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT3_PAIR_OP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT3_PAIR_OP]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT3_PAIR_OP]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT3_PAIR_OP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT3_PAIR_OP,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT3_PAIR_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT3_PAIR_OP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT3_PAIR_OP]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT3_PAIR_OP]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT3_PAIR_OP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT3_PAIR_OP,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT3_PAIR_OP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT3_PAIR_OP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT3_PAIR_OP]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT0_MUX_SEL]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT0_MUX_SEL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT0_MUX_SEL,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT0_MUX_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT0_MUX_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT0_MUX_SEL]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT0_MUX_SEL]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT0_MUX_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT0_MUX_SEL,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT0_MUX_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT0_MUX_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT0_MUX_SEL]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT0_MUX_SEL]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT0_MUX_SEL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT0_MUX_SEL,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT0_MUX_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT0_MUX_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT0_MUX_SEL]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT1_MUX_SEL]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT1_MUX_SEL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT1_MUX_SEL,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT1_MUX_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT1_MUX_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT1_MUX_SEL]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT1_MUX_SEL]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT1_MUX_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT1_MUX_SEL,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT1_MUX_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT1_MUX_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT1_MUX_SEL]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT1_MUX_SEL]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT1_MUX_SEL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT1_MUX_SEL,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT1_MUX_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT1_MUX_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT1_MUX_SEL]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT2_MUX_SEL]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT2_MUX_SEL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT2_MUX_SEL,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT2_MUX_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT2_MUX_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT2_MUX_SEL]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT2_MUX_SEL]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT2_MUX_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT2_MUX_SEL,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT2_MUX_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT2_MUX_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT2_MUX_SEL]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT2_MUX_SEL]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT2_MUX_SEL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT2_MUX_SEL,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT2_MUX_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT2_MUX_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT2_MUX_SEL]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT3_MUX_SEL]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT3_MUX_SEL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT3_MUX_SEL,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT3_MUX_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT3_MUX_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT3_MUX_SEL]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT3_MUX_SEL]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT3_MUX_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT3_MUX_SEL,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT3_MUX_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT3_MUX_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT3_MUX_SEL]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT3_MUX_SEL]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT3_MUX_SEL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT3_MUX_SEL,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT3_MUX_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT3_MUX_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CNT3_MUX_SEL]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE_ON_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE_ON_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE_ON_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE_ON_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE_ON_OVERFLOW]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE_ON_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE_ON_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE_ON_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE_ON_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE_ON_OVERFLOW]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE_ON_OVERFLOW]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE_ON_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE_ON_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE_ON_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE_ON_OVERFLOW]

//>> CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE_ON_OVERFLOW]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE_ON_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE_ON_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE_ON_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE_ON_OVERFLOW]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE_ON_OVERFLOW]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE_ON_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE_ON_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE_ON_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE_ON_OVERFLOW]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE_ON_OVERFLOW]
static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE_ON_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE_ON_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE_ON_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_FREEZE_ON_OVERFLOW]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CASCADE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CASCADE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CASCADE,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CASCADE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CASCADE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CASCADE]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CASCADE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CASCADE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CASCADE,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CASCADE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CASCADE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CASCADE]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CASCADE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CASCADE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CASCADE,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CASCADE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CASCADE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_CONTROL_REG_CASCADE]

//>> PREP_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG;
#endif
    return fapi2::getScom(i_target, NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG]

//>> PUT_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG));
#endif
    return fapi2::putScom(i_target, NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG]


//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_0]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_0,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_0]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_0]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_0,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_0]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_0]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_0,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_0]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_1]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_1,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_1]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_1]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_1,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_1]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_1]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_1,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_1]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_2]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_2,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_2]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_2]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_2,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_2]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_2]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_2,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_2]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_3]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_3,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_3]

//>> SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_3]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_3,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_3]

//>> GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_3]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_3,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU1_COUNTER_REG_3]

//>> PREP_[NX_PBI_RNG_BYPASS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_RNG_BYPASS(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_RNG_BYPASS;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_PBI_RNG_BYPASS]

//>> GET_[NX_PBI_RNG_BYPASS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_RNG_BYPASS(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_RNG_BYPASS;
#endif
    return fapi2::getScom(i_target, NX_PBI_RNG_BYPASS, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_PBI_RNG_BYPASS]

//>> PUT_[NX_PBI_RNG_BYPASS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_RNG_BYPASS(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_BYPASS));
#endif
    return fapi2::putScom(i_target, NX_PBI_RNG_BYPASS, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_PBI_RNG_BYPASS]


//>> SET_[NX_PBI_RNG_BYPASS_RRN_BYPASS_DATA]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_BYPASS_RRN_BYPASS_DATA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_BYPASS));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_BYPASS_RRN_BYPASS_DATA,
           NX_PBI_RNG_BYPASS_RRN_BYPASS_DATA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_BYPASS_RRN_BYPASS_DATA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_BYPASS_RRN_BYPASS_DATA]

//>> SET_[NX_PBI_RNG_BYPASS_RRN_BYPASS_DATA]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_BYPASS_RRN_BYPASS_DATA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_BYPASS));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_BYPASS_RRN_BYPASS_DATA,
           NX_PBI_RNG_BYPASS_RRN_BYPASS_DATA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_BYPASS_RRN_BYPASS_DATA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_BYPASS_RRN_BYPASS_DATA]

//>> GET_[NX_PBI_RNG_BYPASS_RRN_BYPASS_DATA]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_BYPASS_RRN_BYPASS_DATA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_BYPASS));
#endif
    return i_data.extractToRight<NX_PBI_RNG_BYPASS_RRN_BYPASS_DATA,
           NX_PBI_RNG_BYPASS_RRN_BYPASS_DATA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_BYPASS_RRN_BYPASS_DATA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_BYPASS_RRN_BYPASS_DATA]

//>> PREP_[NX_PBI_RNG_ST0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_RNG_ST0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_RNG_ST0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_PBI_RNG_ST0]

//>> GET_[NX_PBI_RNG_ST0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_RNG_ST0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_RNG_ST0;
#endif
    return fapi2::getScom(i_target, NX_PBI_RNG_ST0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_PBI_RNG_ST0]

//>> PUT_[NX_PBI_RNG_ST0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_RNG_ST0(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST0));
#endif
    return fapi2::putScom(i_target, NX_PBI_RNG_ST0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_PBI_RNG_ST0]


//>> SET_[NX_PBI_RNG_ST0_REPTEST_MATCH_TH]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST0_REPTEST_MATCH_TH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST0));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_ST0_REPTEST_MATCH_TH,
           NX_PBI_RNG_ST0_REPTEST_MATCH_TH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_ST0_REPTEST_MATCH_TH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST0_REPTEST_MATCH_TH]

//>> SET_[NX_PBI_RNG_ST0_REPTEST_MATCH_TH]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST0_REPTEST_MATCH_TH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST0));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_ST0_REPTEST_MATCH_TH,
           NX_PBI_RNG_ST0_REPTEST_MATCH_TH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_ST0_REPTEST_MATCH_TH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST0_REPTEST_MATCH_TH]

//>> GET_[NX_PBI_RNG_ST0_REPTEST_MATCH_TH]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_ST0_REPTEST_MATCH_TH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST0));
#endif
    return i_data.extractToRight<NX_PBI_RNG_ST0_REPTEST_MATCH_TH,
           NX_PBI_RNG_ST0_REPTEST_MATCH_TH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_ST0_REPTEST_MATCH_TH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_ST0_REPTEST_MATCH_TH]

//>> SET_[NX_PBI_RNG_ST0_REPTEST_SOFT_FAIL_TH]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST0_REPTEST_SOFT_FAIL_TH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST0));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_ST0_REPTEST_SOFT_FAIL_TH,
           NX_PBI_RNG_ST0_REPTEST_SOFT_FAIL_TH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_ST0_REPTEST_SOFT_FAIL_TH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST0_REPTEST_SOFT_FAIL_TH]

//>> SET_[NX_PBI_RNG_ST0_REPTEST_SOFT_FAIL_TH]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST0_REPTEST_SOFT_FAIL_TH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST0));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_ST0_REPTEST_SOFT_FAIL_TH,
           NX_PBI_RNG_ST0_REPTEST_SOFT_FAIL_TH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_ST0_REPTEST_SOFT_FAIL_TH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST0_REPTEST_SOFT_FAIL_TH]

//>> GET_[NX_PBI_RNG_ST0_REPTEST_SOFT_FAIL_TH]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_ST0_REPTEST_SOFT_FAIL_TH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST0));
#endif
    return i_data.extractToRight<NX_PBI_RNG_ST0_REPTEST_SOFT_FAIL_TH,
           NX_PBI_RNG_ST0_REPTEST_SOFT_FAIL_TH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_ST0_REPTEST_SOFT_FAIL_TH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_ST0_REPTEST_SOFT_FAIL_TH]

//>> SET_[NX_PBI_RNG_ST0_ADAPTEST_SAMPLE_SIZE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST0_ADAPTEST_SAMPLE_SIZE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST0));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_ST0_ADAPTEST_SAMPLE_SIZE,
           NX_PBI_RNG_ST0_ADAPTEST_SAMPLE_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_ST0_ADAPTEST_SAMPLE_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST0_ADAPTEST_SAMPLE_SIZE]

//>> SET_[NX_PBI_RNG_ST0_ADAPTEST_SAMPLE_SIZE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST0_ADAPTEST_SAMPLE_SIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST0));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_ST0_ADAPTEST_SAMPLE_SIZE,
           NX_PBI_RNG_ST0_ADAPTEST_SAMPLE_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_ST0_ADAPTEST_SAMPLE_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST0_ADAPTEST_SAMPLE_SIZE]

//>> GET_[NX_PBI_RNG_ST0_ADAPTEST_SAMPLE_SIZE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_ST0_ADAPTEST_SAMPLE_SIZE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST0));
#endif
    return i_data.extractToRight<NX_PBI_RNG_ST0_ADAPTEST_SAMPLE_SIZE,
           NX_PBI_RNG_ST0_ADAPTEST_SAMPLE_SIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_ST0_ADAPTEST_SAMPLE_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_ST0_ADAPTEST_SAMPLE_SIZE]

//>> SET_[NX_PBI_RNG_ST0_ADAPTEST_WINDOW_SIZE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST0_ADAPTEST_WINDOW_SIZE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST0));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_ST0_ADAPTEST_WINDOW_SIZE,
           NX_PBI_RNG_ST0_ADAPTEST_WINDOW_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_ST0_ADAPTEST_WINDOW_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST0_ADAPTEST_WINDOW_SIZE]

//>> SET_[NX_PBI_RNG_ST0_ADAPTEST_WINDOW_SIZE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST0_ADAPTEST_WINDOW_SIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST0));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_ST0_ADAPTEST_WINDOW_SIZE,
           NX_PBI_RNG_ST0_ADAPTEST_WINDOW_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_ST0_ADAPTEST_WINDOW_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST0_ADAPTEST_WINDOW_SIZE]

//>> GET_[NX_PBI_RNG_ST0_ADAPTEST_WINDOW_SIZE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_ST0_ADAPTEST_WINDOW_SIZE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST0));
#endif
    return i_data.extractToRight<NX_PBI_RNG_ST0_ADAPTEST_WINDOW_SIZE,
           NX_PBI_RNG_ST0_ADAPTEST_WINDOW_SIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_ST0_ADAPTEST_WINDOW_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_ST0_ADAPTEST_WINDOW_SIZE]

//>> SET_[NX_PBI_RNG_ST0_ADAPTEST_RRN_RNG0_MATCH_TH]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST0_ADAPTEST_RRN_RNG0_MATCH_TH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST0));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_ST0_ADAPTEST_RRN_RNG0_MATCH_TH,
           NX_PBI_RNG_ST0_ADAPTEST_RRN_RNG0_MATCH_TH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_ST0_ADAPTEST_RRN_RNG0_MATCH_TH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST0_ADAPTEST_RRN_RNG0_MATCH_TH]

//>> SET_[NX_PBI_RNG_ST0_ADAPTEST_RRN_RNG0_MATCH_TH]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST0_ADAPTEST_RRN_RNG0_MATCH_TH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST0));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_ST0_ADAPTEST_RRN_RNG0_MATCH_TH,
           NX_PBI_RNG_ST0_ADAPTEST_RRN_RNG0_MATCH_TH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_ST0_ADAPTEST_RRN_RNG0_MATCH_TH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST0_ADAPTEST_RRN_RNG0_MATCH_TH]

//>> GET_[NX_PBI_RNG_ST0_ADAPTEST_RRN_RNG0_MATCH_TH]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_ST0_ADAPTEST_RRN_RNG0_MATCH_TH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST0));
#endif
    return i_data.extractToRight<NX_PBI_RNG_ST0_ADAPTEST_RRN_RNG0_MATCH_TH,
           NX_PBI_RNG_ST0_ADAPTEST_RRN_RNG0_MATCH_TH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_ST0_ADAPTEST_RRN_RNG0_MATCH_TH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_ST0_ADAPTEST_RRN_RNG0_MATCH_TH]

//>> SET_[NX_PBI_RNG_ST0_ADAPTEST_RRN_RNG1_MATCH_TH]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST0_ADAPTEST_RRN_RNG1_MATCH_TH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST0));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_ST0_ADAPTEST_RRN_RNG1_MATCH_TH,
           NX_PBI_RNG_ST0_ADAPTEST_RRN_RNG1_MATCH_TH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_ST0_ADAPTEST_RRN_RNG1_MATCH_TH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST0_ADAPTEST_RRN_RNG1_MATCH_TH]

//>> SET_[NX_PBI_RNG_ST0_ADAPTEST_RRN_RNG1_MATCH_TH]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST0_ADAPTEST_RRN_RNG1_MATCH_TH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST0));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_ST0_ADAPTEST_RRN_RNG1_MATCH_TH,
           NX_PBI_RNG_ST0_ADAPTEST_RRN_RNG1_MATCH_TH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_ST0_ADAPTEST_RRN_RNG1_MATCH_TH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST0_ADAPTEST_RRN_RNG1_MATCH_TH]

//>> GET_[NX_PBI_RNG_ST0_ADAPTEST_RRN_RNG1_MATCH_TH]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_ST0_ADAPTEST_RRN_RNG1_MATCH_TH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST0));
#endif
    return i_data.extractToRight<NX_PBI_RNG_ST0_ADAPTEST_RRN_RNG1_MATCH_TH,
           NX_PBI_RNG_ST0_ADAPTEST_RRN_RNG1_MATCH_TH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_ST0_ADAPTEST_RRN_RNG1_MATCH_TH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_ST0_ADAPTEST_RRN_RNG1_MATCH_TH]

//>> SET_[NX_PBI_RNG_ST0_ADAPTEST_CRN_RNG0_MATCH_TH]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST0_ADAPTEST_CRN_RNG0_MATCH_TH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST0));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_ST0_ADAPTEST_CRN_RNG0_MATCH_TH,
           NX_PBI_RNG_ST0_ADAPTEST_CRN_RNG0_MATCH_TH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_ST0_ADAPTEST_CRN_RNG0_MATCH_TH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST0_ADAPTEST_CRN_RNG0_MATCH_TH]

//>> SET_[NX_PBI_RNG_ST0_ADAPTEST_CRN_RNG0_MATCH_TH]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST0_ADAPTEST_CRN_RNG0_MATCH_TH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST0));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_ST0_ADAPTEST_CRN_RNG0_MATCH_TH,
           NX_PBI_RNG_ST0_ADAPTEST_CRN_RNG0_MATCH_TH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_ST0_ADAPTEST_CRN_RNG0_MATCH_TH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST0_ADAPTEST_CRN_RNG0_MATCH_TH]

//>> GET_[NX_PBI_RNG_ST0_ADAPTEST_CRN_RNG0_MATCH_TH]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_ST0_ADAPTEST_CRN_RNG0_MATCH_TH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST0));
#endif
    return i_data.extractToRight<NX_PBI_RNG_ST0_ADAPTEST_CRN_RNG0_MATCH_TH,
           NX_PBI_RNG_ST0_ADAPTEST_CRN_RNG0_MATCH_TH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_ST0_ADAPTEST_CRN_RNG0_MATCH_TH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_ST0_ADAPTEST_CRN_RNG0_MATCH_TH]

//>> SET_[NX_PBI_RNG_ST0_ADAPTEST_CRN_RNG1_MATCH_TH]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST0_ADAPTEST_CRN_RNG1_MATCH_TH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST0));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_ST0_ADAPTEST_CRN_RNG1_MATCH_TH,
           NX_PBI_RNG_ST0_ADAPTEST_CRN_RNG1_MATCH_TH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_RNG_ST0_ADAPTEST_CRN_RNG1_MATCH_TH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST0_ADAPTEST_CRN_RNG1_MATCH_TH]

//>> SET_[NX_PBI_RNG_ST0_ADAPTEST_CRN_RNG1_MATCH_TH]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_RNG_ST0_ADAPTEST_CRN_RNG1_MATCH_TH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST0));
#endif
    return o_data.insertFromRight<NX_PBI_RNG_ST0_ADAPTEST_CRN_RNG1_MATCH_TH,
           NX_PBI_RNG_ST0_ADAPTEST_CRN_RNG1_MATCH_TH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_RNG_ST0_ADAPTEST_CRN_RNG1_MATCH_TH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_RNG_ST0_ADAPTEST_CRN_RNG1_MATCH_TH]

//>> GET_[NX_PBI_RNG_ST0_ADAPTEST_CRN_RNG1_MATCH_TH]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_RNG_ST0_ADAPTEST_CRN_RNG1_MATCH_TH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_RNG_ST0));
#endif
    return i_data.extractToRight<NX_PBI_RNG_ST0_ADAPTEST_CRN_RNG1_MATCH_TH,
           NX_PBI_RNG_ST0_ADAPTEST_CRN_RNG1_MATCH_TH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_RNG_ST0_ADAPTEST_CRN_RNG1_MATCH_TH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_RNG_ST0_ADAPTEST_CRN_RNG1_MATCH_TH]

//>> PREP_[NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR]

//>> GET_[NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR;
#endif
    return fapi2::getScom(i_target, NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR]

//>> PUT_[NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR));
#endif
    return fapi2::putScom(i_target, NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR]


//>> SET_[NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR_SYM_HI_PRIORITY_RCV_FIFO_BAR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR_SYM_HI_PRIORITY_RCV_FIFO_BAR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR_SYM_HI_PRIORITY_RCV_FIFO_BAR,
           NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR_SYM_HI_PRIORITY_RCV_FIFO_BAR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR_SYM_HI_PRIORITY_RCV_FIFO_BAR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR_SYM_HI_PRIORITY_RCV_FIFO_BAR]

//>> SET_[NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR_SYM_HI_PRIORITY_RCV_FIFO_BAR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR_SYM_HI_PRIORITY_RCV_FIFO_BAR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR_SYM_HI_PRIORITY_RCV_FIFO_BAR,
           NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR_SYM_HI_PRIORITY_RCV_FIFO_BAR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR_SYM_HI_PRIORITY_RCV_FIFO_BAR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR_SYM_HI_PRIORITY_RCV_FIFO_BAR]

//>> GET_[NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR_SYM_HI_PRIORITY_RCV_FIFO_BAR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR_SYM_HI_PRIORITY_RCV_FIFO_BAR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR_SYM_HI_PRIORITY_RCV_FIFO_BAR,
           NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR_SYM_HI_PRIORITY_RCV_FIFO_BAR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR_SYM_HI_PRIORITY_RCV_FIFO_BAR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR_SYM_HI_PRIORITY_RCV_FIFO_BAR]

//>> SET_[NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR_SYM_HI_PRIORITY_RCV_FIFO_BAR_SIZE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR_SYM_HI_PRIORITY_RCV_FIFO_BAR_SIZE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR_SYM_HI_PRIORITY_RCV_FIFO_BAR_SIZE,
           NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR_SYM_HI_PRIORITY_RCV_FIFO_BAR_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR_SYM_HI_PRIORITY_RCV_FIFO_BAR_SIZE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR_SYM_HI_PRIORITY_RCV_FIFO_BAR_SIZE]

//>> SET_[NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR_SYM_HI_PRIORITY_RCV_FIFO_BAR_SIZE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR_SYM_HI_PRIORITY_RCV_FIFO_BAR_SIZE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR_SYM_HI_PRIORITY_RCV_FIFO_BAR_SIZE,
           NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR_SYM_HI_PRIORITY_RCV_FIFO_BAR_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR_SYM_HI_PRIORITY_RCV_FIFO_BAR_SIZE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR_SYM_HI_PRIORITY_RCV_FIFO_BAR_SIZE]

//>> GET_[NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR_SYM_HI_PRIORITY_RCV_FIFO_BAR_SIZE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR_SYM_HI_PRIORITY_RCV_FIFO_BAR_SIZE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR_SYM_HI_PRIORITY_RCV_FIFO_BAR_SIZE,
           NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR_SYM_HI_PRIORITY_RCV_FIFO_BAR_SIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR_SYM_HI_PRIORITY_RCV_FIFO_BAR_SIZE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_BAR_SYM_HI_PRIORITY_RCV_FIFO_BAR_SIZE]

//>> PREP_[NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL]

//>> GET_[NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL;
#endif
    return fapi2::getScom(i_target, NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL]

//>> PUT_[NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL));
#endif
    return fapi2::putScom(i_target, NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL]


//>> SET_[NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_READ_OFFSET]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_READ_OFFSET(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_READ_OFFSET,
           NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_READ_OFFSET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_READ_OFFSET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_READ_OFFSET]

//>> SET_[NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_READ_OFFSET]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_READ_OFFSET(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_READ_OFFSET,
           NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_READ_OFFSET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_READ_OFFSET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_READ_OFFSET]

//>> GET_[NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_READ_OFFSET]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_READ_OFFSET(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_READ_OFFSET,
           NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_READ_OFFSET_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_READ_OFFSET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_READ_OFFSET]

//>> SET_[NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_QUEUED]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_QUEUED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_QUEUED,
           NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_QUEUED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_QUEUED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_QUEUED]

//>> SET_[NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_QUEUED]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_QUEUED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_QUEUED,
           NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_QUEUED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_QUEUED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_QUEUED]

//>> GET_[NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_QUEUED]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_QUEUED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_QUEUED,
           NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_QUEUED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_QUEUED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_QUEUED]

//>> SET_[NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_HI_PRIMAX]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_HI_PRIMAX(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_HI_PRIMAX,
           NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_HI_PRIMAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_HI_PRIMAX chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_HI_PRIMAX]

//>> SET_[NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_HI_PRIMAX]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_HI_PRIMAX(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_HI_PRIMAX,
           NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_HI_PRIMAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_HI_PRIMAX chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_HI_PRIMAX]

//>> GET_[NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_HI_PRIMAX]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_HI_PRIMAX(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_HI_PRIMAX,
           NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_HI_PRIMAX_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_HI_PRIMAX chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_SYM_HI_PRIOR_RCV_FIFO_CNTL_HI_PRIMAX]

//>> PREP_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB]

//>> GET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB;
#endif
    return fapi2::getScom(i_target, NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB]

//>> PUT_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB));
#endif
    return fapi2::putScom(i_target, NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB]


//>> SET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_LPID]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_LPID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_LPID,
           NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_LPID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_LPID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_LPID]

//>> SET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_LPID]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_LPID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_LPID,
           NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_LPID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_LPID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_LPID]

//>> GET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_LPID]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_LPID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_LPID,
           NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_LPID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_LPID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_LPID]

//>> SET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_PID]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_PID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_PID,
           NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_PID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_PID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_PID]

//>> SET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_PID]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_PID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_PID,
           NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_PID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_PID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_PID]

//>> GET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_PID]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_PID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_PID,
           NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_PID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_PID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_PID]

//>> SET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_TID]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_TID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_TID,
           NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_TID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_TID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_TID]

//>> SET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_TID]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_TID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_TID,
           NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_TID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_TID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_TID]

//>> GET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_TID]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_TID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_TID,
           NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_TID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_TID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_TID]

//>> SET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_ENABLE]

//>> SET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_ENABLE]

//>> SET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.setBit<NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_ENABLE]

//>> CLEAR_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.clearBit<NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_ENABLE]

//>> GET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_ENABLE]

//>> GET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_ENABLE]
static inline bool GET_NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB));
#endif
    return i_data.getBit<NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_SYM_LO_PRIOR_RCV_FIFO_ASB_ENABLE]

//>> PREP_[NX_PBI_UMAC_STATUS_CONTROL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_UMAC_STATUS_CONTROL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_UMAC_STATUS_CONTROL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_PBI_UMAC_STATUS_CONTROL]

//>> GET_[NX_PBI_UMAC_STATUS_CONTROL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_UMAC_STATUS_CONTROL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_UMAC_STATUS_CONTROL;
#endif
    return fapi2::getScom(i_target, NX_PBI_UMAC_STATUS_CONTROL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_PBI_UMAC_STATUS_CONTROL]

//>> PUT_[NX_PBI_UMAC_STATUS_CONTROL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_UMAC_STATUS_CONTROL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return fapi2::putScom(i_target, NX_PBI_UMAC_STATUS_CONTROL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_PBI_UMAC_STATUS_CONTROL]


//>> SET_[NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_ENBL]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_ENBL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_ENBL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_ENBL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_ENBL]

//>> SET_[NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_ENBL]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_ENBL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_ENBL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_ENBL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_ENBL]

//>> SET_[NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_ENBL]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_ENBL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return o_data.setBit<NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_ENBL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_ENBL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_ENBL]

//>> CLEAR_[NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_ENBL]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_ENBL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return o_data.clearBit<NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_ENBL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_ENBL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_ENBL]

//>> GET_[NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_ENBL]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_ENBL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_ENBL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_ENBL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_ENBL]

//>> GET_[NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_ENBL]
static inline bool GET_NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_ENBL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return i_data.getBit<NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_ENBL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_ENBL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_ENBL]

//>> SET_[NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_HALTED]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_HALTED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_HALTED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_HALTED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_HALTED]

//>> SET_[NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_HALTED]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_HALTED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_HALTED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_HALTED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_HALTED]

//>> SET_[NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_HALTED]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_HALTED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return o_data.setBit<NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_HALTED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_HALTED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_HALTED]

//>> CLEAR_[NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_HALTED]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_HALTED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return o_data.clearBit<NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_HALTED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_HALTED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_HALTED]

//>> GET_[NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_HALTED]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_HALTED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_HALTED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_HALTED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_HALTED]

//>> GET_[NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_HALTED]
static inline bool GET_NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_HALTED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return i_data.getBit<NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_HALTED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_HALTED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_STATUS_CONTROL_CRB_READS_HALTED]

//>> SET_[NX_PBI_UMAC_STATUS_CONTROL_UMAC_IDLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_STATUS_CONTROL_UMAC_IDLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_STATUS_CONTROL_UMAC_IDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_UMAC_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_STATUS_CONTROL_UMAC_IDLE]

//>> SET_[NX_PBI_UMAC_STATUS_CONTROL_UMAC_IDLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_STATUS_CONTROL_UMAC_IDLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_STATUS_CONTROL_UMAC_IDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_UMAC_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_STATUS_CONTROL_UMAC_IDLE]

//>> SET_[NX_PBI_UMAC_STATUS_CONTROL_UMAC_IDLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_STATUS_CONTROL_UMAC_IDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return o_data.setBit<NX_PBI_UMAC_STATUS_CONTROL_UMAC_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_UMAC_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_STATUS_CONTROL_UMAC_IDLE]

//>> CLEAR_[NX_PBI_UMAC_STATUS_CONTROL_UMAC_IDLE]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_UMAC_STATUS_CONTROL_UMAC_IDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return o_data.clearBit<NX_PBI_UMAC_STATUS_CONTROL_UMAC_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_UMAC_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_UMAC_STATUS_CONTROL_UMAC_IDLE]

//>> GET_[NX_PBI_UMAC_STATUS_CONTROL_UMAC_IDLE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_STATUS_CONTROL_UMAC_IDLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_STATUS_CONTROL_UMAC_IDLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_UMAC_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_STATUS_CONTROL_UMAC_IDLE]

//>> GET_[NX_PBI_UMAC_STATUS_CONTROL_UMAC_IDLE]
static inline bool GET_NX_PBI_UMAC_STATUS_CONTROL_UMAC_IDLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return i_data.getBit<NX_PBI_UMAC_STATUS_CONTROL_UMAC_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_UMAC_IDLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_STATUS_CONTROL_UMAC_IDLE]

//>> SET_[NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_REQUEST]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_REQUEST(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_REQUEST,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_REQUEST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_REQUEST]

//>> SET_[NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_REQUEST]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_REQUEST(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_REQUEST,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_REQUEST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_REQUEST]

//>> SET_[NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_REQUEST]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_REQUEST(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return o_data.setBit<NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_REQUEST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_REQUEST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_REQUEST]

//>> CLEAR_[NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_REQUEST]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_REQUEST(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return o_data.clearBit<NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_REQUEST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_REQUEST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_REQUEST]

//>> GET_[NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_REQUEST]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_REQUEST(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_REQUEST,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_REQUEST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_REQUEST]

//>> GET_[NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_REQUEST]
static inline bool GET_NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_REQUEST(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return i_data.getBit<NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_REQUEST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_REQUEST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_REQUEST]

//>> SET_[NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_ACHEIVED]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_ACHEIVED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_ACHEIVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_ACHEIVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_ACHEIVED]

//>> SET_[NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_ACHEIVED]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_ACHEIVED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_ACHEIVED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_ACHEIVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_ACHEIVED]

//>> SET_[NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_ACHEIVED]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_ACHEIVED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return o_data.setBit<NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_ACHEIVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_ACHEIVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_ACHEIVED]

//>> CLEAR_[NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_ACHEIVED]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_ACHEIVED(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return o_data.clearBit<NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_ACHEIVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_ACHEIVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_ACHEIVED]

//>> GET_[NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_ACHEIVED]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_ACHEIVED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_ACHEIVED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_ACHEIVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_ACHEIVED]

//>> GET_[NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_ACHEIVED]
static inline bool GET_NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_ACHEIVED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return i_data.getBit<NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_ACHEIVED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_ACHEIVED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_ACHEIVED]

//>> SET_[NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_FAILED]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_FAILED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_FAILED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_FAILED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_FAILED]

//>> SET_[NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_FAILED]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_FAILED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_FAILED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_FAILED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_FAILED]

//>> SET_[NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_FAILED]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_FAILED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return o_data.setBit<NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_FAILED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_FAILED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_FAILED]

//>> CLEAR_[NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_FAILED]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_FAILED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return o_data.clearBit<NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_FAILED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_FAILED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_FAILED]

//>> GET_[NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_FAILED]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_FAILED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_FAILED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_FAILED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_FAILED]

//>> GET_[NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_FAILED]
static inline bool GET_NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_FAILED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return i_data.getBit<NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_FAILED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_FAILED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_STATUS_CONTROL_QUIESCE_FAILED]

//>> SET_[NX_PBI_UMAC_STATUS_CONTROL_UMAC_QUIESCED]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_STATUS_CONTROL_UMAC_QUIESCED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_STATUS_CONTROL_UMAC_QUIESCED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_UMAC_QUIESCED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_STATUS_CONTROL_UMAC_QUIESCED]

//>> SET_[NX_PBI_UMAC_STATUS_CONTROL_UMAC_QUIESCED]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_STATUS_CONTROL_UMAC_QUIESCED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_STATUS_CONTROL_UMAC_QUIESCED,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_UMAC_QUIESCED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_STATUS_CONTROL_UMAC_QUIESCED]

//>> SET_[NX_PBI_UMAC_STATUS_CONTROL_UMAC_QUIESCED]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_STATUS_CONTROL_UMAC_QUIESCED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return o_data.setBit<NX_PBI_UMAC_STATUS_CONTROL_UMAC_QUIESCED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_UMAC_QUIESCED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_STATUS_CONTROL_UMAC_QUIESCED]

//>> CLEAR_[NX_PBI_UMAC_STATUS_CONTROL_UMAC_QUIESCED]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_UMAC_STATUS_CONTROL_UMAC_QUIESCED(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return o_data.clearBit<NX_PBI_UMAC_STATUS_CONTROL_UMAC_QUIESCED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_UMAC_QUIESCED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_UMAC_STATUS_CONTROL_UMAC_QUIESCED]

//>> GET_[NX_PBI_UMAC_STATUS_CONTROL_UMAC_QUIESCED]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_STATUS_CONTROL_UMAC_QUIESCED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_STATUS_CONTROL_UMAC_QUIESCED,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_UMAC_QUIESCED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_STATUS_CONTROL_UMAC_QUIESCED]

//>> GET_[NX_PBI_UMAC_STATUS_CONTROL_UMAC_QUIESCED]
static inline bool GET_NX_PBI_UMAC_STATUS_CONTROL_UMAC_QUIESCED(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return i_data.getBit<NX_PBI_UMAC_STATUS_CONTROL_UMAC_QUIESCED>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_UMAC_QUIESCED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_STATUS_CONTROL_UMAC_QUIESCED]

//>> SET_[NX_PBI_UMAC_STATUS_CONTROL_PASTE_ADDR_ALIGN]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_STATUS_CONTROL_PASTE_ADDR_ALIGN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_STATUS_CONTROL_PASTE_ADDR_ALIGN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_PASTE_ADDR_ALIGN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_STATUS_CONTROL_PASTE_ADDR_ALIGN]

//>> SET_[NX_PBI_UMAC_STATUS_CONTROL_PASTE_ADDR_ALIGN]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_STATUS_CONTROL_PASTE_ADDR_ALIGN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_STATUS_CONTROL_PASTE_ADDR_ALIGN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_PASTE_ADDR_ALIGN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_STATUS_CONTROL_PASTE_ADDR_ALIGN]

//>> SET_[NX_PBI_UMAC_STATUS_CONTROL_PASTE_ADDR_ALIGN]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_STATUS_CONTROL_PASTE_ADDR_ALIGN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return o_data.setBit<NX_PBI_UMAC_STATUS_CONTROL_PASTE_ADDR_ALIGN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_PASTE_ADDR_ALIGN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_STATUS_CONTROL_PASTE_ADDR_ALIGN]

//>> CLEAR_[NX_PBI_UMAC_STATUS_CONTROL_PASTE_ADDR_ALIGN]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_UMAC_STATUS_CONTROL_PASTE_ADDR_ALIGN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return o_data.clearBit<NX_PBI_UMAC_STATUS_CONTROL_PASTE_ADDR_ALIGN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_PASTE_ADDR_ALIGN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_UMAC_STATUS_CONTROL_PASTE_ADDR_ALIGN]

//>> GET_[NX_PBI_UMAC_STATUS_CONTROL_PASTE_ADDR_ALIGN]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_STATUS_CONTROL_PASTE_ADDR_ALIGN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_STATUS_CONTROL_PASTE_ADDR_ALIGN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_PASTE_ADDR_ALIGN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_STATUS_CONTROL_PASTE_ADDR_ALIGN]

//>> GET_[NX_PBI_UMAC_STATUS_CONTROL_PASTE_ADDR_ALIGN]
static inline bool GET_NX_PBI_UMAC_STATUS_CONTROL_PASTE_ADDR_ALIGN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_STATUS_CONTROL));
#endif
    return i_data.getBit<NX_PBI_UMAC_STATUS_CONTROL_PASTE_ADDR_ALIGN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_UMAC_STATUS_CONTROL_PASTE_ADDR_ALIGN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_STATUS_CONTROL_PASTE_ADDR_ALIGN]

//>> PREP_[NX_PBI_UMAC_VAS_RMA_WRITE_BASE_ADDR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_UMAC_VAS_RMA_WRITE_BASE_ADDR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_UMAC_VAS_RMA_WRITE_BASE_ADDR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_PBI_UMAC_VAS_RMA_WRITE_BASE_ADDR]

//>> GET_[NX_PBI_UMAC_VAS_RMA_WRITE_BASE_ADDR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_UMAC_VAS_RMA_WRITE_BASE_ADDR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_UMAC_VAS_RMA_WRITE_BASE_ADDR;
#endif
    return fapi2::getScom(i_target, NX_PBI_UMAC_VAS_RMA_WRITE_BASE_ADDR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_PBI_UMAC_VAS_RMA_WRITE_BASE_ADDR]

//>> PUT_[NX_PBI_UMAC_VAS_RMA_WRITE_BASE_ADDR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_UMAC_VAS_RMA_WRITE_BASE_ADDR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_VAS_RMA_WRITE_BASE_ADDR));
#endif
    return fapi2::putScom(i_target, NX_PBI_UMAC_VAS_RMA_WRITE_BASE_ADDR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_PBI_UMAC_VAS_RMA_WRITE_BASE_ADDR]


//>> SET_[NX_PBI_UMAC_VAS_RMA_WRITE_BASE_ADDR_VAS_RMA_WRITE_BAR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_VAS_RMA_WRITE_BASE_ADDR_VAS_RMA_WRITE_BAR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_VAS_RMA_WRITE_BASE_ADDR));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_VAS_RMA_WRITE_BASE_ADDR_VAS_RMA_WRITE_BAR,
           NX_PBI_UMAC_VAS_RMA_WRITE_BASE_ADDR_VAS_RMA_WRITE_BAR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_VAS_RMA_WRITE_BASE_ADDR_VAS_RMA_WRITE_BAR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_VAS_RMA_WRITE_BASE_ADDR_VAS_RMA_WRITE_BAR]

//>> SET_[NX_PBI_UMAC_VAS_RMA_WRITE_BASE_ADDR_VAS_RMA_WRITE_BAR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_VAS_RMA_WRITE_BASE_ADDR_VAS_RMA_WRITE_BAR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_VAS_RMA_WRITE_BASE_ADDR));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_VAS_RMA_WRITE_BASE_ADDR_VAS_RMA_WRITE_BAR,
           NX_PBI_UMAC_VAS_RMA_WRITE_BASE_ADDR_VAS_RMA_WRITE_BAR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_VAS_RMA_WRITE_BASE_ADDR_VAS_RMA_WRITE_BAR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_VAS_RMA_WRITE_BASE_ADDR_VAS_RMA_WRITE_BAR]

//>> GET_[NX_PBI_UMAC_VAS_RMA_WRITE_BASE_ADDR_VAS_RMA_WRITE_BAR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_VAS_RMA_WRITE_BASE_ADDR_VAS_RMA_WRITE_BAR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_VAS_RMA_WRITE_BASE_ADDR));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_VAS_RMA_WRITE_BASE_ADDR_VAS_RMA_WRITE_BAR,
           NX_PBI_UMAC_VAS_RMA_WRITE_BASE_ADDR_VAS_RMA_WRITE_BAR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_VAS_RMA_WRITE_BASE_ADDR_VAS_RMA_WRITE_BAR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_VAS_RMA_WRITE_BASE_ADDR_VAS_RMA_WRITE_BAR]

//>> PREP_[PB_COM_SCOM_EN1_STATION_CFG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN1_STATION_CFG1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN1_STATION_CFG1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN1_STATION_CFG1]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN1_STATION_CFG1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN1_STATION_CFG1;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN1_STATION_CFG1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG1]

//>> PUT_[PB_COM_SCOM_EN1_STATION_CFG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN1_STATION_CFG1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN1_STATION_CFG1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN1_STATION_CFG1]


//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN1,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN1,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN1,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN1,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN1,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN1,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_LIMIT_AX6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_LIMIT_AX6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_LIMIT_AX6,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_LIMIT_AX6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_LIMIT_AX6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_LIMIT_AX6]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_LIMIT_AX6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_LIMIT_AX6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_LIMIT_AX6,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_LIMIT_AX6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_LIMIT_AX6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_LIMIT_AX6]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_LIMIT_AX6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_LIMIT_AX6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_LIMIT_AX6,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_LIMIT_AX6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_LIMIT_AX6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_LIMIT_AX6]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_LIMIT_AX7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_LIMIT_AX7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_LIMIT_AX7,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_LIMIT_AX7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_LIMIT_AX7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_LIMIT_AX7]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_LIMIT_AX7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_LIMIT_AX7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_LIMIT_AX7,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_LIMIT_AX7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_LIMIT_AX7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_LIMIT_AX7]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_LIMIT_AX7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_LIMIT_AX7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_LIMIT_AX7,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_LIMIT_AX7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_LIMIT_AX7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_LIMIT_AX7]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_SPARE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_SPARE1,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_SPARE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_SPARE1,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_SPARE1]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_SPARE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_SPARE1,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_SPARE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MIN_AX6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MIN_AX6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MIN_AX6,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MIN_AX6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MIN_AX6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MIN_AX6]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MIN_AX6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MIN_AX6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MIN_AX6,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MIN_AX6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MIN_AX6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MIN_AX6]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MIN_AX6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MIN_AX6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MIN_AX6,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MIN_AX6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MIN_AX6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MIN_AX6]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MAX_AX6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MAX_AX6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MAX_AX6,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MAX_AX6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MAX_AX6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MAX_AX6]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MAX_AX6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MAX_AX6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MAX_AX6,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MAX_AX6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MAX_AX6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MAX_AX6]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MAX_AX6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MAX_AX6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MAX_AX6,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MAX_AX6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MAX_AX6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_OUTBOUND_QUEUE_MAX_AX6]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_AX6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_AX6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_AX6,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_AX6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_AX6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_AX6]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_AX6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_AX6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_AX6,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_AX6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_AX6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_AX6]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_AX6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_AX6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_AX6,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_AX6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_AX6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_AX6]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_AX7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_AX7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_AX7,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_AX7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_AX7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_AX7]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_AX7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_AX7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_AX7,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_AX7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_AX7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_AX7]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_AX7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_AX7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_AX7,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_AX7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_AX7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_AX7]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN1,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN1,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN1,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN1,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN1,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN1,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN1,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN1,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN1,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN1,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN1,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN1,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN1,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN1,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN1,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN1,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN1,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN1,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_SPARE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_SPARE2,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_SPARE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_SPARE2,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_SPARE2]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_SPARE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_SPARE2,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_SPARE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MIN_AX7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MIN_AX7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MIN_AX7,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MIN_AX7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MIN_AX7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MIN_AX7]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MIN_AX7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MIN_AX7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MIN_AX7,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MIN_AX7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MIN_AX7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MIN_AX7]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MIN_AX7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MIN_AX7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MIN_AX7,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MIN_AX7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MIN_AX7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MIN_AX7]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MAX_AX7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MAX_AX7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MAX_AX7,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MAX_AX7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MAX_AX7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MAX_AX7]

//>> SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MAX_AX7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MAX_AX7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MAX_AX7,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MAX_AX7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MAX_AX7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MAX_AX7]

//>> GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MAX_AX7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MAX_AX7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MAX_AX7,
           PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MAX_AX7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MAX_AX7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_CFG1_PB_CFG_DAT_LINK1_OUTBOUND_QUEUE_MAX_AX7]

//>> PREP_[PB_COM_SCOM_EN1_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN1_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN1_STATION_EVENT_SEL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN1_STATION_EVENT_SEL]

//>> GET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN1_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN1_STATION_EVENT_SEL;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN1_STATION_EVENT_SEL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL]

//>> PUT_[PB_COM_SCOM_EN1_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN1_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN1_STATION_EVENT_SEL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN1_STATION_EVENT_SEL]


//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0,
           PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0,
           PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]

//>> GET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0,
           PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1,
           PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1,
           PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]

//>> GET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1,
           PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2,
           PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2,
           PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]

//>> GET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2,
           PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3,
           PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3,
           PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]

//>> GET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3,
           PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4,
           PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4,
           PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]

//>> GET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4,
           PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5,
           PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5,
           PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]

//>> GET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5,
           PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6,
           PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6,
           PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]

//>> GET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6,
           PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7,
           PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7,
           PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]

//>> GET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7,
           PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN1,
           PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> GET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> GET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline bool GET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> GET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> GET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline bool GET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> GET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> PREP_[PB_COM_SCOM_EN2_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN2_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN2_STATION_EVENT_SEL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN2_STATION_EVENT_SEL]

//>> GET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN2_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN2_STATION_EVENT_SEL;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN2_STATION_EVENT_SEL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL]

//>> PUT_[PB_COM_SCOM_EN2_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN2_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN2_STATION_EVENT_SEL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN2_STATION_EVENT_SEL]


//>> SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0,
           PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]

//>> SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0,
           PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]

//>> GET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0,
           PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]

//>> SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1,
           PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]

//>> SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1,
           PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]

//>> GET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1,
           PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]

//>> SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2,
           PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]

//>> SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2,
           PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]

//>> GET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2,
           PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]

//>> SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3,
           PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]

//>> SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3,
           PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]

//>> GET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3,
           PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]

//>> SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4,
           PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]

//>> SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4,
           PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]

//>> GET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4,
           PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]

//>> SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5,
           PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]

//>> SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5,
           PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]

//>> GET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5,
           PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]

//>> SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6,
           PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]

//>> SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6,
           PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]

//>> GET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6,
           PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]

//>> SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7,
           PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]

//>> SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7,
           PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]

//>> GET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7,
           PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]

//>> SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> GET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> GET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline bool GET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> GET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> GET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> PREP_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW]

//>> PUT_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW]

//>> PREP_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND]

//>> PUT_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND]

//>> PREP_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR]

//>> PUT_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR]


//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]
static inline bool GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]
static inline bool GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]
static inline bool GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]
static inline bool GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]
static inline bool GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]

//>> PREP_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN2_STATION_GP_CMD_RATE(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN2_STATION_GP_CMD_RATE;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE]

//>> GET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN2_STATION_GP_CMD_RATE(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN2_STATION_GP_CMD_RATE;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN2_STATION_GP_CMD_RATE, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE]

//>> PUT_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN2_STATION_GP_CMD_RATE(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_GP_CMD_RATE));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN2_STATION_GP_CMD_RATE, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE]


//>> SET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_0_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_0_EN2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_0_EN2,
           PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_0_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_0_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_0_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_0_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_0_EN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_0_EN2,
           PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_0_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_0_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_0_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_0_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_0_EN2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_0_EN2,
           PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_0_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_0_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_0_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_1_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_1_EN2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_1_EN2,
           PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_1_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_1_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_1_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_1_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_1_EN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_1_EN2,
           PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_1_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_1_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_1_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_1_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_1_EN2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_1_EN2,
           PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_1_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_1_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_1_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_2_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_2_EN2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_2_EN2,
           PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_2_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_2_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_2_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_2_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_2_EN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_2_EN2,
           PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_2_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_2_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_2_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_2_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_2_EN2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_2_EN2,
           PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_2_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_2_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_2_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_3_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_3_EN2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_3_EN2,
           PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_3_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_3_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_3_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_3_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_3_EN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_3_EN2,
           PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_3_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_3_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_3_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_3_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_3_EN2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_3_EN2,
           PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_3_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_3_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_3_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_4_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_4_EN2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_4_EN2,
           PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_4_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_4_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_4_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_4_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_4_EN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_4_EN2,
           PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_4_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_4_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_4_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_4_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_4_EN2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_4_EN2,
           PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_4_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_4_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_4_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_5_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_5_EN2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_5_EN2,
           PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_5_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_5_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_5_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_5_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_5_EN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_5_EN2,
           PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_5_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_5_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_5_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_5_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_5_EN2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_5_EN2,
           PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_5_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_5_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_5_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_6_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_6_EN2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_6_EN2,
           PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_6_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_6_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_6_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_6_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_6_EN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_6_EN2,
           PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_6_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_6_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_6_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_6_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_6_EN2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_6_EN2,
           PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_6_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_6_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_6_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_7_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_7_EN2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_7_EN2,
           PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_7_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_7_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_7_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_7_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_7_EN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_7_EN2,
           PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_7_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_7_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_7_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_7_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_7_EN2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_7_EN2,
           PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_7_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_7_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_GP_CMD_RATE_7_EN2]

//>> PREP_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT]

//>> PUT_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT]


//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EN2,
           PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_SPARE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_SPARE,
           PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_SPARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_SPARE]

//>> SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_SPARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_SPARE,
           PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_SPARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_SPARE]

//>> GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_SPARE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_SPARE,
           PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_SPARE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_SPARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_HP_MODE2_NEXT_PB_CFG_SPARE]

//>> PREP_[PB_COM_SCOM_EN3_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN3_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN3_STATION_EVENT_SEL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN3_STATION_EVENT_SEL]

//>> GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN3_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN3_STATION_EVENT_SEL;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN3_STATION_EVENT_SEL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL]

//>> PUT_[PB_COM_SCOM_EN3_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN3_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN3_STATION_EVENT_SEL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN3_STATION_EVENT_SEL]


//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL0,
           PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL0]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL0,
           PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL0]

//>> GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL0,
           PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL0]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL1,
           PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL1]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL1,
           PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL1]

//>> GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL1,
           PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL1]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL2,
           PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL2]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL2,
           PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL2]

//>> GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL2,
           PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL2]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL3,
           PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL3]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL3,
           PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL3]

//>> GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL3,
           PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL3]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL4,
           PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL4]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL4,
           PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL4]

//>> GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL4,
           PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL4]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL5,
           PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL5]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL5,
           PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL5]

//>> GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL5,
           PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL5]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL6,
           PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL6]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL6,
           PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL6]

//>> GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL6,
           PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL6]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL7,
           PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL7]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL7,
           PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL7]

//>> GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL7,
           PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_SEL7]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_EVENT_EAST_BITWISE_ENABLE_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_EVENT_EAST_BITWISE_ENABLE_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_EVENT_EAST_BITWISE_ENABLE_EN3,
           PB_COM_SCOM_EN3_STATION_EVENT_SEL_EVENT_EAST_BITWISE_ENABLE_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_EVENT_EAST_BITWISE_ENABLE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_EVENT_EAST_BITWISE_ENABLE_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_EVENT_EAST_BITWISE_ENABLE_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_EVENT_EAST_BITWISE_ENABLE_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_EVENT_EAST_BITWISE_ENABLE_EN3,
           PB_COM_SCOM_EN3_STATION_EVENT_SEL_EVENT_EAST_BITWISE_ENABLE_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_EVENT_EAST_BITWISE_ENABLE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_EVENT_EAST_BITWISE_ENABLE_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_EVENT_EAST_BITWISE_ENABLE_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_EVENT_EAST_BITWISE_ENABLE_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_EVENT_EAST_BITWISE_ENABLE_EN3,
           PB_COM_SCOM_EN3_STATION_EVENT_SEL_EVENT_EAST_BITWISE_ENABLE_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_EVENT_EAST_BITWISE_ENABLE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_EVENT_EAST_BITWISE_ENABLE_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_EVENT_WEST_BITWISE_ENABLE_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_EVENT_WEST_BITWISE_ENABLE_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_EVENT_WEST_BITWISE_ENABLE_EN3,
           PB_COM_SCOM_EN3_STATION_EVENT_SEL_EVENT_WEST_BITWISE_ENABLE_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_EVENT_WEST_BITWISE_ENABLE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_EVENT_WEST_BITWISE_ENABLE_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_EVENT_WEST_BITWISE_ENABLE_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_EVENT_WEST_BITWISE_ENABLE_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_EVENT_WEST_BITWISE_ENABLE_EN3,
           PB_COM_SCOM_EN3_STATION_EVENT_SEL_EVENT_WEST_BITWISE_ENABLE_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_EVENT_WEST_BITWISE_ENABLE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_EVENT_WEST_BITWISE_ENABLE_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_EVENT_WEST_BITWISE_ENABLE_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_EVENT_WEST_BITWISE_ENABLE_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_EVENT_WEST_BITWISE_ENABLE_EN3,
           PB_COM_SCOM_EN3_STATION_EVENT_SEL_EVENT_WEST_BITWISE_ENABLE_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_EVENT_WEST_BITWISE_ENABLE_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_EVENT_WEST_BITWISE_ENABLE_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL]

//>> GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL]

//>> GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL]
static inline bool GET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL2]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL2]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL2]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL2]

//>> GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL2]

//>> GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL2]
static inline bool GET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_PBN_EVENT_PORT_SEL2]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PBN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PBN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PBN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PBN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PBN_MASK]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PBN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PBN_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PBN_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PBN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PBN_MASK]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PBN_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PBN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PBN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PBN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PBN_MASK]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PBN_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PBN_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PBN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PBN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PBN_MASK]

//>> GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PBN_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PBN_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PBN_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PBN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PBN_MASK]

//>> GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PBN_MASK]
static inline bool GET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PBN_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PBN_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PBN_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PBN_MASK]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC2_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC2_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC2_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC2_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC2_MASK]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC2_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC2_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC2_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC2_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC2_MASK]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC2_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC2_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC2_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC2_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC2_MASK]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC2_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC2_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC2_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC2_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC2_MASK]

//>> GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC2_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC2_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC2_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC2_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC2_MASK]

//>> GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC2_MASK]
static inline bool GET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC2_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC2_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC2_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC2_MASK]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC3_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC3_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC3_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC3_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC3_MASK]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC3_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC3_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC3_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC3_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC3_MASK]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC3_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC3_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC3_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC3_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC3_MASK]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC3_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC3_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC3_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC3_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC3_MASK]

//>> GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC3_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC3_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC3_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC3_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC3_MASK]

//>> GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC3_MASK]
static inline bool GET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC3_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC3_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC3_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_MC3_MASK]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_VAS_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_VAS_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_VAS_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_VAS_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_VAS_MASK]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_VAS_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_VAS_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_VAS_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_VAS_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_VAS_MASK]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_VAS_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_VAS_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_VAS_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_VAS_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_VAS_MASK]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_VAS_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_VAS_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_VAS_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_VAS_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_VAS_MASK]

//>> GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_VAS_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_VAS_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_VAS_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_VAS_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_VAS_MASK]

//>> GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_VAS_MASK]
static inline bool GET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_VAS_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_VAS_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_VAS_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_VAS_MASK]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_INT_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_INT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_INT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_INT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_INT_MASK]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_INT_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_INT_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_INT_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_INT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_INT_MASK]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_INT_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_INT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_INT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_INT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_INT_MASK]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_INT_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_INT_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_INT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_INT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_INT_MASK]

//>> GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_INT_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_INT_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_INT_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_INT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_INT_MASK]

//>> GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_INT_MASK]
static inline bool GET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_INT_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_INT_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_INT_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_INT_MASK]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PE1_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PE1_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PE1_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PE1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PE1_MASK]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PE1_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PE1_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PE1_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PE1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PE1_MASK]

//>> SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PE1_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PE1_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PE1_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PE1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PE1_MASK]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PE1_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PE1_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PE1_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PE1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PE1_MASK]

//>> GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PE1_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PE1_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PE1_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PE1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PE1_MASK]

//>> GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PE1_MASK]
static inline bool GET_PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PE1_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PE1_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PE1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_EVENT_SEL_CNPMN_PE1_MASK]

//>> PREP_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR]

//>> PUT_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR]


//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_VALID_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_VALID_CURR_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_VALID_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_VALID_CURR_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_VALID_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_VALID_CURR_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_VALID_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_VALID_CURR_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_VALID_CURR_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_VALID_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_VALID_CURR_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_VALID_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_VALID_CURR_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_VALID_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_VALID_CURR_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_VALID_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_VALID_CURR_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_VALID_CURR_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_VALID_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_VALID_CURR_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_VALID_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_VALID_CURR_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_VALID_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_VALID_CURR_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_VALID_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_VALID_CURR_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_VALID_CURR_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_VALID_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_VALID_CURR_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_VALID_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_VALID_CURR_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_VALID_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_VALID_CURR_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_VALID_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_VALID_CURR_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_VALID_CURR_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_VALID_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_VALID_CURR_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_VALID_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_VALID_CURR_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_VALID_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_VALID_CURR_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_VALID_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_VALID_CURR_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_VALID_CURR_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_VALID_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_VALID_CURR_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_VALID_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_VALID_CURR_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_VALID_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_VALID_CURR_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_VALID_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_VALID_CURR_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_VALID_CURR_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_VALID_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_VALID_CURR_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_VALID_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_VALID_CURR_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_VALID_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_VALID_CURR_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_VALID_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_VALID_CURR_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_VALID_CURR_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_VALID_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_VALID_CURR_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_VALID_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_VALID_CURR_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_VALID_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_VALID_CURR_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_VALID_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_VALID_CURR_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_VALID_CURR_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_VALID_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_VALID_CURR_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_VALID_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_VALID_CURR_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_VALID_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_VALID_CURR_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_VALID_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_VALID_CURR_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_VALID_CURR_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_VALID_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_VALID_CURR_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_VALID_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_VALID_CURR_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_VALID_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_VALID_CURR_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_VALID_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_VALID_CURR_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_VALID_CURR_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_VALID_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_VALID_CURR_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_VALID_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_VALID_CURR_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_VALID_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_VALID_CURR_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_VALID_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_VALID_CURR_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_VALID_CURR_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_VALID_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_VALID_CURR_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_VALID_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_VALID_CURR_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_VALID_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_VALID_CURR_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_VALID_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_VALID_CURR_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_VALID_CURR_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_VALID_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_VALID_CURR_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_VALID_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_VALID_CURR_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_VALID_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_VALID_CURR_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_VALID_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_VALID_CURR_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_VALID_CURR_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_VALID_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_VALID_CURR_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_VALID_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_VALID_CURR_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_VALID_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_VALID_CURR_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_VALID_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_VALID_CURR_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_VALID_CURR_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_VALID_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_VALID_CURR_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_VALID_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_VALID_CURR_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_VALID_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_VALID_CURR_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_VALID_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_VALID_CURR_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_VALID_CURR_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_VALID_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_VALID_CURR_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_VALID_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_VALID_CURR_EN3]

//>> CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_VALID_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_VALID_CURR_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_VALID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_VALID_CURR_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_VALID_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_VALID_CURR_EN3]
static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_VALID_CURR_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_VALID_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_VALID_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_VALID_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EN3]

//>> SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EN3]

//>> GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EN3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EN3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN3_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EN3]

//>> PREP_[PB_COM_SCOM_EN4_STATION_CFG3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN4_STATION_CFG3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN4_STATION_CFG3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN4_STATION_CFG3]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN4_STATION_CFG3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN4_STATION_CFG3;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN4_STATION_CFG3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG3]

//>> PUT_[PB_COM_SCOM_EN4_STATION_CFG3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN4_STATION_CFG3(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN4_STATION_CFG3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN4_STATION_CFG3]


//>> SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EN4,
           PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EN4,
           PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EN4,
           PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_SPARE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_SPARE1,
           PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_SPARE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_SPARE1,
           PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_SPARE1]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_SPARE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_SPARE1,
           PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_SPARE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_DISABLE]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_DISABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_DISABLE]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_DISABLE]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_DISABLE]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_DISABLE]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_DISABLE]
static inline bool GET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_DISABLE]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]
static inline bool GET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_DISABLE]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_DISABLE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_DISABLE]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_DISABLE]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_DISABLE]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_DISABLE]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_DISABLE]
static inline bool GET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_DISABLE]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_DISABLE]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_DISABLE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_DISABLE]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_DISABLE]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_DISABLE]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_DISABLE]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_DISABLE]
static inline bool GET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_DISABLE]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_SELCD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_SELCD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_SELCD]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_SELCD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_SELCD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_SELCD]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_SELCD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_SELCD]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_SELCD]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_SELCD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_SELCD]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_SELCD]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_SELCD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_SELCD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_SELCD]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_SELCD]
static inline bool GET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_SELCD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PA3_SELCD]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]
static inline bool GET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_SELCD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_SELCD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_SELCD]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_SELCD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_SELCD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_SELCD]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_SELCD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_SELCD]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_SELCD]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_SELCD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_SELCD]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_SELCD]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_SELCD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_SELCD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_SELCD]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_SELCD]
static inline bool GET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_SELCD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL2_SELCD]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_SELCD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_SELCD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_SELCD]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_SELCD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_SELCD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_SELCD]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_SELCD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_SELCD]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_SELCD]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_SELCD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_SELCD]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_SELCD]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_SELCD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_SELCD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_SELCD]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_SELCD]
static inline bool GET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_SELCD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_PBIASY_PTL3_SELCD]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_SPARE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_SPARE2,
           PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_SPARE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_SPARE2,
           PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_SPARE2]

//>> GET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_SPARE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_SPARE2,
           PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_SPARE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_CFG3_PB_CFG_SPARE2]

//>> PREP_[PB_COM_SCOM_EN4_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN4_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN4_STATION_EVENT_SEL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN4_STATION_EVENT_SEL]

//>> GET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN4_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN4_STATION_EVENT_SEL;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN4_STATION_EVENT_SEL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL]

//>> PUT_[PB_COM_SCOM_EN4_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN4_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN4_STATION_EVENT_SEL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN4_STATION_EVENT_SEL]


//>> SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0,
           PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]

//>> SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0,
           PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]

//>> GET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0,
           PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]

//>> SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1,
           PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]

//>> SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1,
           PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]

//>> GET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1,
           PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]

//>> SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2,
           PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]

//>> SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2,
           PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]

//>> GET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2,
           PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]

//>> SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3,
           PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]

//>> SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3,
           PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]

//>> GET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3,
           PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]

//>> SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4,
           PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]

//>> SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4,
           PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]

//>> GET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4,
           PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]

//>> SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5,
           PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]

//>> SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5,
           PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]

//>> GET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5,
           PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]

//>> SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6,
           PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]

//>> SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6,
           PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]

//>> GET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6,
           PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]

//>> SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7,
           PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]

//>> SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7,
           PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]

//>> GET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7,
           PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]

//>> SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> GET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> GET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline bool GET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> GET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> GET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline bool GET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> GET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> PREP_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN4_STATION_GP_CMD_RATE(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN4_STATION_GP_CMD_RATE;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE]

//>> GET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN4_STATION_GP_CMD_RATE(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN4_STATION_GP_CMD_RATE;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN4_STATION_GP_CMD_RATE, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE]

//>> PUT_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN4_STATION_GP_CMD_RATE(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_GP_CMD_RATE));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN4_STATION_GP_CMD_RATE, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE]


//>> SET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_0_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_0_EN4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_0_EN4,
           PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_0_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_0_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_0_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_0_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_0_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_0_EN4,
           PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_0_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_0_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_0_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_0_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_0_EN4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_0_EN4,
           PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_0_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_0_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_0_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_1_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_1_EN4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_1_EN4,
           PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_1_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_1_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_1_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_1_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_1_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_1_EN4,
           PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_1_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_1_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_1_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_1_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_1_EN4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_1_EN4,
           PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_1_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_1_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_1_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_2_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_2_EN4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_2_EN4,
           PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_2_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_2_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_2_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_2_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_2_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_2_EN4,
           PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_2_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_2_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_2_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_2_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_2_EN4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_2_EN4,
           PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_2_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_2_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_2_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_3_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_3_EN4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_3_EN4,
           PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_3_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_3_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_3_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_3_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_3_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_3_EN4,
           PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_3_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_3_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_3_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_3_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_3_EN4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_3_EN4,
           PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_3_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_3_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_3_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_4_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_4_EN4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_4_EN4,
           PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_4_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_4_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_4_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_4_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_4_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_4_EN4,
           PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_4_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_4_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_4_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_4_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_4_EN4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_4_EN4,
           PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_4_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_4_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_4_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_5_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_5_EN4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_5_EN4,
           PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_5_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_5_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_5_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_5_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_5_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_5_EN4,
           PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_5_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_5_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_5_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_5_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_5_EN4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_5_EN4,
           PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_5_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_5_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_5_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_6_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_6_EN4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_6_EN4,
           PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_6_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_6_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_6_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_6_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_6_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_6_EN4,
           PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_6_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_6_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_6_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_6_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_6_EN4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_6_EN4,
           PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_6_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_6_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_6_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_7_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_7_EN4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_7_EN4,
           PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_7_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_7_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_7_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_7_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_7_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_GP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_7_EN4,
           PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_7_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_7_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_7_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_7_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_7_EN4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_GP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_7_EN4,
           PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_7_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_7_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_GP_CMD_RATE_7_EN4]

//>> PREP_[PB_COM_SCOM_EQ1_STATION_CFG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ1_STATION_CFG1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ1_STATION_CFG1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ1_STATION_CFG1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ1_STATION_CFG1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ1_STATION_CFG1;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ1_STATION_CFG1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG1]

//>> PUT_[PB_COM_SCOM_EQ1_STATION_CFG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ1_STATION_CFG1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ1_STATION_CFG1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ1_STATION_CFG1]


//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_SPARE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_SPARE1,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_SPARE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_SPARE1,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_SPARE1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_SPARE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_SPARE1,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_SPARE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ1,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_SPARE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_SPARE2,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_SPARE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_SPARE2,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_SPARE2]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_SPARE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_SPARE2,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_SPARE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX]

//>> SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX]

//>> GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX,
           PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX]

//>> PREP_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE]

//>> GET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE]

//>> PUT_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE]


//>> SET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_0_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_0_EQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_0_EQ1,
           PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_0_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_0_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_0_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_0_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_0_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_0_EQ1,
           PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_0_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_0_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_0_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_0_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_0_EQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_0_EQ1,
           PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_0_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_0_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_0_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_1_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_1_EQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_1_EQ1,
           PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_1_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_1_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_1_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_1_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_1_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_1_EQ1,
           PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_1_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_1_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_1_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_1_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_1_EQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_1_EQ1,
           PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_1_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_1_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_1_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_2_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_2_EQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_2_EQ1,
           PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_2_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_2_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_2_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_2_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_2_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_2_EQ1,
           PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_2_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_2_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_2_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_2_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_2_EQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_2_EQ1,
           PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_2_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_2_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_2_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_3_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_3_EQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_3_EQ1,
           PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_3_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_3_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_3_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_3_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_3_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_3_EQ1,
           PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_3_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_3_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_3_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_3_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_3_EQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_3_EQ1,
           PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_3_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_3_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_3_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_4_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_4_EQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_4_EQ1,
           PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_4_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_4_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_4_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_4_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_4_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_4_EQ1,
           PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_4_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_4_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_4_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_4_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_4_EQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_4_EQ1,
           PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_4_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_4_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_4_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_5_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_5_EQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_5_EQ1,
           PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_5_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_5_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_5_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_5_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_5_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_5_EQ1,
           PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_5_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_5_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_5_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_5_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_5_EQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_5_EQ1,
           PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_5_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_5_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_5_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_6_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_6_EQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_6_EQ1,
           PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_6_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_6_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_6_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_6_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_6_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_6_EQ1,
           PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_6_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_6_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_6_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_6_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_6_EQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_6_EQ1,
           PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_6_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_6_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_6_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_7_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_7_EQ1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_7_EQ1,
           PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_7_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_7_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_7_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_7_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_7_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_7_EQ1,
           PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_7_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_7_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_7_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_7_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_7_EQ1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_7_EQ1,
           PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_7_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_7_EQ1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_SP_CMD_RATE_7_EQ1]

//>> PREP_[PB_COM_SCOM_EQ2_STATION_FIR_ACTION0_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ2_STATION_FIR_ACTION0_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ2_STATION_FIR_ACTION0_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ2_STATION_FIR_ACTION0_REG]

//>> GET_[PB_COM_SCOM_EQ2_STATION_FIR_ACTION0_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ2_STATION_FIR_ACTION0_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ2_STATION_FIR_ACTION0_REG;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ2_STATION_FIR_ACTION0_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_FIR_ACTION0_REG]

//>> PUT_[PB_COM_SCOM_EQ2_STATION_FIR_ACTION0_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ2_STATION_FIR_ACTION0_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_FIR_ACTION0_REG));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ2_STATION_FIR_ACTION0_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ2_STATION_FIR_ACTION0_REG]


//>> SET_[PB_COM_SCOM_EQ2_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0,
           PB_COM_SCOM_EQ2_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0]

//>> SET_[PB_COM_SCOM_EQ2_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0,
           PB_COM_SCOM_EQ2_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0]

//>> GET_[PB_COM_SCOM_EQ2_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_FIR_ACTION0_REG));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0,
           PB_COM_SCOM_EQ2_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0]

//>> PREP_[PB_COM_SCOM_EQ2_STATION_FIR_ACTION1_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ2_STATION_FIR_ACTION1_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ2_STATION_FIR_ACTION1_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ2_STATION_FIR_ACTION1_REG]

//>> GET_[PB_COM_SCOM_EQ2_STATION_FIR_ACTION1_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ2_STATION_FIR_ACTION1_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ2_STATION_FIR_ACTION1_REG;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ2_STATION_FIR_ACTION1_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_FIR_ACTION1_REG]

//>> PUT_[PB_COM_SCOM_EQ2_STATION_FIR_ACTION1_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ2_STATION_FIR_ACTION1_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_FIR_ACTION1_REG));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ2_STATION_FIR_ACTION1_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ2_STATION_FIR_ACTION1_REG]


//>> SET_[PB_COM_SCOM_EQ2_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_FIR_ACTION1_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1,
           PB_COM_SCOM_EQ2_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1]

//>> SET_[PB_COM_SCOM_EQ2_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_FIR_ACTION1_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1,
           PB_COM_SCOM_EQ2_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1]

//>> GET_[PB_COM_SCOM_EQ2_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_FIR_ACTION1_REG));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1,
           PB_COM_SCOM_EQ2_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1]

//>> PREP_[PB_COM_SCOM_EQ3_STATION_CR_ERROR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ3_STATION_CR_ERROR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ3_STATION_CR_ERROR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ3_STATION_CR_ERROR]

//>> GET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ3_STATION_CR_ERROR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ3_STATION_CR_ERROR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ3_STATION_CR_ERROR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR]

//>> PUT_[PB_COM_SCOM_EQ3_STATION_CR_ERROR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ3_STATION_CR_ERROR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CR_ERROR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ3_STATION_CR_ERROR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ3_STATION_CR_ERROR]


//>> SET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CR_ERROR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ERROR]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CR_ERROR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ERROR]

//>> GET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ERROR]

//>> GET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ERROR]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CR_ERROR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ADDR_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ADDR_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ADDR_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ADDR_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ADDR_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CR_ERROR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ADDR_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ADDR_ERROR]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CR_ERROR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ADDR_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ADDR_ERROR]

//>> GET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ADDR_ERROR]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ADDR_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ADDR_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ADDR_ERROR]

//>> GET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ADDR_ERROR]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ADDR_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CR_ERROR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ADDR_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ADDR_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_RESP_ADDR_ERROR]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CR_ERROR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CR_ERROR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]

//>> GET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]

//>> GET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CR_ERROR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_ERROR_OTHER]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TTYPE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TTYPE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TTYPE,
           PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TTYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TTYPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TTYPE]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TTYPE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TTYPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TTYPE,
           PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TTYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TTYPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TTYPE]

//>> GET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TTYPE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TTYPE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TTYPE,
           PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TTYPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TTYPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TTYPE]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TSIZE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TSIZE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TSIZE,
           PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TSIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TSIZE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TSIZE]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TSIZE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TSIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TSIZE,
           PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TSIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TSIZE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TSIZE]

//>> GET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TSIZE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TSIZE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TSIZE,
           PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TSIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TSIZE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TSIZE]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TTAG]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TTAG(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TTAG,
           PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TTAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TTAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TTAG]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TTAG]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TTAG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TTAG,
           PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TTAG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TTAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TTAG]

//>> GET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TTAG]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TTAG(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TTAG,
           PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TTAG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TTAG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_TTAG]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_SCOPE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_SCOPE,
           PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_SCOPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_SCOPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_SCOPE]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_SCOPE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_SCOPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_SCOPE,
           PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_SCOPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_SCOPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_SCOPE]

//>> GET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_SCOPE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_SCOPE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_SCOPE,
           PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_SCOPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_SCOPE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_SCOPE]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP,
           PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP,
           PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP]

//>> GET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP,
           PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_CRESP]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_PRESP]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_PRESP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_PRESP,
           PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_PRESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_PRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_PRESP]

//>> SET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_PRESP]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_PRESP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CR_ERROR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_PRESP,
           PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_PRESP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_PRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_PRESP]

//>> GET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_PRESP]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_PRESP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_CR_ERROR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_PRESP,
           PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_PRESP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_PRESP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_CR_ERROR_FG_PRESP]

//>> PREP_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT]

//>> PUT_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT]


//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MASTER_CHIP_NEXT_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_TM_MASTER_NEXT_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_GP_MASTER_NEXT_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_CHG_RATE_SP_MASTER_NEXT_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0,
           PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0,
           PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0,
           PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE0]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_NP_CMD_RATE_NEXT_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_AGGREGATE_NEXT_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_INDIRECT_EN_NEXT_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_G_GATHER_ENABLE_NEXT_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1,
           PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1,
           PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1,
           PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MIN_GP_CMD_RATE_NEXT_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_AGGREGATE_NEXT_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_INDIRECT_EN_NEXT_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ3]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ3]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_R_GATHER_ENABLE_NEXT_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2,
           PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2,
           PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2,
           PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_MIN_SP_CMD_RATE_NEXT_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3,
           PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_HP_MODE1_NEXT_PB_CFG_SPARE3]

//>> PREP_[PB_COM_SCOM_EQ4_STATION_CFG3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ4_STATION_CFG3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ4_STATION_CFG3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ4_STATION_CFG3]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ4_STATION_CFG3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ4_STATION_CFG3;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ4_STATION_CFG3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG3]

//>> PUT_[PB_COM_SCOM_EQ4_STATION_CFG3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ4_STATION_CFG3(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ4_STATION_CFG3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ4_STATION_CFG3]


//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ4,
           PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_CHIP_TSNOOP_DELAY_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_SPARE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_SPARE1,
           PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_SPARE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_SPARE1,
           PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_SPARE1]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_SPARE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_SPARE1,
           PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_SPARE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_DISABLE]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_DISABLE]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_DISABLE]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_DISABLE]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT0_SELCD]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_UNIT1_SELCD]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK0_SELCD]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_PBIASY_LINK1_SELCD]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_SPARE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_SPARE2,
           PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_SPARE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_SPARE2,
           PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_SPARE2]

//>> GET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_SPARE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_CFG3));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_SPARE2,
           PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_SPARE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_CFG3_PB_CFG_SPARE2]

//>> PREP_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR]

//>> PUT_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR]


//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ5]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ5]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_VALID_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_16_AX_NUM_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_17_AX_NUM_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_18_AX_NUM_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_19_AX_NUM_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_20_AX_NUM_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_21_AX_NUM_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_22_AX_NUM_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_23_AX_NUM_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_24_AX_NUM_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_25_AX_NUM_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_26_AX_NUM_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_27_AX_NUM_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_28_AX_NUM_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_29_AX_NUM_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_30_AX_NUM_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ5,
           PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_HP_MODE4_CURR_31_AX_NUM_CURR_EQ5]

//>> PREP_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR]

//>> PUT_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR]


//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ6]

//>> CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ6]
static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ6]

//>> CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ6]
static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ6]

//>> CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ6]
static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ6]

//>> CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ6]
static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ6]

//>> CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ6]
static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ6]

//>> CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ6]
static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ6]

//>> CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ6]
static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ6]

//>> CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ6]
static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ6]

//>> CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ6]
static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ6]

//>> CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ6]
static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ6]

//>> CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ6]
static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ6]

//>> CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ6]
static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ6]

//>> CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ6]
static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ6]

//>> CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ6]
static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ6]

//>> CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ6]
static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ6]

//>> CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ6]
static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_VALID_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_0_AX_NUM_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_1_AX_NUM_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_2_AX_NUM_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_3_AX_NUM_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_4_AX_NUM_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_5_AX_NUM_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_6_AX_NUM_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_7_AX_NUM_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_8_AX_NUM_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_9_AX_NUM_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_10_AX_NUM_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_11_AX_NUM_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_12_AX_NUM_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_13_AX_NUM_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_14_AX_NUM_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_HP_MODE3_CURR_15_AX_NUM_CURR_EQ6]

//>> PREP_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT]

//>> PUT_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT]


//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_EN_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_EN_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_EN_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_EN_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_EN_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_EN_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_EN_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_EN_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ADDR_DIS_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ADDR_DIS_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ADDR_DIS_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ADDR_DIS_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ADDR_DIS_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ADDR_DIS_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ADDR_DIS_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ADDR_DIS_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_MODE_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX0_ID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_MODE_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX1_ID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_MODE_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX2_ID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_MODE_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX3_ID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_MODE_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX4_ID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_MODE_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX5_ID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_MODE_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX6_ID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ7]

//>> CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ7]
static inline bool GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_MODE_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ7(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ7,
           PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_LINK_AX7_ID_NEXT_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_SPARE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_SPARE,
           PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_SPARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_SPARE]

//>> SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_SPARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_SPARE,
           PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_SPARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_SPARE]

//>> GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_SPARE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_SPARE,
           PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_SPARE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_SPARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_HP_MODE2_NEXT_PB_CFG_SPARE]

//>> PREP_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE]

//>> GET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE]

//>> PUT_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE]


//>> SET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_0_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_0_EQ7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_0_EQ7,
           PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_0_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_0_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_0_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_0_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_0_EQ7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_0_EQ7,
           PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_0_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_0_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_0_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_0_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_0_EQ7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_0_EQ7,
           PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_0_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_0_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_0_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_1_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_1_EQ7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_1_EQ7,
           PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_1_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_1_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_1_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_1_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_1_EQ7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_1_EQ7,
           PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_1_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_1_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_1_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_1_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_1_EQ7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_1_EQ7,
           PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_1_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_1_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_1_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_2_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_2_EQ7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_2_EQ7,
           PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_2_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_2_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_2_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_2_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_2_EQ7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_2_EQ7,
           PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_2_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_2_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_2_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_2_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_2_EQ7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_2_EQ7,
           PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_2_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_2_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_2_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_3_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_3_EQ7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_3_EQ7,
           PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_3_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_3_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_3_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_3_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_3_EQ7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_3_EQ7,
           PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_3_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_3_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_3_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_3_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_3_EQ7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_3_EQ7,
           PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_3_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_3_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_3_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_4_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_4_EQ7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_4_EQ7,
           PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_4_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_4_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_4_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_4_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_4_EQ7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_4_EQ7,
           PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_4_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_4_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_4_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_4_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_4_EQ7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_4_EQ7,
           PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_4_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_4_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_4_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_5_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_5_EQ7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_5_EQ7,
           PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_5_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_5_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_5_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_5_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_5_EQ7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_5_EQ7,
           PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_5_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_5_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_5_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_5_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_5_EQ7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_5_EQ7,
           PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_5_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_5_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_5_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_6_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_6_EQ7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_6_EQ7,
           PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_6_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_6_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_6_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_6_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_6_EQ7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_6_EQ7,
           PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_6_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_6_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_6_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_6_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_6_EQ7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_6_EQ7,
           PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_6_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_6_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_6_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_7_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_7_EQ7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_7_EQ7,
           PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_7_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_7_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_7_EQ7]

//>> SET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_7_EQ7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_7_EQ7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_7_EQ7,
           PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_7_EQ7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_7_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_7_EQ7]

//>> GET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_7_EQ7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_7_EQ7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_7_EQ7,
           PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_7_EQ7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_7_EQ7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ7_STATION_SP_CMD_RATE_7_EQ7]


//>>THE END<<

#ifndef __PPE_HCODE__
}
}

#endif
#endif
