/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: src/import/chips/p10/common/include/proc/reg00015.H $         */
/*                                                                        */
/* OpenPOWER sbe Project                                                  */
/*                                                                        */
/* Contributors Listed Below - COPYRIGHT 2019,2020                        */
/* [+] International Business Machines Corp.                              */
/*                                                                        */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */
#include "fapi2.H"

#ifndef __PROC_REG00015_H_
#define __PROC_REG00015_H_

#ifndef __PPE_HCODE__
namespace scomt
{
namespace proc
{
#endif


//>> PREP_[INT_CQ_EQP_SPACE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_CQ_EQP_SPACE(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_EQP_SPACE;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_CQ_EQP_SPACE]

//>> GET_[INT_CQ_EQP_SPACE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_CQ_EQP_SPACE(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_EQP_SPACE;
#endif
    return fapi2::getScom(i_target, INT_CQ_EQP_SPACE, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_CQ_EQP_SPACE]

//>> PUT_[INT_CQ_EQP_SPACE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_CQ_EQP_SPACE(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return fapi2::putScom(i_target, INT_CQ_EQP_SPACE, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_CQ_EQP_SPACE]


//>> SET_[INT_CQ_EQP_SPACE_DISABLE_L3_LOCAL]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_EQP_SPACE_DISABLE_L3_LOCAL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return o_data.insertFromRight<INT_CQ_EQP_SPACE_DISABLE_L3_LOCAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_EQP_SPACE_DISABLE_L3_LOCAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_EQP_SPACE_DISABLE_L3_LOCAL]

//>> SET_[INT_CQ_EQP_SPACE_DISABLE_L3_LOCAL]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_EQP_SPACE_DISABLE_L3_LOCAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return o_data.insertFromRight<INT_CQ_EQP_SPACE_DISABLE_L3_LOCAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_EQP_SPACE_DISABLE_L3_LOCAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_EQP_SPACE_DISABLE_L3_LOCAL]

//>> SET_[INT_CQ_EQP_SPACE_DISABLE_L3_LOCAL]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_EQP_SPACE_DISABLE_L3_LOCAL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return o_data.setBit<INT_CQ_EQP_SPACE_DISABLE_L3_LOCAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_EQP_SPACE_DISABLE_L3_LOCAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_EQP_SPACE_DISABLE_L3_LOCAL]

//>> CLEAR_[INT_CQ_EQP_SPACE_DISABLE_L3_LOCAL]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_EQP_SPACE_DISABLE_L3_LOCAL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return o_data.clearBit<INT_CQ_EQP_SPACE_DISABLE_L3_LOCAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_EQP_SPACE_DISABLE_L3_LOCAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_EQP_SPACE_DISABLE_L3_LOCAL]

//>> GET_[INT_CQ_EQP_SPACE_DISABLE_L3_LOCAL]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_EQP_SPACE_DISABLE_L3_LOCAL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return i_data.extractToRight<INT_CQ_EQP_SPACE_DISABLE_L3_LOCAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_EQP_SPACE_DISABLE_L3_LOCAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_EQP_SPACE_DISABLE_L3_LOCAL]

//>> GET_[INT_CQ_EQP_SPACE_DISABLE_L3_LOCAL]
static inline bool GET_INT_CQ_EQP_SPACE_DISABLE_L3_LOCAL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return i_data.getBit<INT_CQ_EQP_SPACE_DISABLE_L3_LOCAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_EQP_SPACE_DISABLE_L3_LOCAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_EQP_SPACE_DISABLE_L3_LOCAL]

//>> SET_[INT_CQ_EQP_SPACE_DISABLE_L3_GROUP]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_EQP_SPACE_DISABLE_L3_GROUP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return o_data.insertFromRight<INT_CQ_EQP_SPACE_DISABLE_L3_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_EQP_SPACE_DISABLE_L3_GROUP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_EQP_SPACE_DISABLE_L3_GROUP]

//>> SET_[INT_CQ_EQP_SPACE_DISABLE_L3_GROUP]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_EQP_SPACE_DISABLE_L3_GROUP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return o_data.insertFromRight<INT_CQ_EQP_SPACE_DISABLE_L3_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_EQP_SPACE_DISABLE_L3_GROUP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_EQP_SPACE_DISABLE_L3_GROUP]

//>> SET_[INT_CQ_EQP_SPACE_DISABLE_L3_GROUP]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_EQP_SPACE_DISABLE_L3_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return o_data.setBit<INT_CQ_EQP_SPACE_DISABLE_L3_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_EQP_SPACE_DISABLE_L3_GROUP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_EQP_SPACE_DISABLE_L3_GROUP]

//>> CLEAR_[INT_CQ_EQP_SPACE_DISABLE_L3_GROUP]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_EQP_SPACE_DISABLE_L3_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return o_data.clearBit<INT_CQ_EQP_SPACE_DISABLE_L3_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_EQP_SPACE_DISABLE_L3_GROUP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_EQP_SPACE_DISABLE_L3_GROUP]

//>> GET_[INT_CQ_EQP_SPACE_DISABLE_L3_GROUP]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_EQP_SPACE_DISABLE_L3_GROUP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return i_data.extractToRight<INT_CQ_EQP_SPACE_DISABLE_L3_GROUP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_EQP_SPACE_DISABLE_L3_GROUP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_EQP_SPACE_DISABLE_L3_GROUP]

//>> GET_[INT_CQ_EQP_SPACE_DISABLE_L3_GROUP]
static inline bool GET_INT_CQ_EQP_SPACE_DISABLE_L3_GROUP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return i_data.getBit<INT_CQ_EQP_SPACE_DISABLE_L3_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_EQP_SPACE_DISABLE_L3_GROUP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_EQP_SPACE_DISABLE_L3_GROUP]

//>> SET_[INT_CQ_EQP_SPACE_DISABLE_L3_VG]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_EQP_SPACE_DISABLE_L3_VG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return o_data.insertFromRight<INT_CQ_EQP_SPACE_DISABLE_L3_VG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_EQP_SPACE_DISABLE_L3_VG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_EQP_SPACE_DISABLE_L3_VG]

//>> SET_[INT_CQ_EQP_SPACE_DISABLE_L3_VG]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_EQP_SPACE_DISABLE_L3_VG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return o_data.insertFromRight<INT_CQ_EQP_SPACE_DISABLE_L3_VG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_EQP_SPACE_DISABLE_L3_VG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_EQP_SPACE_DISABLE_L3_VG]

//>> SET_[INT_CQ_EQP_SPACE_DISABLE_L3_VG]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_EQP_SPACE_DISABLE_L3_VG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return o_data.setBit<INT_CQ_EQP_SPACE_DISABLE_L3_VG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_EQP_SPACE_DISABLE_L3_VG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_EQP_SPACE_DISABLE_L3_VG]

//>> CLEAR_[INT_CQ_EQP_SPACE_DISABLE_L3_VG]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_EQP_SPACE_DISABLE_L3_VG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return o_data.clearBit<INT_CQ_EQP_SPACE_DISABLE_L3_VG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_EQP_SPACE_DISABLE_L3_VG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_EQP_SPACE_DISABLE_L3_VG]

//>> GET_[INT_CQ_EQP_SPACE_DISABLE_L3_VG]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_EQP_SPACE_DISABLE_L3_VG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return i_data.extractToRight<INT_CQ_EQP_SPACE_DISABLE_L3_VG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_EQP_SPACE_DISABLE_L3_VG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_EQP_SPACE_DISABLE_L3_VG]

//>> GET_[INT_CQ_EQP_SPACE_DISABLE_L3_VG]
static inline bool GET_INT_CQ_EQP_SPACE_DISABLE_L3_VG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return i_data.getBit<INT_CQ_EQP_SPACE_DISABLE_L3_VG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_EQP_SPACE_DISABLE_L3_VG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_EQP_SPACE_DISABLE_L3_VG]

//>> SET_[INT_CQ_EQP_SPACE_DISABLE_MEM_LOCAL]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_EQP_SPACE_DISABLE_MEM_LOCAL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return o_data.insertFromRight<INT_CQ_EQP_SPACE_DISABLE_MEM_LOCAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_EQP_SPACE_DISABLE_MEM_LOCAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_EQP_SPACE_DISABLE_MEM_LOCAL]

//>> SET_[INT_CQ_EQP_SPACE_DISABLE_MEM_LOCAL]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_EQP_SPACE_DISABLE_MEM_LOCAL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return o_data.insertFromRight<INT_CQ_EQP_SPACE_DISABLE_MEM_LOCAL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_EQP_SPACE_DISABLE_MEM_LOCAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_EQP_SPACE_DISABLE_MEM_LOCAL]

//>> SET_[INT_CQ_EQP_SPACE_DISABLE_MEM_LOCAL]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_EQP_SPACE_DISABLE_MEM_LOCAL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return o_data.setBit<INT_CQ_EQP_SPACE_DISABLE_MEM_LOCAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_EQP_SPACE_DISABLE_MEM_LOCAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_EQP_SPACE_DISABLE_MEM_LOCAL]

//>> CLEAR_[INT_CQ_EQP_SPACE_DISABLE_MEM_LOCAL]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_EQP_SPACE_DISABLE_MEM_LOCAL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return o_data.clearBit<INT_CQ_EQP_SPACE_DISABLE_MEM_LOCAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_EQP_SPACE_DISABLE_MEM_LOCAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_EQP_SPACE_DISABLE_MEM_LOCAL]

//>> GET_[INT_CQ_EQP_SPACE_DISABLE_MEM_LOCAL]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_EQP_SPACE_DISABLE_MEM_LOCAL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return i_data.extractToRight<INT_CQ_EQP_SPACE_DISABLE_MEM_LOCAL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_EQP_SPACE_DISABLE_MEM_LOCAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_EQP_SPACE_DISABLE_MEM_LOCAL]

//>> GET_[INT_CQ_EQP_SPACE_DISABLE_MEM_LOCAL]
static inline bool GET_INT_CQ_EQP_SPACE_DISABLE_MEM_LOCAL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return i_data.getBit<INT_CQ_EQP_SPACE_DISABLE_MEM_LOCAL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_EQP_SPACE_DISABLE_MEM_LOCAL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_EQP_SPACE_DISABLE_MEM_LOCAL]

//>> SET_[INT_CQ_EQP_SPACE_DISABLE_MEM_GROUP]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_EQP_SPACE_DISABLE_MEM_GROUP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return o_data.insertFromRight<INT_CQ_EQP_SPACE_DISABLE_MEM_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_EQP_SPACE_DISABLE_MEM_GROUP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_EQP_SPACE_DISABLE_MEM_GROUP]

//>> SET_[INT_CQ_EQP_SPACE_DISABLE_MEM_GROUP]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_EQP_SPACE_DISABLE_MEM_GROUP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return o_data.insertFromRight<INT_CQ_EQP_SPACE_DISABLE_MEM_GROUP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_EQP_SPACE_DISABLE_MEM_GROUP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_EQP_SPACE_DISABLE_MEM_GROUP]

//>> SET_[INT_CQ_EQP_SPACE_DISABLE_MEM_GROUP]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_EQP_SPACE_DISABLE_MEM_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return o_data.setBit<INT_CQ_EQP_SPACE_DISABLE_MEM_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_EQP_SPACE_DISABLE_MEM_GROUP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_EQP_SPACE_DISABLE_MEM_GROUP]

//>> CLEAR_[INT_CQ_EQP_SPACE_DISABLE_MEM_GROUP]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_EQP_SPACE_DISABLE_MEM_GROUP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return o_data.clearBit<INT_CQ_EQP_SPACE_DISABLE_MEM_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_EQP_SPACE_DISABLE_MEM_GROUP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_EQP_SPACE_DISABLE_MEM_GROUP]

//>> GET_[INT_CQ_EQP_SPACE_DISABLE_MEM_GROUP]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_EQP_SPACE_DISABLE_MEM_GROUP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return i_data.extractToRight<INT_CQ_EQP_SPACE_DISABLE_MEM_GROUP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_EQP_SPACE_DISABLE_MEM_GROUP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_EQP_SPACE_DISABLE_MEM_GROUP]

//>> GET_[INT_CQ_EQP_SPACE_DISABLE_MEM_GROUP]
static inline bool GET_INT_CQ_EQP_SPACE_DISABLE_MEM_GROUP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return i_data.getBit<INT_CQ_EQP_SPACE_DISABLE_MEM_GROUP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_EQP_SPACE_DISABLE_MEM_GROUP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_EQP_SPACE_DISABLE_MEM_GROUP]

//>> SET_[INT_CQ_EQP_SPACE_DISABLE_MEM_VG]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_EQP_SPACE_DISABLE_MEM_VG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return o_data.insertFromRight<INT_CQ_EQP_SPACE_DISABLE_MEM_VG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_EQP_SPACE_DISABLE_MEM_VG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_EQP_SPACE_DISABLE_MEM_VG]

//>> SET_[INT_CQ_EQP_SPACE_DISABLE_MEM_VG]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_EQP_SPACE_DISABLE_MEM_VG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return o_data.insertFromRight<INT_CQ_EQP_SPACE_DISABLE_MEM_VG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_EQP_SPACE_DISABLE_MEM_VG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_EQP_SPACE_DISABLE_MEM_VG]

//>> SET_[INT_CQ_EQP_SPACE_DISABLE_MEM_VG]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_EQP_SPACE_DISABLE_MEM_VG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return o_data.setBit<INT_CQ_EQP_SPACE_DISABLE_MEM_VG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_EQP_SPACE_DISABLE_MEM_VG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_EQP_SPACE_DISABLE_MEM_VG]

//>> CLEAR_[INT_CQ_EQP_SPACE_DISABLE_MEM_VG]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_EQP_SPACE_DISABLE_MEM_VG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return o_data.clearBit<INT_CQ_EQP_SPACE_DISABLE_MEM_VG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_EQP_SPACE_DISABLE_MEM_VG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_EQP_SPACE_DISABLE_MEM_VG]

//>> GET_[INT_CQ_EQP_SPACE_DISABLE_MEM_VG]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_EQP_SPACE_DISABLE_MEM_VG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return i_data.extractToRight<INT_CQ_EQP_SPACE_DISABLE_MEM_VG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_EQP_SPACE_DISABLE_MEM_VG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_EQP_SPACE_DISABLE_MEM_VG]

//>> GET_[INT_CQ_EQP_SPACE_DISABLE_MEM_VG]
static inline bool GET_INT_CQ_EQP_SPACE_DISABLE_MEM_VG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return i_data.getBit<INT_CQ_EQP_SPACE_DISABLE_MEM_VG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_EQP_SPACE_DISABLE_MEM_VG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_EQP_SPACE_DISABLE_MEM_VG]

//>> SET_[INT_CQ_EQP_SPACE_INC_BY_TWO_0_3]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_EQP_SPACE_INC_BY_TWO_0_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return o_data.insertFromRight<INT_CQ_EQP_SPACE_INC_BY_TWO_0_3,
           INT_CQ_EQP_SPACE_INC_BY_TWO_0_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_EQP_SPACE_INC_BY_TWO_0_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_EQP_SPACE_INC_BY_TWO_0_3]

//>> SET_[INT_CQ_EQP_SPACE_INC_BY_TWO_0_3]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_EQP_SPACE_INC_BY_TWO_0_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return o_data.insertFromRight<INT_CQ_EQP_SPACE_INC_BY_TWO_0_3,
           INT_CQ_EQP_SPACE_INC_BY_TWO_0_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_EQP_SPACE_INC_BY_TWO_0_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_EQP_SPACE_INC_BY_TWO_0_3]

//>> GET_[INT_CQ_EQP_SPACE_INC_BY_TWO_0_3]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_EQP_SPACE_INC_BY_TWO_0_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return i_data.extractToRight<INT_CQ_EQP_SPACE_INC_BY_TWO_0_3,
           INT_CQ_EQP_SPACE_INC_BY_TWO_0_3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_EQP_SPACE_INC_BY_TWO_0_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_EQP_SPACE_INC_BY_TWO_0_3]

//>> SET_[INT_CQ_EQP_SPACE_INC_BY_ONE_0_3]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_EQP_SPACE_INC_BY_ONE_0_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return o_data.insertFromRight<INT_CQ_EQP_SPACE_INC_BY_ONE_0_3,
           INT_CQ_EQP_SPACE_INC_BY_ONE_0_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_EQP_SPACE_INC_BY_ONE_0_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_EQP_SPACE_INC_BY_ONE_0_3]

//>> SET_[INT_CQ_EQP_SPACE_INC_BY_ONE_0_3]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_EQP_SPACE_INC_BY_ONE_0_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return o_data.insertFromRight<INT_CQ_EQP_SPACE_INC_BY_ONE_0_3,
           INT_CQ_EQP_SPACE_INC_BY_ONE_0_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_EQP_SPACE_INC_BY_ONE_0_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_EQP_SPACE_INC_BY_ONE_0_3]

//>> GET_[INT_CQ_EQP_SPACE_INC_BY_ONE_0_3]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_EQP_SPACE_INC_BY_ONE_0_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return i_data.extractToRight<INT_CQ_EQP_SPACE_INC_BY_ONE_0_3,
           INT_CQ_EQP_SPACE_INC_BY_ONE_0_3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_EQP_SPACE_INC_BY_ONE_0_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_EQP_SPACE_INC_BY_ONE_0_3]

//>> SET_[INT_CQ_EQP_SPACE_DEC_BY_ONE_0_3]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_EQP_SPACE_DEC_BY_ONE_0_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return o_data.insertFromRight<INT_CQ_EQP_SPACE_DEC_BY_ONE_0_3,
           INT_CQ_EQP_SPACE_DEC_BY_ONE_0_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_EQP_SPACE_DEC_BY_ONE_0_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_EQP_SPACE_DEC_BY_ONE_0_3]

//>> SET_[INT_CQ_EQP_SPACE_DEC_BY_ONE_0_3]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_EQP_SPACE_DEC_BY_ONE_0_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return o_data.insertFromRight<INT_CQ_EQP_SPACE_DEC_BY_ONE_0_3,
           INT_CQ_EQP_SPACE_DEC_BY_ONE_0_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_EQP_SPACE_DEC_BY_ONE_0_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_EQP_SPACE_DEC_BY_ONE_0_3]

//>> GET_[INT_CQ_EQP_SPACE_DEC_BY_ONE_0_3]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_EQP_SPACE_DEC_BY_ONE_0_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_EQP_SPACE));
#endif
    return i_data.extractToRight<INT_CQ_EQP_SPACE_DEC_BY_ONE_0_3,
           INT_CQ_EQP_SPACE_DEC_BY_ONE_0_3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_EQP_SPACE_DEC_BY_ONE_0_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_EQP_SPACE_DEC_BY_ONE_0_3]

//>> PREP_[INT_CQ_NVPG_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_CQ_NVPG_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_NVPG_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_CQ_NVPG_BAR]

//>> GET_[INT_CQ_NVPG_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_CQ_NVPG_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_NVPG_BAR;
#endif
    return fapi2::getScom(i_target, INT_CQ_NVPG_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_CQ_NVPG_BAR]

//>> PUT_[INT_CQ_NVPG_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_CQ_NVPG_BAR(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_CQ_NVPG_BAR));
#endif
    return fapi2::putScom(i_target, INT_CQ_NVPG_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_CQ_NVPG_BAR]


//>> SET_[INT_CQ_NVPG_BAR_VALID]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_NVPG_BAR_VALID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_NVPG_BAR));
#endif
    return o_data.insertFromRight<INT_CQ_NVPG_BAR_VALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_NVPG_BAR_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_NVPG_BAR_VALID]

//>> SET_[INT_CQ_NVPG_BAR_VALID]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_NVPG_BAR_VALID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_NVPG_BAR));
#endif
    return o_data.insertFromRight<INT_CQ_NVPG_BAR_VALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_NVPG_BAR_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_NVPG_BAR_VALID]

//>> SET_[INT_CQ_NVPG_BAR_VALID]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_NVPG_BAR_VALID(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_NVPG_BAR));
#endif
    return o_data.setBit<INT_CQ_NVPG_BAR_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_NVPG_BAR_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_NVPG_BAR_VALID]

//>> CLEAR_[INT_CQ_NVPG_BAR_VALID]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_NVPG_BAR_VALID(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_NVPG_BAR));
#endif
    return o_data.clearBit<INT_CQ_NVPG_BAR_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_NVPG_BAR_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_NVPG_BAR_VALID]

//>> GET_[INT_CQ_NVPG_BAR_VALID]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_NVPG_BAR_VALID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_NVPG_BAR));
#endif
    return i_data.extractToRight<INT_CQ_NVPG_BAR_VALID,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_NVPG_BAR_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_NVPG_BAR_VALID]

//>> GET_[INT_CQ_NVPG_BAR_VALID]
static inline bool GET_INT_CQ_NVPG_BAR_VALID(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_NVPG_BAR));
#endif
    return i_data.getBit<INT_CQ_NVPG_BAR_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_NVPG_BAR_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_NVPG_BAR_VALID]

//>> SET_[INT_CQ_NVPG_BAR_PAGE_SIZE_64K]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_NVPG_BAR_PAGE_SIZE_64K(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_NVPG_BAR));
#endif
    return o_data.insertFromRight<INT_CQ_NVPG_BAR_PAGE_SIZE_64K,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_NVPG_BAR_PAGE_SIZE_64K chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_NVPG_BAR_PAGE_SIZE_64K]

//>> SET_[INT_CQ_NVPG_BAR_PAGE_SIZE_64K]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_NVPG_BAR_PAGE_SIZE_64K(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_NVPG_BAR));
#endif
    return o_data.insertFromRight<INT_CQ_NVPG_BAR_PAGE_SIZE_64K,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_NVPG_BAR_PAGE_SIZE_64K chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_NVPG_BAR_PAGE_SIZE_64K]

//>> SET_[INT_CQ_NVPG_BAR_PAGE_SIZE_64K]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_NVPG_BAR_PAGE_SIZE_64K(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_NVPG_BAR));
#endif
    return o_data.setBit<INT_CQ_NVPG_BAR_PAGE_SIZE_64K>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_NVPG_BAR_PAGE_SIZE_64K chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_NVPG_BAR_PAGE_SIZE_64K]

//>> CLEAR_[INT_CQ_NVPG_BAR_PAGE_SIZE_64K]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_NVPG_BAR_PAGE_SIZE_64K(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_NVPG_BAR));
#endif
    return o_data.clearBit<INT_CQ_NVPG_BAR_PAGE_SIZE_64K>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_NVPG_BAR_PAGE_SIZE_64K chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_NVPG_BAR_PAGE_SIZE_64K]

//>> GET_[INT_CQ_NVPG_BAR_PAGE_SIZE_64K]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_NVPG_BAR_PAGE_SIZE_64K(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_NVPG_BAR));
#endif
    return i_data.extractToRight<INT_CQ_NVPG_BAR_PAGE_SIZE_64K,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_NVPG_BAR_PAGE_SIZE_64K chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_NVPG_BAR_PAGE_SIZE_64K]

//>> GET_[INT_CQ_NVPG_BAR_PAGE_SIZE_64K]
static inline bool GET_INT_CQ_NVPG_BAR_PAGE_SIZE_64K(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_NVPG_BAR));
#endif
    return i_data.getBit<INT_CQ_NVPG_BAR_PAGE_SIZE_64K>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_NVPG_BAR_PAGE_SIZE_64K chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_NVPG_BAR_PAGE_SIZE_64K]

//>> SET_[INT_CQ_NVPG_BAR_ADDR_8_39]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_NVPG_BAR_ADDR_8_39(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_NVPG_BAR));
#endif
    return o_data.insertFromRight<INT_CQ_NVPG_BAR_ADDR_8_39,
           INT_CQ_NVPG_BAR_ADDR_8_39_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_NVPG_BAR_ADDR_8_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_NVPG_BAR_ADDR_8_39]

//>> SET_[INT_CQ_NVPG_BAR_ADDR_8_39]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_NVPG_BAR_ADDR_8_39(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_NVPG_BAR));
#endif
    return o_data.insertFromRight<INT_CQ_NVPG_BAR_ADDR_8_39,
           INT_CQ_NVPG_BAR_ADDR_8_39_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_NVPG_BAR_ADDR_8_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_NVPG_BAR_ADDR_8_39]

//>> GET_[INT_CQ_NVPG_BAR_ADDR_8_39]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_NVPG_BAR_ADDR_8_39(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_NVPG_BAR));
#endif
    return i_data.extractToRight<INT_CQ_NVPG_BAR_ADDR_8_39,
           INT_CQ_NVPG_BAR_ADDR_8_39_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_NVPG_BAR_ADDR_8_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_NVPG_BAR_ADDR_8_39]

//>> SET_[INT_CQ_NVPG_BAR_SET_DIV_SEL_0_2]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_NVPG_BAR_SET_DIV_SEL_0_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_NVPG_BAR));
#endif
    return o_data.insertFromRight<INT_CQ_NVPG_BAR_SET_DIV_SEL_0_2,
           INT_CQ_NVPG_BAR_SET_DIV_SEL_0_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_NVPG_BAR_SET_DIV_SEL_0_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_NVPG_BAR_SET_DIV_SEL_0_2]

//>> SET_[INT_CQ_NVPG_BAR_SET_DIV_SEL_0_2]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_NVPG_BAR_SET_DIV_SEL_0_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_NVPG_BAR));
#endif
    return o_data.insertFromRight<INT_CQ_NVPG_BAR_SET_DIV_SEL_0_2,
           INT_CQ_NVPG_BAR_SET_DIV_SEL_0_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_NVPG_BAR_SET_DIV_SEL_0_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_NVPG_BAR_SET_DIV_SEL_0_2]

//>> GET_[INT_CQ_NVPG_BAR_SET_DIV_SEL_0_2]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_NVPG_BAR_SET_DIV_SEL_0_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_NVPG_BAR));
#endif
    return i_data.extractToRight<INT_CQ_NVPG_BAR_SET_DIV_SEL_0_2,
           INT_CQ_NVPG_BAR_SET_DIV_SEL_0_2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_NVPG_BAR_SET_DIV_SEL_0_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_NVPG_BAR_SET_DIV_SEL_0_2]

//>> SET_[INT_CQ_NVPG_BAR_RANGE_0_4]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_NVPG_BAR_RANGE_0_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_NVPG_BAR));
#endif
    return o_data.insertFromRight<INT_CQ_NVPG_BAR_RANGE_0_4,
           INT_CQ_NVPG_BAR_RANGE_0_4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_NVPG_BAR_RANGE_0_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_NVPG_BAR_RANGE_0_4]

//>> SET_[INT_CQ_NVPG_BAR_RANGE_0_4]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_NVPG_BAR_RANGE_0_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_NVPG_BAR));
#endif
    return o_data.insertFromRight<INT_CQ_NVPG_BAR_RANGE_0_4,
           INT_CQ_NVPG_BAR_RANGE_0_4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_NVPG_BAR_RANGE_0_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_NVPG_BAR_RANGE_0_4]

//>> GET_[INT_CQ_NVPG_BAR_RANGE_0_4]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_NVPG_BAR_RANGE_0_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_NVPG_BAR));
#endif
    return i_data.extractToRight<INT_CQ_NVPG_BAR_RANGE_0_4,
           INT_CQ_NVPG_BAR_RANGE_0_4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_NVPG_BAR_RANGE_0_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_NVPG_BAR_RANGE_0_4]

//>> PREP_[INT_CQ_RST_CTL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_CQ_RST_CTL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_RST_CTL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_CQ_RST_CTL]

//>> GET_[INT_CQ_RST_CTL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_CQ_RST_CTL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_RST_CTL;
#endif
    return fapi2::getScom(i_target, INT_CQ_RST_CTL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_CQ_RST_CTL]

//>> PUT_[INT_CQ_RST_CTL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_CQ_RST_CTL(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_CQ_RST_CTL));
#endif
    return fapi2::putScom(i_target, INT_CQ_RST_CTL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_CQ_RST_CTL]


//>> SET_[INT_CQ_RST_CTL_SYNC_RESET]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_RST_CTL_SYNC_RESET(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_RST_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_RST_CTL_SYNC_RESET,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_RST_CTL_SYNC_RESET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_RST_CTL_SYNC_RESET]

//>> SET_[INT_CQ_RST_CTL_SYNC_RESET]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_RST_CTL_SYNC_RESET(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_RST_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_RST_CTL_SYNC_RESET,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_RST_CTL_SYNC_RESET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_RST_CTL_SYNC_RESET]

//>> SET_[INT_CQ_RST_CTL_SYNC_RESET]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_RST_CTL_SYNC_RESET(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_RST_CTL));
#endif
    return o_data.setBit<INT_CQ_RST_CTL_SYNC_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_RST_CTL_SYNC_RESET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_RST_CTL_SYNC_RESET]

//>> CLEAR_[INT_CQ_RST_CTL_SYNC_RESET]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_RST_CTL_SYNC_RESET(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_RST_CTL));
#endif
    return o_data.clearBit<INT_CQ_RST_CTL_SYNC_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_RST_CTL_SYNC_RESET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_RST_CTL_SYNC_RESET]

//>> GET_[INT_CQ_RST_CTL_SYNC_RESET]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_RST_CTL_SYNC_RESET(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_RST_CTL));
#endif
    return i_data.extractToRight<INT_CQ_RST_CTL_SYNC_RESET,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_RST_CTL_SYNC_RESET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_RST_CTL_SYNC_RESET]

//>> GET_[INT_CQ_RST_CTL_SYNC_RESET]
static inline bool GET_INT_CQ_RST_CTL_SYNC_RESET(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_RST_CTL));
#endif
    return i_data.getBit<INT_CQ_RST_CTL_SYNC_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_RST_CTL_SYNC_RESET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_RST_CTL_SYNC_RESET]

//>> SET_[INT_CQ_RST_CTL_QUIESCE_PB]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_RST_CTL_QUIESCE_PB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_RST_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_RST_CTL_QUIESCE_PB,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_RST_CTL_QUIESCE_PB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_RST_CTL_QUIESCE_PB]

//>> SET_[INT_CQ_RST_CTL_QUIESCE_PB]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_RST_CTL_QUIESCE_PB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_RST_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_RST_CTL_QUIESCE_PB,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_RST_CTL_QUIESCE_PB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_RST_CTL_QUIESCE_PB]

//>> SET_[INT_CQ_RST_CTL_QUIESCE_PB]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_RST_CTL_QUIESCE_PB(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_RST_CTL));
#endif
    return o_data.setBit<INT_CQ_RST_CTL_QUIESCE_PB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_RST_CTL_QUIESCE_PB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_RST_CTL_QUIESCE_PB]

//>> CLEAR_[INT_CQ_RST_CTL_QUIESCE_PB]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_RST_CTL_QUIESCE_PB(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_RST_CTL));
#endif
    return o_data.clearBit<INT_CQ_RST_CTL_QUIESCE_PB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_RST_CTL_QUIESCE_PB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_RST_CTL_QUIESCE_PB]

//>> GET_[INT_CQ_RST_CTL_QUIESCE_PB]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_RST_CTL_QUIESCE_PB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_RST_CTL));
#endif
    return i_data.extractToRight<INT_CQ_RST_CTL_QUIESCE_PB,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_RST_CTL_QUIESCE_PB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_RST_CTL_QUIESCE_PB]

//>> GET_[INT_CQ_RST_CTL_QUIESCE_PB]
static inline bool GET_INT_CQ_RST_CTL_QUIESCE_PB(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_RST_CTL));
#endif
    return i_data.getBit<INT_CQ_RST_CTL_QUIESCE_PB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_RST_CTL_QUIESCE_PB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_RST_CTL_QUIESCE_PB]

//>> SET_[INT_CQ_RST_CTL_MASTER_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_RST_CTL_MASTER_IDLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_RST_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_RST_CTL_MASTER_IDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_RST_CTL_MASTER_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_RST_CTL_MASTER_IDLE]

//>> SET_[INT_CQ_RST_CTL_MASTER_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_RST_CTL_MASTER_IDLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_RST_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_RST_CTL_MASTER_IDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_RST_CTL_MASTER_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_RST_CTL_MASTER_IDLE]

//>> SET_[INT_CQ_RST_CTL_MASTER_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_RST_CTL_MASTER_IDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_RST_CTL));
#endif
    return o_data.setBit<INT_CQ_RST_CTL_MASTER_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_RST_CTL_MASTER_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_RST_CTL_MASTER_IDLE]

//>> CLEAR_[INT_CQ_RST_CTL_MASTER_IDLE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_RST_CTL_MASTER_IDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_RST_CTL));
#endif
    return o_data.clearBit<INT_CQ_RST_CTL_MASTER_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_RST_CTL_MASTER_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_RST_CTL_MASTER_IDLE]

//>> GET_[INT_CQ_RST_CTL_MASTER_IDLE]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_RST_CTL_MASTER_IDLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_RST_CTL));
#endif
    return i_data.extractToRight<INT_CQ_RST_CTL_MASTER_IDLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_RST_CTL_MASTER_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_RST_CTL_MASTER_IDLE]

//>> GET_[INT_CQ_RST_CTL_MASTER_IDLE]
static inline bool GET_INT_CQ_RST_CTL_MASTER_IDLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_RST_CTL));
#endif
    return i_data.getBit<INT_CQ_RST_CTL_MASTER_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_RST_CTL_MASTER_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_RST_CTL_MASTER_IDLE]

//>> SET_[INT_CQ_RST_CTL_SLAVE_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_RST_CTL_SLAVE_IDLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_RST_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_RST_CTL_SLAVE_IDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_RST_CTL_SLAVE_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_RST_CTL_SLAVE_IDLE]

//>> SET_[INT_CQ_RST_CTL_SLAVE_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_RST_CTL_SLAVE_IDLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_RST_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_RST_CTL_SLAVE_IDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_RST_CTL_SLAVE_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_RST_CTL_SLAVE_IDLE]

//>> SET_[INT_CQ_RST_CTL_SLAVE_IDLE]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_RST_CTL_SLAVE_IDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_RST_CTL));
#endif
    return o_data.setBit<INT_CQ_RST_CTL_SLAVE_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_RST_CTL_SLAVE_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_RST_CTL_SLAVE_IDLE]

//>> CLEAR_[INT_CQ_RST_CTL_SLAVE_IDLE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_RST_CTL_SLAVE_IDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_RST_CTL));
#endif
    return o_data.clearBit<INT_CQ_RST_CTL_SLAVE_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_RST_CTL_SLAVE_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_RST_CTL_SLAVE_IDLE]

//>> GET_[INT_CQ_RST_CTL_SLAVE_IDLE]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_RST_CTL_SLAVE_IDLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_RST_CTL));
#endif
    return i_data.extractToRight<INT_CQ_RST_CTL_SLAVE_IDLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_RST_CTL_SLAVE_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_RST_CTL_SLAVE_IDLE]

//>> GET_[INT_CQ_RST_CTL_SLAVE_IDLE]
static inline bool GET_INT_CQ_RST_CTL_SLAVE_IDLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_RST_CTL));
#endif
    return i_data.getBit<INT_CQ_RST_CTL_SLAVE_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_RST_CTL_SLAVE_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_RST_CTL_SLAVE_IDLE]

//>> SET_[INT_CQ_RST_CTL_PB_BAR_RESET]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_RST_CTL_PB_BAR_RESET(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_RST_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_RST_CTL_PB_BAR_RESET,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_RST_CTL_PB_BAR_RESET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_RST_CTL_PB_BAR_RESET]

//>> SET_[INT_CQ_RST_CTL_PB_BAR_RESET]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_RST_CTL_PB_BAR_RESET(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_RST_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_RST_CTL_PB_BAR_RESET,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_RST_CTL_PB_BAR_RESET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_RST_CTL_PB_BAR_RESET]

//>> SET_[INT_CQ_RST_CTL_PB_BAR_RESET]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_RST_CTL_PB_BAR_RESET(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_RST_CTL));
#endif
    return o_data.setBit<INT_CQ_RST_CTL_PB_BAR_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_CQ_RST_CTL_PB_BAR_RESET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_RST_CTL_PB_BAR_RESET]

//>> CLEAR_[INT_CQ_RST_CTL_PB_BAR_RESET]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_CQ_RST_CTL_PB_BAR_RESET(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_RST_CTL));
#endif
    return o_data.clearBit<INT_CQ_RST_CTL_PB_BAR_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_CQ_RST_CTL_PB_BAR_RESET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_CQ_RST_CTL_PB_BAR_RESET]

//>> GET_[INT_CQ_RST_CTL_PB_BAR_RESET]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_RST_CTL_PB_BAR_RESET(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_RST_CTL));
#endif
    return i_data.extractToRight<INT_CQ_RST_CTL_PB_BAR_RESET,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_RST_CTL_PB_BAR_RESET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_RST_CTL_PB_BAR_RESET]

//>> GET_[INT_CQ_RST_CTL_PB_BAR_RESET]
static inline bool GET_INT_CQ_RST_CTL_PB_BAR_RESET(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_RST_CTL));
#endif
    return i_data.getBit<INT_CQ_RST_CTL_PB_BAR_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_CQ_RST_CTL_PB_BAR_RESET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_RST_CTL_PB_BAR_RESET]

//>> SET_[INT_CQ_RST_CTL_RESERVED_5_7]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_RST_CTL_RESERVED_5_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_RST_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_RST_CTL_RESERVED_5_7,
           INT_CQ_RST_CTL_RESERVED_5_7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_CQ_RST_CTL_RESERVED_5_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_RST_CTL_RESERVED_5_7]

//>> SET_[INT_CQ_RST_CTL_RESERVED_5_7]
static inline fapi2::buffer<uint64_t>& SET_INT_CQ_RST_CTL_RESERVED_5_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_RST_CTL));
#endif
    return o_data.insertFromRight<INT_CQ_RST_CTL_RESERVED_5_7,
           INT_CQ_RST_CTL_RESERVED_5_7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_CQ_RST_CTL_RESERVED_5_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_CQ_RST_CTL_RESERVED_5_7]

//>> GET_[INT_CQ_RST_CTL_RESERVED_5_7]
static inline fapi2::buffer<uint64_t>& GET_INT_CQ_RST_CTL_RESERVED_5_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_RST_CTL));
#endif
    return i_data.extractToRight<INT_CQ_RST_CTL_RESERVED_5_7,
           INT_CQ_RST_CTL_RESERVED_5_7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_CQ_RST_CTL_RESERVED_5_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_CQ_RST_CTL_RESERVED_5_7]

//>> PREP_[INT_PC_NXC_REGS_FLUSH_POLL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_NXC_REGS_FLUSH_POLL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_FLUSH_POLL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_NXC_REGS_FLUSH_POLL]

//>> GET_[INT_PC_NXC_REGS_FLUSH_POLL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_NXC_REGS_FLUSH_POLL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_FLUSH_POLL;
#endif
    return fapi2::getScom(i_target, INT_PC_NXC_REGS_FLUSH_POLL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_NXC_REGS_FLUSH_POLL]

//>> PUT_[INT_PC_NXC_REGS_FLUSH_POLL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_NXC_REGS_FLUSH_POLL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_POLL));
#endif
    return fapi2::putScom(i_target, INT_PC_NXC_REGS_FLUSH_POLL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_NXC_REGS_FLUSH_POLL]


//>> SET_[INT_PC_NXC_REGS_FLUSH_POLL_RESERVED_0_1]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_FLUSH_POLL_RESERVED_0_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_POLL));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_FLUSH_POLL_RESERVED_0_1,
           INT_PC_NXC_REGS_FLUSH_POLL_RESERVED_0_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_POLL_RESERVED_0_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_FLUSH_POLL_RESERVED_0_1]

//>> SET_[INT_PC_NXC_REGS_FLUSH_POLL_RESERVED_0_1]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_FLUSH_POLL_RESERVED_0_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_POLL));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_FLUSH_POLL_RESERVED_0_1,
           INT_PC_NXC_REGS_FLUSH_POLL_RESERVED_0_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_POLL_RESERVED_0_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_FLUSH_POLL_RESERVED_0_1]

//>> GET_[INT_PC_NXC_REGS_FLUSH_POLL_RESERVED_0_1]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_FLUSH_POLL_RESERVED_0_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_POLL));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_FLUSH_POLL_RESERVED_0_1,
           INT_PC_NXC_REGS_FLUSH_POLL_RESERVED_0_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_POLL_RESERVED_0_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_FLUSH_POLL_RESERVED_0_1]

//>> SET_[INT_PC_NXC_REGS_FLUSH_POLL_NXC_TYPE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_FLUSH_POLL_NXC_TYPE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_POLL));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_FLUSH_POLL_NXC_TYPE,
           INT_PC_NXC_REGS_FLUSH_POLL_NXC_TYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_POLL_NXC_TYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_FLUSH_POLL_NXC_TYPE]

//>> SET_[INT_PC_NXC_REGS_FLUSH_POLL_NXC_TYPE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_FLUSH_POLL_NXC_TYPE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_POLL));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_FLUSH_POLL_NXC_TYPE,
           INT_PC_NXC_REGS_FLUSH_POLL_NXC_TYPE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_POLL_NXC_TYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_FLUSH_POLL_NXC_TYPE]

//>> GET_[INT_PC_NXC_REGS_FLUSH_POLL_NXC_TYPE]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_FLUSH_POLL_NXC_TYPE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_POLL));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_FLUSH_POLL_NXC_TYPE,
           INT_PC_NXC_REGS_FLUSH_POLL_NXC_TYPE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_POLL_NXC_TYPE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_FLUSH_POLL_NXC_TYPE]

//>> SET_[INT_PC_NXC_REGS_FLUSH_POLL_BLOCKID]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_FLUSH_POLL_BLOCKID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_POLL));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_FLUSH_POLL_BLOCKID,
           INT_PC_NXC_REGS_FLUSH_POLL_BLOCKID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_POLL_BLOCKID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_FLUSH_POLL_BLOCKID]

//>> SET_[INT_PC_NXC_REGS_FLUSH_POLL_BLOCKID]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_FLUSH_POLL_BLOCKID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_POLL));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_FLUSH_POLL_BLOCKID,
           INT_PC_NXC_REGS_FLUSH_POLL_BLOCKID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_POLL_BLOCKID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_FLUSH_POLL_BLOCKID]

//>> GET_[INT_PC_NXC_REGS_FLUSH_POLL_BLOCKID]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_FLUSH_POLL_BLOCKID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_POLL));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_FLUSH_POLL_BLOCKID,
           INT_PC_NXC_REGS_FLUSH_POLL_BLOCKID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_POLL_BLOCKID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_FLUSH_POLL_BLOCKID]

//>> SET_[INT_PC_NXC_REGS_FLUSH_POLL_OFFSET]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_FLUSH_POLL_OFFSET(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_POLL));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_FLUSH_POLL_OFFSET,
           INT_PC_NXC_REGS_FLUSH_POLL_OFFSET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_POLL_OFFSET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_FLUSH_POLL_OFFSET]

//>> SET_[INT_PC_NXC_REGS_FLUSH_POLL_OFFSET]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_FLUSH_POLL_OFFSET(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_POLL));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_FLUSH_POLL_OFFSET,
           INT_PC_NXC_REGS_FLUSH_POLL_OFFSET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_POLL_OFFSET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_FLUSH_POLL_OFFSET]

//>> GET_[INT_PC_NXC_REGS_FLUSH_POLL_OFFSET]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_FLUSH_POLL_OFFSET(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_POLL));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_FLUSH_POLL_OFFSET,
           INT_PC_NXC_REGS_FLUSH_POLL_OFFSET_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_POLL_OFFSET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_FLUSH_POLL_OFFSET]

//>> SET_[INT_PC_NXC_REGS_FLUSH_POLL_RESERVED_32_33]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_FLUSH_POLL_RESERVED_32_33(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_POLL));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_FLUSH_POLL_RESERVED_32_33,
           INT_PC_NXC_REGS_FLUSH_POLL_RESERVED_32_33_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_POLL_RESERVED_32_33 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_FLUSH_POLL_RESERVED_32_33]

//>> SET_[INT_PC_NXC_REGS_FLUSH_POLL_RESERVED_32_33]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_FLUSH_POLL_RESERVED_32_33(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_POLL));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_FLUSH_POLL_RESERVED_32_33,
           INT_PC_NXC_REGS_FLUSH_POLL_RESERVED_32_33_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_POLL_RESERVED_32_33 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_FLUSH_POLL_RESERVED_32_33]

//>> GET_[INT_PC_NXC_REGS_FLUSH_POLL_RESERVED_32_33]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_FLUSH_POLL_RESERVED_32_33(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_POLL));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_FLUSH_POLL_RESERVED_32_33,
           INT_PC_NXC_REGS_FLUSH_POLL_RESERVED_32_33_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_POLL_RESERVED_32_33 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_FLUSH_POLL_RESERVED_32_33]

//>> SET_[INT_PC_NXC_REGS_FLUSH_POLL_NXC_TYPE_MASK]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_FLUSH_POLL_NXC_TYPE_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_POLL));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_FLUSH_POLL_NXC_TYPE_MASK,
           INT_PC_NXC_REGS_FLUSH_POLL_NXC_TYPE_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_POLL_NXC_TYPE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_FLUSH_POLL_NXC_TYPE_MASK]

//>> SET_[INT_PC_NXC_REGS_FLUSH_POLL_NXC_TYPE_MASK]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_FLUSH_POLL_NXC_TYPE_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_POLL));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_FLUSH_POLL_NXC_TYPE_MASK,
           INT_PC_NXC_REGS_FLUSH_POLL_NXC_TYPE_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_POLL_NXC_TYPE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_FLUSH_POLL_NXC_TYPE_MASK]

//>> GET_[INT_PC_NXC_REGS_FLUSH_POLL_NXC_TYPE_MASK]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_FLUSH_POLL_NXC_TYPE_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_POLL));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_FLUSH_POLL_NXC_TYPE_MASK,
           INT_PC_NXC_REGS_FLUSH_POLL_NXC_TYPE_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_POLL_NXC_TYPE_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_FLUSH_POLL_NXC_TYPE_MASK]

//>> SET_[INT_PC_NXC_REGS_FLUSH_POLL_BLOCKID_MASK]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_FLUSH_POLL_BLOCKID_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_POLL));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_FLUSH_POLL_BLOCKID_MASK,
           INT_PC_NXC_REGS_FLUSH_POLL_BLOCKID_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_POLL_BLOCKID_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_FLUSH_POLL_BLOCKID_MASK]

//>> SET_[INT_PC_NXC_REGS_FLUSH_POLL_BLOCKID_MASK]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_FLUSH_POLL_BLOCKID_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_POLL));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_FLUSH_POLL_BLOCKID_MASK,
           INT_PC_NXC_REGS_FLUSH_POLL_BLOCKID_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_POLL_BLOCKID_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_FLUSH_POLL_BLOCKID_MASK]

//>> GET_[INT_PC_NXC_REGS_FLUSH_POLL_BLOCKID_MASK]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_FLUSH_POLL_BLOCKID_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_POLL));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_FLUSH_POLL_BLOCKID_MASK,
           INT_PC_NXC_REGS_FLUSH_POLL_BLOCKID_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_POLL_BLOCKID_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_FLUSH_POLL_BLOCKID_MASK]

//>> SET_[INT_PC_NXC_REGS_FLUSH_POLL_OFFSET_MASK]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_FLUSH_POLL_OFFSET_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_POLL));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_FLUSH_POLL_OFFSET_MASK,
           INT_PC_NXC_REGS_FLUSH_POLL_OFFSET_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_POLL_OFFSET_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_FLUSH_POLL_OFFSET_MASK]

//>> SET_[INT_PC_NXC_REGS_FLUSH_POLL_OFFSET_MASK]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_NXC_REGS_FLUSH_POLL_OFFSET_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_POLL));
#endif
    return o_data.insertFromRight<INT_PC_NXC_REGS_FLUSH_POLL_OFFSET_MASK,
           INT_PC_NXC_REGS_FLUSH_POLL_OFFSET_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_POLL_OFFSET_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_NXC_REGS_FLUSH_POLL_OFFSET_MASK]

//>> GET_[INT_PC_NXC_REGS_FLUSH_POLL_OFFSET_MASK]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_NXC_REGS_FLUSH_POLL_OFFSET_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_FLUSH_POLL));
#endif
    return i_data.extractToRight<INT_PC_NXC_REGS_FLUSH_POLL_OFFSET_MASK,
           INT_PC_NXC_REGS_FLUSH_POLL_OFFSET_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_NXC_REGS_FLUSH_POLL_OFFSET_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_NXC_REGS_FLUSH_POLL_OFFSET_MASK]

//>> PREP_[INT_PC_NXC_REGS_WATCH3_DATA2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_NXC_REGS_WATCH3_DATA2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_WATCH3_DATA2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_NXC_REGS_WATCH3_DATA2]

//>> GET_[INT_PC_NXC_REGS_WATCH3_DATA2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_NXC_REGS_WATCH3_DATA2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_WATCH3_DATA2;
#endif
    return fapi2::getScom(i_target, INT_PC_NXC_REGS_WATCH3_DATA2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WATCH3_DATA2]

//>> PUT_[INT_PC_NXC_REGS_WATCH3_DATA2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_NXC_REGS_WATCH3_DATA2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WATCH3_DATA2));
#endif
    return fapi2::putScom(i_target, INT_PC_NXC_REGS_WATCH3_DATA2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_NXC_REGS_WATCH3_DATA2]


//>> PREP_[INT_PC_NXC_REGS_WATCH3_SPEC]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_NXC_REGS_WATCH3_SPEC(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_WATCH3_SPEC;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_NXC_REGS_WATCH3_SPEC]

//>> GET_[INT_PC_NXC_REGS_WATCH3_SPEC]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_NXC_REGS_WATCH3_SPEC(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_WATCH3_SPEC;
#endif
    return fapi2::getScom(i_target, INT_PC_NXC_REGS_WATCH3_SPEC, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_NXC_REGS_WATCH3_SPEC]

//>> PUT_[INT_PC_NXC_REGS_WATCH3_SPEC]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_NXC_REGS_WATCH3_SPEC(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WATCH3_SPEC));
#endif
    return fapi2::putScom(i_target, INT_PC_NXC_REGS_WATCH3_SPEC, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_NXC_REGS_WATCH3_SPEC]


//>> PREP_[INT_PC_REGS_DBG_PMC_ATX2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_REGS_DBG_PMC_ATX2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_DBG_PMC_ATX2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_REGS_DBG_PMC_ATX2]

//>> GET_[INT_PC_REGS_DBG_PMC_ATX2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_REGS_DBG_PMC_ATX2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_DBG_PMC_ATX2;
#endif
    return fapi2::getScom(i_target, INT_PC_REGS_DBG_PMC_ATX2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_REGS_DBG_PMC_ATX2]

//>> PUT_[INT_PC_REGS_DBG_PMC_ATX2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_REGS_DBG_PMC_ATX2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return fapi2::putScom(i_target, INT_PC_REGS_DBG_PMC_ATX2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_REGS_DBG_PMC_ATX2]


//>> SET_[INT_PC_REGS_DBG_PMC_ATX2_0]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX2_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX2_0,
           INT_PC_REGS_DBG_PMC_ATX2_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_PMC_ATX2_0]

//>> SET_[INT_PC_REGS_DBG_PMC_ATX2_0]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX2_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX2_0,
           INT_PC_REGS_DBG_PMC_ATX2_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_PMC_ATX2_0]

//>> GET_[INT_PC_REGS_DBG_PMC_ATX2_0]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_PMC_ATX2_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_PMC_ATX2_0,
           INT_PC_REGS_DBG_PMC_ATX2_0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_PMC_ATX2_0]

//>> SET_[INT_PC_REGS_DBG_PMC_ATX2_1]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX2_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX2_1,
           INT_PC_REGS_DBG_PMC_ATX2_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_PMC_ATX2_1]

//>> SET_[INT_PC_REGS_DBG_PMC_ATX2_1]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX2_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX2_1,
           INT_PC_REGS_DBG_PMC_ATX2_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_PMC_ATX2_1]

//>> GET_[INT_PC_REGS_DBG_PMC_ATX2_1]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_PMC_ATX2_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_PMC_ATX2_1,
           INT_PC_REGS_DBG_PMC_ATX2_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_PMC_ATX2_1]

//>> SET_[INT_PC_REGS_DBG_PMC_ATX2_2]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX2_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX2_2,
           INT_PC_REGS_DBG_PMC_ATX2_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_PMC_ATX2_2]

//>> SET_[INT_PC_REGS_DBG_PMC_ATX2_2]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX2_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX2_2,
           INT_PC_REGS_DBG_PMC_ATX2_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_PMC_ATX2_2]

//>> GET_[INT_PC_REGS_DBG_PMC_ATX2_2]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_PMC_ATX2_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_PMC_ATX2_2,
           INT_PC_REGS_DBG_PMC_ATX2_2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_PMC_ATX2_2]

//>> SET_[INT_PC_REGS_DBG_PMC_ATX2_3]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX2_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX2_3,
           INT_PC_REGS_DBG_PMC_ATX2_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_PMC_ATX2_3]

//>> SET_[INT_PC_REGS_DBG_PMC_ATX2_3]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX2_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX2_3,
           INT_PC_REGS_DBG_PMC_ATX2_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_PMC_ATX2_3]

//>> GET_[INT_PC_REGS_DBG_PMC_ATX2_3]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_PMC_ATX2_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_PMC_ATX2_3,
           INT_PC_REGS_DBG_PMC_ATX2_3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_PMC_ATX2_3]

//>> SET_[INT_PC_REGS_DBG_PMC_ATX2_15]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX2_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX2_15,
           INT_PC_REGS_DBG_PMC_ATX2_15_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_PMC_ATX2_15]

//>> SET_[INT_PC_REGS_DBG_PMC_ATX2_15]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX2_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX2_15,
           INT_PC_REGS_DBG_PMC_ATX2_15_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_PMC_ATX2_15]

//>> GET_[INT_PC_REGS_DBG_PMC_ATX2_15]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_PMC_ATX2_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_PMC_ATX2_15,
           INT_PC_REGS_DBG_PMC_ATX2_15_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_PMC_ATX2_15]

//>> SET_[INT_PC_REGS_DBG_PMC_ATX2_4R]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX2_4R(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX2_4R,
           INT_PC_REGS_DBG_PMC_ATX2_4R_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_4R chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_PMC_ATX2_4R]

//>> SET_[INT_PC_REGS_DBG_PMC_ATX2_4R]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX2_4R(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX2_4R,
           INT_PC_REGS_DBG_PMC_ATX2_4R_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_4R chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_PMC_ATX2_4R]

//>> GET_[INT_PC_REGS_DBG_PMC_ATX2_4R]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_PMC_ATX2_4R(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_PMC_ATX2_4R,
           INT_PC_REGS_DBG_PMC_ATX2_4R_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_4R chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_PMC_ATX2_4R]

//>> SET_[INT_PC_REGS_DBG_PMC_ATX2_4W]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX2_4W(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX2_4W,
           INT_PC_REGS_DBG_PMC_ATX2_4W_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_4W chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_PMC_ATX2_4W]

//>> SET_[INT_PC_REGS_DBG_PMC_ATX2_4W]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX2_4W(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX2_4W,
           INT_PC_REGS_DBG_PMC_ATX2_4W_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_4W chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_PMC_ATX2_4W]

//>> GET_[INT_PC_REGS_DBG_PMC_ATX2_4W]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_PMC_ATX2_4W(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_PMC_ATX2_4W,
           INT_PC_REGS_DBG_PMC_ATX2_4W_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_4W chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_PMC_ATX2_4W]

//>> SET_[INT_PC_REGS_DBG_PMC_ATX2_5]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX2_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX2_5,
           INT_PC_REGS_DBG_PMC_ATX2_5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_PMC_ATX2_5]

//>> SET_[INT_PC_REGS_DBG_PMC_ATX2_5]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX2_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX2_5,
           INT_PC_REGS_DBG_PMC_ATX2_5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_PMC_ATX2_5]

//>> GET_[INT_PC_REGS_DBG_PMC_ATX2_5]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_PMC_ATX2_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_PMC_ATX2_5,
           INT_PC_REGS_DBG_PMC_ATX2_5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_PMC_ATX2_5]

//>> SET_[INT_PC_REGS_DBG_PMC_ATX2_6]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX2_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX2_6,
           INT_PC_REGS_DBG_PMC_ATX2_6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_PMC_ATX2_6]

//>> SET_[INT_PC_REGS_DBG_PMC_ATX2_6]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX2_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX2_6,
           INT_PC_REGS_DBG_PMC_ATX2_6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_PMC_ATX2_6]

//>> GET_[INT_PC_REGS_DBG_PMC_ATX2_6]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_PMC_ATX2_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_PMC_ATX2_6,
           INT_PC_REGS_DBG_PMC_ATX2_6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_PMC_ATX2_6]

//>> SET_[INT_PC_REGS_DBG_PMC_ATX2_7]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX2_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX2_7,
           INT_PC_REGS_DBG_PMC_ATX2_7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_PMC_ATX2_7]

//>> SET_[INT_PC_REGS_DBG_PMC_ATX2_7]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX2_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX2_7,
           INT_PC_REGS_DBG_PMC_ATX2_7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_PMC_ATX2_7]

//>> GET_[INT_PC_REGS_DBG_PMC_ATX2_7]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_PMC_ATX2_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_PMC_ATX2_7,
           INT_PC_REGS_DBG_PMC_ATX2_7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_PMC_ATX2_7]

//>> SET_[INT_PC_REGS_DBG_PMC_ATX2_8]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX2_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX2_8,
           INT_PC_REGS_DBG_PMC_ATX2_8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_PMC_ATX2_8]

//>> SET_[INT_PC_REGS_DBG_PMC_ATX2_8]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX2_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX2_8,
           INT_PC_REGS_DBG_PMC_ATX2_8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_PMC_ATX2_8]

//>> GET_[INT_PC_REGS_DBG_PMC_ATX2_8]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_PMC_ATX2_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_PMC_ATX2_8,
           INT_PC_REGS_DBG_PMC_ATX2_8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_PMC_ATX2_8]

//>> SET_[INT_PC_REGS_DBG_PMC_ATX2_9]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX2_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX2_9,
           INT_PC_REGS_DBG_PMC_ATX2_9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_PMC_ATX2_9]

//>> SET_[INT_PC_REGS_DBG_PMC_ATX2_9]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX2_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX2_9,
           INT_PC_REGS_DBG_PMC_ATX2_9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_PMC_ATX2_9]

//>> GET_[INT_PC_REGS_DBG_PMC_ATX2_9]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_PMC_ATX2_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_PMC_ATX2_9,
           INT_PC_REGS_DBG_PMC_ATX2_9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_PMC_ATX2_9]

//>> SET_[INT_PC_REGS_DBG_PMC_ATX2_10]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX2_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX2_10,
           INT_PC_REGS_DBG_PMC_ATX2_10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_PMC_ATX2_10]

//>> SET_[INT_PC_REGS_DBG_PMC_ATX2_10]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX2_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX2_10,
           INT_PC_REGS_DBG_PMC_ATX2_10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_PMC_ATX2_10]

//>> GET_[INT_PC_REGS_DBG_PMC_ATX2_10]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_PMC_ATX2_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_PMC_ATX2_10,
           INT_PC_REGS_DBG_PMC_ATX2_10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_PMC_ATX2_10]

//>> SET_[INT_PC_REGS_DBG_PMC_ATX2_11]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX2_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX2_11,
           INT_PC_REGS_DBG_PMC_ATX2_11_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_PMC_ATX2_11]

//>> SET_[INT_PC_REGS_DBG_PMC_ATX2_11]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX2_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX2_11,
           INT_PC_REGS_DBG_PMC_ATX2_11_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_PMC_ATX2_11]

//>> GET_[INT_PC_REGS_DBG_PMC_ATX2_11]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_PMC_ATX2_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_PMC_ATX2_11,
           INT_PC_REGS_DBG_PMC_ATX2_11_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_PMC_ATX2_11]

//>> SET_[INT_PC_REGS_DBG_PMC_ATX2_12]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX2_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX2_12,
           INT_PC_REGS_DBG_PMC_ATX2_12_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_PMC_ATX2_12]

//>> SET_[INT_PC_REGS_DBG_PMC_ATX2_12]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX2_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX2_12,
           INT_PC_REGS_DBG_PMC_ATX2_12_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_PMC_ATX2_12]

//>> GET_[INT_PC_REGS_DBG_PMC_ATX2_12]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_PMC_ATX2_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_PMC_ATX2_12,
           INT_PC_REGS_DBG_PMC_ATX2_12_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_PMC_ATX2_12]

//>> SET_[INT_PC_REGS_DBG_PMC_ATX2_13]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX2_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX2_13,
           INT_PC_REGS_DBG_PMC_ATX2_13_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_PMC_ATX2_13]

//>> SET_[INT_PC_REGS_DBG_PMC_ATX2_13]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_DBG_PMC_ATX2_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return o_data.insertFromRight<INT_PC_REGS_DBG_PMC_ATX2_13,
           INT_PC_REGS_DBG_PMC_ATX2_13_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_DBG_PMC_ATX2_13]

//>> GET_[INT_PC_REGS_DBG_PMC_ATX2_13]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_DBG_PMC_ATX2_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_DBG_PMC_ATX2));
#endif
    return i_data.extractToRight<INT_PC_REGS_DBG_PMC_ATX2_13,
           INT_PC_REGS_DBG_PMC_ATX2_13_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_DBG_PMC_ATX2_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_DBG_PMC_ATX2_13]

//>> PREP_[INT_PC_REGS_ERR1_CFG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_REGS_ERR1_CFG0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_ERR1_CFG0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_REGS_ERR1_CFG0]

//>> GET_[INT_PC_REGS_ERR1_CFG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_REGS_ERR1_CFG0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_ERR1_CFG0;
#endif
    return fapi2::getScom(i_target, INT_PC_REGS_ERR1_CFG0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_REGS_ERR1_CFG0]

//>> PUT_[INT_PC_REGS_ERR1_CFG0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_REGS_ERR1_CFG0(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_ERR1_CFG0));
#endif
    return fapi2::putScom(i_target, INT_PC_REGS_ERR1_CFG0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_REGS_ERR1_CFG0]


//>> SET_[INT_PC_REGS_ERR1_CFG0_INT_PC_ERR1_CFG0_ERROR_CONFIG0]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_ERR1_CFG0_INT_PC_ERR1_CFG0_ERROR_CONFIG0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_ERR1_CFG0));
#endif
    return o_data.insertFromRight<INT_PC_REGS_ERR1_CFG0_INT_PC_ERR1_CFG0_ERROR_CONFIG0,
           INT_PC_REGS_ERR1_CFG0_INT_PC_ERR1_CFG0_ERROR_CONFIG0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_ERR1_CFG0_INT_PC_ERR1_CFG0_ERROR_CONFIG0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_ERR1_CFG0_INT_PC_ERR1_CFG0_ERROR_CONFIG0]

//>> SET_[INT_PC_REGS_ERR1_CFG0_INT_PC_ERR1_CFG0_ERROR_CONFIG0]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_ERR1_CFG0_INT_PC_ERR1_CFG0_ERROR_CONFIG0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_ERR1_CFG0));
#endif
    return o_data.insertFromRight<INT_PC_REGS_ERR1_CFG0_INT_PC_ERR1_CFG0_ERROR_CONFIG0,
           INT_PC_REGS_ERR1_CFG0_INT_PC_ERR1_CFG0_ERROR_CONFIG0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_ERR1_CFG0_INT_PC_ERR1_CFG0_ERROR_CONFIG0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_ERR1_CFG0_INT_PC_ERR1_CFG0_ERROR_CONFIG0]

//>> GET_[INT_PC_REGS_ERR1_CFG0_INT_PC_ERR1_CFG0_ERROR_CONFIG0]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_ERR1_CFG0_INT_PC_ERR1_CFG0_ERROR_CONFIG0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_ERR1_CFG0));
#endif
    return i_data.extractToRight<INT_PC_REGS_ERR1_CFG0_INT_PC_ERR1_CFG0_ERROR_CONFIG0,
           INT_PC_REGS_ERR1_CFG0_INT_PC_ERR1_CFG0_ERROR_CONFIG0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_ERR1_CFG0_INT_PC_ERR1_CFG0_ERROR_CONFIG0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_ERR1_CFG0_INT_PC_ERR1_CFG0_ERROR_CONFIG0]

//>> PREP_[INT_PC_REGS_ERR1_INFO]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_REGS_ERR1_INFO(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_ERR1_INFO;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_REGS_ERR1_INFO]

//>> GET_[INT_PC_REGS_ERR1_INFO]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_REGS_ERR1_INFO(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_ERR1_INFO;
#endif
    return fapi2::getScom(i_target, INT_PC_REGS_ERR1_INFO, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_REGS_ERR1_INFO]

//>> PUT_[INT_PC_REGS_ERR1_INFO]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_REGS_ERR1_INFO(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_ERR1_INFO));
#endif
    return fapi2::putScom(i_target, INT_PC_REGS_ERR1_INFO, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_REGS_ERR1_INFO]


//>> SET_[INT_PC_REGS_ERR1_INFO_INT_PC_ERR1_INFO_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_ERR1_INFO_INT_PC_ERR1_INFO_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_ERR1_INFO));
#endif
    return o_data.insertFromRight<INT_PC_REGS_ERR1_INFO_INT_PC_ERR1_INFO_ERROR,
           INT_PC_REGS_ERR1_INFO_INT_PC_ERR1_INFO_ERROR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_ERR1_INFO_INT_PC_ERR1_INFO_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_ERR1_INFO_INT_PC_ERR1_INFO_ERROR]

//>> SET_[INT_PC_REGS_ERR1_INFO_INT_PC_ERR1_INFO_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_ERR1_INFO_INT_PC_ERR1_INFO_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_ERR1_INFO));
#endif
    return o_data.insertFromRight<INT_PC_REGS_ERR1_INFO_INT_PC_ERR1_INFO_ERROR,
           INT_PC_REGS_ERR1_INFO_INT_PC_ERR1_INFO_ERROR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_ERR1_INFO_INT_PC_ERR1_INFO_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_ERR1_INFO_INT_PC_ERR1_INFO_ERROR]

//>> GET_[INT_PC_REGS_ERR1_INFO_INT_PC_ERR1_INFO_ERROR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_ERR1_INFO_INT_PC_ERR1_INFO_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_ERR1_INFO));
#endif
    return i_data.extractToRight<INT_PC_REGS_ERR1_INFO_INT_PC_ERR1_INFO_ERROR,
           INT_PC_REGS_ERR1_INFO_INT_PC_ERR1_INFO_ERROR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_ERR1_INFO_INT_PC_ERR1_INFO_ERROR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_ERR1_INFO_INT_PC_ERR1_INFO_ERROR]

//>> PREP_[INT_PC_REGS_ESB_BLOCK_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_REGS_ESB_BLOCK_MODE(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_ESB_BLOCK_MODE;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_REGS_ESB_BLOCK_MODE]

//>> GET_[INT_PC_REGS_ESB_BLOCK_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_REGS_ESB_BLOCK_MODE(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_ESB_BLOCK_MODE;
#endif
    return fapi2::getScom(i_target, INT_PC_REGS_ESB_BLOCK_MODE, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_REGS_ESB_BLOCK_MODE]

//>> PUT_[INT_PC_REGS_ESB_BLOCK_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_REGS_ESB_BLOCK_MODE(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_ESB_BLOCK_MODE));
#endif
    return fapi2::putScom(i_target, INT_PC_REGS_ESB_BLOCK_MODE, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_REGS_ESB_BLOCK_MODE]


//>> SET_[INT_PC_REGS_ESB_BLOCK_MODE_INT_PC_ESB_BLOCK_MODE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_ESB_BLOCK_MODE_INT_PC_ESB_BLOCK_MODE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_ESB_BLOCK_MODE));
#endif
    return o_data.insertFromRight<INT_PC_REGS_ESB_BLOCK_MODE_INT_PC_ESB_BLOCK_MODE,
           INT_PC_REGS_ESB_BLOCK_MODE_INT_PC_ESB_BLOCK_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_ESB_BLOCK_MODE_INT_PC_ESB_BLOCK_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_ESB_BLOCK_MODE_INT_PC_ESB_BLOCK_MODE]

//>> SET_[INT_PC_REGS_ESB_BLOCK_MODE_INT_PC_ESB_BLOCK_MODE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_ESB_BLOCK_MODE_INT_PC_ESB_BLOCK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_ESB_BLOCK_MODE));
#endif
    return o_data.insertFromRight<INT_PC_REGS_ESB_BLOCK_MODE_INT_PC_ESB_BLOCK_MODE,
           INT_PC_REGS_ESB_BLOCK_MODE_INT_PC_ESB_BLOCK_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_ESB_BLOCK_MODE_INT_PC_ESB_BLOCK_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_ESB_BLOCK_MODE_INT_PC_ESB_BLOCK_MODE]

//>> GET_[INT_PC_REGS_ESB_BLOCK_MODE_INT_PC_ESB_BLOCK_MODE]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_ESB_BLOCK_MODE_INT_PC_ESB_BLOCK_MODE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_ESB_BLOCK_MODE));
#endif
    return i_data.extractToRight<INT_PC_REGS_ESB_BLOCK_MODE_INT_PC_ESB_BLOCK_MODE,
           INT_PC_REGS_ESB_BLOCK_MODE_INT_PC_ESB_BLOCK_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_ESB_BLOCK_MODE_INT_PC_ESB_BLOCK_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_ESB_BLOCK_MODE_INT_PC_ESB_BLOCK_MODE]

//>> PREP_[INT_PC_REGS_MMIO_ARB]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_REGS_MMIO_ARB(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_MMIO_ARB;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_REGS_MMIO_ARB]

//>> GET_[INT_PC_REGS_MMIO_ARB]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_REGS_MMIO_ARB(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_MMIO_ARB;
#endif
    return fapi2::getScom(i_target, INT_PC_REGS_MMIO_ARB, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_REGS_MMIO_ARB]

//>> PUT_[INT_PC_REGS_MMIO_ARB]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_REGS_MMIO_ARB(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return fapi2::putScom(i_target, INT_PC_REGS_MMIO_ARB, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_REGS_MMIO_ARB]


//>> SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_LDST_ARB_PRIO_SET_LD]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_CFG_MMIO_LDST_ARB_PRIO_SET_LD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_MMIO_ARB_CFG_MMIO_LDST_ARB_PRIO_SET_LD,
           INT_PC_REGS_MMIO_ARB_CFG_MMIO_LDST_ARB_PRIO_SET_LD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_CFG_MMIO_LDST_ARB_PRIO_SET_LD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_LDST_ARB_PRIO_SET_LD]

//>> SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_LDST_ARB_PRIO_SET_LD]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_CFG_MMIO_LDST_ARB_PRIO_SET_LD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_MMIO_ARB_CFG_MMIO_LDST_ARB_PRIO_SET_LD,
           INT_PC_REGS_MMIO_ARB_CFG_MMIO_LDST_ARB_PRIO_SET_LD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_CFG_MMIO_LDST_ARB_PRIO_SET_LD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_LDST_ARB_PRIO_SET_LD]

//>> GET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_LDST_ARB_PRIO_SET_LD]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_MMIO_ARB_CFG_MMIO_LDST_ARB_PRIO_SET_LD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_MMIO_ARB_CFG_MMIO_LDST_ARB_PRIO_SET_LD,
           INT_PC_REGS_MMIO_ARB_CFG_MMIO_LDST_ARB_PRIO_SET_LD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_CFG_MMIO_LDST_ARB_PRIO_SET_LD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_LDST_ARB_PRIO_SET_LD]

//>> SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_LDST_ARB_PRIO_RSP_LD]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_CFG_MMIO_LDST_ARB_PRIO_RSP_LD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_MMIO_ARB_CFG_MMIO_LDST_ARB_PRIO_RSP_LD,
           INT_PC_REGS_MMIO_ARB_CFG_MMIO_LDST_ARB_PRIO_RSP_LD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_CFG_MMIO_LDST_ARB_PRIO_RSP_LD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_LDST_ARB_PRIO_RSP_LD]

//>> SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_LDST_ARB_PRIO_RSP_LD]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_CFG_MMIO_LDST_ARB_PRIO_RSP_LD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_MMIO_ARB_CFG_MMIO_LDST_ARB_PRIO_RSP_LD,
           INT_PC_REGS_MMIO_ARB_CFG_MMIO_LDST_ARB_PRIO_RSP_LD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_CFG_MMIO_LDST_ARB_PRIO_RSP_LD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_LDST_ARB_PRIO_RSP_LD]

//>> GET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_LDST_ARB_PRIO_RSP_LD]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_MMIO_ARB_CFG_MMIO_LDST_ARB_PRIO_RSP_LD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_MMIO_ARB_CFG_MMIO_LDST_ARB_PRIO_RSP_LD,
           INT_PC_REGS_MMIO_ARB_CFG_MMIO_LDST_ARB_PRIO_RSP_LD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_CFG_MMIO_LDST_ARB_PRIO_RSP_LD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_LDST_ARB_PRIO_RSP_LD]

//>> SET_[INT_PC_REGS_MMIO_ARB_RESERVED_4]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_RESERVED_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_MMIO_ARB_RESERVED_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_RESERVED_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_RESERVED_4]

//>> SET_[INT_PC_REGS_MMIO_ARB_RESERVED_4]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_RESERVED_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_MMIO_ARB_RESERVED_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_RESERVED_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_RESERVED_4]

//>> SET_[INT_PC_REGS_MMIO_ARB_RESERVED_4]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_RESERVED_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.setBit<INT_PC_REGS_MMIO_ARB_RESERVED_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_RESERVED_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_RESERVED_4]

//>> CLEAR_[INT_PC_REGS_MMIO_ARB_RESERVED_4]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_MMIO_ARB_RESERVED_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.clearBit<INT_PC_REGS_MMIO_ARB_RESERVED_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_RESERVED_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_MMIO_ARB_RESERVED_4]

//>> GET_[INT_PC_REGS_MMIO_ARB_RESERVED_4]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_MMIO_ARB_RESERVED_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_MMIO_ARB_RESERVED_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_RESERVED_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_MMIO_ARB_RESERVED_4]

//>> GET_[INT_PC_REGS_MMIO_ARB_RESERVED_4]
static inline bool GET_INT_PC_REGS_MMIO_ARB_RESERVED_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return i_data.getBit<INT_PC_REGS_MMIO_ARB_RESERVED_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_RESERVED_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_MMIO_ARB_RESERVED_4]

//>> SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_LD_PULL_RR_SEL]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_LD_PULL_RR_SEL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_LD_PULL_RR_SEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_LD_PULL_RR_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_LD_PULL_RR_SEL]

//>> SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_LD_PULL_RR_SEL]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_LD_PULL_RR_SEL(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_LD_PULL_RR_SEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_LD_PULL_RR_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_LD_PULL_RR_SEL]

//>> SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_LD_PULL_RR_SEL]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_LD_PULL_RR_SEL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.setBit<INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_LD_PULL_RR_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_LD_PULL_RR_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_LD_PULL_RR_SEL]

//>> CLEAR_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_LD_PULL_RR_SEL]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_LD_PULL_RR_SEL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.clearBit<INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_LD_PULL_RR_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_LD_PULL_RR_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_LD_PULL_RR_SEL]

//>> GET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_LD_PULL_RR_SEL]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_LD_PULL_RR_SEL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_LD_PULL_RR_SEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_LD_PULL_RR_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_LD_PULL_RR_SEL]

//>> GET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_LD_PULL_RR_SEL]
static inline bool GET_INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_LD_PULL_RR_SEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return i_data.getBit<INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_LD_PULL_RR_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_LD_PULL_RR_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_LD_PULL_RR_SEL]

//>> SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_ST_PULL_RR_SEL]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_ST_PULL_RR_SEL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_ST_PULL_RR_SEL,
           INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_ST_PULL_RR_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_ST_PULL_RR_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_ST_PULL_RR_SEL]

//>> SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_ST_PULL_RR_SEL]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_ST_PULL_RR_SEL(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_ST_PULL_RR_SEL,
           INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_ST_PULL_RR_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_ST_PULL_RR_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_ST_PULL_RR_SEL]

//>> GET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_ST_PULL_RR_SEL]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_ST_PULL_RR_SEL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_ST_PULL_RR_SEL,
           INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_ST_PULL_RR_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_ST_PULL_RR_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_ST_PULL_RR_SEL]

//>> SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_ST_IACK_RR_SEL]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_ST_IACK_RR_SEL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_ST_IACK_RR_SEL,
           INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_ST_IACK_RR_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_ST_IACK_RR_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_ST_IACK_RR_SEL]

//>> SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_ST_IACK_RR_SEL]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_ST_IACK_RR_SEL(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_ST_IACK_RR_SEL,
           INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_ST_IACK_RR_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_ST_IACK_RR_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_ST_IACK_RR_SEL]

//>> GET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_ST_IACK_RR_SEL]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_ST_IACK_RR_SEL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_ST_IACK_RR_SEL,
           INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_ST_IACK_RR_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_ST_IACK_RR_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_PARSE_ST_IACK_RR_SEL]

//>> SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_PULL_PRIO_HYP]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_PULL_PRIO_HYP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_PULL_PRIO_HYP,
           INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_PULL_PRIO_HYP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_PULL_PRIO_HYP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_PULL_PRIO_HYP]

//>> SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_PULL_PRIO_HYP]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_PULL_PRIO_HYP(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_PULL_PRIO_HYP,
           INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_PULL_PRIO_HYP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_PULL_PRIO_HYP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_PULL_PRIO_HYP]

//>> GET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_PULL_PRIO_HYP]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_PULL_PRIO_HYP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_PULL_PRIO_HYP,
           INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_PULL_PRIO_HYP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_PULL_PRIO_HYP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_PULL_PRIO_HYP]

//>> SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_IACK_PRIO_HYP]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_IACK_PRIO_HYP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_IACK_PRIO_HYP,
           INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_IACK_PRIO_HYP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_IACK_PRIO_HYP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_IACK_PRIO_HYP]

//>> SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_IACK_PRIO_HYP]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_IACK_PRIO_HYP(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_IACK_PRIO_HYP,
           INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_IACK_PRIO_HYP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_IACK_PRIO_HYP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_IACK_PRIO_HYP]

//>> GET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_IACK_PRIO_HYP]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_IACK_PRIO_HYP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_IACK_PRIO_HYP,
           INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_IACK_PRIO_HYP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_IACK_PRIO_HYP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_IACK_PRIO_HYP]

//>> SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_PRIO_IACK]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_PRIO_IACK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_PRIO_IACK,
           INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_PRIO_IACK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_PRIO_IACK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_PRIO_IACK]

//>> SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_PRIO_IACK]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_PRIO_IACK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_PRIO_IACK,
           INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_PRIO_IACK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_PRIO_IACK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_PRIO_IACK]

//>> GET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_PRIO_IACK]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_PRIO_IACK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_PRIO_IACK,
           INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_PRIO_IACK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_PRIO_IACK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_ST_PRIO_IACK]

//>> SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_PRIO_LD]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_PRIO_LD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_PRIO_LD,
           INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_PRIO_LD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_PRIO_LD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_PRIO_LD]

//>> SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_PRIO_LD]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_PRIO_LD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_PRIO_LD,
           INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_PRIO_LD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_PRIO_LD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_PRIO_LD]

//>> GET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_PRIO_LD]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_PRIO_LD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_PRIO_LD,
           INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_PRIO_LD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_PRIO_LD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_DONE_ARB_PRIO_LD]

//>> SET_[INT_PC_REGS_MMIO_ARB_RESERVED_18_20]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_RESERVED_18_20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_MMIO_ARB_RESERVED_18_20,
           INT_PC_REGS_MMIO_ARB_RESERVED_18_20_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_RESERVED_18_20 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_RESERVED_18_20]

//>> SET_[INT_PC_REGS_MMIO_ARB_RESERVED_18_20]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_RESERVED_18_20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_MMIO_ARB_RESERVED_18_20,
           INT_PC_REGS_MMIO_ARB_RESERVED_18_20_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_RESERVED_18_20 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_RESERVED_18_20]

//>> GET_[INT_PC_REGS_MMIO_ARB_RESERVED_18_20]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_MMIO_ARB_RESERVED_18_20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_MMIO_ARB_RESERVED_18_20,
           INT_PC_REGS_MMIO_ARB_RESERVED_18_20_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_RESERVED_18_20 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_MMIO_ARB_RESERVED_18_20]

//>> SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_LDST_SET]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_LDST_SET(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_LDST_SET,
           INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_LDST_SET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_LDST_SET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_LDST_SET]

//>> SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_LDST_SET]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_LDST_SET(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_LDST_SET,
           INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_LDST_SET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_LDST_SET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_LDST_SET]

//>> GET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_LDST_SET]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_LDST_SET(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_LDST_SET,
           INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_LDST_SET_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_LDST_SET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_LDST_SET]

//>> SET_[INT_PC_REGS_MMIO_ARB_RESERVED_24]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_RESERVED_24(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_MMIO_ARB_RESERVED_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_RESERVED_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_RESERVED_24]

//>> SET_[INT_PC_REGS_MMIO_ARB_RESERVED_24]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_RESERVED_24(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_MMIO_ARB_RESERVED_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_RESERVED_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_RESERVED_24]

//>> SET_[INT_PC_REGS_MMIO_ARB_RESERVED_24]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_RESERVED_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.setBit<INT_PC_REGS_MMIO_ARB_RESERVED_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_RESERVED_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_RESERVED_24]

//>> CLEAR_[INT_PC_REGS_MMIO_ARB_RESERVED_24]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_MMIO_ARB_RESERVED_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.clearBit<INT_PC_REGS_MMIO_ARB_RESERVED_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_RESERVED_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_MMIO_ARB_RESERVED_24]

//>> GET_[INT_PC_REGS_MMIO_ARB_RESERVED_24]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_MMIO_ARB_RESERVED_24(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_MMIO_ARB_RESERVED_24,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_RESERVED_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_MMIO_ARB_RESERVED_24]

//>> GET_[INT_PC_REGS_MMIO_ARB_RESERVED_24]
static inline bool GET_INT_PC_REGS_MMIO_ARB_RESERVED_24(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return i_data.getBit<INT_PC_REGS_MMIO_ARB_RESERVED_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_RESERVED_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_MMIO_ARB_RESERVED_24]

//>> SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_LDST_RSP]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_LDST_RSP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_LDST_RSP,
           INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_LDST_RSP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_LDST_RSP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_LDST_RSP]

//>> SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_LDST_RSP]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_LDST_RSP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_LDST_RSP,
           INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_LDST_RSP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_LDST_RSP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_LDST_RSP]

//>> GET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_LDST_RSP]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_LDST_RSP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_LDST_RSP,
           INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_LDST_RSP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_LDST_RSP chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_LDST_RSP]

//>> SET_[INT_PC_REGS_MMIO_ARB_RESERVED_28]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_RESERVED_28(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_MMIO_ARB_RESERVED_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_RESERVED_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_RESERVED_28]

//>> SET_[INT_PC_REGS_MMIO_ARB_RESERVED_28]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_RESERVED_28(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_MMIO_ARB_RESERVED_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_RESERVED_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_RESERVED_28]

//>> SET_[INT_PC_REGS_MMIO_ARB_RESERVED_28]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_RESERVED_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.setBit<INT_PC_REGS_MMIO_ARB_RESERVED_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_RESERVED_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_RESERVED_28]

//>> CLEAR_[INT_PC_REGS_MMIO_ARB_RESERVED_28]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_MMIO_ARB_RESERVED_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.clearBit<INT_PC_REGS_MMIO_ARB_RESERVED_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_RESERVED_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_MMIO_ARB_RESERVED_28]

//>> GET_[INT_PC_REGS_MMIO_ARB_RESERVED_28]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_MMIO_ARB_RESERVED_28(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_MMIO_ARB_RESERVED_28,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_RESERVED_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_MMIO_ARB_RESERVED_28]

//>> GET_[INT_PC_REGS_MMIO_ARB_RESERVED_28]
static inline bool GET_INT_PC_REGS_MMIO_ARB_RESERVED_28(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return i_data.getBit<INT_PC_REGS_MMIO_ARB_RESERVED_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_RESERVED_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_MMIO_ARB_RESERVED_28]

//>> SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_DONE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_DONE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_DONE,
           INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_DONE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_DONE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_DONE]

//>> SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_DONE]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_DONE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_DONE,
           INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_DONE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_DONE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_DONE]

//>> GET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_DONE]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_DONE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_DONE,
           INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_DONE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_DONE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_DONE]

//>> SET_[INT_PC_REGS_MMIO_ARB_RESERVED_32]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_RESERVED_32(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_MMIO_ARB_RESERVED_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_RESERVED_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_RESERVED_32]

//>> SET_[INT_PC_REGS_MMIO_ARB_RESERVED_32]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_RESERVED_32(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_MMIO_ARB_RESERVED_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_RESERVED_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_RESERVED_32]

//>> SET_[INT_PC_REGS_MMIO_ARB_RESERVED_32]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_RESERVED_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.setBit<INT_PC_REGS_MMIO_ARB_RESERVED_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_RESERVED_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_RESERVED_32]

//>> CLEAR_[INT_PC_REGS_MMIO_ARB_RESERVED_32]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_MMIO_ARB_RESERVED_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.clearBit<INT_PC_REGS_MMIO_ARB_RESERVED_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_RESERVED_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_MMIO_ARB_RESERVED_32]

//>> GET_[INT_PC_REGS_MMIO_ARB_RESERVED_32]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_MMIO_ARB_RESERVED_32(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_MMIO_ARB_RESERVED_32,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_RESERVED_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_MMIO_ARB_RESERVED_32]

//>> GET_[INT_PC_REGS_MMIO_ARB_RESERVED_32]
static inline bool GET_INT_PC_REGS_MMIO_ARB_RESERVED_32(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return i_data.getBit<INT_PC_REGS_MMIO_ARB_RESERVED_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_RESERVED_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_MMIO_ARB_RESERVED_32]

//>> SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_RR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_RR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_RR,
           INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_RR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_RR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_RR]

//>> SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_RR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_RR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_RR,
           INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_RR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_RR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_RR]

//>> GET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_RR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_RR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_RR,
           INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_RR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_RR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_MMIO_ARB_CFG_MMIO_PCMD_ARB_PRIO_RR]

//>> SET_[INT_PC_REGS_MMIO_ARB_RESERVED_36_39]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_RESERVED_36_39(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_MMIO_ARB_RESERVED_36_39,
           INT_PC_REGS_MMIO_ARB_RESERVED_36_39_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_RESERVED_36_39 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_RESERVED_36_39]

//>> SET_[INT_PC_REGS_MMIO_ARB_RESERVED_36_39]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_MMIO_ARB_RESERVED_36_39(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_MMIO_ARB_RESERVED_36_39,
           INT_PC_REGS_MMIO_ARB_RESERVED_36_39_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_RESERVED_36_39 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_MMIO_ARB_RESERVED_36_39]

//>> GET_[INT_PC_REGS_MMIO_ARB_RESERVED_36_39]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_MMIO_ARB_RESERVED_36_39(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_MMIO_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_MMIO_ARB_RESERVED_36_39,
           INT_PC_REGS_MMIO_ARB_RESERVED_36_39_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_MMIO_ARB_RESERVED_36_39 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_MMIO_ARB_RESERVED_36_39]

//>> PREP_[INT_PC_REGS_PCMD_ARB]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_REGS_PCMD_ARB(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_PCMD_ARB;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_PC_REGS_PCMD_ARB]

//>> GET_[INT_PC_REGS_PCMD_ARB]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_REGS_PCMD_ARB(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_PCMD_ARB;
#endif
    return fapi2::getScom(i_target, INT_PC_REGS_PCMD_ARB, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_PC_REGS_PCMD_ARB]

//>> PUT_[INT_PC_REGS_PCMD_ARB]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_REGS_PCMD_ARB(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return fapi2::putScom(i_target, INT_PC_REGS_PCMD_ARB, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_PC_REGS_PCMD_ARB]


//>> SET_[INT_PC_REGS_PCMD_ARB_RESERVED_0]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_PCMD_ARB_RESERVED_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_PCMD_ARB_RESERVED_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_RESERVED_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_PCMD_ARB_RESERVED_0]

//>> SET_[INT_PC_REGS_PCMD_ARB_RESERVED_0]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_PCMD_ARB_RESERVED_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_PCMD_ARB_RESERVED_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_RESERVED_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_PCMD_ARB_RESERVED_0]

//>> SET_[INT_PC_REGS_PCMD_ARB_RESERVED_0]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_PCMD_ARB_RESERVED_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return o_data.setBit<INT_PC_REGS_PCMD_ARB_RESERVED_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_RESERVED_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_PCMD_ARB_RESERVED_0]

//>> CLEAR_[INT_PC_REGS_PCMD_ARB_RESERVED_0]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_PCMD_ARB_RESERVED_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return o_data.clearBit<INT_PC_REGS_PCMD_ARB_RESERVED_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_RESERVED_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_PCMD_ARB_RESERVED_0]

//>> GET_[INT_PC_REGS_PCMD_ARB_RESERVED_0]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_PCMD_ARB_RESERVED_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_PCMD_ARB_RESERVED_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_RESERVED_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_PCMD_ARB_RESERVED_0]

//>> GET_[INT_PC_REGS_PCMD_ARB_RESERVED_0]
static inline bool GET_INT_PC_REGS_PCMD_ARB_RESERVED_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return i_data.getBit<INT_PC_REGS_PCMD_ARB_RESERVED_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_RESERVED_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_PCMD_ARB_RESERVED_0]

//>> SET_[INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_LSI]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_LSI(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_LSI,
           INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_LSI_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_LSI chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_LSI]

//>> SET_[INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_LSI]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_LSI(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_LSI,
           INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_LSI_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_LSI chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_LSI]

//>> GET_[INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_LSI]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_LSI(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_LSI,
           INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_LSI_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_LSI chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_LSI]

//>> SET_[INT_PC_REGS_PCMD_ARB_RESERVED_4]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_PCMD_ARB_RESERVED_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_PCMD_ARB_RESERVED_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_RESERVED_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_PCMD_ARB_RESERVED_4]

//>> SET_[INT_PC_REGS_PCMD_ARB_RESERVED_4]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_PCMD_ARB_RESERVED_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_PCMD_ARB_RESERVED_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_RESERVED_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_PCMD_ARB_RESERVED_4]

//>> SET_[INT_PC_REGS_PCMD_ARB_RESERVED_4]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_PCMD_ARB_RESERVED_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return o_data.setBit<INT_PC_REGS_PCMD_ARB_RESERVED_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_RESERVED_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_PCMD_ARB_RESERVED_4]

//>> CLEAR_[INT_PC_REGS_PCMD_ARB_RESERVED_4]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_PCMD_ARB_RESERVED_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return o_data.clearBit<INT_PC_REGS_PCMD_ARB_RESERVED_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_RESERVED_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_PCMD_ARB_RESERVED_4]

//>> GET_[INT_PC_REGS_PCMD_ARB_RESERVED_4]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_PCMD_ARB_RESERVED_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_PCMD_ARB_RESERVED_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_RESERVED_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_PCMD_ARB_RESERVED_4]

//>> GET_[INT_PC_REGS_PCMD_ARB_RESERVED_4]
static inline bool GET_INT_PC_REGS_PCMD_ARB_RESERVED_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return i_data.getBit<INT_PC_REGS_PCMD_ARB_RESERVED_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_RESERVED_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_PCMD_ARB_RESERVED_4]

//>> SET_[INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_MMIO]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_MMIO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_MMIO,
           INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_MMIO_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_MMIO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_MMIO]

//>> SET_[INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_MMIO]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_MMIO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_MMIO,
           INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_MMIO_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_MMIO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_MMIO]

//>> GET_[INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_MMIO]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_MMIO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_MMIO,
           INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_MMIO_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_MMIO chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_MMIO]

//>> SET_[INT_PC_REGS_PCMD_ARB_RESERVED_8]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_PCMD_ARB_RESERVED_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_PCMD_ARB_RESERVED_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_RESERVED_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_PCMD_ARB_RESERVED_8]

//>> SET_[INT_PC_REGS_PCMD_ARB_RESERVED_8]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_PCMD_ARB_RESERVED_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_PCMD_ARB_RESERVED_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_RESERVED_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_PCMD_ARB_RESERVED_8]

//>> SET_[INT_PC_REGS_PCMD_ARB_RESERVED_8]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_PCMD_ARB_RESERVED_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return o_data.setBit<INT_PC_REGS_PCMD_ARB_RESERVED_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_RESERVED_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_PCMD_ARB_RESERVED_8]

//>> CLEAR_[INT_PC_REGS_PCMD_ARB_RESERVED_8]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_PCMD_ARB_RESERVED_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return o_data.clearBit<INT_PC_REGS_PCMD_ARB_RESERVED_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_RESERVED_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_PCMD_ARB_RESERVED_8]

//>> GET_[INT_PC_REGS_PCMD_ARB_RESERVED_8]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_PCMD_ARB_RESERVED_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_PCMD_ARB_RESERVED_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_RESERVED_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_PCMD_ARB_RESERVED_8]

//>> GET_[INT_PC_REGS_PCMD_ARB_RESERVED_8]
static inline bool GET_INT_PC_REGS_PCMD_ARB_RESERVED_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return i_data.getBit<INT_PC_REGS_PCMD_ARB_RESERVED_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_RESERVED_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_PCMD_ARB_RESERVED_8]

//>> SET_[INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_NRQ_REQ]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_NRQ_REQ(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_NRQ_REQ,
           INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_NRQ_REQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_NRQ_REQ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_NRQ_REQ]

//>> SET_[INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_NRQ_REQ]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_NRQ_REQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_NRQ_REQ,
           INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_NRQ_REQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_NRQ_REQ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_NRQ_REQ]

//>> GET_[INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_NRQ_REQ]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_NRQ_REQ(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_NRQ_REQ,
           INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_NRQ_REQ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_NRQ_REQ chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_NRQ_REQ]

//>> SET_[INT_PC_REGS_PCMD_ARB_RESERVED_12]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_PCMD_ARB_RESERVED_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_PCMD_ARB_RESERVED_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_RESERVED_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_PCMD_ARB_RESERVED_12]

//>> SET_[INT_PC_REGS_PCMD_ARB_RESERVED_12]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_PCMD_ARB_RESERVED_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_PCMD_ARB_RESERVED_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_RESERVED_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_PCMD_ARB_RESERVED_12]

//>> SET_[INT_PC_REGS_PCMD_ARB_RESERVED_12]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_PCMD_ARB_RESERVED_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return o_data.setBit<INT_PC_REGS_PCMD_ARB_RESERVED_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_RESERVED_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_PCMD_ARB_RESERVED_12]

//>> CLEAR_[INT_PC_REGS_PCMD_ARB_RESERVED_12]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_PCMD_ARB_RESERVED_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return o_data.clearBit<INT_PC_REGS_PCMD_ARB_RESERVED_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_RESERVED_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_PCMD_ARB_RESERVED_12]

//>> GET_[INT_PC_REGS_PCMD_ARB_RESERVED_12]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_PCMD_ARB_RESERVED_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_PCMD_ARB_RESERVED_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_RESERVED_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_PCMD_ARB_RESERVED_12]

//>> GET_[INT_PC_REGS_PCMD_ARB_RESERVED_12]
static inline bool GET_INT_PC_REGS_PCMD_ARB_RESERVED_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return i_data.getBit<INT_PC_REGS_PCMD_ARB_RESERVED_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_RESERVED_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_PCMD_ARB_RESERVED_12]

//>> SET_[INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_NRQ_RSP]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_NRQ_RSP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_NRQ_RSP,
           INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_NRQ_RSP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_NRQ_RSP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_NRQ_RSP]

//>> SET_[INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_NRQ_RSP]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_NRQ_RSP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_NRQ_RSP,
           INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_NRQ_RSP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_NRQ_RSP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_NRQ_RSP]

//>> GET_[INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_NRQ_RSP]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_NRQ_RSP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_NRQ_RSP,
           INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_NRQ_RSP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_NRQ_RSP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_NRQ_RSP]

//>> SET_[INT_PC_REGS_PCMD_ARB_RESERVED_16]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_PCMD_ARB_RESERVED_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_PCMD_ARB_RESERVED_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_RESERVED_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_PCMD_ARB_RESERVED_16]

//>> SET_[INT_PC_REGS_PCMD_ARB_RESERVED_16]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_PCMD_ARB_RESERVED_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_PCMD_ARB_RESERVED_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_RESERVED_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_PCMD_ARB_RESERVED_16]

//>> SET_[INT_PC_REGS_PCMD_ARB_RESERVED_16]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_PCMD_ARB_RESERVED_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return o_data.setBit<INT_PC_REGS_PCMD_ARB_RESERVED_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_RESERVED_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_PCMD_ARB_RESERVED_16]

//>> CLEAR_[INT_PC_REGS_PCMD_ARB_RESERVED_16]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_PCMD_ARB_RESERVED_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return o_data.clearBit<INT_PC_REGS_PCMD_ARB_RESERVED_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_RESERVED_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_PC_REGS_PCMD_ARB_RESERVED_16]

//>> GET_[INT_PC_REGS_PCMD_ARB_RESERVED_16]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_PCMD_ARB_RESERVED_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_PCMD_ARB_RESERVED_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_RESERVED_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_PCMD_ARB_RESERVED_16]

//>> GET_[INT_PC_REGS_PCMD_ARB_RESERVED_16]
static inline bool GET_INT_PC_REGS_PCMD_ARB_RESERVED_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return i_data.getBit<INT_PC_REGS_PCMD_ARB_RESERVED_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_RESERVED_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_PCMD_ARB_RESERVED_16]

//>> SET_[INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_RR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_RR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_RR,
           INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_RR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_RR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_RR]

//>> SET_[INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_RR]
static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_RR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return o_data.insertFromRight<INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_RR,
           INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_RR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_RR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_RR]

//>> GET_[INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_RR]
static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_RR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_PCMD_ARB));
#endif
    return i_data.extractToRight<INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_RR,
           INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_RR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_RR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_PC_REGS_PCMD_ARB_CFG_PCMD_ARB_PRIO_RR]

//>> PREP_[INT_VC_DBG_ATX_ORDER_2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_DBG_ATX_ORDER_2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_DBG_ATX_ORDER_2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_DBG_ATX_ORDER_2]

//>> GET_[INT_VC_DBG_ATX_ORDER_2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_DBG_ATX_ORDER_2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_DBG_ATX_ORDER_2;
#endif
    return fapi2::getScom(i_target, INT_VC_DBG_ATX_ORDER_2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_DBG_ATX_ORDER_2]

//>> PUT_[INT_VC_DBG_ATX_ORDER_2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_DBG_ATX_ORDER_2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_DBG_ATX_ORDER_2));
#endif
    return fapi2::putScom(i_target, INT_VC_DBG_ATX_ORDER_2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_DBG_ATX_ORDER_2]


//>> PREP_[INT_VC_ENDC_CFG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_ENDC_CFG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ENDC_CFG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_ENDC_CFG]

//>> GET_[INT_VC_ENDC_CFG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_ENDC_CFG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ENDC_CFG;
#endif
    return fapi2::getScom(i_target, INT_VC_ENDC_CFG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_ENDC_CFG]

//>> PUT_[INT_VC_ENDC_CFG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_ENDC_CFG(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return fapi2::putScom(i_target, INT_VC_ENDC_CFG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_ENDC_CFG]


//>> SET_[INT_VC_ENDC_CFG_MAX_NOSYS_CNT_EN]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_MAX_NOSYS_CNT_EN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_MAX_NOSYS_CNT_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_CFG_MAX_NOSYS_CNT_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_MAX_NOSYS_CNT_EN]

//>> SET_[INT_VC_ENDC_CFG_MAX_NOSYS_CNT_EN]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_MAX_NOSYS_CNT_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_MAX_NOSYS_CNT_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_CFG_MAX_NOSYS_CNT_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_MAX_NOSYS_CNT_EN]

//>> SET_[INT_VC_ENDC_CFG_MAX_NOSYS_CNT_EN]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_MAX_NOSYS_CNT_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.setBit<INT_VC_ENDC_CFG_MAX_NOSYS_CNT_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_ENDC_CFG_MAX_NOSYS_CNT_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_MAX_NOSYS_CNT_EN]

//>> CLEAR_[INT_VC_ENDC_CFG_MAX_NOSYS_CNT_EN]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_ENDC_CFG_MAX_NOSYS_CNT_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.clearBit<INT_VC_ENDC_CFG_MAX_NOSYS_CNT_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_ENDC_CFG_MAX_NOSYS_CNT_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_ENDC_CFG_MAX_NOSYS_CNT_EN]

//>> GET_[INT_VC_ENDC_CFG_MAX_NOSYS_CNT_EN]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_CFG_MAX_NOSYS_CNT_EN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return i_data.extractToRight<INT_VC_ENDC_CFG_MAX_NOSYS_CNT_EN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_CFG_MAX_NOSYS_CNT_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_MAX_NOSYS_CNT_EN]

//>> GET_[INT_VC_ENDC_CFG_MAX_NOSYS_CNT_EN]
static inline bool GET_INT_VC_ENDC_CFG_MAX_NOSYS_CNT_EN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return i_data.getBit<INT_VC_ENDC_CFG_MAX_NOSYS_CNT_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_ENDC_CFG_MAX_NOSYS_CNT_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_MAX_NOSYS_CNT_EN]

//>> SET_[INT_VC_ENDC_CFG_VT_VLD_BIT_EN]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_VT_VLD_BIT_EN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_VT_VLD_BIT_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_CFG_VT_VLD_BIT_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_VT_VLD_BIT_EN]

//>> SET_[INT_VC_ENDC_CFG_VT_VLD_BIT_EN]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_VT_VLD_BIT_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_VT_VLD_BIT_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_CFG_VT_VLD_BIT_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_VT_VLD_BIT_EN]

//>> SET_[INT_VC_ENDC_CFG_VT_VLD_BIT_EN]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_VT_VLD_BIT_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.setBit<INT_VC_ENDC_CFG_VT_VLD_BIT_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_ENDC_CFG_VT_VLD_BIT_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_VT_VLD_BIT_EN]

//>> CLEAR_[INT_VC_ENDC_CFG_VT_VLD_BIT_EN]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_ENDC_CFG_VT_VLD_BIT_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.clearBit<INT_VC_ENDC_CFG_VT_VLD_BIT_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_ENDC_CFG_VT_VLD_BIT_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_ENDC_CFG_VT_VLD_BIT_EN]

//>> GET_[INT_VC_ENDC_CFG_VT_VLD_BIT_EN]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_CFG_VT_VLD_BIT_EN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return i_data.extractToRight<INT_VC_ENDC_CFG_VT_VLD_BIT_EN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_CFG_VT_VLD_BIT_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_VT_VLD_BIT_EN]

//>> GET_[INT_VC_ENDC_CFG_VT_VLD_BIT_EN]
static inline bool GET_INT_VC_ENDC_CFG_VT_VLD_BIT_EN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return i_data.getBit<INT_VC_ENDC_CFG_VT_VLD_BIT_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_ENDC_CFG_VT_VLD_BIT_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_VT_VLD_BIT_EN]

//>> SET_[INT_VC_ENDC_CFG_RESERVED_2]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_RESERVED_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_RESERVED_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_CFG_RESERVED_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_RESERVED_2]

//>> SET_[INT_VC_ENDC_CFG_RESERVED_2]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_RESERVED_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_RESERVED_2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_CFG_RESERVED_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_RESERVED_2]

//>> SET_[INT_VC_ENDC_CFG_RESERVED_2]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_RESERVED_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.setBit<INT_VC_ENDC_CFG_RESERVED_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_ENDC_CFG_RESERVED_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_RESERVED_2]

//>> CLEAR_[INT_VC_ENDC_CFG_RESERVED_2]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_ENDC_CFG_RESERVED_2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.clearBit<INT_VC_ENDC_CFG_RESERVED_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_ENDC_CFG_RESERVED_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_ENDC_CFG_RESERVED_2]

//>> GET_[INT_VC_ENDC_CFG_RESERVED_2]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_CFG_RESERVED_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return i_data.extractToRight<INT_VC_ENDC_CFG_RESERVED_2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_CFG_RESERVED_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_RESERVED_2]

//>> GET_[INT_VC_ENDC_CFG_RESERVED_2]
static inline bool GET_INT_VC_ENDC_CFG_RESERVED_2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return i_data.getBit<INT_VC_ENDC_CFG_RESERVED_2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_ENDC_CFG_RESERVED_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_RESERVED_2]

//>> SET_[INT_VC_ENDC_CFG_MAX_NOSYS_CNT]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_MAX_NOSYS_CNT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_MAX_NOSYS_CNT,
           INT_VC_ENDC_CFG_MAX_NOSYS_CNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_CFG_MAX_NOSYS_CNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_MAX_NOSYS_CNT]

//>> SET_[INT_VC_ENDC_CFG_MAX_NOSYS_CNT]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_MAX_NOSYS_CNT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_MAX_NOSYS_CNT,
           INT_VC_ENDC_CFG_MAX_NOSYS_CNT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_CFG_MAX_NOSYS_CNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_MAX_NOSYS_CNT]

//>> GET_[INT_VC_ENDC_CFG_MAX_NOSYS_CNT]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_CFG_MAX_NOSYS_CNT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return i_data.extractToRight<INT_VC_ENDC_CFG_MAX_NOSYS_CNT,
           INT_VC_ENDC_CFG_MAX_NOSYS_CNT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_CFG_MAX_NOSYS_CNT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_MAX_NOSYS_CNT]

//>> SET_[INT_VC_ENDC_CFG_RESERVED_8]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_RESERVED_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_RESERVED_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_CFG_RESERVED_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_RESERVED_8]

//>> SET_[INT_VC_ENDC_CFG_RESERVED_8]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_RESERVED_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_RESERVED_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_CFG_RESERVED_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_RESERVED_8]

//>> SET_[INT_VC_ENDC_CFG_RESERVED_8]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_RESERVED_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.setBit<INT_VC_ENDC_CFG_RESERVED_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_ENDC_CFG_RESERVED_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_RESERVED_8]

//>> CLEAR_[INT_VC_ENDC_CFG_RESERVED_8]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_ENDC_CFG_RESERVED_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.clearBit<INT_VC_ENDC_CFG_RESERVED_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_ENDC_CFG_RESERVED_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_ENDC_CFG_RESERVED_8]

//>> GET_[INT_VC_ENDC_CFG_RESERVED_8]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_CFG_RESERVED_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return i_data.extractToRight<INT_VC_ENDC_CFG_RESERVED_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_CFG_RESERVED_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_RESERVED_8]

//>> GET_[INT_VC_ENDC_CFG_RESERVED_8]
static inline bool GET_INT_VC_ENDC_CFG_RESERVED_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return i_data.getBit<INT_VC_ENDC_CFG_RESERVED_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_ENDC_CFG_RESERVED_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_RESERVED_8]

//>> SET_[INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_DROP]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_DROP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_DROP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_DROP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_DROP]

//>> SET_[INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_DROP]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_DROP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_DROP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_DROP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_DROP]

//>> SET_[INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_DROP]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_DROP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.setBit<INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_DROP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_DROP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_DROP]

//>> CLEAR_[INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_DROP]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_DROP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.clearBit<INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_DROP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_DROP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_DROP]

//>> GET_[INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_DROP]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_DROP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return i_data.extractToRight<INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_DROP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_DROP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_DROP]

//>> GET_[INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_DROP]
static inline bool GET_INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_DROP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return i_data.getBit<INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_DROP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_DROP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_DROP]

//>> SET_[INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_SET]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_SET(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_SET,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_SET chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_SET]

//>> SET_[INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_SET]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_SET(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_SET,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_SET chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_SET]

//>> SET_[INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_SET]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_SET(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.setBit<INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_SET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_SET chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_SET]

//>> CLEAR_[INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_SET]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_SET(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.clearBit<INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_SET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_SET chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_SET]

//>> GET_[INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_SET]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_SET(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return i_data.extractToRight<INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_SET,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_SET chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_SET]

//>> GET_[INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_SET]
static inline bool GET_INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_SET(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return i_data.getBit<INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_SET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_SET chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VH_SET]

//>> SET_[INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VT_DROP]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VT_DROP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VT_DROP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VT_DROP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VT_DROP]

//>> SET_[INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VT_DROP]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VT_DROP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VT_DROP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VT_DROP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VT_DROP]

//>> SET_[INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VT_DROP]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VT_DROP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.setBit<INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VT_DROP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VT_DROP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VT_DROP]

//>> CLEAR_[INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VT_DROP]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VT_DROP(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.clearBit<INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VT_DROP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VT_DROP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VT_DROP]

//>> GET_[INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VT_DROP]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VT_DROP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return i_data.extractToRight<INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VT_DROP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VT_DROP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VT_DROP]

//>> GET_[INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VT_DROP]
static inline bool GET_INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VT_DROP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return i_data.getBit<INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VT_DROP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VT_DROP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_ON_VT_DROP]

//>> SET_[INT_VC_ENDC_CFG_RESERVED_12]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_RESERVED_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_RESERVED_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_CFG_RESERVED_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_RESERVED_12]

//>> SET_[INT_VC_ENDC_CFG_RESERVED_12]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_RESERVED_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_RESERVED_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_CFG_RESERVED_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_RESERVED_12]

//>> SET_[INT_VC_ENDC_CFG_RESERVED_12]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_RESERVED_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.setBit<INT_VC_ENDC_CFG_RESERVED_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_ENDC_CFG_RESERVED_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_RESERVED_12]

//>> CLEAR_[INT_VC_ENDC_CFG_RESERVED_12]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_ENDC_CFG_RESERVED_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.clearBit<INT_VC_ENDC_CFG_RESERVED_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_ENDC_CFG_RESERVED_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_ENDC_CFG_RESERVED_12]

//>> GET_[INT_VC_ENDC_CFG_RESERVED_12]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_CFG_RESERVED_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return i_data.extractToRight<INT_VC_ENDC_CFG_RESERVED_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_CFG_RESERVED_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_RESERVED_12]

//>> GET_[INT_VC_ENDC_CFG_RESERVED_12]
static inline bool GET_INT_VC_ENDC_CFG_RESERVED_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return i_data.getBit<INT_VC_ENDC_CFG_RESERVED_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_ENDC_CFG_RESERVED_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_RESERVED_12]

//>> SET_[INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_AFTER_EQP]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_AFTER_EQP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_AFTER_EQP,
           INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_AFTER_EQP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_AFTER_EQP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_AFTER_EQP]

//>> SET_[INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_AFTER_EQP]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_AFTER_EQP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_AFTER_EQP,
           INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_AFTER_EQP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_AFTER_EQP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_AFTER_EQP]

//>> GET_[INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_AFTER_EQP]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_AFTER_EQP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return i_data.extractToRight<INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_AFTER_EQP,
           INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_AFTER_EQP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_AFTER_EQP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_CLEAR_EQVGPREDICT_AFTER_EQP]

//>> SET_[INT_VC_ENDC_CFG_CORE_LOADS_ORDERING_RULE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CORE_LOADS_ORDERING_RULE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_CORE_LOADS_ORDERING_RULE,
           INT_VC_ENDC_CFG_CORE_LOADS_ORDERING_RULE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_CFG_CORE_LOADS_ORDERING_RULE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CORE_LOADS_ORDERING_RULE]

//>> SET_[INT_VC_ENDC_CFG_CORE_LOADS_ORDERING_RULE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CORE_LOADS_ORDERING_RULE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_CORE_LOADS_ORDERING_RULE,
           INT_VC_ENDC_CFG_CORE_LOADS_ORDERING_RULE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_CFG_CORE_LOADS_ORDERING_RULE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CORE_LOADS_ORDERING_RULE]

//>> GET_[INT_VC_ENDC_CFG_CORE_LOADS_ORDERING_RULE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_CFG_CORE_LOADS_ORDERING_RULE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return i_data.extractToRight<INT_VC_ENDC_CFG_CORE_LOADS_ORDERING_RULE,
           INT_VC_ENDC_CFG_CORE_LOADS_ORDERING_RULE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_CFG_CORE_LOADS_ORDERING_RULE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_CORE_LOADS_ORDERING_RULE]

//>> SET_[INT_VC_ENDC_CFG_TRIG_FWD_TARGET_QUEUE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_TRIG_FWD_TARGET_QUEUE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_TRIG_FWD_TARGET_QUEUE,
           INT_VC_ENDC_CFG_TRIG_FWD_TARGET_QUEUE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_CFG_TRIG_FWD_TARGET_QUEUE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_TRIG_FWD_TARGET_QUEUE]

//>> SET_[INT_VC_ENDC_CFG_TRIG_FWD_TARGET_QUEUE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_TRIG_FWD_TARGET_QUEUE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_TRIG_FWD_TARGET_QUEUE,
           INT_VC_ENDC_CFG_TRIG_FWD_TARGET_QUEUE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_CFG_TRIG_FWD_TARGET_QUEUE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_TRIG_FWD_TARGET_QUEUE]

//>> GET_[INT_VC_ENDC_CFG_TRIG_FWD_TARGET_QUEUE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_CFG_TRIG_FWD_TARGET_QUEUE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return i_data.extractToRight<INT_VC_ENDC_CFG_TRIG_FWD_TARGET_QUEUE,
           INT_VC_ENDC_CFG_TRIG_FWD_TARGET_QUEUE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_CFG_TRIG_FWD_TARGET_QUEUE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_TRIG_FWD_TARGET_QUEUE]

//>> SET_[INT_VC_ENDC_CFG_ESC_TARGET_QUEUE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_ESC_TARGET_QUEUE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_ESC_TARGET_QUEUE,
           INT_VC_ENDC_CFG_ESC_TARGET_QUEUE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_CFG_ESC_TARGET_QUEUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_ESC_TARGET_QUEUE]

//>> SET_[INT_VC_ENDC_CFG_ESC_TARGET_QUEUE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_ESC_TARGET_QUEUE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_ESC_TARGET_QUEUE,
           INT_VC_ENDC_CFG_ESC_TARGET_QUEUE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_CFG_ESC_TARGET_QUEUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_ESC_TARGET_QUEUE]

//>> GET_[INT_VC_ENDC_CFG_ESC_TARGET_QUEUE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_CFG_ESC_TARGET_QUEUE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return i_data.extractToRight<INT_VC_ENDC_CFG_ESC_TARGET_QUEUE,
           INT_VC_ENDC_CFG_ESC_TARGET_QUEUE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_CFG_ESC_TARGET_QUEUE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_ESC_TARGET_QUEUE]

//>> SET_[INT_VC_ENDC_CFG_CACHE_WATCH_ASSIGN]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CACHE_WATCH_ASSIGN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_CACHE_WATCH_ASSIGN,
           INT_VC_ENDC_CFG_CACHE_WATCH_ASSIGN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_CFG_CACHE_WATCH_ASSIGN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CACHE_WATCH_ASSIGN]

//>> SET_[INT_VC_ENDC_CFG_CACHE_WATCH_ASSIGN]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_CACHE_WATCH_ASSIGN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_CACHE_WATCH_ASSIGN,
           INT_VC_ENDC_CFG_CACHE_WATCH_ASSIGN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_CFG_CACHE_WATCH_ASSIGN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_CACHE_WATCH_ASSIGN]

//>> GET_[INT_VC_ENDC_CFG_CACHE_WATCH_ASSIGN]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_CFG_CACHE_WATCH_ASSIGN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return i_data.extractToRight<INT_VC_ENDC_CFG_CACHE_WATCH_ASSIGN,
           INT_VC_ENDC_CFG_CACHE_WATCH_ASSIGN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_CFG_CACHE_WATCH_ASSIGN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_CACHE_WATCH_ASSIGN]

//>> SET_[INT_VC_ENDC_CFG_RESERVED_36_42]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_RESERVED_36_42(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_RESERVED_36_42,
           INT_VC_ENDC_CFG_RESERVED_36_42_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_CFG_RESERVED_36_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_RESERVED_36_42]

//>> SET_[INT_VC_ENDC_CFG_RESERVED_36_42]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_RESERVED_36_42(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_RESERVED_36_42,
           INT_VC_ENDC_CFG_RESERVED_36_42_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_CFG_RESERVED_36_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_RESERVED_36_42]

//>> GET_[INT_VC_ENDC_CFG_RESERVED_36_42]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_CFG_RESERVED_36_42(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return i_data.extractToRight<INT_VC_ENDC_CFG_RESERVED_36_42,
           INT_VC_ENDC_CFG_RESERVED_36_42_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_CFG_RESERVED_36_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_RESERVED_36_42]

//>> SET_[INT_VC_ENDC_CFG_SKIP_ESCALATE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_SKIP_ESCALATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_SKIP_ESCALATE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_CFG_SKIP_ESCALATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_SKIP_ESCALATE]

//>> SET_[INT_VC_ENDC_CFG_SKIP_ESCALATE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_SKIP_ESCALATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_SKIP_ESCALATE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_CFG_SKIP_ESCALATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_SKIP_ESCALATE]

//>> SET_[INT_VC_ENDC_CFG_SKIP_ESCALATE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_SKIP_ESCALATE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.setBit<INT_VC_ENDC_CFG_SKIP_ESCALATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_ENDC_CFG_SKIP_ESCALATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_SKIP_ESCALATE]

//>> CLEAR_[INT_VC_ENDC_CFG_SKIP_ESCALATE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_ENDC_CFG_SKIP_ESCALATE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.clearBit<INT_VC_ENDC_CFG_SKIP_ESCALATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_ENDC_CFG_SKIP_ESCALATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_ENDC_CFG_SKIP_ESCALATE]

//>> GET_[INT_VC_ENDC_CFG_SKIP_ESCALATE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_CFG_SKIP_ESCALATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return i_data.extractToRight<INT_VC_ENDC_CFG_SKIP_ESCALATE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_CFG_SKIP_ESCALATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_SKIP_ESCALATE]

//>> GET_[INT_VC_ENDC_CFG_SKIP_ESCALATE]
static inline bool GET_INT_VC_ENDC_CFG_SKIP_ESCALATE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return i_data.getBit<INT_VC_ENDC_CFG_SKIP_ESCALATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_ENDC_CFG_SKIP_ESCALATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_SKIP_ESCALATE]

//>> SET_[INT_VC_ENDC_CFG_RESERVED_44_45]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_RESERVED_44_45(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_RESERVED_44_45,
           INT_VC_ENDC_CFG_RESERVED_44_45_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_CFG_RESERVED_44_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_RESERVED_44_45]

//>> SET_[INT_VC_ENDC_CFG_RESERVED_44_45]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_RESERVED_44_45(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_RESERVED_44_45,
           INT_VC_ENDC_CFG_RESERVED_44_45_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_CFG_RESERVED_44_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_RESERVED_44_45]

//>> GET_[INT_VC_ENDC_CFG_RESERVED_44_45]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_CFG_RESERVED_44_45(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return i_data.extractToRight<INT_VC_ENDC_CFG_RESERVED_44_45,
           INT_VC_ENDC_CFG_RESERVED_44_45_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_CFG_RESERVED_44_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_RESERVED_44_45]

//>> SET_[INT_VC_ENDC_CFG_MAX_PTAG_IN_USE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_MAX_PTAG_IN_USE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_MAX_PTAG_IN_USE,
           INT_VC_ENDC_CFG_MAX_PTAG_IN_USE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_CFG_MAX_PTAG_IN_USE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_MAX_PTAG_IN_USE]

//>> SET_[INT_VC_ENDC_CFG_MAX_PTAG_IN_USE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_MAX_PTAG_IN_USE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_MAX_PTAG_IN_USE,
           INT_VC_ENDC_CFG_MAX_PTAG_IN_USE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_CFG_MAX_PTAG_IN_USE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_MAX_PTAG_IN_USE]

//>> GET_[INT_VC_ENDC_CFG_MAX_PTAG_IN_USE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_CFG_MAX_PTAG_IN_USE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return i_data.extractToRight<INT_VC_ENDC_CFG_MAX_PTAG_IN_USE,
           INT_VC_ENDC_CFG_MAX_PTAG_IN_USE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_CFG_MAX_PTAG_IN_USE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_MAX_PTAG_IN_USE]

//>> SET_[INT_VC_ENDC_CFG_BG_SCAN_RATE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_BG_SCAN_RATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_BG_SCAN_RATE,
           INT_VC_ENDC_CFG_BG_SCAN_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_CFG_BG_SCAN_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_BG_SCAN_RATE]

//>> SET_[INT_VC_ENDC_CFG_BG_SCAN_RATE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_BG_SCAN_RATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_BG_SCAN_RATE,
           INT_VC_ENDC_CFG_BG_SCAN_RATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_CFG_BG_SCAN_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_BG_SCAN_RATE]

//>> GET_[INT_VC_ENDC_CFG_BG_SCAN_RATE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_CFG_BG_SCAN_RATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return i_data.extractToRight<INT_VC_ENDC_CFG_BG_SCAN_RATE,
           INT_VC_ENDC_CFG_BG_SCAN_RATE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_CFG_BG_SCAN_RATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_BG_SCAN_RATE]

//>> SET_[INT_VC_ENDC_CFG_RESERVED_56]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_RESERVED_56(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_RESERVED_56,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_CFG_RESERVED_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_RESERVED_56]

//>> SET_[INT_VC_ENDC_CFG_RESERVED_56]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_RESERVED_56(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_RESERVED_56,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_CFG_RESERVED_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_RESERVED_56]

//>> SET_[INT_VC_ENDC_CFG_RESERVED_56]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_RESERVED_56(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.setBit<INT_VC_ENDC_CFG_RESERVED_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_ENDC_CFG_RESERVED_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_RESERVED_56]

//>> CLEAR_[INT_VC_ENDC_CFG_RESERVED_56]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_ENDC_CFG_RESERVED_56(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.clearBit<INT_VC_ENDC_CFG_RESERVED_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_ENDC_CFG_RESERVED_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_ENDC_CFG_RESERVED_56]

//>> GET_[INT_VC_ENDC_CFG_RESERVED_56]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_CFG_RESERVED_56(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return i_data.extractToRight<INT_VC_ENDC_CFG_RESERVED_56,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_CFG_RESERVED_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_RESERVED_56]

//>> GET_[INT_VC_ENDC_CFG_RESERVED_56]
static inline bool GET_INT_VC_ENDC_CFG_RESERVED_56(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return i_data.getBit<INT_VC_ENDC_CFG_RESERVED_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_ENDC_CFG_RESERVED_56 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_RESERVED_56]

//>> SET_[INT_VC_ENDC_CFG_FORCE_INVALIDATE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_FORCE_INVALIDATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_FORCE_INVALIDATE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_CFG_FORCE_INVALIDATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_FORCE_INVALIDATE]

//>> SET_[INT_VC_ENDC_CFG_FORCE_INVALIDATE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_FORCE_INVALIDATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_FORCE_INVALIDATE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_CFG_FORCE_INVALIDATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_FORCE_INVALIDATE]

//>> SET_[INT_VC_ENDC_CFG_FORCE_INVALIDATE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_FORCE_INVALIDATE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.setBit<INT_VC_ENDC_CFG_FORCE_INVALIDATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access INT_VC_ENDC_CFG_FORCE_INVALIDATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_FORCE_INVALIDATE]

//>> CLEAR_[INT_VC_ENDC_CFG_FORCE_INVALIDATE]
static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_ENDC_CFG_FORCE_INVALIDATE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.clearBit<INT_VC_ENDC_CFG_FORCE_INVALIDATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access INT_VC_ENDC_CFG_FORCE_INVALIDATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[INT_VC_ENDC_CFG_FORCE_INVALIDATE]

//>> GET_[INT_VC_ENDC_CFG_FORCE_INVALIDATE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_CFG_FORCE_INVALIDATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return i_data.extractToRight<INT_VC_ENDC_CFG_FORCE_INVALIDATE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_CFG_FORCE_INVALIDATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_FORCE_INVALIDATE]

//>> GET_[INT_VC_ENDC_CFG_FORCE_INVALIDATE]
static inline bool GET_INT_VC_ENDC_CFG_FORCE_INVALIDATE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return i_data.getBit<INT_VC_ENDC_CFG_FORCE_INVALIDATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access INT_VC_ENDC_CFG_FORCE_INVALIDATE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_FORCE_INVALIDATE]

//>> SET_[INT_VC_ENDC_CFG_MAX_ENTRIES_IN_MODIFIED]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_MAX_ENTRIES_IN_MODIFIED(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_MAX_ENTRIES_IN_MODIFIED,
           INT_VC_ENDC_CFG_MAX_ENTRIES_IN_MODIFIED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ENDC_CFG_MAX_ENTRIES_IN_MODIFIED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_MAX_ENTRIES_IN_MODIFIED]

//>> SET_[INT_VC_ENDC_CFG_MAX_ENTRIES_IN_MODIFIED]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_CFG_MAX_ENTRIES_IN_MODIFIED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_CFG_MAX_ENTRIES_IN_MODIFIED,
           INT_VC_ENDC_CFG_MAX_ENTRIES_IN_MODIFIED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ENDC_CFG_MAX_ENTRIES_IN_MODIFIED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ENDC_CFG_MAX_ENTRIES_IN_MODIFIED]

//>> GET_[INT_VC_ENDC_CFG_MAX_ENTRIES_IN_MODIFIED]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_CFG_MAX_ENTRIES_IN_MODIFIED(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_CFG));
#endif
    return i_data.extractToRight<INT_VC_ENDC_CFG_MAX_ENTRIES_IN_MODIFIED,
           INT_VC_ENDC_CFG_MAX_ENTRIES_IN_MODIFIED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ENDC_CFG_MAX_ENTRIES_IN_MODIFIED chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ENDC_CFG_MAX_ENTRIES_IN_MODIFIED]

//>> PREP_[INT_VC_ENDC_WATCH0_DATA0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_ENDC_WATCH0_DATA0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ENDC_WATCH0_DATA0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_ENDC_WATCH0_DATA0]

//>> GET_[INT_VC_ENDC_WATCH0_DATA0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_ENDC_WATCH0_DATA0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ENDC_WATCH0_DATA0;
#endif
    return fapi2::getScom(i_target, INT_VC_ENDC_WATCH0_DATA0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_ENDC_WATCH0_DATA0]

//>> PUT_[INT_VC_ENDC_WATCH0_DATA0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_ENDC_WATCH0_DATA0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH0_DATA0));
#endif
    return fapi2::putScom(i_target, INT_VC_ENDC_WATCH0_DATA0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_ENDC_WATCH0_DATA0]


//>> PREP_[INT_VC_EQA_TO_ENDC_CREDITS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_EQA_TO_ENDC_CREDITS(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_EQA_TO_ENDC_CREDITS;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_EQA_TO_ENDC_CREDITS]

//>> GET_[INT_VC_EQA_TO_ENDC_CREDITS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_EQA_TO_ENDC_CREDITS(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_EQA_TO_ENDC_CREDITS;
#endif
    return fapi2::getScom(i_target, INT_VC_EQA_TO_ENDC_CREDITS, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_EQA_TO_ENDC_CREDITS]

//>> PUT_[INT_VC_EQA_TO_ENDC_CREDITS]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_EQA_TO_ENDC_CREDITS(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return fapi2::putScom(i_target, INT_VC_EQA_TO_ENDC_CREDITS, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_EQA_TO_ENDC_CREDITS]


//>> SET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_0_2]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_0_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return o_data.insertFromRight<INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_0_2,
           INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_0_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_0_2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_0_2]

//>> SET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_0_2]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_0_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return o_data.insertFromRight<INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_0_2,
           INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_0_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_0_2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_0_2]

//>> GET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_0_2]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_0_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return i_data.extractToRight<INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_0_2,
           INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_0_2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_0_2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_0_2]

//>> SET_[INT_VC_EQA_TO_ENDC_CREDITS_IPI_RSD_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_EQA_TO_ENDC_CREDITS_IPI_RSD_CREDITS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return o_data.insertFromRight<INT_VC_EQA_TO_ENDC_CREDITS_IPI_RSD_CREDITS,
           INT_VC_EQA_TO_ENDC_CREDITS_IPI_RSD_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_IPI_RSD_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_EQA_TO_ENDC_CREDITS_IPI_RSD_CREDITS]

//>> SET_[INT_VC_EQA_TO_ENDC_CREDITS_IPI_RSD_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_EQA_TO_ENDC_CREDITS_IPI_RSD_CREDITS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return o_data.insertFromRight<INT_VC_EQA_TO_ENDC_CREDITS_IPI_RSD_CREDITS,
           INT_VC_EQA_TO_ENDC_CREDITS_IPI_RSD_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_IPI_RSD_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_EQA_TO_ENDC_CREDITS_IPI_RSD_CREDITS]

//>> GET_[INT_VC_EQA_TO_ENDC_CREDITS_IPI_RSD_CREDITS]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_EQA_TO_ENDC_CREDITS_IPI_RSD_CREDITS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return i_data.extractToRight<INT_VC_EQA_TO_ENDC_CREDITS_IPI_RSD_CREDITS,
           INT_VC_EQA_TO_ENDC_CREDITS_IPI_RSD_CREDITS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_IPI_RSD_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_EQA_TO_ENDC_CREDITS_IPI_RSD_CREDITS]

//>> SET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_8_10]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_8_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return o_data.insertFromRight<INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_8_10,
           INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_8_10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_8_10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_8_10]

//>> SET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_8_10]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_8_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return o_data.insertFromRight<INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_8_10,
           INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_8_10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_8_10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_8_10]

//>> GET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_8_10]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_8_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return i_data.extractToRight<INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_8_10,
           INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_8_10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_8_10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_8_10]

//>> SET_[INT_VC_EQA_TO_ENDC_CREDITS_HWD_RSD_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_EQA_TO_ENDC_CREDITS_HWD_RSD_CREDITS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return o_data.insertFromRight<INT_VC_EQA_TO_ENDC_CREDITS_HWD_RSD_CREDITS,
           INT_VC_EQA_TO_ENDC_CREDITS_HWD_RSD_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_HWD_RSD_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_EQA_TO_ENDC_CREDITS_HWD_RSD_CREDITS]

//>> SET_[INT_VC_EQA_TO_ENDC_CREDITS_HWD_RSD_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_EQA_TO_ENDC_CREDITS_HWD_RSD_CREDITS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return o_data.insertFromRight<INT_VC_EQA_TO_ENDC_CREDITS_HWD_RSD_CREDITS,
           INT_VC_EQA_TO_ENDC_CREDITS_HWD_RSD_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_HWD_RSD_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_EQA_TO_ENDC_CREDITS_HWD_RSD_CREDITS]

//>> GET_[INT_VC_EQA_TO_ENDC_CREDITS_HWD_RSD_CREDITS]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_EQA_TO_ENDC_CREDITS_HWD_RSD_CREDITS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return i_data.extractToRight<INT_VC_EQA_TO_ENDC_CREDITS_HWD_RSD_CREDITS,
           INT_VC_EQA_TO_ENDC_CREDITS_HWD_RSD_CREDITS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_HWD_RSD_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_EQA_TO_ENDC_CREDITS_HWD_RSD_CREDITS]

//>> SET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_16_18]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_16_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return o_data.insertFromRight<INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_16_18,
           INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_16_18_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_16_18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_16_18]

//>> SET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_16_18]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_16_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return o_data.insertFromRight<INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_16_18,
           INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_16_18_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_16_18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_16_18]

//>> GET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_16_18]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_16_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return i_data.extractToRight<INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_16_18,
           INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_16_18_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_16_18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_16_18]

//>> SET_[INT_VC_EQA_TO_ENDC_CREDITS_NXC_RSD_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_EQA_TO_ENDC_CREDITS_NXC_RSD_CREDITS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return o_data.insertFromRight<INT_VC_EQA_TO_ENDC_CREDITS_NXC_RSD_CREDITS,
           INT_VC_EQA_TO_ENDC_CREDITS_NXC_RSD_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_NXC_RSD_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_EQA_TO_ENDC_CREDITS_NXC_RSD_CREDITS]

//>> SET_[INT_VC_EQA_TO_ENDC_CREDITS_NXC_RSD_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_EQA_TO_ENDC_CREDITS_NXC_RSD_CREDITS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return o_data.insertFromRight<INT_VC_EQA_TO_ENDC_CREDITS_NXC_RSD_CREDITS,
           INT_VC_EQA_TO_ENDC_CREDITS_NXC_RSD_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_NXC_RSD_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_EQA_TO_ENDC_CREDITS_NXC_RSD_CREDITS]

//>> GET_[INT_VC_EQA_TO_ENDC_CREDITS_NXC_RSD_CREDITS]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_EQA_TO_ENDC_CREDITS_NXC_RSD_CREDITS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return i_data.extractToRight<INT_VC_EQA_TO_ENDC_CREDITS_NXC_RSD_CREDITS,
           INT_VC_EQA_TO_ENDC_CREDITS_NXC_RSD_CREDITS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_NXC_RSD_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_EQA_TO_ENDC_CREDITS_NXC_RSD_CREDITS]

//>> SET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_24_26]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_24_26(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return o_data.insertFromRight<INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_24_26,
           INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_24_26_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_24_26 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_24_26]

//>> SET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_24_26]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_24_26(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return o_data.insertFromRight<INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_24_26,
           INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_24_26_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_24_26 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_24_26]

//>> GET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_24_26]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_24_26(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return i_data.extractToRight<INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_24_26,
           INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_24_26_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_24_26 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_24_26]

//>> SET_[INT_VC_EQA_TO_ENDC_CREDITS_INT_RSD_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_EQA_TO_ENDC_CREDITS_INT_RSD_CREDITS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return o_data.insertFromRight<INT_VC_EQA_TO_ENDC_CREDITS_INT_RSD_CREDITS,
           INT_VC_EQA_TO_ENDC_CREDITS_INT_RSD_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_INT_RSD_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_EQA_TO_ENDC_CREDITS_INT_RSD_CREDITS]

//>> SET_[INT_VC_EQA_TO_ENDC_CREDITS_INT_RSD_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_EQA_TO_ENDC_CREDITS_INT_RSD_CREDITS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return o_data.insertFromRight<INT_VC_EQA_TO_ENDC_CREDITS_INT_RSD_CREDITS,
           INT_VC_EQA_TO_ENDC_CREDITS_INT_RSD_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_INT_RSD_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_EQA_TO_ENDC_CREDITS_INT_RSD_CREDITS]

//>> GET_[INT_VC_EQA_TO_ENDC_CREDITS_INT_RSD_CREDITS]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_EQA_TO_ENDC_CREDITS_INT_RSD_CREDITS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return i_data.extractToRight<INT_VC_EQA_TO_ENDC_CREDITS_INT_RSD_CREDITS,
           INT_VC_EQA_TO_ENDC_CREDITS_INT_RSD_CREDITS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_INT_RSD_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_EQA_TO_ENDC_CREDITS_INT_RSD_CREDITS]

//>> SET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_32_34]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_32_34(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return o_data.insertFromRight<INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_32_34,
           INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_32_34_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_32_34 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_32_34]

//>> SET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_32_34]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_32_34(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return o_data.insertFromRight<INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_32_34,
           INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_32_34_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_32_34 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_32_34]

//>> GET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_32_34]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_32_34(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return i_data.extractToRight<INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_32_34,
           INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_32_34_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_32_34 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_32_34]

//>> SET_[INT_VC_EQA_TO_ENDC_CREDITS_OS_RSD_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_EQA_TO_ENDC_CREDITS_OS_RSD_CREDITS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return o_data.insertFromRight<INT_VC_EQA_TO_ENDC_CREDITS_OS_RSD_CREDITS,
           INT_VC_EQA_TO_ENDC_CREDITS_OS_RSD_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_OS_RSD_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_EQA_TO_ENDC_CREDITS_OS_RSD_CREDITS]

//>> SET_[INT_VC_EQA_TO_ENDC_CREDITS_OS_RSD_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_EQA_TO_ENDC_CREDITS_OS_RSD_CREDITS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return o_data.insertFromRight<INT_VC_EQA_TO_ENDC_CREDITS_OS_RSD_CREDITS,
           INT_VC_EQA_TO_ENDC_CREDITS_OS_RSD_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_OS_RSD_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_EQA_TO_ENDC_CREDITS_OS_RSD_CREDITS]

//>> GET_[INT_VC_EQA_TO_ENDC_CREDITS_OS_RSD_CREDITS]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_EQA_TO_ENDC_CREDITS_OS_RSD_CREDITS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return i_data.extractToRight<INT_VC_EQA_TO_ENDC_CREDITS_OS_RSD_CREDITS,
           INT_VC_EQA_TO_ENDC_CREDITS_OS_RSD_CREDITS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_OS_RSD_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_EQA_TO_ENDC_CREDITS_OS_RSD_CREDITS]

//>> SET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_40_42]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_40_42(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return o_data.insertFromRight<INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_40_42,
           INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_40_42_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_40_42 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_40_42]

//>> SET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_40_42]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_40_42(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return o_data.insertFromRight<INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_40_42,
           INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_40_42_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_40_42 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_40_42]

//>> GET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_40_42]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_40_42(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return i_data.extractToRight<INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_40_42,
           INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_40_42_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_40_42 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_40_42]

//>> SET_[INT_VC_EQA_TO_ENDC_CREDITS_POOL_RSD_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_EQA_TO_ENDC_CREDITS_POOL_RSD_CREDITS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return o_data.insertFromRight<INT_VC_EQA_TO_ENDC_CREDITS_POOL_RSD_CREDITS,
           INT_VC_EQA_TO_ENDC_CREDITS_POOL_RSD_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_POOL_RSD_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_EQA_TO_ENDC_CREDITS_POOL_RSD_CREDITS]

//>> SET_[INT_VC_EQA_TO_ENDC_CREDITS_POOL_RSD_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_EQA_TO_ENDC_CREDITS_POOL_RSD_CREDITS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return o_data.insertFromRight<INT_VC_EQA_TO_ENDC_CREDITS_POOL_RSD_CREDITS,
           INT_VC_EQA_TO_ENDC_CREDITS_POOL_RSD_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_POOL_RSD_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_EQA_TO_ENDC_CREDITS_POOL_RSD_CREDITS]

//>> GET_[INT_VC_EQA_TO_ENDC_CREDITS_POOL_RSD_CREDITS]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_EQA_TO_ENDC_CREDITS_POOL_RSD_CREDITS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return i_data.extractToRight<INT_VC_EQA_TO_ENDC_CREDITS_POOL_RSD_CREDITS,
           INT_VC_EQA_TO_ENDC_CREDITS_POOL_RSD_CREDITS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_POOL_RSD_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_EQA_TO_ENDC_CREDITS_POOL_RSD_CREDITS]

//>> SET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_48_50]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_48_50(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return o_data.insertFromRight<INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_48_50,
           INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_48_50_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_48_50 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_48_50]

//>> SET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_48_50]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_48_50(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return o_data.insertFromRight<INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_48_50,
           INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_48_50_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_48_50 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_48_50]

//>> GET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_48_50]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_48_50(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return i_data.extractToRight<INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_48_50,
           INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_48_50_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_48_50 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_48_50]

//>> SET_[INT_VC_EQA_TO_ENDC_CREDITS_HARD_RSD_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_EQA_TO_ENDC_CREDITS_HARD_RSD_CREDITS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return o_data.insertFromRight<INT_VC_EQA_TO_ENDC_CREDITS_HARD_RSD_CREDITS,
           INT_VC_EQA_TO_ENDC_CREDITS_HARD_RSD_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_HARD_RSD_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_EQA_TO_ENDC_CREDITS_HARD_RSD_CREDITS]

//>> SET_[INT_VC_EQA_TO_ENDC_CREDITS_HARD_RSD_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_EQA_TO_ENDC_CREDITS_HARD_RSD_CREDITS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return o_data.insertFromRight<INT_VC_EQA_TO_ENDC_CREDITS_HARD_RSD_CREDITS,
           INT_VC_EQA_TO_ENDC_CREDITS_HARD_RSD_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_HARD_RSD_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_EQA_TO_ENDC_CREDITS_HARD_RSD_CREDITS]

//>> GET_[INT_VC_EQA_TO_ENDC_CREDITS_HARD_RSD_CREDITS]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_EQA_TO_ENDC_CREDITS_HARD_RSD_CREDITS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return i_data.extractToRight<INT_VC_EQA_TO_ENDC_CREDITS_HARD_RSD_CREDITS,
           INT_VC_EQA_TO_ENDC_CREDITS_HARD_RSD_CREDITS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_HARD_RSD_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_EQA_TO_ENDC_CREDITS_HARD_RSD_CREDITS]

//>> SET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_56_57]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_56_57(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return o_data.insertFromRight<INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_56_57,
           INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_56_57_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_56_57 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_56_57]

//>> SET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_56_57]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_56_57(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return o_data.insertFromRight<INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_56_57,
           INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_56_57_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_56_57 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_56_57]

//>> GET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_56_57]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_56_57(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return i_data.extractToRight<INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_56_57,
           INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_56_57_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_56_57 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_EQA_TO_ENDC_CREDITS_RESERVED_56_57]

//>> SET_[INT_VC_EQA_TO_ENDC_CREDITS_POOL_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_EQA_TO_ENDC_CREDITS_POOL_CREDITS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return o_data.insertFromRight<INT_VC_EQA_TO_ENDC_CREDITS_POOL_CREDITS,
           INT_VC_EQA_TO_ENDC_CREDITS_POOL_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_POOL_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_EQA_TO_ENDC_CREDITS_POOL_CREDITS]

//>> SET_[INT_VC_EQA_TO_ENDC_CREDITS_POOL_CREDITS]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_EQA_TO_ENDC_CREDITS_POOL_CREDITS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return o_data.insertFromRight<INT_VC_EQA_TO_ENDC_CREDITS_POOL_CREDITS,
           INT_VC_EQA_TO_ENDC_CREDITS_POOL_CREDITS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_POOL_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_EQA_TO_ENDC_CREDITS_POOL_CREDITS]

//>> GET_[INT_VC_EQA_TO_ENDC_CREDITS_POOL_CREDITS]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_EQA_TO_ENDC_CREDITS_POOL_CREDITS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EQA_TO_ENDC_CREDITS));
#endif
    return i_data.extractToRight<INT_VC_EQA_TO_ENDC_CREDITS_POOL_CREDITS,
           INT_VC_EQA_TO_ENDC_CREDITS_POOL_CREDITS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_EQA_TO_ENDC_CREDITS_POOL_CREDITS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_EQA_TO_ENDC_CREDITS_POOL_CREDITS]

//>> PREP_[INT_VC_ESBC_FLUSH_INJECT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_ESBC_FLUSH_INJECT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ESBC_FLUSH_INJECT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_ESBC_FLUSH_INJECT]

//>> GET_[INT_VC_ESBC_FLUSH_INJECT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_ESBC_FLUSH_INJECT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ESBC_FLUSH_INJECT;
#endif
    return fapi2::getScom(i_target, INT_VC_ESBC_FLUSH_INJECT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_ESBC_FLUSH_INJECT]

//>> PUT_[INT_VC_ESBC_FLUSH_INJECT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_ESBC_FLUSH_INJECT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_FLUSH_INJECT));
#endif
    return fapi2::putScom(i_target, INT_VC_ESBC_FLUSH_INJECT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_ESBC_FLUSH_INJECT]


//>> SET_[INT_VC_ESBC_FLUSH_INJECT_BLOCKID]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_FLUSH_INJECT_BLOCKID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_FLUSH_INJECT));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_FLUSH_INJECT_BLOCKID,
           INT_VC_ESBC_FLUSH_INJECT_BLOCKID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ESBC_FLUSH_INJECT_BLOCKID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_FLUSH_INJECT_BLOCKID]

//>> SET_[INT_VC_ESBC_FLUSH_INJECT_BLOCKID]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_FLUSH_INJECT_BLOCKID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_FLUSH_INJECT));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_FLUSH_INJECT_BLOCKID,
           INT_VC_ESBC_FLUSH_INJECT_BLOCKID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ESBC_FLUSH_INJECT_BLOCKID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_FLUSH_INJECT_BLOCKID]

//>> GET_[INT_VC_ESBC_FLUSH_INJECT_BLOCKID]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ESBC_FLUSH_INJECT_BLOCKID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_FLUSH_INJECT));
#endif
    return i_data.extractToRight<INT_VC_ESBC_FLUSH_INJECT_BLOCKID,
           INT_VC_ESBC_FLUSH_INJECT_BLOCKID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ESBC_FLUSH_INJECT_BLOCKID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ESBC_FLUSH_INJECT_BLOCKID]

//>> SET_[INT_VC_ESBC_FLUSH_INJECT_OFFSET]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_FLUSH_INJECT_OFFSET(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_FLUSH_INJECT));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_FLUSH_INJECT_OFFSET,
           INT_VC_ESBC_FLUSH_INJECT_OFFSET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ESBC_FLUSH_INJECT_OFFSET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_FLUSH_INJECT_OFFSET]

//>> SET_[INT_VC_ESBC_FLUSH_INJECT_OFFSET]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_FLUSH_INJECT_OFFSET(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_FLUSH_INJECT));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_FLUSH_INJECT_OFFSET,
           INT_VC_ESBC_FLUSH_INJECT_OFFSET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ESBC_FLUSH_INJECT_OFFSET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_FLUSH_INJECT_OFFSET]

//>> GET_[INT_VC_ESBC_FLUSH_INJECT_OFFSET]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ESBC_FLUSH_INJECT_OFFSET(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_FLUSH_INJECT));
#endif
    return i_data.extractToRight<INT_VC_ESBC_FLUSH_INJECT_OFFSET,
           INT_VC_ESBC_FLUSH_INJECT_OFFSET_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ESBC_FLUSH_INJECT_OFFSET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ESBC_FLUSH_INJECT_OFFSET]

//>> SET_[INT_VC_ESBC_FLUSH_INJECT_BLOCKID_MASK]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_FLUSH_INJECT_BLOCKID_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_FLUSH_INJECT));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_FLUSH_INJECT_BLOCKID_MASK,
           INT_VC_ESBC_FLUSH_INJECT_BLOCKID_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ESBC_FLUSH_INJECT_BLOCKID_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_FLUSH_INJECT_BLOCKID_MASK]

//>> SET_[INT_VC_ESBC_FLUSH_INJECT_BLOCKID_MASK]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_FLUSH_INJECT_BLOCKID_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_FLUSH_INJECT));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_FLUSH_INJECT_BLOCKID_MASK,
           INT_VC_ESBC_FLUSH_INJECT_BLOCKID_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ESBC_FLUSH_INJECT_BLOCKID_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_FLUSH_INJECT_BLOCKID_MASK]

//>> GET_[INT_VC_ESBC_FLUSH_INJECT_BLOCKID_MASK]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ESBC_FLUSH_INJECT_BLOCKID_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_FLUSH_INJECT));
#endif
    return i_data.extractToRight<INT_VC_ESBC_FLUSH_INJECT_BLOCKID_MASK,
           INT_VC_ESBC_FLUSH_INJECT_BLOCKID_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ESBC_FLUSH_INJECT_BLOCKID_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ESBC_FLUSH_INJECT_BLOCKID_MASK]

//>> SET_[INT_VC_ESBC_FLUSH_INJECT_OFFSET_MASK]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_FLUSH_INJECT_OFFSET_MASK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_FLUSH_INJECT));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_FLUSH_INJECT_OFFSET_MASK,
           INT_VC_ESBC_FLUSH_INJECT_OFFSET_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ESBC_FLUSH_INJECT_OFFSET_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_FLUSH_INJECT_OFFSET_MASK]

//>> SET_[INT_VC_ESBC_FLUSH_INJECT_OFFSET_MASK]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_FLUSH_INJECT_OFFSET_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_FLUSH_INJECT));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_FLUSH_INJECT_OFFSET_MASK,
           INT_VC_ESBC_FLUSH_INJECT_OFFSET_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ESBC_FLUSH_INJECT_OFFSET_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_FLUSH_INJECT_OFFSET_MASK]

//>> GET_[INT_VC_ESBC_FLUSH_INJECT_OFFSET_MASK]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ESBC_FLUSH_INJECT_OFFSET_MASK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_FLUSH_INJECT));
#endif
    return i_data.extractToRight<INT_VC_ESBC_FLUSH_INJECT_OFFSET_MASK,
           INT_VC_ESBC_FLUSH_INJECT_OFFSET_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ESBC_FLUSH_INJECT_OFFSET_MASK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ESBC_FLUSH_INJECT_OFFSET_MASK]

//>> PREP_[INT_VC_ESBC_PERF_EVENT_SEL_3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_ESBC_PERF_EVENT_SEL_3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ESBC_PERF_EVENT_SEL_3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_ESBC_PERF_EVENT_SEL_3]

//>> GET_[INT_VC_ESBC_PERF_EVENT_SEL_3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_ESBC_PERF_EVENT_SEL_3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ESBC_PERF_EVENT_SEL_3;
#endif
    return fapi2::getScom(i_target, INT_VC_ESBC_PERF_EVENT_SEL_3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_ESBC_PERF_EVENT_SEL_3]

//>> PUT_[INT_VC_ESBC_PERF_EVENT_SEL_3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_ESBC_PERF_EVENT_SEL_3(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_PERF_EVENT_SEL_3));
#endif
    return fapi2::putScom(i_target, INT_VC_ESBC_PERF_EVENT_SEL_3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_ESBC_PERF_EVENT_SEL_3]


//>> SET_[INT_VC_ESBC_PERF_EVENT_SEL_3_PROC_UPDATE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_PERF_EVENT_SEL_3_PROC_UPDATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_PERF_EVENT_SEL_3_PROC_UPDATE,
           INT_VC_ESBC_PERF_EVENT_SEL_3_PROC_UPDATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ESBC_PERF_EVENT_SEL_3_PROC_UPDATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_PERF_EVENT_SEL_3_PROC_UPDATE]

//>> SET_[INT_VC_ESBC_PERF_EVENT_SEL_3_PROC_UPDATE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_PERF_EVENT_SEL_3_PROC_UPDATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_PERF_EVENT_SEL_3_PROC_UPDATE,
           INT_VC_ESBC_PERF_EVENT_SEL_3_PROC_UPDATE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ESBC_PERF_EVENT_SEL_3_PROC_UPDATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_PERF_EVENT_SEL_3_PROC_UPDATE]

//>> GET_[INT_VC_ESBC_PERF_EVENT_SEL_3_PROC_UPDATE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ESBC_PERF_EVENT_SEL_3_PROC_UPDATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_PERF_EVENT_SEL_3));
#endif
    return i_data.extractToRight<INT_VC_ESBC_PERF_EVENT_SEL_3_PROC_UPDATE,
           INT_VC_ESBC_PERF_EVENT_SEL_3_PROC_UPDATE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ESBC_PERF_EVENT_SEL_3_PROC_UPDATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ESBC_PERF_EVENT_SEL_3_PROC_UPDATE]

//>> SET_[INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_FETCH]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_FETCH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_FETCH,
           INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_FETCH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_FETCH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_FETCH]

//>> SET_[INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_FETCH]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_FETCH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_FETCH,
           INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_FETCH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_FETCH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_FETCH]

//>> GET_[INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_FETCH]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_FETCH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_PERF_EVENT_SEL_3));
#endif
    return i_data.extractToRight<INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_FETCH,
           INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_FETCH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_FETCH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_FETCH]

//>> SET_[INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_WRITE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_WRITE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_WRITE,
           INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_WRITE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_WRITE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_WRITE]

//>> SET_[INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_WRITE]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_WRITE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_WRITE,
           INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_WRITE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_WRITE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_WRITE]

//>> GET_[INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_WRITE]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_WRITE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_PERF_EVENT_SEL_3));
#endif
    return i_data.extractToRight<INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_WRITE,
           INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_WRITE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_WRITE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_WRITE]

//>> SET_[INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_FETCH_REPLAY]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_FETCH_REPLAY(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_FETCH_REPLAY,
           INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_FETCH_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_FETCH_REPLAY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_FETCH_REPLAY]

//>> SET_[INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_FETCH_REPLAY]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_FETCH_REPLAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_FETCH_REPLAY,
           INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_FETCH_REPLAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_FETCH_REPLAY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_FETCH_REPLAY]

//>> GET_[INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_FETCH_REPLAY]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_FETCH_REPLAY(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_PERF_EVENT_SEL_3));
#endif
    return i_data.extractToRight<INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_FETCH_REPLAY,
           INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_FETCH_REPLAY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_FETCH_REPLAY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_ESB_FETCH_REPLAY]

//>> SET_[INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_TRIGGER_FILTERED]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_TRIGGER_FILTERED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_TRIGGER_FILTERED,
           INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_TRIGGER_FILTERED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_TRIGGER_FILTERED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_TRIGGER_FILTERED]

//>> SET_[INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_TRIGGER_FILTERED]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_TRIGGER_FILTERED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_TRIGGER_FILTERED,
           INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_TRIGGER_FILTERED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_TRIGGER_FILTERED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_TRIGGER_FILTERED]

//>> GET_[INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_TRIGGER_FILTERED]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_TRIGGER_FILTERED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_PERF_EVENT_SEL_3));
#endif
    return i_data.extractToRight<INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_TRIGGER_FILTERED,
           INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_TRIGGER_FILTERED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_TRIGGER_FILTERED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_TRIGGER_FILTERED]

//>> SET_[INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_STEOI_FILTERED]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_STEOI_FILTERED(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_STEOI_FILTERED,
           INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_STEOI_FILTERED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_STEOI_FILTERED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_STEOI_FILTERED]

//>> SET_[INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_STEOI_FILTERED]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_STEOI_FILTERED(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_PERF_EVENT_SEL_3));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_STEOI_FILTERED,
           INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_STEOI_FILTERED_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_STEOI_FILTERED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_STEOI_FILTERED]

//>> GET_[INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_STEOI_FILTERED]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_STEOI_FILTERED(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_PERF_EVENT_SEL_3));
#endif
    return i_data.extractToRight<INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_STEOI_FILTERED,
           INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_STEOI_FILTERED_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_STEOI_FILTERED chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ESBC_PERF_EVENT_SEL_3_CNT_STEOI_FILTERED]

//>> PREP_[INT_VC_ESBC_SOFTWR_MASK]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_ESBC_SOFTWR_MASK(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ESBC_SOFTWR_MASK;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_ESBC_SOFTWR_MASK]

//>> GET_[INT_VC_ESBC_SOFTWR_MASK]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_ESBC_SOFTWR_MASK(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ESBC_SOFTWR_MASK;
#endif
    return fapi2::getScom(i_target, INT_VC_ESBC_SOFTWR_MASK, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_ESBC_SOFTWR_MASK]

//>> PUT_[INT_VC_ESBC_SOFTWR_MASK]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_ESBC_SOFTWR_MASK(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_SOFTWR_MASK));
#endif
    return fapi2::putScom(i_target, INT_VC_ESBC_SOFTWR_MASK, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_ESBC_SOFTWR_MASK]


//>> SET_[INT_VC_ESBC_SOFTWR_MASK_INT_VC_ESBC_SOFTWR_MASK_MSK]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_SOFTWR_MASK_INT_VC_ESBC_SOFTWR_MASK_MSK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_SOFTWR_MASK));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_SOFTWR_MASK_INT_VC_ESBC_SOFTWR_MASK_MSK,
           INT_VC_ESBC_SOFTWR_MASK_INT_VC_ESBC_SOFTWR_MASK_MSK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_ESBC_SOFTWR_MASK_INT_VC_ESBC_SOFTWR_MASK_MSK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_SOFTWR_MASK_INT_VC_ESBC_SOFTWR_MASK_MSK]

//>> SET_[INT_VC_ESBC_SOFTWR_MASK_INT_VC_ESBC_SOFTWR_MASK_MSK]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_ESBC_SOFTWR_MASK_INT_VC_ESBC_SOFTWR_MASK_MSK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_SOFTWR_MASK));
#endif
    return o_data.insertFromRight<INT_VC_ESBC_SOFTWR_MASK_INT_VC_ESBC_SOFTWR_MASK_MSK,
           INT_VC_ESBC_SOFTWR_MASK_INT_VC_ESBC_SOFTWR_MASK_MSK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_ESBC_SOFTWR_MASK_INT_VC_ESBC_SOFTWR_MASK_MSK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_ESBC_SOFTWR_MASK_INT_VC_ESBC_SOFTWR_MASK_MSK]

//>> GET_[INT_VC_ESBC_SOFTWR_MASK_INT_VC_ESBC_SOFTWR_MASK_MSK]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_ESBC_SOFTWR_MASK_INT_VC_ESBC_SOFTWR_MASK_MSK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ESBC_SOFTWR_MASK));
#endif
    return i_data.extractToRight<INT_VC_ESBC_SOFTWR_MASK_INT_VC_ESBC_SOFTWR_MASK_MSK,
           INT_VC_ESBC_SOFTWR_MASK_INT_VC_ESBC_SOFTWR_MASK_MSK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_ESBC_SOFTWR_MASK_INT_VC_ESBC_SOFTWR_MASK_MSK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_ESBC_SOFTWR_MASK_INT_VC_ESBC_SOFTWR_MASK_MSK]

//>> PREP_[INT_VC_WOF_ERR_G1_DETAIL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_WOF_ERR_G1_DETAIL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_WOF_ERR_G1_DETAIL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[INT_VC_WOF_ERR_G1_DETAIL]

//>> GET_[INT_VC_WOF_ERR_G1_DETAIL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_WOF_ERR_G1_DETAIL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_WOF_ERR_G1_DETAIL;
#endif
    return fapi2::getScom(i_target, INT_VC_WOF_ERR_G1_DETAIL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G1_DETAIL]

//>> PUT_[INT_VC_WOF_ERR_G1_DETAIL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_WOF_ERR_G1_DETAIL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G1_DETAIL));
#endif
    return fapi2::putScom(i_target, INT_VC_WOF_ERR_G1_DETAIL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[INT_VC_WOF_ERR_G1_DETAIL]


//>> SET_[INT_VC_WOF_ERR_G1_DETAIL_INT_VC_WOF_ERR_G1_DETAIL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G1_DETAIL_INT_VC_WOF_ERR_G1_DETAIL_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G1_DETAIL));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G1_DETAIL_INT_VC_WOF_ERR_G1_DETAIL_ERROR,
           INT_VC_WOF_ERR_G1_DETAIL_INT_VC_WOF_ERR_G1_DETAIL_ERROR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access INT_VC_WOF_ERR_G1_DETAIL_INT_VC_WOF_ERR_G1_DETAIL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G1_DETAIL_INT_VC_WOF_ERR_G1_DETAIL_ERROR]

//>> SET_[INT_VC_WOF_ERR_G1_DETAIL_INT_VC_WOF_ERR_G1_DETAIL_ERROR]
static inline fapi2::buffer<uint64_t>& SET_INT_VC_WOF_ERR_G1_DETAIL_INT_VC_WOF_ERR_G1_DETAIL_ERROR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G1_DETAIL));
#endif
    return o_data.insertFromRight<INT_VC_WOF_ERR_G1_DETAIL_INT_VC_WOF_ERR_G1_DETAIL_ERROR,
           INT_VC_WOF_ERR_G1_DETAIL_INT_VC_WOF_ERR_G1_DETAIL_ERROR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access INT_VC_WOF_ERR_G1_DETAIL_INT_VC_WOF_ERR_G1_DETAIL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[INT_VC_WOF_ERR_G1_DETAIL_INT_VC_WOF_ERR_G1_DETAIL_ERROR]

//>> GET_[INT_VC_WOF_ERR_G1_DETAIL_INT_VC_WOF_ERR_G1_DETAIL_ERROR]
static inline fapi2::buffer<uint64_t>& GET_INT_VC_WOF_ERR_G1_DETAIL_INT_VC_WOF_ERR_G1_DETAIL_ERROR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_WOF_ERR_G1_DETAIL));
#endif
    return i_data.extractToRight<INT_VC_WOF_ERR_G1_DETAIL_INT_VC_WOF_ERR_G1_DETAIL_ERROR,
           INT_VC_WOF_ERR_G1_DETAIL_INT_VC_WOF_ERR_G1_DETAIL_ERROR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access INT_VC_WOF_ERR_G1_DETAIL_INT_VC_WOF_ERR_G1_DETAIL_ERROR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[INT_VC_WOF_ERR_G1_DETAIL_INT_VC_WOF_ERR_G1_DETAIL_ERROR]

//>> PREP_[MCD_BANK0_BOT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MCD_BANK0_BOT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MCD_BANK0_BOT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MCD_BANK0_BOT]

//>> GET_[MCD_BANK0_BOT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MCD_BANK0_BOT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MCD_BANK0_BOT;
#endif
    return fapi2::getScom(i_target, MCD_BANK0_BOT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MCD_BANK0_BOT]

//>> PUT_[MCD_BANK0_BOT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MCD_BANK0_BOT(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return fapi2::putScom(i_target, MCD_BANK0_BOT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MCD_BANK0_BOT]


//>> SET_[MCD_BANK0_BOT_BANK0_MCD_BOT_VALID]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_BOT_BANK0_MCD_BOT_VALID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return o_data.insertFromRight<MCD_BANK0_BOT_BANK0_MCD_BOT_VALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_BANK0_BOT_BANK0_MCD_BOT_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_BOT_BANK0_MCD_BOT_VALID]

//>> SET_[MCD_BANK0_BOT_BANK0_MCD_BOT_VALID]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_BOT_BANK0_MCD_BOT_VALID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return o_data.insertFromRight<MCD_BANK0_BOT_BANK0_MCD_BOT_VALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_BANK0_BOT_BANK0_MCD_BOT_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_BOT_BANK0_MCD_BOT_VALID]

//>> SET_[MCD_BANK0_BOT_BANK0_MCD_BOT_VALID]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_BOT_BANK0_MCD_BOT_VALID(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return o_data.setBit<MCD_BANK0_BOT_BANK0_MCD_BOT_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_BANK0_BOT_BANK0_MCD_BOT_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_BOT_BANK0_MCD_BOT_VALID]

//>> CLEAR_[MCD_BANK0_BOT_BANK0_MCD_BOT_VALID]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_BANK0_BOT_BANK0_MCD_BOT_VALID(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return o_data.clearBit<MCD_BANK0_BOT_BANK0_MCD_BOT_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_BANK0_BOT_BANK0_MCD_BOT_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_BANK0_BOT_BANK0_MCD_BOT_VALID]

//>> GET_[MCD_BANK0_BOT_BANK0_MCD_BOT_VALID]
static inline fapi2::buffer<uint64_t>& GET_MCD_BANK0_BOT_BANK0_MCD_BOT_VALID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return i_data.extractToRight<MCD_BANK0_BOT_BANK0_MCD_BOT_VALID,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_BANK0_BOT_BANK0_MCD_BOT_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_BOT_BANK0_MCD_BOT_VALID]

//>> GET_[MCD_BANK0_BOT_BANK0_MCD_BOT_VALID]
static inline bool GET_MCD_BANK0_BOT_BANK0_MCD_BOT_VALID(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return i_data.getBit<MCD_BANK0_BOT_BANK0_MCD_BOT_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_BANK0_BOT_BANK0_MCD_BOT_VALID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_BOT_BANK0_MCD_BOT_VALID]

//>> SET_[MCD_BANK0_BOT_BANK0_MCD_BOT_CPG]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_BOT_BANK0_MCD_BOT_CPG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return o_data.insertFromRight<MCD_BANK0_BOT_BANK0_MCD_BOT_CPG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_BANK0_BOT_BANK0_MCD_BOT_CPG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_BOT_BANK0_MCD_BOT_CPG]

//>> SET_[MCD_BANK0_BOT_BANK0_MCD_BOT_CPG]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_BOT_BANK0_MCD_BOT_CPG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return o_data.insertFromRight<MCD_BANK0_BOT_BANK0_MCD_BOT_CPG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_BANK0_BOT_BANK0_MCD_BOT_CPG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_BOT_BANK0_MCD_BOT_CPG]

//>> SET_[MCD_BANK0_BOT_BANK0_MCD_BOT_CPG]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_BOT_BANK0_MCD_BOT_CPG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return o_data.setBit<MCD_BANK0_BOT_BANK0_MCD_BOT_CPG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_BANK0_BOT_BANK0_MCD_BOT_CPG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_BOT_BANK0_MCD_BOT_CPG]

//>> CLEAR_[MCD_BANK0_BOT_BANK0_MCD_BOT_CPG]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_BANK0_BOT_BANK0_MCD_BOT_CPG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return o_data.clearBit<MCD_BANK0_BOT_BANK0_MCD_BOT_CPG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_BANK0_BOT_BANK0_MCD_BOT_CPG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_BANK0_BOT_BANK0_MCD_BOT_CPG]

//>> GET_[MCD_BANK0_BOT_BANK0_MCD_BOT_CPG]
static inline fapi2::buffer<uint64_t>& GET_MCD_BANK0_BOT_BANK0_MCD_BOT_CPG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return i_data.extractToRight<MCD_BANK0_BOT_BANK0_MCD_BOT_CPG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_BANK0_BOT_BANK0_MCD_BOT_CPG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_BOT_BANK0_MCD_BOT_CPG]

//>> GET_[MCD_BANK0_BOT_BANK0_MCD_BOT_CPG]
static inline bool GET_MCD_BANK0_BOT_BANK0_MCD_BOT_CPG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return i_data.getBit<MCD_BANK0_BOT_BANK0_MCD_BOT_CPG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_BANK0_BOT_BANK0_MCD_BOT_CPG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_BOT_BANK0_MCD_BOT_CPG]

//>> SET_[MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_MBR_ID]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_MBR_ID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return o_data.insertFromRight<MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_MBR_ID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_MBR_ID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_MBR_ID]

//>> SET_[MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_MBR_ID]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_MBR_ID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return o_data.insertFromRight<MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_MBR_ID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_MBR_ID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_MBR_ID]

//>> SET_[MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_MBR_ID]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_MBR_ID(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return o_data.setBit<MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_MBR_ID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_MBR_ID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_MBR_ID]

//>> CLEAR_[MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_MBR_ID]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_MBR_ID(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return o_data.clearBit<MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_MBR_ID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_MBR_ID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_MBR_ID]

//>> GET_[MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_MBR_ID]
static inline fapi2::buffer<uint64_t>& GET_MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_MBR_ID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return i_data.extractToRight<MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_MBR_ID,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_MBR_ID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_MBR_ID]

//>> GET_[MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_MBR_ID]
static inline bool GET_MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_MBR_ID(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return i_data.getBit<MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_MBR_ID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_MBR_ID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_MBR_ID]

//>> SET_[MCD_BANK0_BOT_BANK0_MCD_BOT_ALWAYS_RTY]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_BOT_BANK0_MCD_BOT_ALWAYS_RTY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return o_data.insertFromRight<MCD_BANK0_BOT_BANK0_MCD_BOT_ALWAYS_RTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_BANK0_BOT_BANK0_MCD_BOT_ALWAYS_RTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_BOT_BANK0_MCD_BOT_ALWAYS_RTY]

//>> SET_[MCD_BANK0_BOT_BANK0_MCD_BOT_ALWAYS_RTY]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_BOT_BANK0_MCD_BOT_ALWAYS_RTY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return o_data.insertFromRight<MCD_BANK0_BOT_BANK0_MCD_BOT_ALWAYS_RTY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_BANK0_BOT_BANK0_MCD_BOT_ALWAYS_RTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_BOT_BANK0_MCD_BOT_ALWAYS_RTY]

//>> SET_[MCD_BANK0_BOT_BANK0_MCD_BOT_ALWAYS_RTY]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_BOT_BANK0_MCD_BOT_ALWAYS_RTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return o_data.setBit<MCD_BANK0_BOT_BANK0_MCD_BOT_ALWAYS_RTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_BANK0_BOT_BANK0_MCD_BOT_ALWAYS_RTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_BOT_BANK0_MCD_BOT_ALWAYS_RTY]

//>> CLEAR_[MCD_BANK0_BOT_BANK0_MCD_BOT_ALWAYS_RTY]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_BANK0_BOT_BANK0_MCD_BOT_ALWAYS_RTY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return o_data.clearBit<MCD_BANK0_BOT_BANK0_MCD_BOT_ALWAYS_RTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_BANK0_BOT_BANK0_MCD_BOT_ALWAYS_RTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_BANK0_BOT_BANK0_MCD_BOT_ALWAYS_RTY]

//>> GET_[MCD_BANK0_BOT_BANK0_MCD_BOT_ALWAYS_RTY]
static inline fapi2::buffer<uint64_t>& GET_MCD_BANK0_BOT_BANK0_MCD_BOT_ALWAYS_RTY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return i_data.extractToRight<MCD_BANK0_BOT_BANK0_MCD_BOT_ALWAYS_RTY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_BANK0_BOT_BANK0_MCD_BOT_ALWAYS_RTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_BOT_BANK0_MCD_BOT_ALWAYS_RTY]

//>> GET_[MCD_BANK0_BOT_BANK0_MCD_BOT_ALWAYS_RTY]
static inline bool GET_MCD_BANK0_BOT_BANK0_MCD_BOT_ALWAYS_RTY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return i_data.getBit<MCD_BANK0_BOT_BANK0_MCD_BOT_ALWAYS_RTY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_BANK0_BOT_BANK0_MCD_BOT_ALWAYS_RTY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_BOT_BANK0_MCD_BOT_ALWAYS_RTY]

//>> SET_[MCD_BANK0_BOT_MCD_BOT_SMF_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_BOT_MCD_BOT_SMF_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return o_data.insertFromRight<MCD_BANK0_BOT_MCD_BOT_SMF_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_BANK0_BOT_MCD_BOT_SMF_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_BOT_MCD_BOT_SMF_ENABLE]

//>> SET_[MCD_BANK0_BOT_MCD_BOT_SMF_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_BOT_MCD_BOT_SMF_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return o_data.insertFromRight<MCD_BANK0_BOT_MCD_BOT_SMF_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_BANK0_BOT_MCD_BOT_SMF_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_BOT_MCD_BOT_SMF_ENABLE]

//>> SET_[MCD_BANK0_BOT_MCD_BOT_SMF_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_BOT_MCD_BOT_SMF_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return o_data.setBit<MCD_BANK0_BOT_MCD_BOT_SMF_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_BANK0_BOT_MCD_BOT_SMF_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_BOT_MCD_BOT_SMF_ENABLE]

//>> CLEAR_[MCD_BANK0_BOT_MCD_BOT_SMF_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_BANK0_BOT_MCD_BOT_SMF_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return o_data.clearBit<MCD_BANK0_BOT_MCD_BOT_SMF_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_BANK0_BOT_MCD_BOT_SMF_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_BANK0_BOT_MCD_BOT_SMF_ENABLE]

//>> GET_[MCD_BANK0_BOT_MCD_BOT_SMF_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_MCD_BANK0_BOT_MCD_BOT_SMF_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return i_data.extractToRight<MCD_BANK0_BOT_MCD_BOT_SMF_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_BANK0_BOT_MCD_BOT_SMF_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_BOT_MCD_BOT_SMF_ENABLE]

//>> GET_[MCD_BANK0_BOT_MCD_BOT_SMF_ENABLE]
static inline bool GET_MCD_BANK0_BOT_MCD_BOT_SMF_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return i_data.getBit<MCD_BANK0_BOT_MCD_BOT_SMF_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_BANK0_BOT_MCD_BOT_SMF_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_BOT_MCD_BOT_SMF_ENABLE]

//>> SET_[MCD_BANK0_BOT_BANK0_MCD_BOT_SMF_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_BOT_BANK0_MCD_BOT_SMF_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return o_data.insertFromRight<MCD_BANK0_BOT_BANK0_MCD_BOT_SMF_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_BANK0_BOT_BANK0_MCD_BOT_SMF_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_BOT_BANK0_MCD_BOT_SMF_ENABLE]

//>> SET_[MCD_BANK0_BOT_BANK0_MCD_BOT_SMF_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_BOT_BANK0_MCD_BOT_SMF_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return o_data.insertFromRight<MCD_BANK0_BOT_BANK0_MCD_BOT_SMF_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_BANK0_BOT_BANK0_MCD_BOT_SMF_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_BOT_BANK0_MCD_BOT_SMF_ENABLE]

//>> SET_[MCD_BANK0_BOT_BANK0_MCD_BOT_SMF_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_BOT_BANK0_MCD_BOT_SMF_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return o_data.setBit<MCD_BANK0_BOT_BANK0_MCD_BOT_SMF_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_BANK0_BOT_BANK0_MCD_BOT_SMF_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_BOT_BANK0_MCD_BOT_SMF_ENABLE]

//>> CLEAR_[MCD_BANK0_BOT_BANK0_MCD_BOT_SMF_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_BANK0_BOT_BANK0_MCD_BOT_SMF_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return o_data.clearBit<MCD_BANK0_BOT_BANK0_MCD_BOT_SMF_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_BANK0_BOT_BANK0_MCD_BOT_SMF_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_BANK0_BOT_BANK0_MCD_BOT_SMF_ENABLE]

//>> GET_[MCD_BANK0_BOT_BANK0_MCD_BOT_SMF_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_MCD_BANK0_BOT_BANK0_MCD_BOT_SMF_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return i_data.extractToRight<MCD_BANK0_BOT_BANK0_MCD_BOT_SMF_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_BANK0_BOT_BANK0_MCD_BOT_SMF_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_BOT_BANK0_MCD_BOT_SMF_ENABLE]

//>> GET_[MCD_BANK0_BOT_BANK0_MCD_BOT_SMF_ENABLE]
static inline bool GET_MCD_BANK0_BOT_BANK0_MCD_BOT_SMF_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return i_data.getBit<MCD_BANK0_BOT_BANK0_MCD_BOT_SMF_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_BANK0_BOT_BANK0_MCD_BOT_SMF_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_BOT_BANK0_MCD_BOT_SMF_ENABLE]

//>> SET_[MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_SIZE]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_SIZE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return o_data.insertFromRight<MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_SIZE,
           MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_SIZE]

//>> SET_[MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_SIZE]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_SIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return o_data.insertFromRight<MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_SIZE,
           MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_SIZE]

//>> GET_[MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_SIZE]
static inline fapi2::buffer<uint64_t>& GET_MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_SIZE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return i_data.extractToRight<MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_SIZE,
           MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_SIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_SIZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_SIZE]

//>> SET_[MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_BASE]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_BASE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return o_data.insertFromRight<MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_BASE,
           MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_BASE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_BASE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_BASE]

//>> SET_[MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_BASE]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_BASE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return o_data.insertFromRight<MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_BASE,
           MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_BASE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_BASE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_BASE]

//>> GET_[MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_BASE]
static inline fapi2::buffer<uint64_t>& GET_MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_BASE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_BOT));
#endif
    return i_data.extractToRight<MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_BASE,
           MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_BASE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_BASE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_BOT_BANK0_MCD_BOT_GRP_BASE]

//>> PREP_[MCD_BANK0_TOPID]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MCD_BANK0_TOPID(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MCD_BANK0_TOPID;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[MCD_BANK0_TOPID]

//>> GET_[MCD_BANK0_TOPID]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MCD_BANK0_TOPID(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MCD_BANK0_TOPID;
#endif
    return fapi2::getScom(i_target, MCD_BANK0_TOPID, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[MCD_BANK0_TOPID]

//>> PUT_[MCD_BANK0_TOPID]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MCD_BANK0_TOPID(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TOPID));
#endif
    return fapi2::putScom(i_target, MCD_BANK0_TOPID, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[MCD_BANK0_TOPID]


//>> SET_[MCD_BANK0_TOPID_ACTIVE0_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_TOPID_ACTIVE0_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TOPID));
#endif
    return o_data.insertFromRight<MCD_BANK0_TOPID_ACTIVE0_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_BANK0_TOPID_ACTIVE0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_TOPID_ACTIVE0_ENABLE]

//>> SET_[MCD_BANK0_TOPID_ACTIVE0_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_TOPID_ACTIVE0_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TOPID));
#endif
    return o_data.insertFromRight<MCD_BANK0_TOPID_ACTIVE0_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_BANK0_TOPID_ACTIVE0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_TOPID_ACTIVE0_ENABLE]

//>> SET_[MCD_BANK0_TOPID_ACTIVE0_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_TOPID_ACTIVE0_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TOPID));
#endif
    return o_data.setBit<MCD_BANK0_TOPID_ACTIVE0_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_BANK0_TOPID_ACTIVE0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_TOPID_ACTIVE0_ENABLE]

//>> CLEAR_[MCD_BANK0_TOPID_ACTIVE0_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_BANK0_TOPID_ACTIVE0_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TOPID));
#endif
    return o_data.clearBit<MCD_BANK0_TOPID_ACTIVE0_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_BANK0_TOPID_ACTIVE0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_BANK0_TOPID_ACTIVE0_ENABLE]

//>> GET_[MCD_BANK0_TOPID_ACTIVE0_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_MCD_BANK0_TOPID_ACTIVE0_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TOPID));
#endif
    return i_data.extractToRight<MCD_BANK0_TOPID_ACTIVE0_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_BANK0_TOPID_ACTIVE0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_TOPID_ACTIVE0_ENABLE]

//>> GET_[MCD_BANK0_TOPID_ACTIVE0_ENABLE]
static inline bool GET_MCD_BANK0_TOPID_ACTIVE0_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TOPID));
#endif
    return i_data.getBit<MCD_BANK0_TOPID_ACTIVE0_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_BANK0_TOPID_ACTIVE0_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_TOPID_ACTIVE0_ENABLE]

//>> SET_[MCD_BANK0_TOPID_ACTIVE0_TOPO_ID]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_TOPID_ACTIVE0_TOPO_ID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TOPID));
#endif
    return o_data.insertFromRight<MCD_BANK0_TOPID_ACTIVE0_TOPO_ID,
           MCD_BANK0_TOPID_ACTIVE0_TOPO_ID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_BANK0_TOPID_ACTIVE0_TOPO_ID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_TOPID_ACTIVE0_TOPO_ID]

//>> SET_[MCD_BANK0_TOPID_ACTIVE0_TOPO_ID]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_TOPID_ACTIVE0_TOPO_ID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TOPID));
#endif
    return o_data.insertFromRight<MCD_BANK0_TOPID_ACTIVE0_TOPO_ID,
           MCD_BANK0_TOPID_ACTIVE0_TOPO_ID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_BANK0_TOPID_ACTIVE0_TOPO_ID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_TOPID_ACTIVE0_TOPO_ID]

//>> GET_[MCD_BANK0_TOPID_ACTIVE0_TOPO_ID]
static inline fapi2::buffer<uint64_t>& GET_MCD_BANK0_TOPID_ACTIVE0_TOPO_ID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TOPID));
#endif
    return i_data.extractToRight<MCD_BANK0_TOPID_ACTIVE0_TOPO_ID,
           MCD_BANK0_TOPID_ACTIVE0_TOPO_ID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_BANK0_TOPID_ACTIVE0_TOPO_ID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_TOPID_ACTIVE0_TOPO_ID]

//>> SET_[MCD_BANK0_TOPID_ACTIVE1_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_TOPID_ACTIVE1_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TOPID));
#endif
    return o_data.insertFromRight<MCD_BANK0_TOPID_ACTIVE1_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_BANK0_TOPID_ACTIVE1_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_TOPID_ACTIVE1_ENABLE]

//>> SET_[MCD_BANK0_TOPID_ACTIVE1_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_TOPID_ACTIVE1_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TOPID));
#endif
    return o_data.insertFromRight<MCD_BANK0_TOPID_ACTIVE1_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_BANK0_TOPID_ACTIVE1_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_TOPID_ACTIVE1_ENABLE]

//>> SET_[MCD_BANK0_TOPID_ACTIVE1_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_TOPID_ACTIVE1_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TOPID));
#endif
    return o_data.setBit<MCD_BANK0_TOPID_ACTIVE1_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_BANK0_TOPID_ACTIVE1_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_TOPID_ACTIVE1_ENABLE]

//>> CLEAR_[MCD_BANK0_TOPID_ACTIVE1_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_BANK0_TOPID_ACTIVE1_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TOPID));
#endif
    return o_data.clearBit<MCD_BANK0_TOPID_ACTIVE1_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_BANK0_TOPID_ACTIVE1_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_BANK0_TOPID_ACTIVE1_ENABLE]

//>> GET_[MCD_BANK0_TOPID_ACTIVE1_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_MCD_BANK0_TOPID_ACTIVE1_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TOPID));
#endif
    return i_data.extractToRight<MCD_BANK0_TOPID_ACTIVE1_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_BANK0_TOPID_ACTIVE1_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_TOPID_ACTIVE1_ENABLE]

//>> GET_[MCD_BANK0_TOPID_ACTIVE1_ENABLE]
static inline bool GET_MCD_BANK0_TOPID_ACTIVE1_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TOPID));
#endif
    return i_data.getBit<MCD_BANK0_TOPID_ACTIVE1_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_BANK0_TOPID_ACTIVE1_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_TOPID_ACTIVE1_ENABLE]

//>> SET_[MCD_BANK0_TOPID_ACTIVE1_TOPO_ID]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_TOPID_ACTIVE1_TOPO_ID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TOPID));
#endif
    return o_data.insertFromRight<MCD_BANK0_TOPID_ACTIVE1_TOPO_ID,
           MCD_BANK0_TOPID_ACTIVE1_TOPO_ID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_BANK0_TOPID_ACTIVE1_TOPO_ID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_TOPID_ACTIVE1_TOPO_ID]

//>> SET_[MCD_BANK0_TOPID_ACTIVE1_TOPO_ID]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_TOPID_ACTIVE1_TOPO_ID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TOPID));
#endif
    return o_data.insertFromRight<MCD_BANK0_TOPID_ACTIVE1_TOPO_ID,
           MCD_BANK0_TOPID_ACTIVE1_TOPO_ID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_BANK0_TOPID_ACTIVE1_TOPO_ID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_TOPID_ACTIVE1_TOPO_ID]

//>> GET_[MCD_BANK0_TOPID_ACTIVE1_TOPO_ID]
static inline fapi2::buffer<uint64_t>& GET_MCD_BANK0_TOPID_ACTIVE1_TOPO_ID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TOPID));
#endif
    return i_data.extractToRight<MCD_BANK0_TOPID_ACTIVE1_TOPO_ID,
           MCD_BANK0_TOPID_ACTIVE1_TOPO_ID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_BANK0_TOPID_ACTIVE1_TOPO_ID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_TOPID_ACTIVE1_TOPO_ID]

//>> SET_[MCD_BANK0_TOPID_ACTIVE2_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_TOPID_ACTIVE2_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TOPID));
#endif
    return o_data.insertFromRight<MCD_BANK0_TOPID_ACTIVE2_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_BANK0_TOPID_ACTIVE2_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_TOPID_ACTIVE2_ENABLE]

//>> SET_[MCD_BANK0_TOPID_ACTIVE2_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_TOPID_ACTIVE2_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TOPID));
#endif
    return o_data.insertFromRight<MCD_BANK0_TOPID_ACTIVE2_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_BANK0_TOPID_ACTIVE2_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_TOPID_ACTIVE2_ENABLE]

//>> SET_[MCD_BANK0_TOPID_ACTIVE2_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_TOPID_ACTIVE2_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TOPID));
#endif
    return o_data.setBit<MCD_BANK0_TOPID_ACTIVE2_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_BANK0_TOPID_ACTIVE2_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_TOPID_ACTIVE2_ENABLE]

//>> CLEAR_[MCD_BANK0_TOPID_ACTIVE2_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_BANK0_TOPID_ACTIVE2_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TOPID));
#endif
    return o_data.clearBit<MCD_BANK0_TOPID_ACTIVE2_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_BANK0_TOPID_ACTIVE2_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_BANK0_TOPID_ACTIVE2_ENABLE]

//>> GET_[MCD_BANK0_TOPID_ACTIVE2_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_MCD_BANK0_TOPID_ACTIVE2_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TOPID));
#endif
    return i_data.extractToRight<MCD_BANK0_TOPID_ACTIVE2_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_BANK0_TOPID_ACTIVE2_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_TOPID_ACTIVE2_ENABLE]

//>> GET_[MCD_BANK0_TOPID_ACTIVE2_ENABLE]
static inline bool GET_MCD_BANK0_TOPID_ACTIVE2_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TOPID));
#endif
    return i_data.getBit<MCD_BANK0_TOPID_ACTIVE2_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_BANK0_TOPID_ACTIVE2_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_TOPID_ACTIVE2_ENABLE]

//>> SET_[MCD_BANK0_TOPID_ACTIVE2_TOPO_ID]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_TOPID_ACTIVE2_TOPO_ID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TOPID));
#endif
    return o_data.insertFromRight<MCD_BANK0_TOPID_ACTIVE2_TOPO_ID,
           MCD_BANK0_TOPID_ACTIVE2_TOPO_ID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_BANK0_TOPID_ACTIVE2_TOPO_ID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_TOPID_ACTIVE2_TOPO_ID]

//>> SET_[MCD_BANK0_TOPID_ACTIVE2_TOPO_ID]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_TOPID_ACTIVE2_TOPO_ID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TOPID));
#endif
    return o_data.insertFromRight<MCD_BANK0_TOPID_ACTIVE2_TOPO_ID,
           MCD_BANK0_TOPID_ACTIVE2_TOPO_ID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_BANK0_TOPID_ACTIVE2_TOPO_ID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_TOPID_ACTIVE2_TOPO_ID]

//>> GET_[MCD_BANK0_TOPID_ACTIVE2_TOPO_ID]
static inline fapi2::buffer<uint64_t>& GET_MCD_BANK0_TOPID_ACTIVE2_TOPO_ID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TOPID));
#endif
    return i_data.extractToRight<MCD_BANK0_TOPID_ACTIVE2_TOPO_ID,
           MCD_BANK0_TOPID_ACTIVE2_TOPO_ID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_BANK0_TOPID_ACTIVE2_TOPO_ID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_TOPID_ACTIVE2_TOPO_ID]

//>> SET_[MCD_BANK0_TOPID_ACTIVE3_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_TOPID_ACTIVE3_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TOPID));
#endif
    return o_data.insertFromRight<MCD_BANK0_TOPID_ACTIVE3_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_BANK0_TOPID_ACTIVE3_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_TOPID_ACTIVE3_ENABLE]

//>> SET_[MCD_BANK0_TOPID_ACTIVE3_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_TOPID_ACTIVE3_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TOPID));
#endif
    return o_data.insertFromRight<MCD_BANK0_TOPID_ACTIVE3_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_BANK0_TOPID_ACTIVE3_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_TOPID_ACTIVE3_ENABLE]

//>> SET_[MCD_BANK0_TOPID_ACTIVE3_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_TOPID_ACTIVE3_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TOPID));
#endif
    return o_data.setBit<MCD_BANK0_TOPID_ACTIVE3_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access MCD_BANK0_TOPID_ACTIVE3_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_TOPID_ACTIVE3_ENABLE]

//>> CLEAR_[MCD_BANK0_TOPID_ACTIVE3_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_MCD_BANK0_TOPID_ACTIVE3_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TOPID));
#endif
    return o_data.clearBit<MCD_BANK0_TOPID_ACTIVE3_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access MCD_BANK0_TOPID_ACTIVE3_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[MCD_BANK0_TOPID_ACTIVE3_ENABLE]

//>> GET_[MCD_BANK0_TOPID_ACTIVE3_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_MCD_BANK0_TOPID_ACTIVE3_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TOPID));
#endif
    return i_data.extractToRight<MCD_BANK0_TOPID_ACTIVE3_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_BANK0_TOPID_ACTIVE3_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_TOPID_ACTIVE3_ENABLE]

//>> GET_[MCD_BANK0_TOPID_ACTIVE3_ENABLE]
static inline bool GET_MCD_BANK0_TOPID_ACTIVE3_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TOPID));
#endif
    return i_data.getBit<MCD_BANK0_TOPID_ACTIVE3_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access MCD_BANK0_TOPID_ACTIVE3_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_TOPID_ACTIVE3_ENABLE]

//>> SET_[MCD_BANK0_TOPID_ACTIVE3_TOPO_ID]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_TOPID_ACTIVE3_TOPO_ID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TOPID));
#endif
    return o_data.insertFromRight<MCD_BANK0_TOPID_ACTIVE3_TOPO_ID,
           MCD_BANK0_TOPID_ACTIVE3_TOPO_ID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_BANK0_TOPID_ACTIVE3_TOPO_ID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_TOPID_ACTIVE3_TOPO_ID]

//>> SET_[MCD_BANK0_TOPID_ACTIVE3_TOPO_ID]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_TOPID_ACTIVE3_TOPO_ID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TOPID));
#endif
    return o_data.insertFromRight<MCD_BANK0_TOPID_ACTIVE3_TOPO_ID,
           MCD_BANK0_TOPID_ACTIVE3_TOPO_ID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_BANK0_TOPID_ACTIVE3_TOPO_ID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_TOPID_ACTIVE3_TOPO_ID]

//>> GET_[MCD_BANK0_TOPID_ACTIVE3_TOPO_ID]
static inline fapi2::buffer<uint64_t>& GET_MCD_BANK0_TOPID_ACTIVE3_TOPO_ID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TOPID));
#endif
    return i_data.extractToRight<MCD_BANK0_TOPID_ACTIVE3_TOPO_ID,
           MCD_BANK0_TOPID_ACTIVE3_TOPO_ID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_BANK0_TOPID_ACTIVE3_TOPO_ID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_TOPID_ACTIVE3_TOPO_ID]

//>> SET_[MCD_BANK0_TOPID_PASSIVE_TOPO_ID]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_TOPID_PASSIVE_TOPO_ID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TOPID));
#endif
    return o_data.insertFromRight<MCD_BANK0_TOPID_PASSIVE_TOPO_ID,
           MCD_BANK0_TOPID_PASSIVE_TOPO_ID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access MCD_BANK0_TOPID_PASSIVE_TOPO_ID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_TOPID_PASSIVE_TOPO_ID]

//>> SET_[MCD_BANK0_TOPID_PASSIVE_TOPO_ID]
static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_TOPID_PASSIVE_TOPO_ID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TOPID));
#endif
    return o_data.insertFromRight<MCD_BANK0_TOPID_PASSIVE_TOPO_ID,
           MCD_BANK0_TOPID_PASSIVE_TOPO_ID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access MCD_BANK0_TOPID_PASSIVE_TOPO_ID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[MCD_BANK0_TOPID_PASSIVE_TOPO_ID]

//>> GET_[MCD_BANK0_TOPID_PASSIVE_TOPO_ID]
static inline fapi2::buffer<uint64_t>& GET_MCD_BANK0_TOPID_PASSIVE_TOPO_ID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_TOPID));
#endif
    return i_data.extractToRight<MCD_BANK0_TOPID_PASSIVE_TOPO_ID,
           MCD_BANK0_TOPID_PASSIVE_TOPO_ID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access MCD_BANK0_TOPID_PASSIVE_TOPO_ID chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[MCD_BANK0_TOPID_PASSIVE_TOPO_ID]

//>> PREP_[NX_CH4_ADDR_9_HASH_FUNCTION_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_CH4_ADDR_9_HASH_FUNCTION_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_CH4_ADDR_9_HASH_FUNCTION_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_CH4_ADDR_9_HASH_FUNCTION_REG]

//>> GET_[NX_CH4_ADDR_9_HASH_FUNCTION_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_CH4_ADDR_9_HASH_FUNCTION_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_CH4_ADDR_9_HASH_FUNCTION_REG;
#endif
    return fapi2::getScom(i_target, NX_CH4_ADDR_9_HASH_FUNCTION_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_CH4_ADDR_9_HASH_FUNCTION_REG]

//>> PUT_[NX_CH4_ADDR_9_HASH_FUNCTION_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_CH4_ADDR_9_HASH_FUNCTION_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_CH4_ADDR_9_HASH_FUNCTION_REG));
#endif
    return fapi2::putScom(i_target, NX_CH4_ADDR_9_HASH_FUNCTION_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_CH4_ADDR_9_HASH_FUNCTION_REG]


//>> SET_[NX_CH4_ADDR_9_HASH_FUNCTION_REG_ADDRESS_9_HASH_FUNCTION]
static inline fapi2::buffer<uint64_t>& SET_NX_CH4_ADDR_9_HASH_FUNCTION_REG_ADDRESS_9_HASH_FUNCTION(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_CH4_ADDR_9_HASH_FUNCTION_REG));
#endif
    return o_data.insertFromRight<NX_CH4_ADDR_9_HASH_FUNCTION_REG_ADDRESS_9_HASH_FUNCTION,
           NX_CH4_ADDR_9_HASH_FUNCTION_REG_ADDRESS_9_HASH_FUNCTION_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_CH4_ADDR_9_HASH_FUNCTION_REG_ADDRESS_9_HASH_FUNCTION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_CH4_ADDR_9_HASH_FUNCTION_REG_ADDRESS_9_HASH_FUNCTION]

//>> SET_[NX_CH4_ADDR_9_HASH_FUNCTION_REG_ADDRESS_9_HASH_FUNCTION]
static inline fapi2::buffer<uint64_t>& SET_NX_CH4_ADDR_9_HASH_FUNCTION_REG_ADDRESS_9_HASH_FUNCTION(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_CH4_ADDR_9_HASH_FUNCTION_REG));
#endif
    return o_data.insertFromRight<NX_CH4_ADDR_9_HASH_FUNCTION_REG_ADDRESS_9_HASH_FUNCTION,
           NX_CH4_ADDR_9_HASH_FUNCTION_REG_ADDRESS_9_HASH_FUNCTION_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_CH4_ADDR_9_HASH_FUNCTION_REG_ADDRESS_9_HASH_FUNCTION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_CH4_ADDR_9_HASH_FUNCTION_REG_ADDRESS_9_HASH_FUNCTION]

//>> GET_[NX_CH4_ADDR_9_HASH_FUNCTION_REG_ADDRESS_9_HASH_FUNCTION]
static inline fapi2::buffer<uint64_t>& GET_NX_CH4_ADDR_9_HASH_FUNCTION_REG_ADDRESS_9_HASH_FUNCTION(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_CH4_ADDR_9_HASH_FUNCTION_REG));
#endif
    return i_data.extractToRight<NX_CH4_ADDR_9_HASH_FUNCTION_REG_ADDRESS_9_HASH_FUNCTION,
           NX_CH4_ADDR_9_HASH_FUNCTION_REG_ADDRESS_9_HASH_FUNCTION_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_CH4_ADDR_9_HASH_FUNCTION_REG_ADDRESS_9_HASH_FUNCTION chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_CH4_ADDR_9_HASH_FUNCTION_REG_ADDRESS_9_HASH_FUNCTION]

//>> PREP_[NX_DMA_SU_ERROR_REPORT_0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_DMA_SU_ERROR_REPORT_0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_DMA_SU_ERROR_REPORT_0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_DMA_SU_ERROR_REPORT_0]

//>> GET_[NX_DMA_SU_ERROR_REPORT_0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_DMA_SU_ERROR_REPORT_0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_DMA_SU_ERROR_REPORT_0;
#endif
    return fapi2::getScom(i_target, NX_DMA_SU_ERROR_REPORT_0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_DMA_SU_ERROR_REPORT_0]

//>> PUT_[NX_DMA_SU_ERROR_REPORT_0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_DMA_SU_ERROR_REPORT_0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_ERROR_REPORT_0));
#endif
    return fapi2::putScom(i_target, NX_DMA_SU_ERROR_REPORT_0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_DMA_SU_ERROR_REPORT_0]


//>> SET_[NX_DMA_SU_ERROR_REPORT_0_DMA_ERROR_REPORT_0]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_ERROR_REPORT_0_DMA_ERROR_REPORT_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_ERROR_REPORT_0));
#endif
    return o_data.insertFromRight<NX_DMA_SU_ERROR_REPORT_0_DMA_ERROR_REPORT_0,
           NX_DMA_SU_ERROR_REPORT_0_DMA_ERROR_REPORT_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_DMA_SU_ERROR_REPORT_0_DMA_ERROR_REPORT_0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_SU_ERROR_REPORT_0_DMA_ERROR_REPORT_0]

//>> SET_[NX_DMA_SU_ERROR_REPORT_0_DMA_ERROR_REPORT_0]
static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_ERROR_REPORT_0_DMA_ERROR_REPORT_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_ERROR_REPORT_0));
#endif
    return o_data.insertFromRight<NX_DMA_SU_ERROR_REPORT_0_DMA_ERROR_REPORT_0,
           NX_DMA_SU_ERROR_REPORT_0_DMA_ERROR_REPORT_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_DMA_SU_ERROR_REPORT_0_DMA_ERROR_REPORT_0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_DMA_SU_ERROR_REPORT_0_DMA_ERROR_REPORT_0]

//>> GET_[NX_DMA_SU_ERROR_REPORT_0_DMA_ERROR_REPORT_0]
static inline fapi2::buffer<uint64_t>& GET_NX_DMA_SU_ERROR_REPORT_0_DMA_ERROR_REPORT_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_ERROR_REPORT_0));
#endif
    return i_data.extractToRight<NX_DMA_SU_ERROR_REPORT_0_DMA_ERROR_REPORT_0,
           NX_DMA_SU_ERROR_REPORT_0_DMA_ERROR_REPORT_0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_DMA_SU_ERROR_REPORT_0_DMA_ERROR_REPORT_0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_DMA_SU_ERROR_REPORT_0_DMA_ERROR_REPORT_0]

//>> PREP_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR]

//>> GET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR;
#endif
    return fapi2::getScom(i_target, NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR]

//>> PUT_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR));
#endif
    return fapi2::putScom(i_target, NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR]


//>> SET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR_GZIP_HI_PRIORITY_RCV_FIFO_BAR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR_GZIP_HI_PRIORITY_RCV_FIFO_BAR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR_GZIP_HI_PRIORITY_RCV_FIFO_BAR,
           NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR_GZIP_HI_PRIORITY_RCV_FIFO_BAR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR_GZIP_HI_PRIORITY_RCV_FIFO_BAR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR_GZIP_HI_PRIORITY_RCV_FIFO_BAR]

//>> SET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR_GZIP_HI_PRIORITY_RCV_FIFO_BAR]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR_GZIP_HI_PRIORITY_RCV_FIFO_BAR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR_GZIP_HI_PRIORITY_RCV_FIFO_BAR,
           NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR_GZIP_HI_PRIORITY_RCV_FIFO_BAR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR_GZIP_HI_PRIORITY_RCV_FIFO_BAR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR_GZIP_HI_PRIORITY_RCV_FIFO_BAR]

//>> GET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR_GZIP_HI_PRIORITY_RCV_FIFO_BAR]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR_GZIP_HI_PRIORITY_RCV_FIFO_BAR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR_GZIP_HI_PRIORITY_RCV_FIFO_BAR,
           NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR_GZIP_HI_PRIORITY_RCV_FIFO_BAR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR_GZIP_HI_PRIORITY_RCV_FIFO_BAR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR_GZIP_HI_PRIORITY_RCV_FIFO_BAR]

//>> SET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR_GZIP_HI_PRIORITY_RCV_FIFO_BAR_SIZE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR_GZIP_HI_PRIORITY_RCV_FIFO_BAR_SIZE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR_GZIP_HI_PRIORITY_RCV_FIFO_BAR_SIZE,
           NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR_GZIP_HI_PRIORITY_RCV_FIFO_BAR_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR_GZIP_HI_PRIORITY_RCV_FIFO_BAR_SIZE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR_GZIP_HI_PRIORITY_RCV_FIFO_BAR_SIZE]

//>> SET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR_GZIP_HI_PRIORITY_RCV_FIFO_BAR_SIZE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR_GZIP_HI_PRIORITY_RCV_FIFO_BAR_SIZE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR_GZIP_HI_PRIORITY_RCV_FIFO_BAR_SIZE,
           NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR_GZIP_HI_PRIORITY_RCV_FIFO_BAR_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR_GZIP_HI_PRIORITY_RCV_FIFO_BAR_SIZE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR_GZIP_HI_PRIORITY_RCV_FIFO_BAR_SIZE]

//>> GET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR_GZIP_HI_PRIORITY_RCV_FIFO_BAR_SIZE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR_GZIP_HI_PRIORITY_RCV_FIFO_BAR_SIZE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR_GZIP_HI_PRIORITY_RCV_FIFO_BAR_SIZE,
           NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR_GZIP_HI_PRIORITY_RCV_FIFO_BAR_SIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR_GZIP_HI_PRIORITY_RCV_FIFO_BAR_SIZE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_GZIP_HI_PRIOR_RCV_FIFO_BAR_GZIP_HI_PRIORITY_RCV_FIFO_BAR_SIZE]

//>> PREP_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB]

//>> GET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB;
#endif
    return fapi2::getScom(i_target, NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB]

//>> PUT_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB));
#endif
    return fapi2::putScom(i_target, NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB]


//>> SET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_LPID]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_LPID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_LPID,
           NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_LPID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_LPID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_LPID]

//>> SET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_LPID]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_LPID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_LPID,
           NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_LPID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_LPID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_LPID]

//>> GET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_LPID]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_LPID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_LPID,
           NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_LPID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_LPID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_LPID]

//>> SET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_PID]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_PID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_PID,
           NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_PID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_PID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_PID]

//>> SET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_PID]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_PID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_PID,
           NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_PID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_PID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_PID]

//>> GET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_PID]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_PID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_PID,
           NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_PID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_PID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_PID]

//>> SET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_TID]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_TID(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_TID,
           NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_TID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_TID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_TID]

//>> SET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_TID]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_TID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_TID,
           NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_TID_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_TID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_TID]

//>> GET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_TID]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_TID(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_TID,
           NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_TID_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_TID chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_TID]

//>> SET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_ENABLE]

//>> SET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_ENABLE]

//>> SET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.setBit<NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_ENABLE]

//>> CLEAR_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB));
#endif
    return o_data.clearBit<NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_ENABLE]

//>> GET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_ENABLE]

//>> GET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_ENABLE]
static inline bool GET_NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB));
#endif
    return i_data.getBit<NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_GZIP_LO_PRIOR_RCV_FIFO_ASB_ENABLE]

//>> PREP_[NX_PBI_UMAC_SU_ERROR_RPT1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_UMAC_SU_ERROR_RPT1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_UMAC_SU_ERROR_RPT1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[NX_PBI_UMAC_SU_ERROR_RPT1]

//>> GET_[NX_PBI_UMAC_SU_ERROR_RPT1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_UMAC_SU_ERROR_RPT1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_UMAC_SU_ERROR_RPT1;
#endif
    return fapi2::getScom(i_target, NX_PBI_UMAC_SU_ERROR_RPT1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[NX_PBI_UMAC_SU_ERROR_RPT1]

//>> PUT_[NX_PBI_UMAC_SU_ERROR_RPT1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_UMAC_SU_ERROR_RPT1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SU_ERROR_RPT1));
#endif
    return fapi2::putScom(i_target, NX_PBI_UMAC_SU_ERROR_RPT1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[NX_PBI_UMAC_SU_ERROR_RPT1]


//>> SET_[NX_PBI_UMAC_SU_ERROR_RPT1_RNG_ERROR_RPT]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SU_ERROR_RPT1_RNG_ERROR_RPT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SU_ERROR_RPT1));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_SU_ERROR_RPT1_RNG_ERROR_RPT,
           NX_PBI_UMAC_SU_ERROR_RPT1_RNG_ERROR_RPT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access NX_PBI_UMAC_SU_ERROR_RPT1_RNG_ERROR_RPT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_SU_ERROR_RPT1_RNG_ERROR_RPT]

//>> SET_[NX_PBI_UMAC_SU_ERROR_RPT1_RNG_ERROR_RPT]
static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SU_ERROR_RPT1_RNG_ERROR_RPT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SU_ERROR_RPT1));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_SU_ERROR_RPT1_RNG_ERROR_RPT,
           NX_PBI_UMAC_SU_ERROR_RPT1_RNG_ERROR_RPT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access NX_PBI_UMAC_SU_ERROR_RPT1_RNG_ERROR_RPT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[NX_PBI_UMAC_SU_ERROR_RPT1_RNG_ERROR_RPT]

//>> GET_[NX_PBI_UMAC_SU_ERROR_RPT1_RNG_ERROR_RPT]
static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_SU_ERROR_RPT1_RNG_ERROR_RPT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SU_ERROR_RPT1));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_SU_ERROR_RPT1_RNG_ERROR_RPT,
           NX_PBI_UMAC_SU_ERROR_RPT1_RNG_ERROR_RPT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access NX_PBI_UMAC_SU_ERROR_RPT1_RNG_ERROR_RPT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[NX_PBI_UMAC_SU_ERROR_RPT1_RNG_ERROR_RPT]

//>> PREP_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR]

//>> PUT_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR]


//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE0,
           PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE0]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE0,
           PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE0]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE0,
           PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE0]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE1,
           PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE1,
           PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE1,
           PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN1]

//>> CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN1]
static inline bool GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE2,
           PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE2,
           PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE2]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE2,
           PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN1]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN1,
           PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EN1]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE3,
           PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE3]

//>> SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE3,
           PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE3]

//>> GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE3,
           PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN1_STATION_HP_MODE1_CURR_PB_CFG_SPARE3]

//>> PREP_[PB_COM_SCOM_EN2_STATION_CFG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN2_STATION_CFG1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN2_STATION_CFG1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN2_STATION_CFG1]

//>> GET_[PB_COM_SCOM_EN2_STATION_CFG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN2_STATION_CFG1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN2_STATION_CFG1;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN2_STATION_CFG1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_CFG1]

//>> PUT_[PB_COM_SCOM_EN2_STATION_CFG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN2_STATION_CFG1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN2_STATION_CFG1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN2_STATION_CFG1]


//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN2,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN2,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN2,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN2,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN2,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN2,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT]

//>> GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT]

//>> GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_SPARE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_SPARE1,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_SPARE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_SPARE1,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_SPARE1]

//>> GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_SPARE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_SPARE1,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_SPARE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN]

//>> GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX]

//>> GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT]

//>> GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT]

//>> GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN2]

//>> CLEAR_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN2]
static inline bool GET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN2,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN2,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN2,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN2,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN2,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN2,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN2,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN2,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN2,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN2,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN2,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN2,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN2,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN2,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN2,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN2,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN2,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN2]

//>> GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN2,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EN2]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_SPARE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_SPARE2,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_SPARE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_SPARE2,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_SPARE2]

//>> GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_SPARE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_SPARE2,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_SPARE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN]

//>> GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX]

//>> SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX]

//>> GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX,
           PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX]

//>> PREP_[PB_COM_SCOM_EN4_STATION_FIR_ACTION0_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN4_STATION_FIR_ACTION0_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN4_STATION_FIR_ACTION0_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN4_STATION_FIR_ACTION0_REG]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_ACTION0_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN4_STATION_FIR_ACTION0_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN4_STATION_FIR_ACTION0_REG;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN4_STATION_FIR_ACTION0_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_ACTION0_REG]

//>> PUT_[PB_COM_SCOM_EN4_STATION_FIR_ACTION0_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN4_STATION_FIR_ACTION0_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_ACTION0_REG));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN4_STATION_FIR_ACTION0_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN4_STATION_FIR_ACTION0_REG]


//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0,
           PB_COM_SCOM_EN4_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0,
           PB_COM_SCOM_EN4_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_ACTION0_REG));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0,
           PB_COM_SCOM_EN4_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0]

//>> PREP_[PB_COM_SCOM_EN4_STATION_FIR_ACTION1_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN4_STATION_FIR_ACTION1_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN4_STATION_FIR_ACTION1_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN4_STATION_FIR_ACTION1_REG]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_ACTION1_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN4_STATION_FIR_ACTION1_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN4_STATION_FIR_ACTION1_REG;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN4_STATION_FIR_ACTION1_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_ACTION1_REG]

//>> PUT_[PB_COM_SCOM_EN4_STATION_FIR_ACTION1_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN4_STATION_FIR_ACTION1_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_ACTION1_REG));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN4_STATION_FIR_ACTION1_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN4_STATION_FIR_ACTION1_REG]


//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_ACTION1_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1,
           PB_COM_SCOM_EN4_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1]

//>> SET_[PB_COM_SCOM_EN4_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_ACTION1_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1,
           PB_COM_SCOM_EN4_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1]

//>> GET_[PB_COM_SCOM_EN4_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_FIR_ACTION1_REG));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1,
           PB_COM_SCOM_EN4_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1]

//>> PREP_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT]

//>> PUT_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT]


//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN4]

//>> CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN4]
static inline bool GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EN4]

//>> SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EN4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EN4]

//>> GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EN4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EN4,
           PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EN4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EN4_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EN4]

//>> PREP_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ0_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ0_STATION_EVENT_SEL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL]

//>> GET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ0_STATION_EVENT_SEL;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ0_STATION_EVENT_SEL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL]

//>> PUT_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ0_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ0_STATION_EVENT_SEL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL]


//>> SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0,
           PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0,
           PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0,
           PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1,
           PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]

//>> SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1,
           PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]

//>> GET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1,
           PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]

//>> SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2,
           PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]

//>> SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2,
           PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]

//>> GET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2,
           PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]

//>> SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3,
           PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]

//>> SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3,
           PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]

//>> GET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3,
           PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]

//>> SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4,
           PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]

//>> SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4,
           PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]

//>> GET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4,
           PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]

//>> SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5,
           PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]

//>> SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5,
           PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]

//>> GET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5,
           PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]

//>> SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6,
           PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]

//>> SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6,
           PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]

//>> GET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6,
           PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]

//>> SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7,
           PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]

//>> SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7,
           PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]

//>> GET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7,
           PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]

//>> SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ0,
           PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ0,
           PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ0,
           PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ0,
           PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ0,
           PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ0,
           PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> GET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> GET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> GET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> GET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_CNPM_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_CNPM_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> GET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_CNPM_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> PREP_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR]

//>> PUT_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR]


//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_EN_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_EN_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_EN_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_EN_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_EN_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_EN_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_EN_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_EN_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ADDR_DIS_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ADDR_DIS_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ADDR_DIS_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ADDR_DIS_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ADDR_DIS_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ADDR_DIS_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ADDR_DIS_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ADDR_DIS_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_MODE_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX0_ID_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_MODE_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX1_ID_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_MODE_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX2_ID_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_MODE_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX3_ID_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_MODE_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX4_ID_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_MODE_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX5_ID_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_MODE_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX6_ID_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ0]

//>> CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ0]
static inline bool GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_MODE_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ0]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ0,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_LINK_AX7_ID_CURR_EQ0]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_SPARE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_SPARE,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_SPARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_SPARE]

//>> SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_SPARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_SPARE,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_SPARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_SPARE]

//>> GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_SPARE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_SPARE,
           PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_SPARE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_SPARE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ0_STATION_HP_MODE2_CURR_PB_CFG_SPARE]

//>> PREP_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ1_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ1_STATION_EVENT_SEL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ1_STATION_EVENT_SEL;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ1_STATION_EVENT_SEL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL]

//>> PUT_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ1_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ1_STATION_EVENT_SEL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL]


//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0,
           PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0,
           PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0,
           PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1,
           PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1,
           PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1,
           PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2,
           PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2,
           PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2,
           PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3,
           PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3,
           PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3,
           PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4,
           PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4,
           PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4,
           PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5,
           PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5,
           PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5,
           PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6,
           PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6,
           PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6,
           PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7,
           PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7,
           PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7,
           PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ1,
           PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> GET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> PREP_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT]

//>> PUT_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT]


//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ1]

//>> CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ1]
static inline bool GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_VALID_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_0_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_1_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_2_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_3_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_4_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_5_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_6_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_7_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_8_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_9_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_10_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_11_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_12_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_13_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_14_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ1]

//>> SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ1]

//>> GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ1,
           PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ1_STATION_HP_MODE3_NEXT_15_AX_NUM_NEXT_EQ1]

//>> PREP_[PB_COM_SCOM_EQ2_STATION_CFG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ2_STATION_CFG1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ2_STATION_CFG1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ2_STATION_CFG1]

//>> GET_[PB_COM_SCOM_EQ2_STATION_CFG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ2_STATION_CFG1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ2_STATION_CFG1;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ2_STATION_CFG1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_CFG1]

//>> PUT_[PB_COM_SCOM_EQ2_STATION_CFG1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ2_STATION_CFG1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ2_STATION_CFG1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ2_STATION_CFG1]


//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXP_DISABLE_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EARLY_EXP_TIME_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_OC_EXPIRATION_TIME_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT]

//>> GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_LIMIT]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT]

//>> GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_LIMIT]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_SPARE1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_SPARE1,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_SPARE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_SPARE1,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_SPARE1]

//>> GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_SPARE1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_SPARE1,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_SPARE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_SPARE1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN]

//>> GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MIN]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX]

//>> GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK0_OUTBOUND_QUEUE_MAX]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT]

//>> GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK0_DON_PTL_VCINIT]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT]

//>> GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK1_DON_PTL_VCINIT]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC0_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DON_PTL_ARB_MODE_VC1_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_VCINIT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_ARB_MODE_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PAU_CRD_MODE_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_VCINIT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_ARB_MODE_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ2,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_DAT_LINK_DOFF_PE_CRD_MODE_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_SPARE2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_SPARE2,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_SPARE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_SPARE2,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_SPARE2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_SPARE2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_SPARE2,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_SPARE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_SPARE2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN]

//>> GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MIN]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX]

//>> SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX]

//>> GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_CFG1));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX,
           PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_CFG1_PB_CFG_LINK1_OUTBOUND_QUEUE_MAX]

//>> PREP_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ2_STATION_EVENT_COMPA(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ2_STATION_EVENT_COMPA;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA]

//>> GET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPA(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ2_STATION_EVENT_COMPA;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ2_STATION_EVENT_COMPA, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA]

//>> PUT_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ2_STATION_EVENT_COMPA(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPA));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ2_STATION_EVENT_COMPA, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA]


//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTYPE_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTYPE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTYPE_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTYPE_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTYPE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTYPE_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTYPE_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTYPE_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTYPE_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTYPE_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTYPE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTYPE_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTYPE_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTYPE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTYPE_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTYPE_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTYPE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTYPE_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTYPE_MASK_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTYPE_MASK_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTYPE_MASK_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTYPE_MASK_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTYPE_MASK_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTYPE_MASK_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTYPE_MASK_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTYPE_MASK_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTYPE_MASK_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTYPE_MASK_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTYPE_MASK_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTYPE_MASK_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTYPE_MASK_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTYPE_MASK_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTYPE_MASK_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTYPE_MASK_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTYPE_MASK_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTYPE_MASK_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TSIZE_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TSIZE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TSIZE_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TSIZE_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TSIZE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TSIZE_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TSIZE_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TSIZE_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TSIZE_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TSIZE_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TSIZE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TSIZE_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TSIZE_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TSIZE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TSIZE_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TSIZE_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TSIZE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TSIZE_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TSIZE_MASK_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TSIZE_MASK_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TSIZE_MASK_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TSIZE_MASK_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TSIZE_MASK_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TSIZE_MASK_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TSIZE_MASK_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TSIZE_MASK_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TSIZE_MASK_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TSIZE_MASK_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TSIZE_MASK_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TSIZE_MASK_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TSIZE_MASK_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TSIZE_MASK_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TSIZE_MASK_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TSIZE_MASK_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TSIZE_MASK_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TSIZE_MASK_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTAG_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTAG_EQ2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTAG_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTAG_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTAG_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTAG_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTAG_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTAG_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTAG_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTAG_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTAG_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTAG_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTAG_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTAG_EQ2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTAG_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTAG_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTAG_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTAG_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTAG_MASK_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTAG_MASK_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTAG_MASK_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTAG_MASK_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTAG_MASK_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTAG_MASK_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTAG_MASK_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTAG_MASK_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTAG_MASK_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTAG_MASK_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTAG_MASK_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTAG_MASK_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTAG_MASK_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTAG_MASK_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTAG_MASK_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTAG_MASK_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTAG_MASK_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_TTAG_MASK_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_MASK_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_MASK_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_MASK_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_MASK_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_MASK_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_MASK_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_MASK_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_MASK_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_MASK_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_MASK_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_MASK_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_MASK_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_MASK_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_MASK_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_MASK_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_MASK_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_MASK_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_MASK_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_POLARITY_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_POLARITY_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_POLARITY_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_POLARITY_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_POLARITY_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_POLARITY_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_POLARITY_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_POLARITY_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_POLARITY_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_POLARITY_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_POLARITY_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_POLARITY_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPA));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_POLARITY_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_POLARITY_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_POLARITY_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_POLARITY_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_POLARITY_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPA));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_POLARITY_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_POLARITY_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_POLARITY_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_POLARITY_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_POLARITY_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_POLARITY_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_POLARITY_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_POLARITY_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_POLARITY_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_POLARITY_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPA));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_POLARITY_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_POLARITY_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_CRESP_POLARITY_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_SCOPE_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_SCOPE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_SCOPE_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_SCOPE_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_SCOPE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_SCOPE_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_SCOPE_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_SCOPE_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_SCOPE_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_SCOPE_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_SCOPE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_SCOPE_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_SCOPE_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_SCOPE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_SCOPE_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_SCOPE_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_SCOPE_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPA_SCOPE_EQ2]

//>> PREP_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ2_STATION_EVENT_COMPX(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ2_STATION_EVENT_COMPX;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX]

//>> GET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPX(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ2_STATION_EVENT_COMPX;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ2_STATION_EVENT_COMPX, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX]

//>> PUT_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ2_STATION_EVENT_COMPX(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPX));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ2_STATION_EVENT_COMPX, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX]


//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_PRESP_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_PRESP_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_PRESP_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_PRESP_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_PRESP_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_PRESP_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_PRESP_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_PRESP_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_PRESP_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_PRESP_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_PRESP_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_PRESP_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_PRESP_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_PRESP_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_PRESP_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_PRESP_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_PRESP_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_PRESP_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_PRESP_MASK_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_PRESP_MASK_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_PRESP_MASK_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_PRESP_MASK_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_PRESP_MASK_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_PRESP_MASK_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_PRESP_MASK_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_PRESP_MASK_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_PRESP_MASK_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_PRESP_MASK_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_PRESP_MASK_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_PRESP_MASK_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_PRESP_MASK_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_PRESP_MASK_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_PRESP_MASK_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_PRESP_MASK_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_PRESP_MASK_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_A_PRESP_MASK_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_PRESP_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_PRESP_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_PRESP_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_PRESP_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_PRESP_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_PRESP_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_PRESP_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_PRESP_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_PRESP_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_PRESP_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_PRESP_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_PRESP_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_PRESP_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_PRESP_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_PRESP_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_PRESP_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_PRESP_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_PRESP_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_PRESP_MASK_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_PRESP_MASK_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_PRESP_MASK_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_PRESP_MASK_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_PRESP_MASK_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_PRESP_MASK_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_PRESP_MASK_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_PRESP_MASK_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_PRESP_MASK_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_PRESP_MASK_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_PRESP_MASK_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_PRESP_MASK_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_PRESP_MASK_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_PRESP_MASK_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_PRESP_MASK_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_PRESP_MASK_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_PRESP_MASK_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_B_PRESP_MASK_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPX));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPX));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_COMPX));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ2]

//>> PREP_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ2_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ2_STATION_EVENT_SEL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL]

//>> GET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ2_STATION_EVENT_SEL;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ2_STATION_EVENT_SEL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL]

//>> PUT_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ2_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ2_STATION_EVENT_SEL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL]


//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0,
           PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0,
           PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]

//>> GET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0,
           PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1,
           PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1,
           PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]

//>> GET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1,
           PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2,
           PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2,
           PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2,
           PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3,
           PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3,
           PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]

//>> GET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3,
           PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4,
           PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4,
           PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]

//>> GET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4,
           PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5,
           PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5,
           PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]

//>> GET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5,
           PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6,
           PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6,
           PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]

//>> GET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6,
           PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7,
           PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7,
           PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]

//>> GET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7,
           PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ2,
           PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> GET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> GET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> GET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> PREP_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT]

//>> PUT_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT]


//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ2]

//>> CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ2]
static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_VALID_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_16_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_17_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_18_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_19_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_20_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_21_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_22_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_23_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_24_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_25_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_26_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_27_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_28_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_29_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_30_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ2]

//>> SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ2]

//>> GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ2_STATION_HP_MODE4_NEXT_31_AX_NUM_NEXT_EQ2]

//>> PREP_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ3_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ3_STATION_EVENT_SEL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL]

//>> GET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ3_STATION_EVENT_SEL;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ3_STATION_EVENT_SEL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL]

//>> PUT_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ3_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ3_STATION_EVENT_SEL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL]


//>> SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0,
           PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]

//>> SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0,
           PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]

//>> GET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0,
           PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]

//>> SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1,
           PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]

//>> SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1,
           PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]

//>> GET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1,
           PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]

//>> SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2,
           PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]

//>> SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2,
           PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]

//>> GET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2,
           PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]

//>> SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3,
           PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3,
           PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3,
           PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4,
           PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]

//>> SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4,
           PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]

//>> GET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4,
           PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]

//>> SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5,
           PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]

//>> SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5,
           PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]

//>> GET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5,
           PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]

//>> SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6,
           PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]

//>> SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6,
           PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]

//>> GET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6,
           PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]

//>> SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7,
           PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]

//>> SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7,
           PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]

//>> GET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7,
           PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]

//>> SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ3,
           PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ3,
           PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ3,
           PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ3,
           PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ3,
           PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ3]

//>> GET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ3,
           PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ3]

//>> SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> GET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> GET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> CLEAR_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> GET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> GET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline bool GET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> GET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ3_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ3_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> PREP_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ4_STATION_EVENT_COMPA(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ4_STATION_EVENT_COMPA;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA]

//>> GET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPA(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ4_STATION_EVENT_COMPA;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ4_STATION_EVENT_COMPA, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA]

//>> PUT_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ4_STATION_EVENT_COMPA(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPA));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ4_STATION_EVENT_COMPA, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA]


//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTYPE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTYPE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTYPE_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTYPE_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTYPE_EQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTYPE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTYPE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTYPE_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTYPE_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTYPE_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTYPE_EQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTYPE_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTYPE_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTYPE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTYPE_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTYPE_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTYPE_EQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTYPE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTYPE_MASK_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTYPE_MASK_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTYPE_MASK_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTYPE_MASK_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTYPE_MASK_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTYPE_MASK_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTYPE_MASK_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTYPE_MASK_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTYPE_MASK_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTYPE_MASK_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTYPE_MASK_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTYPE_MASK_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTYPE_MASK_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTYPE_MASK_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTYPE_MASK_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTYPE_MASK_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTYPE_MASK_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTYPE_MASK_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TSIZE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TSIZE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TSIZE_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TSIZE_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TSIZE_EQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TSIZE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TSIZE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TSIZE_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TSIZE_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TSIZE_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TSIZE_EQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TSIZE_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TSIZE_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TSIZE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TSIZE_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TSIZE_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TSIZE_EQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TSIZE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TSIZE_MASK_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TSIZE_MASK_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TSIZE_MASK_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TSIZE_MASK_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TSIZE_MASK_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TSIZE_MASK_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TSIZE_MASK_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TSIZE_MASK_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TSIZE_MASK_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TSIZE_MASK_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TSIZE_MASK_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TSIZE_MASK_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TSIZE_MASK_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TSIZE_MASK_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TSIZE_MASK_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TSIZE_MASK_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TSIZE_MASK_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TSIZE_MASK_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTAG_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTAG_EQ4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTAG_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTAG_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTAG_EQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTAG_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTAG_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTAG_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTAG_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTAG_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTAG_EQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTAG_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTAG_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTAG_EQ4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTAG_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTAG_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTAG_EQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTAG_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTAG_MASK_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTAG_MASK_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTAG_MASK_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTAG_MASK_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTAG_MASK_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTAG_MASK_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTAG_MASK_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTAG_MASK_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTAG_MASK_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTAG_MASK_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTAG_MASK_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTAG_MASK_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTAG_MASK_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTAG_MASK_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTAG_MASK_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTAG_MASK_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTAG_MASK_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_TTAG_MASK_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_EQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_EQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_EQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_MASK_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_MASK_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_MASK_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_MASK_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_MASK_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_MASK_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_MASK_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_MASK_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_MASK_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_MASK_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_MASK_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_MASK_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_MASK_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_MASK_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_MASK_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_MASK_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_MASK_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_MASK_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_POLARITY_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_POLARITY_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_POLARITY_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_POLARITY_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_POLARITY_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_POLARITY_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_POLARITY_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_POLARITY_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_POLARITY_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_POLARITY_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_POLARITY_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_POLARITY_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPA));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_POLARITY_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_POLARITY_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_POLARITY_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_POLARITY_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_POLARITY_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPA));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_POLARITY_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_POLARITY_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_POLARITY_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_POLARITY_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_POLARITY_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_POLARITY_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_POLARITY_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_POLARITY_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_POLARITY_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_POLARITY_EQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPA));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_POLARITY_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_POLARITY_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_CRESP_POLARITY_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_SCOPE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_SCOPE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_SCOPE_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_SCOPE_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_SCOPE_EQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_SCOPE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_SCOPE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_SCOPE_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_SCOPE_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_SCOPE_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_SCOPE_EQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_SCOPE_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_SCOPE_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_SCOPE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_SCOPE_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_SCOPE_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_SCOPE_EQ4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPA_SCOPE_EQ4]

//>> PREP_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ4_STATION_EVENT_COMPX(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ4_STATION_EVENT_COMPX;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX]

//>> GET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPX(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ4_STATION_EVENT_COMPX;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ4_STATION_EVENT_COMPX, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX]

//>> PUT_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ4_STATION_EVENT_COMPX(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPX));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ4_STATION_EVENT_COMPX, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX]


//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_SCOPE_MASK_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_PRESP_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_PRESP_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_PRESP_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_PRESP_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_PRESP_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_PRESP_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_PRESP_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_PRESP_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_PRESP_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_PRESP_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_PRESP_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_PRESP_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_PRESP_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_PRESP_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_PRESP_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_PRESP_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_PRESP_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_PRESP_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_PRESP_MASK_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_PRESP_MASK_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_PRESP_MASK_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_PRESP_MASK_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_PRESP_MASK_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_PRESP_MASK_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_PRESP_MASK_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_PRESP_MASK_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_PRESP_MASK_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_PRESP_MASK_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_PRESP_MASK_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_PRESP_MASK_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_PRESP_MASK_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_PRESP_MASK_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_PRESP_MASK_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_PRESP_MASK_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_PRESP_MASK_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_A_PRESP_MASK_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_SCOPE_MASK_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_PRESP_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_PRESP_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_PRESP_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_PRESP_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_PRESP_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_PRESP_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_PRESP_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_PRESP_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_PRESP_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_PRESP_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_PRESP_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_PRESP_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_PRESP_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_PRESP_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_PRESP_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_PRESP_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_PRESP_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_PRESP_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_PRESP_MASK_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_PRESP_MASK_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_PRESP_MASK_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_PRESP_MASK_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_PRESP_MASK_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_PRESP_MASK_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_PRESP_MASK_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_PRESP_MASK_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_PRESP_MASK_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_PRESP_MASK_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_PRESP_MASK_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_PRESP_MASK_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_PRESP_MASK_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_PRESP_MASK_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_PRESP_MASK_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_PRESP_MASK_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_PRESP_MASK_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_B_PRESP_MASK_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPX));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPX));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_COMPX));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EQ4]

//>> PREP_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ4_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ4_STATION_EVENT_SEL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL]

//>> GET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ4_STATION_EVENT_SEL;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ4_STATION_EVENT_SEL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL]

//>> PUT_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ4_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ4_STATION_EVENT_SEL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL]


//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0,
           PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0,
           PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]

//>> GET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0,
           PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1,
           PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1,
           PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]

//>> GET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1,
           PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2,
           PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2,
           PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]

//>> GET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2,
           PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3,
           PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3,
           PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]

//>> GET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3,
           PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4,
           PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4,
           PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4,
           PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5,
           PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5,
           PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]

//>> GET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5,
           PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6,
           PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6,
           PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]

//>> GET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6,
           PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7,
           PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7,
           PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]

//>> GET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7,
           PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ4,
           PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> GET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> GET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> GET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> GET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> PREP_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW]

//>> PUT_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW]

//>> PREP_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND]

//>> PUT_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND]

//>> PREP_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR]

//>> PUT_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR]


//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_3_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_COHERENCY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ADDR_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_CRESP_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_LIMIT_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_SPARE_8_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_HANG_RECOVERY_GTE_LEVEL1_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FORCE_MP_IPL_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_PB_CMD_SNOOPER_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_DATA_ROUTE_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_FIR_COMPAB_TRIGGER_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK0_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_PROTOCOL_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_OVERFLOW_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]

//>> SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]

//>> GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_RW, PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_FIR_MASK_REG_LINK1_HW_PARITY_ERROR_MASK]

//>> PREP_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR]

//>> PUT_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR]


//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MASTER_CHIP_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_TM_MASTER_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_GP_MASTER_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_CHG_RATE_SP_MASTER_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE0,
           PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE0]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE0,
           PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE0]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE0,
           PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE0]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_NP_CMD_RATE_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_AGGREGATE_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_INDIRECT_EN_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_G_GATHER_ENABLE_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE1,
           PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE1,
           PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE1]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE1,
           PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE1]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MIN_GP_CMD_RATE_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_AGGREGATE_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_INDIRECT_EN_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ4]

//>> CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ4]
static inline bool GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_R_GATHER_ENABLE_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE2,
           PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE2,
           PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE2]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE2,
           PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE2]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ4]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ4,
           PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_MIN_SP_CMD_RATE_CURR_EQ4]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE3,
           PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE3]

//>> SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE3,
           PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE3]

//>> GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE3,
           PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ4_STATION_HP_MODE1_CURR_PB_CFG_SPARE3]

//>> PREP_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ5_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ5_STATION_EVENT_SEL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL]

//>> GET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ5_STATION_EVENT_SEL;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ5_STATION_EVENT_SEL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL]

//>> PUT_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ5_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ5_STATION_EVENT_SEL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL]


//>> SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0,
           PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]

//>> SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0,
           PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]

//>> GET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0,
           PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]

//>> SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1,
           PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]

//>> SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1,
           PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]

//>> GET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1,
           PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]

//>> SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2,
           PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]

//>> SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2,
           PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]

//>> GET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2,
           PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]

//>> SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3,
           PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]

//>> SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3,
           PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]

//>> GET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3,
           PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]

//>> SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4,
           PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]

//>> SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4,
           PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]

//>> GET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4,
           PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]

//>> SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5,
           PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5,
           PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5,
           PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6,
           PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]

//>> SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6,
           PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]

//>> GET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6,
           PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]

//>> SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7,
           PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]

//>> SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7,
           PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]

//>> GET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7,
           PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]

//>> SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ5,
           PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ5,
           PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ5,
           PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ5,
           PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ5,
           PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ5]

//>> GET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ5,
           PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ5]

//>> SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> GET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> GET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> CLEAR_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> GET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> GET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline bool GET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_CNPM_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_CNPM_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> GET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_CNPM_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ5_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> PREP_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ6_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ6_STATION_EVENT_SEL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL]

//>> GET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ6_STATION_EVENT_SEL;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ6_STATION_EVENT_SEL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL]

//>> PUT_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ6_STATION_EVENT_SEL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ6_STATION_EVENT_SEL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL]


//>> SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0,
           PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]

//>> SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0,
           PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]

//>> GET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0,
           PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL0]

//>> SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1,
           PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]

//>> SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1,
           PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]

//>> GET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1,
           PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL1]

//>> SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2,
           PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]

//>> SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2,
           PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]

//>> GET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2,
           PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL2]

//>> SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3,
           PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]

//>> SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3,
           PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]

//>> GET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3,
           PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL3]

//>> SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4,
           PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]

//>> SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4,
           PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]

//>> GET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4,
           PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL4]

//>> SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5,
           PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]

//>> SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5,
           PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]

//>> GET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5,
           PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL5]

//>> SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6,
           PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6,
           PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6,
           PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7,
           PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]

//>> SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7,
           PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]

//>> GET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7,
           PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_SEL7]

//>> SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ6,
           PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ6,
           PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ6,
           PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_EAST_BITWISE_ENABLE_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ6,
           PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ6]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ6,
           PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ6]

//>> GET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ6]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ6,
           PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ6 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_EVENT_WEST_BITWISE_ENABLE_EQ6]

//>> SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> CLEAR_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> GET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> GET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]
static inline bool GET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL]

//>> SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> CLEAR_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> GET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> GET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]
static inline bool GET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_PMU_PORT_SEL2]

//>> SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_CNPM_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_CNPM_MASK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> GET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_CNPM_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_EVENT_SEL));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_CNPM_MASK,
           PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_CNPM_MASK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_CNPM_MASK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_EVENT_SEL_PB_CFG_CNPM_MASK]

//>> PREP_[PB_COM_SCOM_EQ6_STATION_FIR_ACTION0_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ6_STATION_FIR_ACTION0_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ6_STATION_FIR_ACTION0_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_COM_SCOM_EQ6_STATION_FIR_ACTION0_REG]

//>> GET_[PB_COM_SCOM_EQ6_STATION_FIR_ACTION0_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ6_STATION_FIR_ACTION0_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ6_STATION_FIR_ACTION0_REG;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ6_STATION_FIR_ACTION0_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_FIR_ACTION0_REG]

//>> PUT_[PB_COM_SCOM_EQ6_STATION_FIR_ACTION0_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ6_STATION_FIR_ACTION0_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_FIR_ACTION0_REG));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ6_STATION_FIR_ACTION0_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_COM_SCOM_EQ6_STATION_FIR_ACTION0_REG]


//>> SET_[PB_COM_SCOM_EQ6_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0,
           PB_COM_SCOM_EQ6_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0]

//>> SET_[PB_COM_SCOM_EQ6_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0,
           PB_COM_SCOM_EQ6_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_COM_SCOM_EQ6_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0]

//>> GET_[PB_COM_SCOM_EQ6_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0]
static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_FIR_ACTION0_REG));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0,
           PB_COM_SCOM_EQ6_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_COM_SCOM_EQ6_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_COM_SCOM_EQ6_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0]


//>>THE END<<

#ifndef __PPE_HCODE__
}
}

#endif
#endif
