/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: src/import/chips/p10/common/include/proc/reg00009.H $         */
/*                                                                        */
/* OpenPOWER sbe Project                                                  */
/*                                                                        */
/* Contributors Listed Below - COPYRIGHT 2019                             */
/* [+] International Business Machines Corp.                              */
/*                                                                        */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */
#include "fapi2.H"

#ifndef __PROC_REG00009_H_
#define __PROC_REG00009_H_

namespace scomt
{
namespace proc
{


template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_CQ_PMC_0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_PMC_0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_CQ_PMC_0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_PMC_0;
#endif
    return fapi2::getScom(i_target, INT_CQ_PMC_0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_CQ_PMC_0(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_CQ_PMC_0));
#endif
    return fapi2::putScom(i_target, INT_CQ_PMC_0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PMC_0_INT_CQ_PMC_0_COUNT_47(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PMC_0));
#endif
    return o_data.insertFromRight<INT_CQ_PMC_0_INT_CQ_PMC_0_COUNT_47,
           INT_CQ_PMC_0_INT_CQ_PMC_0_COUNT_47_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_PMC_0_INT_CQ_PMC_0_COUNT_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_PMC_0_INT_CQ_PMC_0_COUNT_47(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PMC_0));
#endif
    return o_data.insertFromRight<INT_CQ_PMC_0_INT_CQ_PMC_0_COUNT_47,
           INT_CQ_PMC_0_INT_CQ_PMC_0_COUNT_47_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_PMC_0_INT_CQ_PMC_0_COUNT_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_PMC_0_INT_CQ_PMC_0_COUNT_47(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_PMC_0));
#endif
    return i_data.extractToRight<INT_CQ_PMC_0_INT_CQ_PMC_0_COUNT_47,
           INT_CQ_PMC_0_INT_CQ_PMC_0_COUNT_47_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_PMC_0_INT_CQ_PMC_0_COUNT_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_CQ_TTT_0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_TTT_0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_CQ_TTT_0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_CQ_TTT_0;
#endif
    return fapi2::getScom(i_target, INT_CQ_TTT_0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_CQ_TTT_0(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_CQ_TTT_0));
#endif
    return fapi2::putScom(i_target, INT_CQ_TTT_0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_INT_CQ_TTT_0_VALID_0_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_TTT_0));
#endif
    return o_data.insertFromRight<INT_CQ_TTT_0_VALID_0_7,
           INT_CQ_TTT_0_VALID_0_7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_TTT_0_VALID_0_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_TTT_0_VALID_0_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_TTT_0));
#endif
    return o_data.insertFromRight<INT_CQ_TTT_0_VALID_0_7,
           INT_CQ_TTT_0_VALID_0_7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_TTT_0_VALID_0_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_TTT_0_VALID_0_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_TTT_0));
#endif
    return i_data.extractToRight<INT_CQ_TTT_0_VALID_0_7,
           INT_CQ_TTT_0_VALID_0_7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_TTT_0_VALID_0_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_TTT_0_ENTRY_0_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_TTT_0));
#endif
    return o_data.insertFromRight<INT_CQ_TTT_0_ENTRY_0_3,
           INT_CQ_TTT_0_ENTRY_0_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_TTT_0_ENTRY_0_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_TTT_0_ENTRY_0_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_TTT_0));
#endif
    return o_data.insertFromRight<INT_CQ_TTT_0_ENTRY_0_3,
           INT_CQ_TTT_0_ENTRY_0_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_TTT_0_ENTRY_0_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_TTT_0_ENTRY_0_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_TTT_0));
#endif
    return i_data.extractToRight<INT_CQ_TTT_0_ENTRY_0_3,
           INT_CQ_TTT_0_ENTRY_0_3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_TTT_0_ENTRY_0_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_TTT_0_ENTRY_1_0_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_TTT_0));
#endif
    return o_data.insertFromRight<INT_CQ_TTT_0_ENTRY_1_0_3,
           INT_CQ_TTT_0_ENTRY_1_0_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_TTT_0_ENTRY_1_0_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_TTT_0_ENTRY_1_0_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_TTT_0));
#endif
    return o_data.insertFromRight<INT_CQ_TTT_0_ENTRY_1_0_3,
           INT_CQ_TTT_0_ENTRY_1_0_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_TTT_0_ENTRY_1_0_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_TTT_0_ENTRY_1_0_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_TTT_0));
#endif
    return i_data.extractToRight<INT_CQ_TTT_0_ENTRY_1_0_3,
           INT_CQ_TTT_0_ENTRY_1_0_3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_TTT_0_ENTRY_1_0_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_TTT_0_ENTRY_2_0_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_TTT_0));
#endif
    return o_data.insertFromRight<INT_CQ_TTT_0_ENTRY_2_0_3,
           INT_CQ_TTT_0_ENTRY_2_0_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_TTT_0_ENTRY_2_0_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_TTT_0_ENTRY_2_0_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_TTT_0));
#endif
    return o_data.insertFromRight<INT_CQ_TTT_0_ENTRY_2_0_3,
           INT_CQ_TTT_0_ENTRY_2_0_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_TTT_0_ENTRY_2_0_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_TTT_0_ENTRY_2_0_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_TTT_0));
#endif
    return i_data.extractToRight<INT_CQ_TTT_0_ENTRY_2_0_3,
           INT_CQ_TTT_0_ENTRY_2_0_3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_TTT_0_ENTRY_2_0_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_TTT_0_ENTRY_3_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_TTT_0));
#endif
    return o_data.insertFromRight<INT_CQ_TTT_0_ENTRY_3_0,
           INT_CQ_TTT_0_ENTRY_3_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_TTT_0_ENTRY_3_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_TTT_0_ENTRY_3_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_TTT_0));
#endif
    return o_data.insertFromRight<INT_CQ_TTT_0_ENTRY_3_0,
           INT_CQ_TTT_0_ENTRY_3_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_TTT_0_ENTRY_3_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_TTT_0_ENTRY_3_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_TTT_0));
#endif
    return i_data.extractToRight<INT_CQ_TTT_0_ENTRY_3_0,
           INT_CQ_TTT_0_ENTRY_3_0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_TTT_0_ENTRY_3_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_TTT_0_ENTRY_4_0_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_TTT_0));
#endif
    return o_data.insertFromRight<INT_CQ_TTT_0_ENTRY_4_0_3,
           INT_CQ_TTT_0_ENTRY_4_0_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_TTT_0_ENTRY_4_0_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_TTT_0_ENTRY_4_0_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_TTT_0));
#endif
    return o_data.insertFromRight<INT_CQ_TTT_0_ENTRY_4_0_3,
           INT_CQ_TTT_0_ENTRY_4_0_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_TTT_0_ENTRY_4_0_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_TTT_0_ENTRY_4_0_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_TTT_0));
#endif
    return i_data.extractToRight<INT_CQ_TTT_0_ENTRY_4_0_3,
           INT_CQ_TTT_0_ENTRY_4_0_3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_TTT_0_ENTRY_4_0_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_TTT_0_ENTRY_5_0_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_TTT_0));
#endif
    return o_data.insertFromRight<INT_CQ_TTT_0_ENTRY_5_0_3,
           INT_CQ_TTT_0_ENTRY_5_0_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_TTT_0_ENTRY_5_0_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_TTT_0_ENTRY_5_0_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_TTT_0));
#endif
    return o_data.insertFromRight<INT_CQ_TTT_0_ENTRY_5_0_3,
           INT_CQ_TTT_0_ENTRY_5_0_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_TTT_0_ENTRY_5_0_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_TTT_0_ENTRY_5_0_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_TTT_0));
#endif
    return i_data.extractToRight<INT_CQ_TTT_0_ENTRY_5_0_3,
           INT_CQ_TTT_0_ENTRY_5_0_3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_TTT_0_ENTRY_5_0_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_TTT_0_ENTRY_6_0_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_TTT_0));
#endif
    return o_data.insertFromRight<INT_CQ_TTT_0_ENTRY_6_0_3,
           INT_CQ_TTT_0_ENTRY_6_0_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_TTT_0_ENTRY_6_0_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_TTT_0_ENTRY_6_0_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_TTT_0));
#endif
    return o_data.insertFromRight<INT_CQ_TTT_0_ENTRY_6_0_3,
           INT_CQ_TTT_0_ENTRY_6_0_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_TTT_0_ENTRY_6_0_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_TTT_0_ENTRY_6_0_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_TTT_0));
#endif
    return i_data.extractToRight<INT_CQ_TTT_0_ENTRY_6_0_3,
           INT_CQ_TTT_0_ENTRY_6_0_3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_TTT_0_ENTRY_6_0_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_TTT_0_ENTRY_7_0_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_TTT_0));
#endif
    return o_data.insertFromRight<INT_CQ_TTT_0_ENTRY_7_0_3,
           INT_CQ_TTT_0_ENTRY_7_0_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_TTT_0_ENTRY_7_0_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_CQ_TTT_0_ENTRY_7_0_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_TTT_0));
#endif
    return o_data.insertFromRight<INT_CQ_TTT_0_ENTRY_7_0_3,
           INT_CQ_TTT_0_ENTRY_7_0_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_TTT_0_ENTRY_7_0_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_CQ_TTT_0_ENTRY_7_0_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_CQ_TTT_0));
#endif
    return i_data.extractToRight<INT_CQ_TTT_0_ENTRY_7_0_3,
           INT_CQ_TTT_0_ENTRY_7_0_3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_CQ_TTT_0_ENTRY_7_0_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_NXC_REGS_WATCH0_DATA0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_WATCH0_DATA0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_NXC_REGS_WATCH0_DATA0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_NXC_REGS_WATCH0_DATA0;
#endif
    return fapi2::getScom(i_target, INT_PC_NXC_REGS_WATCH0_DATA0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_NXC_REGS_WATCH0_DATA0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_NXC_REGS_WATCH0_DATA0));
#endif
    return fapi2::putScom(i_target, INT_PC_NXC_REGS_WATCH0_DATA0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_REGS_NRQ_CFG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_NRQ_CFG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_REGS_NRQ_CFG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_NRQ_CFG;
#endif
    return fapi2::getScom(i_target, INT_PC_REGS_NRQ_CFG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_REGS_NRQ_CFG(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_CFG));
#endif
    return fapi2::putScom(i_target, INT_PC_REGS_NRQ_CFG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_CFG_CFG_NRQ_CORE_PUSH_EN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_CFG));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_CFG_CFG_NRQ_CORE_PUSH_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_NRQ_CFG_CFG_NRQ_CORE_PUSH_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_CFG_CFG_NRQ_CORE_PUSH_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_CFG));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_CFG_CFG_NRQ_CORE_PUSH_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_NRQ_CFG_CFG_NRQ_CORE_PUSH_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_CFG_CFG_NRQ_CORE_PUSH_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_CFG));
#endif
    return o_data.setBit<INT_PC_REGS_NRQ_CFG_CFG_NRQ_CORE_PUSH_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_NRQ_CFG_CFG_NRQ_CORE_PUSH_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_NRQ_CFG_CFG_NRQ_CORE_PUSH_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_CFG));
#endif
    return o_data.clearBit<INT_PC_REGS_NRQ_CFG_CFG_NRQ_CORE_PUSH_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_NRQ_CFG_CFG_NRQ_CORE_PUSH_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_CFG_CFG_NRQ_CORE_PUSH_EN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_CFG));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_CFG_CFG_NRQ_CORE_PUSH_EN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_NRQ_CFG_CFG_NRQ_CORE_PUSH_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_PC_REGS_NRQ_CFG_CFG_NRQ_CORE_PUSH_EN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_CFG));
#endif
    return i_data.getBit<INT_PC_REGS_NRQ_CFG_CFG_NRQ_CORE_PUSH_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_NRQ_CFG_CFG_NRQ_CORE_PUSH_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_CFG_RESERVED_1_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_CFG));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_CFG_RESERVED_1_2,
           INT_PC_REGS_NRQ_CFG_RESERVED_1_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_NRQ_CFG_RESERVED_1_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_CFG_RESERVED_1_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_CFG));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_CFG_RESERVED_1_2,
           INT_PC_REGS_NRQ_CFG_RESERVED_1_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_NRQ_CFG_RESERVED_1_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_CFG_RESERVED_1_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_CFG));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_CFG_RESERVED_1_2,
           INT_PC_REGS_NRQ_CFG_RESERVED_1_2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_NRQ_CFG_RESERVED_1_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_CFG_CFG_NRQ_LCL_QUEUE_SIZE_NCKO_LD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_CFG));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_CFG_CFG_NRQ_LCL_QUEUE_SIZE_NCKO_LD,
           INT_PC_REGS_NRQ_CFG_CFG_NRQ_LCL_QUEUE_SIZE_NCKO_LD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_NRQ_CFG_CFG_NRQ_LCL_QUEUE_SIZE_NCKO_LD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_CFG_CFG_NRQ_LCL_QUEUE_SIZE_NCKO_LD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_CFG));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_CFG_CFG_NRQ_LCL_QUEUE_SIZE_NCKO_LD,
           INT_PC_REGS_NRQ_CFG_CFG_NRQ_LCL_QUEUE_SIZE_NCKO_LD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_NRQ_CFG_CFG_NRQ_LCL_QUEUE_SIZE_NCKO_LD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_CFG_CFG_NRQ_LCL_QUEUE_SIZE_NCKO_LD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_CFG));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_CFG_CFG_NRQ_LCL_QUEUE_SIZE_NCKO_LD,
           INT_PC_REGS_NRQ_CFG_CFG_NRQ_LCL_QUEUE_SIZE_NCKO_LD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_NRQ_CFG_CFG_NRQ_LCL_QUEUE_SIZE_NCKO_LD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_CFG_RESERVED_8_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_CFG));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_CFG_RESERVED_8_10,
           INT_PC_REGS_NRQ_CFG_RESERVED_8_10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_NRQ_CFG_RESERVED_8_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_CFG_RESERVED_8_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_CFG));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_CFG_RESERVED_8_10,
           INT_PC_REGS_NRQ_CFG_RESERVED_8_10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_NRQ_CFG_RESERVED_8_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_CFG_RESERVED_8_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_CFG));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_CFG_RESERVED_8_10,
           INT_PC_REGS_NRQ_CFG_RESERVED_8_10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_NRQ_CFG_RESERVED_8_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_CFG_CFG_NRQ_LCL_QUEUE_SIZE_CHKO_LD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_CFG));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_CFG_CFG_NRQ_LCL_QUEUE_SIZE_CHKO_LD,
           INT_PC_REGS_NRQ_CFG_CFG_NRQ_LCL_QUEUE_SIZE_CHKO_LD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_NRQ_CFG_CFG_NRQ_LCL_QUEUE_SIZE_CHKO_LD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_CFG_CFG_NRQ_LCL_QUEUE_SIZE_CHKO_LD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_CFG));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_CFG_CFG_NRQ_LCL_QUEUE_SIZE_CHKO_LD,
           INT_PC_REGS_NRQ_CFG_CFG_NRQ_LCL_QUEUE_SIZE_CHKO_LD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_NRQ_CFG_CFG_NRQ_LCL_QUEUE_SIZE_CHKO_LD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_CFG_CFG_NRQ_LCL_QUEUE_SIZE_CHKO_LD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_CFG));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_CFG_CFG_NRQ_LCL_QUEUE_SIZE_CHKO_LD,
           INT_PC_REGS_NRQ_CFG_CFG_NRQ_LCL_QUEUE_SIZE_CHKO_LD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_NRQ_CFG_CFG_NRQ_LCL_QUEUE_SIZE_CHKO_LD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_CFG_RESERVED_16_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_CFG));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_CFG_RESERVED_16_18,
           INT_PC_REGS_NRQ_CFG_RESERVED_16_18_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_NRQ_CFG_RESERVED_16_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_CFG_RESERVED_16_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_CFG));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_CFG_RESERVED_16_18,
           INT_PC_REGS_NRQ_CFG_RESERVED_16_18_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_NRQ_CFG_RESERVED_16_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_CFG_RESERVED_16_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_CFG));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_CFG_RESERVED_16_18,
           INT_PC_REGS_NRQ_CFG_RESERVED_16_18_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_NRQ_CFG_RESERVED_16_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_CFG_CFG_NRQ_LCL_QUEUE_SIZE_NCKI_ST(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_CFG));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_CFG_CFG_NRQ_LCL_QUEUE_SIZE_NCKI_ST,
           INT_PC_REGS_NRQ_CFG_CFG_NRQ_LCL_QUEUE_SIZE_NCKI_ST_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_NRQ_CFG_CFG_NRQ_LCL_QUEUE_SIZE_NCKI_ST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_CFG_CFG_NRQ_LCL_QUEUE_SIZE_NCKI_ST(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_CFG));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_CFG_CFG_NRQ_LCL_QUEUE_SIZE_NCKI_ST,
           INT_PC_REGS_NRQ_CFG_CFG_NRQ_LCL_QUEUE_SIZE_NCKI_ST_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_NRQ_CFG_CFG_NRQ_LCL_QUEUE_SIZE_NCKI_ST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_CFG_CFG_NRQ_LCL_QUEUE_SIZE_NCKI_ST(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_CFG));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_CFG_CFG_NRQ_LCL_QUEUE_SIZE_NCKI_ST,
           INT_PC_REGS_NRQ_CFG_CFG_NRQ_LCL_QUEUE_SIZE_NCKI_ST_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_NRQ_CFG_CFG_NRQ_LCL_QUEUE_SIZE_NCKI_ST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_CFG_RESERVED_24_28(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_CFG));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_CFG_RESERVED_24_28,
           INT_PC_REGS_NRQ_CFG_RESERVED_24_28_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_NRQ_CFG_RESERVED_24_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_CFG_RESERVED_24_28(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_CFG));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_CFG_RESERVED_24_28,
           INT_PC_REGS_NRQ_CFG_RESERVED_24_28_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_NRQ_CFG_RESERVED_24_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_CFG_RESERVED_24_28(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_CFG));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_CFG_RESERVED_24_28,
           INT_PC_REGS_NRQ_CFG_RESERVED_24_28_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_NRQ_CFG_RESERVED_24_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_CFG_CFG_NRQ_RMT_QUEUE_SIZE_NCKI_ST(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_CFG));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_CFG_CFG_NRQ_RMT_QUEUE_SIZE_NCKI_ST,
           INT_PC_REGS_NRQ_CFG_CFG_NRQ_RMT_QUEUE_SIZE_NCKI_ST_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_NRQ_CFG_CFG_NRQ_RMT_QUEUE_SIZE_NCKI_ST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NRQ_CFG_CFG_NRQ_RMT_QUEUE_SIZE_NCKI_ST(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_CFG));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NRQ_CFG_CFG_NRQ_RMT_QUEUE_SIZE_NCKI_ST,
           INT_PC_REGS_NRQ_CFG_CFG_NRQ_RMT_QUEUE_SIZE_NCKI_ST_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_NRQ_CFG_CFG_NRQ_RMT_QUEUE_SIZE_NCKI_ST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NRQ_CFG_CFG_NRQ_RMT_QUEUE_SIZE_NCKI_ST(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NRQ_CFG));
#endif
    return i_data.extractToRight<INT_PC_REGS_NRQ_CFG_CFG_NRQ_RMT_QUEUE_SIZE_NCKI_ST,
           INT_PC_REGS_NRQ_CFG_CFG_NRQ_RMT_QUEUE_SIZE_NCKI_ST_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_NRQ_CFG_CFG_NRQ_RMT_QUEUE_SIZE_NCKI_ST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_REGS_NVC_BLOCK_MODE(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_NVC_BLOCK_MODE;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_REGS_NVC_BLOCK_MODE(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_NVC_BLOCK_MODE;
#endif
    return fapi2::getScom(i_target, INT_PC_REGS_NVC_BLOCK_MODE, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_REGS_NVC_BLOCK_MODE(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NVC_BLOCK_MODE));
#endif
    return fapi2::putScom(i_target, INT_PC_REGS_NVC_BLOCK_MODE, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NVC_BLOCK_MODE_INT_PC_NVC_BLOCK_MODE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NVC_BLOCK_MODE));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NVC_BLOCK_MODE_INT_PC_NVC_BLOCK_MODE,
           INT_PC_REGS_NVC_BLOCK_MODE_INT_PC_NVC_BLOCK_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_NVC_BLOCK_MODE_INT_PC_NVC_BLOCK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_NVC_BLOCK_MODE_INT_PC_NVC_BLOCK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NVC_BLOCK_MODE));
#endif
    return o_data.insertFromRight<INT_PC_REGS_NVC_BLOCK_MODE_INT_PC_NVC_BLOCK_MODE,
           INT_PC_REGS_NVC_BLOCK_MODE_INT_PC_NVC_BLOCK_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_NVC_BLOCK_MODE_INT_PC_NVC_BLOCK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_NVC_BLOCK_MODE_INT_PC_NVC_BLOCK_MODE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_NVC_BLOCK_MODE));
#endif
    return i_data.extractToRight<INT_PC_REGS_NVC_BLOCK_MODE_INT_PC_NVC_BLOCK_MODE,
           INT_PC_REGS_NVC_BLOCK_MODE_INT_PC_NVC_BLOCK_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_NVC_BLOCK_MODE_INT_PC_NVC_BLOCK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_REGS_TCTXT_EN0_SET(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_TCTXT_EN0_SET;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_REGS_TCTXT_EN0_SET(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_TCTXT_EN0_SET;
#endif
    return fapi2::getScom(i_target, INT_PC_REGS_TCTXT_EN0_SET, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_REGS_TCTXT_EN0_SET(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN0_SET));
#endif
    return fapi2::putScom(i_target, INT_PC_REGS_TCTXT_EN0_SET, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_REGS_TCTXT_EN1_SET(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_TCTXT_EN1_SET;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_REGS_TCTXT_EN1_SET(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_TCTXT_EN1_SET;
#endif
    return fapi2::getScom(i_target, INT_PC_REGS_TCTXT_EN1_SET, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_REGS_TCTXT_EN1_SET(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_EN1_SET));
#endif
    return fapi2::putScom(i_target, INT_PC_REGS_TCTXT_EN1_SET, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_PC_REGS_TCTXT_TRACK(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_TCTXT_TRACK;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_PC_REGS_TCTXT_TRACK(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_PC_REGS_TCTXT_TRACK;
#endif
    return fapi2::getScom(i_target, INT_PC_REGS_TCTXT_TRACK, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_PC_REGS_TCTXT_TRACK(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_TRACK));
#endif
    return fapi2::putScom(i_target, INT_PC_REGS_TCTXT_TRACK, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_TRACK_EN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_TRACK));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_TRACK_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_TRACK_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_TRACK_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_TRACK));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_TRACK_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_TRACK_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_TRACK_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_TRACK));
#endif
    return o_data.setBit<INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_TRACK_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_TRACK_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_TRACK_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_TRACK));
#endif
    return o_data.clearBit<INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_TRACK_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_TRACK_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_TRACK_EN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_TRACK));
#endif
    return i_data.extractToRight<INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_TRACK_EN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_TRACK_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_TRACK_EN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_TRACK));
#endif
    return i_data.getBit<INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_TRACK_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_TRACK_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_TRACK_RESET(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_TRACK));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_TRACK_RESET,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_TRACK_RESET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_TRACK_RESET(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_TRACK));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_TRACK_RESET,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_TRACK_RESET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_TRACK_RESET(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_TRACK));
#endif
    return o_data.setBit<INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_TRACK_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_TRACK_RESET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_TRACK_RESET(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_TRACK));
#endif
    return o_data.clearBit<INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_TRACK_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_TRACK_RESET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_TRACK_RESET(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_TRACK));
#endif
    return i_data.extractToRight<INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_TRACK_RESET,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_TRACK_RESET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_TRACK_RESET(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_TRACK));
#endif
    return i_data.getBit<INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_TRACK_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_TRACK_RESET chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_TRACK_RESERVED_2_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_TRACK));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_TRACK_RESERVED_2_3,
           INT_PC_REGS_TCTXT_TRACK_RESERVED_2_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_TCTXT_TRACK_RESERVED_2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_TRACK_RESERVED_2_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_TRACK));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_TRACK_RESERVED_2_3,
           INT_PC_REGS_TCTXT_TRACK_RESERVED_2_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_TCTXT_TRACK_RESERVED_2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_TCTXT_TRACK_RESERVED_2_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_TRACK));
#endif
    return i_data.extractToRight<INT_PC_REGS_TCTXT_TRACK_RESERVED_2_3,
           INT_PC_REGS_TCTXT_TRACK_RESERVED_2_3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_TCTXT_TRACK_RESERVED_2_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_FILTER_EN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_TRACK));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_FILTER_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_FILTER_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_FILTER_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_TRACK));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_FILTER_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_FILTER_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_FILTER_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_TRACK));
#endif
    return o_data.setBit<INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_FILTER_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_FILTER_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_FILTER_EN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_TRACK));
#endif
    return o_data.clearBit<INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_FILTER_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_FILTER_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_FILTER_EN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_TRACK));
#endif
    return i_data.extractToRight<INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_FILTER_EN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_FILTER_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_FILTER_EN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_TRACK));
#endif
    return i_data.getBit<INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_FILTER_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_FILTER_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_FILTER_REGS_EN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_TRACK));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_FILTER_REGS_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_FILTER_REGS_EN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_FILTER_REGS_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_TRACK));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_FILTER_REGS_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_FILTER_REGS_EN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_FILTER_REGS_EN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_TRACK));
#endif
    return o_data.setBit<INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_FILTER_REGS_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_FILTER_REGS_EN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_FILTER_REGS_EN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_TRACK));
#endif
    return o_data.clearBit<INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_FILTER_REGS_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_FILTER_REGS_EN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_FILTER_REGS_EN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_TRACK));
#endif
    return i_data.extractToRight<INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_FILTER_REGS_EN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_FILTER_REGS_EN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_FILTER_REGS_EN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_TRACK));
#endif
    return i_data.getBit<INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_FILTER_REGS_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_FILTER_REGS_EN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_TRACK_RESERVED_6_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_TRACK));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_TRACK_RESERVED_6_9,
           INT_PC_REGS_TCTXT_TRACK_RESERVED_6_9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_TCTXT_TRACK_RESERVED_6_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_TRACK_RESERVED_6_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_TRACK));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_TRACK_RESERVED_6_9,
           INT_PC_REGS_TCTXT_TRACK_RESERVED_6_9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_TCTXT_TRACK_RESERVED_6_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_TCTXT_TRACK_RESERVED_6_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_TRACK));
#endif
    return i_data.extractToRight<INT_PC_REGS_TCTXT_TRACK_RESERVED_6_9,
           INT_PC_REGS_TCTXT_TRACK_RESERVED_6_9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_TCTXT_TRACK_RESERVED_6_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_RESET_DELAY(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_TRACK));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_RESET_DELAY,
           INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_RESET_DELAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_RESET_DELAY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_RESET_DELAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_TRACK));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_RESET_DELAY,
           INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_RESET_DELAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_RESET_DELAY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_RESET_DELAY(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_TRACK));
#endif
    return i_data.extractToRight<INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_RESET_DELAY,
           INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_RESET_DELAY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_RESET_DELAY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_EN_VEC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_TRACK));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_EN_VEC,
           INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_EN_VEC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_EN_VEC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_EN_VEC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_TRACK));
#endif
    return o_data.insertFromRight<INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_EN_VEC,
           INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_EN_VEC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_EN_VEC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_EN_VEC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_PC_REGS_TCTXT_TRACK));
#endif
    return i_data.extractToRight<INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_EN_VEC,
           INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_EN_VEC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_PC_REGS_TCTXT_TRACK_CFG_BLOCK_EN_VEC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_DBG_ATX_ORDER_ENDC(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_DBG_ATX_ORDER_ENDC;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_DBG_ATX_ORDER_ENDC(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_DBG_ATX_ORDER_ENDC;
#endif
    return fapi2::getScom(i_target, INT_VC_DBG_ATX_ORDER_ENDC, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_DBG_ATX_ORDER_ENDC(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_DBG_ATX_ORDER_ENDC));
#endif
    return fapi2::putScom(i_target, INT_VC_DBG_ATX_ORDER_ENDC, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_EASC_ADDITIONAL_PERF(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_EASC_ADDITIONAL_PERF;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_EASC_ADDITIONAL_PERF(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_EASC_ADDITIONAL_PERF;
#endif
    return fapi2::getScom(i_target, INT_VC_EASC_ADDITIONAL_PERF, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_EASC_ADDITIONAL_PERF(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_ADDITIONAL_PERF));
#endif
    return fapi2::putScom(i_target, INT_VC_EASC_ADDITIONAL_PERF, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_ADDITIONAL_PERF_P0_IS_IDLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_ADDITIONAL_PERF));
#endif
    return o_data.insertFromRight<INT_VC_EASC_ADDITIONAL_PERF_P0_IS_IDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_ADDITIONAL_PERF_P0_IS_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_ADDITIONAL_PERF_P0_IS_IDLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_ADDITIONAL_PERF));
#endif
    return o_data.insertFromRight<INT_VC_EASC_ADDITIONAL_PERF_P0_IS_IDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_ADDITIONAL_PERF_P0_IS_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_ADDITIONAL_PERF_P0_IS_IDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_ADDITIONAL_PERF));
#endif
    return o_data.setBit<INT_VC_EASC_ADDITIONAL_PERF_P0_IS_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_ADDITIONAL_PERF_P0_IS_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_EASC_ADDITIONAL_PERF_P0_IS_IDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_ADDITIONAL_PERF));
#endif
    return o_data.clearBit<INT_VC_EASC_ADDITIONAL_PERF_P0_IS_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_ADDITIONAL_PERF_P0_IS_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_EASC_ADDITIONAL_PERF_P0_IS_IDLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_ADDITIONAL_PERF));
#endif
    return i_data.extractToRight<INT_VC_EASC_ADDITIONAL_PERF_P0_IS_IDLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_ADDITIONAL_PERF_P0_IS_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_VC_EASC_ADDITIONAL_PERF_P0_IS_IDLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_ADDITIONAL_PERF));
#endif
    return i_data.getBit<INT_VC_EASC_ADDITIONAL_PERF_P0_IS_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_ADDITIONAL_PERF_P0_IS_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_ADDITIONAL_PERF_P1_IS_IDLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_ADDITIONAL_PERF));
#endif
    return o_data.insertFromRight<INT_VC_EASC_ADDITIONAL_PERF_P1_IS_IDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_ADDITIONAL_PERF_P1_IS_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_ADDITIONAL_PERF_P1_IS_IDLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_ADDITIONAL_PERF));
#endif
    return o_data.insertFromRight<INT_VC_EASC_ADDITIONAL_PERF_P1_IS_IDLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_ADDITIONAL_PERF_P1_IS_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_ADDITIONAL_PERF_P1_IS_IDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_ADDITIONAL_PERF));
#endif
    return o_data.setBit<INT_VC_EASC_ADDITIONAL_PERF_P1_IS_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_ADDITIONAL_PERF_P1_IS_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_EASC_ADDITIONAL_PERF_P1_IS_IDLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_ADDITIONAL_PERF));
#endif
    return o_data.clearBit<INT_VC_EASC_ADDITIONAL_PERF_P1_IS_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_ADDITIONAL_PERF_P1_IS_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_EASC_ADDITIONAL_PERF_P1_IS_IDLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_ADDITIONAL_PERF));
#endif
    return i_data.extractToRight<INT_VC_EASC_ADDITIONAL_PERF_P1_IS_IDLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_ADDITIONAL_PERF_P1_IS_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_VC_EASC_ADDITIONAL_PERF_P1_IS_IDLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_ADDITIONAL_PERF));
#endif
    return i_data.getBit<INT_VC_EASC_ADDITIONAL_PERF_P1_IS_IDLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_ADDITIONAL_PERF_P1_IS_IDLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_ADDITIONAL_PERF_RESERVED_2_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_ADDITIONAL_PERF));
#endif
    return o_data.insertFromRight<INT_VC_EASC_ADDITIONAL_PERF_RESERVED_2_7,
           INT_VC_EASC_ADDITIONAL_PERF_RESERVED_2_7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_ADDITIONAL_PERF_RESERVED_2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_ADDITIONAL_PERF_RESERVED_2_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_ADDITIONAL_PERF));
#endif
    return o_data.insertFromRight<INT_VC_EASC_ADDITIONAL_PERF_RESERVED_2_7,
           INT_VC_EASC_ADDITIONAL_PERF_RESERVED_2_7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_ADDITIONAL_PERF_RESERVED_2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_EASC_ADDITIONAL_PERF_RESERVED_2_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_ADDITIONAL_PERF));
#endif
    return i_data.extractToRight<INT_VC_EASC_ADDITIONAL_PERF_RESERVED_2_7,
           INT_VC_EASC_ADDITIONAL_PERF_RESERVED_2_7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_ADDITIONAL_PERF_RESERVED_2_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_ADDITIONAL_PERF_MAX_PTAG_IN_USE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_ADDITIONAL_PERF));
#endif
    return o_data.insertFromRight<INT_VC_EASC_ADDITIONAL_PERF_MAX_PTAG_IN_USE,
           INT_VC_EASC_ADDITIONAL_PERF_MAX_PTAG_IN_USE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_ADDITIONAL_PERF_MAX_PTAG_IN_USE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_ADDITIONAL_PERF_MAX_PTAG_IN_USE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_ADDITIONAL_PERF));
#endif
    return o_data.insertFromRight<INT_VC_EASC_ADDITIONAL_PERF_MAX_PTAG_IN_USE,
           INT_VC_EASC_ADDITIONAL_PERF_MAX_PTAG_IN_USE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_ADDITIONAL_PERF_MAX_PTAG_IN_USE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_EASC_ADDITIONAL_PERF_MAX_PTAG_IN_USE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_ADDITIONAL_PERF));
#endif
    return i_data.extractToRight<INT_VC_EASC_ADDITIONAL_PERF_MAX_PTAG_IN_USE,
           INT_VC_EASC_ADDITIONAL_PERF_MAX_PTAG_IN_USE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_ADDITIONAL_PERF_MAX_PTAG_IN_USE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_ADDITIONAL_PERF_RESERVED_16_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_ADDITIONAL_PERF));
#endif
    return o_data.insertFromRight<INT_VC_EASC_ADDITIONAL_PERF_RESERVED_16_23,
           INT_VC_EASC_ADDITIONAL_PERF_RESERVED_16_23_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_ADDITIONAL_PERF_RESERVED_16_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_ADDITIONAL_PERF_RESERVED_16_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_ADDITIONAL_PERF));
#endif
    return o_data.insertFromRight<INT_VC_EASC_ADDITIONAL_PERF_RESERVED_16_23,
           INT_VC_EASC_ADDITIONAL_PERF_RESERVED_16_23_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_ADDITIONAL_PERF_RESERVED_16_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_EASC_ADDITIONAL_PERF_RESERVED_16_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_ADDITIONAL_PERF));
#endif
    return i_data.extractToRight<INT_VC_EASC_ADDITIONAL_PERF_RESERVED_16_23,
           INT_VC_EASC_ADDITIONAL_PERF_RESERVED_16_23_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_ADDITIONAL_PERF_RESERVED_16_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_ADDITIONAL_PERF_MAX_UNLOCK_IN_FIFO(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_ADDITIONAL_PERF));
#endif
    return o_data.insertFromRight<INT_VC_EASC_ADDITIONAL_PERF_MAX_UNLOCK_IN_FIFO,
           INT_VC_EASC_ADDITIONAL_PERF_MAX_UNLOCK_IN_FIFO_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_ADDITIONAL_PERF_MAX_UNLOCK_IN_FIFO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_ADDITIONAL_PERF_MAX_UNLOCK_IN_FIFO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_ADDITIONAL_PERF));
#endif
    return o_data.insertFromRight<INT_VC_EASC_ADDITIONAL_PERF_MAX_UNLOCK_IN_FIFO,
           INT_VC_EASC_ADDITIONAL_PERF_MAX_UNLOCK_IN_FIFO_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_ADDITIONAL_PERF_MAX_UNLOCK_IN_FIFO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_EASC_ADDITIONAL_PERF_MAX_UNLOCK_IN_FIFO(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_ADDITIONAL_PERF));
#endif
    return i_data.extractToRight<INT_VC_EASC_ADDITIONAL_PERF_MAX_UNLOCK_IN_FIFO,
           INT_VC_EASC_ADDITIONAL_PERF_MAX_UNLOCK_IN_FIFO_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_ADDITIONAL_PERF_MAX_UNLOCK_IN_FIFO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_ADDITIONAL_PERF_HIGHIEST_SELECTED_WAY(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_ADDITIONAL_PERF));
#endif
    return o_data.insertFromRight<INT_VC_EASC_ADDITIONAL_PERF_HIGHIEST_SELECTED_WAY,
           INT_VC_EASC_ADDITIONAL_PERF_HIGHIEST_SELECTED_WAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_ADDITIONAL_PERF_HIGHIEST_SELECTED_WAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_ADDITIONAL_PERF_HIGHIEST_SELECTED_WAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_ADDITIONAL_PERF));
#endif
    return o_data.insertFromRight<INT_VC_EASC_ADDITIONAL_PERF_HIGHIEST_SELECTED_WAY,
           INT_VC_EASC_ADDITIONAL_PERF_HIGHIEST_SELECTED_WAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_ADDITIONAL_PERF_HIGHIEST_SELECTED_WAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_EASC_ADDITIONAL_PERF_HIGHIEST_SELECTED_WAY(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_ADDITIONAL_PERF));
#endif
    return i_data.extractToRight<INT_VC_EASC_ADDITIONAL_PERF_HIGHIEST_SELECTED_WAY,
           INT_VC_EASC_ADDITIONAL_PERF_HIGHIEST_SELECTED_WAY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_ADDITIONAL_PERF_HIGHIEST_SELECTED_WAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_ADDITIONAL_PERF_RESERVED_40_47(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_ADDITIONAL_PERF));
#endif
    return o_data.insertFromRight<INT_VC_EASC_ADDITIONAL_PERF_RESERVED_40_47,
           INT_VC_EASC_ADDITIONAL_PERF_RESERVED_40_47_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_ADDITIONAL_PERF_RESERVED_40_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_ADDITIONAL_PERF_RESERVED_40_47(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_ADDITIONAL_PERF));
#endif
    return o_data.insertFromRight<INT_VC_EASC_ADDITIONAL_PERF_RESERVED_40_47,
           INT_VC_EASC_ADDITIONAL_PERF_RESERVED_40_47_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_ADDITIONAL_PERF_RESERVED_40_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_EASC_ADDITIONAL_PERF_RESERVED_40_47(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_ADDITIONAL_PERF));
#endif
    return i_data.extractToRight<INT_VC_EASC_ADDITIONAL_PERF_RESERVED_40_47,
           INT_VC_EASC_ADDITIONAL_PERF_RESERVED_40_47_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_ADDITIONAL_PERF_RESERVED_40_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_ADDITIONAL_PERF_MAX_OUTSTANDING_EAS_FETCH(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_ADDITIONAL_PERF));
#endif
    return o_data.insertFromRight<INT_VC_EASC_ADDITIONAL_PERF_MAX_OUTSTANDING_EAS_FETCH,
           INT_VC_EASC_ADDITIONAL_PERF_MAX_OUTSTANDING_EAS_FETCH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_ADDITIONAL_PERF_MAX_OUTSTANDING_EAS_FETCH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_ADDITIONAL_PERF_MAX_OUTSTANDING_EAS_FETCH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_ADDITIONAL_PERF));
#endif
    return o_data.insertFromRight<INT_VC_EASC_ADDITIONAL_PERF_MAX_OUTSTANDING_EAS_FETCH,
           INT_VC_EASC_ADDITIONAL_PERF_MAX_OUTSTANDING_EAS_FETCH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_ADDITIONAL_PERF_MAX_OUTSTANDING_EAS_FETCH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_EASC_ADDITIONAL_PERF_MAX_OUTSTANDING_EAS_FETCH(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_ADDITIONAL_PERF));
#endif
    return i_data.extractToRight<INT_VC_EASC_ADDITIONAL_PERF_MAX_OUTSTANDING_EAS_FETCH,
           INT_VC_EASC_ADDITIONAL_PERF_MAX_OUTSTANDING_EAS_FETCH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_ADDITIONAL_PERF_MAX_OUTSTANDING_EAS_FETCH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_ADDITIONAL_PERF_RESERVED_56_63(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_ADDITIONAL_PERF));
#endif
    return o_data.insertFromRight<INT_VC_EASC_ADDITIONAL_PERF_RESERVED_56_63,
           INT_VC_EASC_ADDITIONAL_PERF_RESERVED_56_63_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_ADDITIONAL_PERF_RESERVED_56_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_ADDITIONAL_PERF_RESERVED_56_63(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_ADDITIONAL_PERF));
#endif
    return o_data.insertFromRight<INT_VC_EASC_ADDITIONAL_PERF_RESERVED_56_63,
           INT_VC_EASC_ADDITIONAL_PERF_RESERVED_56_63_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_ADDITIONAL_PERF_RESERVED_56_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_EASC_ADDITIONAL_PERF_RESERVED_56_63(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_ADDITIONAL_PERF));
#endif
    return i_data.extractToRight<INT_VC_EASC_ADDITIONAL_PERF_RESERVED_56_63,
           INT_VC_EASC_ADDITIONAL_PERF_RESERVED_56_63_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_ADDITIONAL_PERF_RESERVED_56_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_EASC_HASH_1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_EASC_HASH_1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_EASC_HASH_1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_EASC_HASH_1;
#endif
    return fapi2::getScom(i_target, INT_VC_EASC_HASH_1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_EASC_HASH_1(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_HASH_1));
#endif
    return fapi2::putScom(i_target, INT_VC_EASC_HASH_1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_HASH_1_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_HASH_1));
#endif
    return o_data.insertFromRight<INT_VC_EASC_HASH_1_0,
           INT_VC_EASC_HASH_1_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_HASH_1_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_HASH_1_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_HASH_1));
#endif
    return o_data.insertFromRight<INT_VC_EASC_HASH_1_0,
           INT_VC_EASC_HASH_1_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_HASH_1_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_EASC_HASH_1_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_HASH_1));
#endif
    return i_data.extractToRight<INT_VC_EASC_HASH_1_0,
           INT_VC_EASC_HASH_1_0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_HASH_1_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_HASH_1_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_HASH_1));
#endif
    return o_data.insertFromRight<INT_VC_EASC_HASH_1_1,
           INT_VC_EASC_HASH_1_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_HASH_1_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_HASH_1_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_HASH_1));
#endif
    return o_data.insertFromRight<INT_VC_EASC_HASH_1_1,
           INT_VC_EASC_HASH_1_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_HASH_1_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_EASC_HASH_1_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_HASH_1));
#endif
    return i_data.extractToRight<INT_VC_EASC_HASH_1_1,
           INT_VC_EASC_HASH_1_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_HASH_1_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_HASH_1_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_HASH_1));
#endif
    return o_data.insertFromRight<INT_VC_EASC_HASH_1_2,
           INT_VC_EASC_HASH_1_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_HASH_1_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_HASH_1_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_HASH_1));
#endif
    return o_data.insertFromRight<INT_VC_EASC_HASH_1_2,
           INT_VC_EASC_HASH_1_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_HASH_1_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_EASC_HASH_1_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_HASH_1));
#endif
    return i_data.extractToRight<INT_VC_EASC_HASH_1_2,
           INT_VC_EASC_HASH_1_2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_HASH_1_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_HASH_1_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_HASH_1));
#endif
    return o_data.insertFromRight<INT_VC_EASC_HASH_1_3,
           INT_VC_EASC_HASH_1_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_HASH_1_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_HASH_1_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_HASH_1));
#endif
    return o_data.insertFromRight<INT_VC_EASC_HASH_1_3,
           INT_VC_EASC_HASH_1_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_HASH_1_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_EASC_HASH_1_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_HASH_1));
#endif
    return i_data.extractToRight<INT_VC_EASC_HASH_1_3,
           INT_VC_EASC_HASH_1_3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_HASH_1_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_HASH_1_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_HASH_1));
#endif
    return o_data.insertFromRight<INT_VC_EASC_HASH_1_4,
           INT_VC_EASC_HASH_1_4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_HASH_1_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_HASH_1_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_HASH_1));
#endif
    return o_data.insertFromRight<INT_VC_EASC_HASH_1_4,
           INT_VC_EASC_HASH_1_4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_HASH_1_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_EASC_HASH_1_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_HASH_1));
#endif
    return i_data.extractToRight<INT_VC_EASC_HASH_1_4,
           INT_VC_EASC_HASH_1_4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_HASH_1_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_HASH_1_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_HASH_1));
#endif
    return o_data.insertFromRight<INT_VC_EASC_HASH_1_5,
           INT_VC_EASC_HASH_1_5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_HASH_1_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_HASH_1_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_HASH_1));
#endif
    return o_data.insertFromRight<INT_VC_EASC_HASH_1_5,
           INT_VC_EASC_HASH_1_5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_HASH_1_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_EASC_HASH_1_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_HASH_1));
#endif
    return i_data.extractToRight<INT_VC_EASC_HASH_1_5,
           INT_VC_EASC_HASH_1_5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_HASH_1_5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_HASH_1_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_HASH_1));
#endif
    return o_data.insertFromRight<INT_VC_EASC_HASH_1_6,
           INT_VC_EASC_HASH_1_6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_HASH_1_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_HASH_1_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_HASH_1));
#endif
    return o_data.insertFromRight<INT_VC_EASC_HASH_1_6,
           INT_VC_EASC_HASH_1_6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_HASH_1_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_EASC_HASH_1_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_HASH_1));
#endif
    return i_data.extractToRight<INT_VC_EASC_HASH_1_6,
           INT_VC_EASC_HASH_1_6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_HASH_1_6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_HASH_1_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_HASH_1));
#endif
    return o_data.insertFromRight<INT_VC_EASC_HASH_1_7,
           INT_VC_EASC_HASH_1_7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_HASH_1_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_EASC_HASH_1_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_HASH_1));
#endif
    return o_data.insertFromRight<INT_VC_EASC_HASH_1_7,
           INT_VC_EASC_HASH_1_7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_HASH_1_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_EASC_HASH_1_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_EASC_HASH_1));
#endif
    return i_data.extractToRight<INT_VC_EASC_HASH_1_7,
           INT_VC_EASC_HASH_1_7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_EASC_HASH_1_7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_ENDC_DBG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ENDC_DBG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_ENDC_DBG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ENDC_DBG;
#endif
    return fapi2::getScom(i_target, INT_VC_ENDC_DBG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_ENDC_DBG(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return fapi2::putScom(i_target, INT_VC_ENDC_DBG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_DBG_RESERVED_0_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_DBG_RESERVED_0_17,
           INT_VC_ENDC_DBG_RESERVED_0_17_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_RESERVED_0_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_DBG_RESERVED_0_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_DBG_RESERVED_0_17,
           INT_VC_ENDC_DBG_RESERVED_0_17_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_RESERVED_0_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_DBG_RESERVED_0_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return i_data.extractToRight<INT_VC_ENDC_DBG_RESERVED_0_17,
           INT_VC_ENDC_DBG_RESERVED_0_17_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_RESERVED_0_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_DBG_WAY_DISABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_DBG_WAY_DISABLE,
           INT_VC_ENDC_DBG_WAY_DISABLE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_WAY_DISABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_DBG_WAY_DISABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_DBG_WAY_DISABLE,
           INT_VC_ENDC_DBG_WAY_DISABLE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_WAY_DISABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_DBG_WAY_DISABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return i_data.extractToRight<INT_VC_ENDC_DBG_WAY_DISABLE,
           INT_VC_ENDC_DBG_WAY_DISABLE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_WAY_DISABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_DBG_RESERVED_24_25(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_DBG_RESERVED_24_25,
           INT_VC_ENDC_DBG_RESERVED_24_25_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_RESERVED_24_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_DBG_RESERVED_24_25(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_DBG_RESERVED_24_25,
           INT_VC_ENDC_DBG_RESERVED_24_25_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_RESERVED_24_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_DBG_RESERVED_24_25(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return i_data.extractToRight<INT_VC_ENDC_DBG_RESERVED_24_25,
           INT_VC_ENDC_DBG_RESERVED_24_25_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_RESERVED_24_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_DBG_DIS_WATCH_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_DBG_DIS_WATCH_ECC_CORRECTION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_DIS_WATCH_ECC_CORRECTION chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_DBG_DIS_WATCH_ECC_CORRECTION(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_DBG_DIS_WATCH_ECC_CORRECTION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_DIS_WATCH_ECC_CORRECTION chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_DBG_DIS_WATCH_ECC_CORRECTION(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return o_data.setBit<INT_VC_ENDC_DBG_DIS_WATCH_ECC_CORRECTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_DIS_WATCH_ECC_CORRECTION chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_ENDC_DBG_DIS_WATCH_ECC_CORRECTION(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return o_data.clearBit<INT_VC_ENDC_DBG_DIS_WATCH_ECC_CORRECTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_DIS_WATCH_ECC_CORRECTION chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_DBG_DIS_WATCH_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return i_data.extractToRight<INT_VC_ENDC_DBG_DIS_WATCH_ECC_CORRECTION,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_DIS_WATCH_ECC_CORRECTION chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_VC_ENDC_DBG_DIS_WATCH_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return i_data.getBit<INT_VC_ENDC_DBG_DIS_WATCH_ECC_CORRECTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_DIS_WATCH_ECC_CORRECTION chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_DBG_DIS_ARX_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_DBG_DIS_ARX_ECC_CORRECTION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_DIS_ARX_ECC_CORRECTION chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_DBG_DIS_ARX_ECC_CORRECTION(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_DBG_DIS_ARX_ECC_CORRECTION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_DIS_ARX_ECC_CORRECTION chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_DBG_DIS_ARX_ECC_CORRECTION(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return o_data.setBit<INT_VC_ENDC_DBG_DIS_ARX_ECC_CORRECTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_DIS_ARX_ECC_CORRECTION chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_ENDC_DBG_DIS_ARX_ECC_CORRECTION(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return o_data.clearBit<INT_VC_ENDC_DBG_DIS_ARX_ECC_CORRECTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_DIS_ARX_ECC_CORRECTION chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_DBG_DIS_ARX_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return i_data.extractToRight<INT_VC_ENDC_DBG_DIS_ARX_ECC_CORRECTION,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_DIS_ARX_ECC_CORRECTION chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_VC_ENDC_DBG_DIS_ARX_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return i_data.getBit<INT_VC_ENDC_DBG_DIS_ARX_ECC_CORRECTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_DIS_ARX_ECC_CORRECTION chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_DBG_DIS_TAG_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_DBG_DIS_TAG_ECC_CORRECTION,
           INT_VC_ENDC_DBG_DIS_TAG_ECC_CORRECTION_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_DIS_TAG_ECC_CORRECTION chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_DBG_DIS_TAG_ECC_CORRECTION(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_DBG_DIS_TAG_ECC_CORRECTION,
           INT_VC_ENDC_DBG_DIS_TAG_ECC_CORRECTION_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_DIS_TAG_ECC_CORRECTION chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_DBG_DIS_TAG_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return i_data.extractToRight<INT_VC_ENDC_DBG_DIS_TAG_ECC_CORRECTION,
           INT_VC_ENDC_DBG_DIS_TAG_ECC_CORRECTION_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_DIS_TAG_ECC_CORRECTION chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_DBG_DIS_STATE_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_DBG_DIS_STATE_ECC_CORRECTION,
           INT_VC_ENDC_DBG_DIS_STATE_ECC_CORRECTION_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_DIS_STATE_ECC_CORRECTION chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_DBG_DIS_STATE_ECC_CORRECTION(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_DBG_DIS_STATE_ECC_CORRECTION,
           INT_VC_ENDC_DBG_DIS_STATE_ECC_CORRECTION_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_DIS_STATE_ECC_CORRECTION chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_DBG_DIS_STATE_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return i_data.extractToRight<INT_VC_ENDC_DBG_DIS_STATE_ECC_CORRECTION,
           INT_VC_ENDC_DBG_DIS_STATE_ECC_CORRECTION_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_DIS_STATE_ECC_CORRECTION chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_DBG_DIS_CTRLBUF_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_DBG_DIS_CTRLBUF_ECC_CORRECTION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_DIS_CTRLBUF_ECC_CORRECTION chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_DBG_DIS_CTRLBUF_ECC_CORRECTION(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_DBG_DIS_CTRLBUF_ECC_CORRECTION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_DIS_CTRLBUF_ECC_CORRECTION chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_DBG_DIS_CTRLBUF_ECC_CORRECTION(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return o_data.setBit<INT_VC_ENDC_DBG_DIS_CTRLBUF_ECC_CORRECTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_DIS_CTRLBUF_ECC_CORRECTION chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_ENDC_DBG_DIS_CTRLBUF_ECC_CORRECTION(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return o_data.clearBit<INT_VC_ENDC_DBG_DIS_CTRLBUF_ECC_CORRECTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_DIS_CTRLBUF_ECC_CORRECTION chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_DBG_DIS_CTRLBUF_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return i_data.extractToRight<INT_VC_ENDC_DBG_DIS_CTRLBUF_ECC_CORRECTION,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_DIS_CTRLBUF_ECC_CORRECTION chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_VC_ENDC_DBG_DIS_CTRLBUF_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return i_data.getBit<INT_VC_ENDC_DBG_DIS_CTRLBUF_ECC_CORRECTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_DIS_CTRLBUF_ECC_CORRECTION chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_DBG_DIS_DATA_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_DBG_DIS_DATA_ECC_CORRECTION,
           INT_VC_ENDC_DBG_DIS_DATA_ECC_CORRECTION_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_DIS_DATA_ECC_CORRECTION chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_DBG_DIS_DATA_ECC_CORRECTION(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_DBG_DIS_DATA_ECC_CORRECTION,
           INT_VC_ENDC_DBG_DIS_DATA_ECC_CORRECTION_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_DIS_DATA_ECC_CORRECTION chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_DBG_DIS_DATA_ECC_CORRECTION(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return i_data.extractToRight<INT_VC_ENDC_DBG_DIS_DATA_ECC_CORRECTION,
           INT_VC_ENDC_DBG_DIS_DATA_ECC_CORRECTION_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_DIS_DATA_ECC_CORRECTION chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_DBG_FORCE_SINGLE_BIT_ECC_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_DBG_FORCE_SINGLE_BIT_ECC_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_FORCE_SINGLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_DBG_FORCE_SINGLE_BIT_ECC_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_DBG_FORCE_SINGLE_BIT_ECC_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_FORCE_SINGLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_DBG_FORCE_SINGLE_BIT_ECC_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return o_data.setBit<INT_VC_ENDC_DBG_FORCE_SINGLE_BIT_ECC_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_FORCE_SINGLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_ENDC_DBG_FORCE_SINGLE_BIT_ECC_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return o_data.clearBit<INT_VC_ENDC_DBG_FORCE_SINGLE_BIT_ECC_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_FORCE_SINGLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_DBG_FORCE_SINGLE_BIT_ECC_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return i_data.extractToRight<INT_VC_ENDC_DBG_FORCE_SINGLE_BIT_ECC_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_FORCE_SINGLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_VC_ENDC_DBG_FORCE_SINGLE_BIT_ECC_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return i_data.getBit<INT_VC_ENDC_DBG_FORCE_SINGLE_BIT_ECC_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_FORCE_SINGLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_DBG_FORCE_DOUBLE_BIT_ECC_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_DBG_FORCE_DOUBLE_BIT_ECC_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_FORCE_DOUBLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_DBG_FORCE_DOUBLE_BIT_ECC_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_DBG_FORCE_DOUBLE_BIT_ECC_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_FORCE_DOUBLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_DBG_FORCE_DOUBLE_BIT_ECC_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return o_data.setBit<INT_VC_ENDC_DBG_FORCE_DOUBLE_BIT_ECC_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_FORCE_DOUBLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_ENDC_DBG_FORCE_DOUBLE_BIT_ECC_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return o_data.clearBit<INT_VC_ENDC_DBG_FORCE_DOUBLE_BIT_ECC_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_FORCE_DOUBLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_DBG_FORCE_DOUBLE_BIT_ECC_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return i_data.extractToRight<INT_VC_ENDC_DBG_FORCE_DOUBLE_BIT_ECC_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_FORCE_DOUBLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_VC_ENDC_DBG_FORCE_DOUBLE_BIT_ECC_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return i_data.getBit<INT_VC_ENDC_DBG_FORCE_DOUBLE_BIT_ECC_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_FORCE_DOUBLE_BIT_ECC_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_DBG_ECC_ERR_INJ_ARRAY_SEL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_DBG_ECC_ERR_INJ_ARRAY_SEL,
           INT_VC_ENDC_DBG_ECC_ERR_INJ_ARRAY_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_ECC_ERR_INJ_ARRAY_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_DBG_ECC_ERR_INJ_ARRAY_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_DBG_ECC_ERR_INJ_ARRAY_SEL,
           INT_VC_ENDC_DBG_ECC_ERR_INJ_ARRAY_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_ECC_ERR_INJ_ARRAY_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_DBG_ECC_ERR_INJ_ARRAY_SEL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return i_data.extractToRight<INT_VC_ENDC_DBG_ECC_ERR_INJ_ARRAY_SEL,
           INT_VC_ENDC_DBG_ECC_ERR_INJ_ARRAY_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_ECC_ERR_INJ_ARRAY_SEL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_DBG_TRACE_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_DBG_TRACE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_TRACE_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_DBG_TRACE_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_DBG_TRACE_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_TRACE_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_DBG_TRACE_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return o_data.setBit<INT_VC_ENDC_DBG_TRACE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_TRACE_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_ENDC_DBG_TRACE_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return o_data.clearBit<INT_VC_ENDC_DBG_TRACE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_TRACE_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_DBG_TRACE_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return i_data.extractToRight<INT_VC_ENDC_DBG_TRACE_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_TRACE_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_VC_ENDC_DBG_TRACE_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return i_data.getBit<INT_VC_ENDC_DBG_TRACE_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_TRACE_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_DBG_RESERVED_58_63(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_DBG_RESERVED_58_63,
           INT_VC_ENDC_DBG_RESERVED_58_63_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_RESERVED_58_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_ENDC_DBG_RESERVED_58_63(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return o_data.insertFromRight<INT_VC_ENDC_DBG_RESERVED_58_63,
           INT_VC_ENDC_DBG_RESERVED_58_63_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_RESERVED_58_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_ENDC_DBG_RESERVED_58_63(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_DBG));
#endif
    return i_data.extractToRight<INT_VC_ENDC_DBG_RESERVED_58_63,
           INT_VC_ENDC_DBG_RESERVED_58_63_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ENDC_DBG_RESERVED_58_63 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_ENDC_WATCH3_DATA2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ENDC_WATCH3_DATA2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_ENDC_WATCH3_DATA2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ENDC_WATCH3_DATA2;
#endif
    return fapi2::getScom(i_target, INT_VC_ENDC_WATCH3_DATA2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_ENDC_WATCH3_DATA2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_ENDC_WATCH3_DATA2));
#endif
    return fapi2::putScom(i_target, INT_VC_ENDC_WATCH3_DATA2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_ERQ_CFG_CMD_LIMIT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ERQ_CFG_CMD_LIMIT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_ERQ_CFG_CMD_LIMIT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_ERQ_CFG_CMD_LIMIT;
#endif
    return fapi2::getScom(i_target, INT_VC_ERQ_CFG_CMD_LIMIT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_ERQ_CFG_CMD_LIMIT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_ERQ_CFG_CMD_LIMIT));
#endif
    return fapi2::putScom(i_target, INT_VC_ERQ_CFG_CMD_LIMIT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_INT_VC_ERQ_CFG_CMD_LIMIT_RESERVED_0_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ERQ_CFG_CMD_LIMIT));
#endif
    return o_data.insertFromRight<INT_VC_ERQ_CFG_CMD_LIMIT_RESERVED_0_17,
           INT_VC_ERQ_CFG_CMD_LIMIT_RESERVED_0_17_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ERQ_CFG_CMD_LIMIT_RESERVED_0_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_ERQ_CFG_CMD_LIMIT_RESERVED_0_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ERQ_CFG_CMD_LIMIT));
#endif
    return o_data.insertFromRight<INT_VC_ERQ_CFG_CMD_LIMIT_RESERVED_0_17,
           INT_VC_ERQ_CFG_CMD_LIMIT_RESERVED_0_17_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ERQ_CFG_CMD_LIMIT_RESERVED_0_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_ERQ_CFG_CMD_LIMIT_RESERVED_0_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ERQ_CFG_CMD_LIMIT));
#endif
    return i_data.extractToRight<INT_VC_ERQ_CFG_CMD_LIMIT_RESERVED_0_17,
           INT_VC_ERQ_CFG_CMD_LIMIT_RESERVED_0_17_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ERQ_CFG_CMD_LIMIT_RESERVED_0_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_ERQ_CFG_CMD_LIMIT_MAX_ERQ_DMA_READ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ERQ_CFG_CMD_LIMIT));
#endif
    return o_data.insertFromRight<INT_VC_ERQ_CFG_CMD_LIMIT_MAX_ERQ_DMA_READ,
           INT_VC_ERQ_CFG_CMD_LIMIT_MAX_ERQ_DMA_READ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ERQ_CFG_CMD_LIMIT_MAX_ERQ_DMA_READ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_ERQ_CFG_CMD_LIMIT_MAX_ERQ_DMA_READ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ERQ_CFG_CMD_LIMIT));
#endif
    return o_data.insertFromRight<INT_VC_ERQ_CFG_CMD_LIMIT_MAX_ERQ_DMA_READ,
           INT_VC_ERQ_CFG_CMD_LIMIT_MAX_ERQ_DMA_READ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ERQ_CFG_CMD_LIMIT_MAX_ERQ_DMA_READ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_ERQ_CFG_CMD_LIMIT_MAX_ERQ_DMA_READ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ERQ_CFG_CMD_LIMIT));
#endif
    return i_data.extractToRight<INT_VC_ERQ_CFG_CMD_LIMIT_MAX_ERQ_DMA_READ,
           INT_VC_ERQ_CFG_CMD_LIMIT_MAX_ERQ_DMA_READ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ERQ_CFG_CMD_LIMIT_MAX_ERQ_DMA_READ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_ERQ_CFG_CMD_LIMIT_RESERVED_24_25(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ERQ_CFG_CMD_LIMIT));
#endif
    return o_data.insertFromRight<INT_VC_ERQ_CFG_CMD_LIMIT_RESERVED_24_25,
           INT_VC_ERQ_CFG_CMD_LIMIT_RESERVED_24_25_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ERQ_CFG_CMD_LIMIT_RESERVED_24_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_ERQ_CFG_CMD_LIMIT_RESERVED_24_25(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ERQ_CFG_CMD_LIMIT));
#endif
    return o_data.insertFromRight<INT_VC_ERQ_CFG_CMD_LIMIT_RESERVED_24_25,
           INT_VC_ERQ_CFG_CMD_LIMIT_RESERVED_24_25_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ERQ_CFG_CMD_LIMIT_RESERVED_24_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_ERQ_CFG_CMD_LIMIT_RESERVED_24_25(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ERQ_CFG_CMD_LIMIT));
#endif
    return i_data.extractToRight<INT_VC_ERQ_CFG_CMD_LIMIT_RESERVED_24_25,
           INT_VC_ERQ_CFG_CMD_LIMIT_RESERVED_24_25_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ERQ_CFG_CMD_LIMIT_RESERVED_24_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_ERQ_CFG_CMD_LIMIT_MAX_ERQ_DMA_WRITE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ERQ_CFG_CMD_LIMIT));
#endif
    return o_data.insertFromRight<INT_VC_ERQ_CFG_CMD_LIMIT_MAX_ERQ_DMA_WRITE,
           INT_VC_ERQ_CFG_CMD_LIMIT_MAX_ERQ_DMA_WRITE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ERQ_CFG_CMD_LIMIT_MAX_ERQ_DMA_WRITE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_ERQ_CFG_CMD_LIMIT_MAX_ERQ_DMA_WRITE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ERQ_CFG_CMD_LIMIT));
#endif
    return o_data.insertFromRight<INT_VC_ERQ_CFG_CMD_LIMIT_MAX_ERQ_DMA_WRITE,
           INT_VC_ERQ_CFG_CMD_LIMIT_MAX_ERQ_DMA_WRITE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ERQ_CFG_CMD_LIMIT_MAX_ERQ_DMA_WRITE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_ERQ_CFG_CMD_LIMIT_MAX_ERQ_DMA_WRITE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_ERQ_CFG_CMD_LIMIT));
#endif
    return i_data.extractToRight<INT_VC_ERQ_CFG_CMD_LIMIT_MAX_ERQ_DMA_WRITE,
           INT_VC_ERQ_CFG_CMD_LIMIT_MAX_ERQ_DMA_WRITE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_ERQ_CFG_CMD_LIMIT_MAX_ERQ_DMA_WRITE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_IQA_CFG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_IQA_CFG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_IQA_CFG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_IQA_CFG;
#endif
    return fapi2::getScom(i_target, INT_VC_IQA_CFG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_IQA_CFG(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return fapi2::putScom(i_target, INT_VC_IQA_CFG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_RESERVED_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.insertFromRight<INT_VC_IQA_CFG_RESERVED_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_RESERVED_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.insertFromRight<INT_VC_IQA_CFG_RESERVED_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_RESERVED_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.setBit<INT_VC_IQA_CFG_RESERVED_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_IQA_CFG_RESERVED_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.clearBit<INT_VC_IQA_CFG_RESERVED_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_IQA_CFG_RESERVED_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return i_data.extractToRight<INT_VC_IQA_CFG_RESERVED_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_VC_IQA_CFG_RESERVED_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return i_data.getBit<INT_VC_IQA_CFG_RESERVED_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_IPI_QUEUE_PRIORITY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.insertFromRight<INT_VC_IQA_CFG_IPI_QUEUE_PRIORITY,
           INT_VC_IQA_CFG_IPI_QUEUE_PRIORITY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_IPI_QUEUE_PRIORITY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_IPI_QUEUE_PRIORITY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.insertFromRight<INT_VC_IQA_CFG_IPI_QUEUE_PRIORITY,
           INT_VC_IQA_CFG_IPI_QUEUE_PRIORITY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_IPI_QUEUE_PRIORITY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_IQA_CFG_IPI_QUEUE_PRIORITY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return i_data.extractToRight<INT_VC_IQA_CFG_IPI_QUEUE_PRIORITY,
           INT_VC_IQA_CFG_IPI_QUEUE_PRIORITY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_IPI_QUEUE_PRIORITY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_RESERVED_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.insertFromRight<INT_VC_IQA_CFG_RESERVED_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_RESERVED_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.insertFromRight<INT_VC_IQA_CFG_RESERVED_4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_RESERVED_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.setBit<INT_VC_IQA_CFG_RESERVED_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_IQA_CFG_RESERVED_4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.clearBit<INT_VC_IQA_CFG_RESERVED_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_IQA_CFG_RESERVED_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return i_data.extractToRight<INT_VC_IQA_CFG_RESERVED_4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_VC_IQA_CFG_RESERVED_4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return i_data.getBit<INT_VC_IQA_CFG_RESERVED_4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_HWD_QUEUE_PRIORITY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.insertFromRight<INT_VC_IQA_CFG_HWD_QUEUE_PRIORITY,
           INT_VC_IQA_CFG_HWD_QUEUE_PRIORITY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_HWD_QUEUE_PRIORITY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_HWD_QUEUE_PRIORITY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.insertFromRight<INT_VC_IQA_CFG_HWD_QUEUE_PRIORITY,
           INT_VC_IQA_CFG_HWD_QUEUE_PRIORITY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_HWD_QUEUE_PRIORITY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_IQA_CFG_HWD_QUEUE_PRIORITY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return i_data.extractToRight<INT_VC_IQA_CFG_HWD_QUEUE_PRIORITY,
           INT_VC_IQA_CFG_HWD_QUEUE_PRIORITY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_HWD_QUEUE_PRIORITY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_RESERVED_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.insertFromRight<INT_VC_IQA_CFG_RESERVED_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_RESERVED_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.insertFromRight<INT_VC_IQA_CFG_RESERVED_8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_RESERVED_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.setBit<INT_VC_IQA_CFG_RESERVED_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_IQA_CFG_RESERVED_8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.clearBit<INT_VC_IQA_CFG_RESERVED_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_IQA_CFG_RESERVED_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return i_data.extractToRight<INT_VC_IQA_CFG_RESERVED_8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_VC_IQA_CFG_RESERVED_8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return i_data.getBit<INT_VC_IQA_CFG_RESERVED_8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_NXC_QUEUE_PRIORITY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.insertFromRight<INT_VC_IQA_CFG_NXC_QUEUE_PRIORITY,
           INT_VC_IQA_CFG_NXC_QUEUE_PRIORITY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_NXC_QUEUE_PRIORITY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_NXC_QUEUE_PRIORITY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.insertFromRight<INT_VC_IQA_CFG_NXC_QUEUE_PRIORITY,
           INT_VC_IQA_CFG_NXC_QUEUE_PRIORITY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_NXC_QUEUE_PRIORITY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_IQA_CFG_NXC_QUEUE_PRIORITY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return i_data.extractToRight<INT_VC_IQA_CFG_NXC_QUEUE_PRIORITY,
           INT_VC_IQA_CFG_NXC_QUEUE_PRIORITY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_NXC_QUEUE_PRIORITY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_RESERVED_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.insertFromRight<INT_VC_IQA_CFG_RESERVED_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_RESERVED_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.insertFromRight<INT_VC_IQA_CFG_RESERVED_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_RESERVED_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.setBit<INT_VC_IQA_CFG_RESERVED_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_IQA_CFG_RESERVED_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.clearBit<INT_VC_IQA_CFG_RESERVED_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_IQA_CFG_RESERVED_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return i_data.extractToRight<INT_VC_IQA_CFG_RESERVED_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_VC_IQA_CFG_RESERVED_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return i_data.getBit<INT_VC_IQA_CFG_RESERVED_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_INT_QUEUE_PRIORITY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.insertFromRight<INT_VC_IQA_CFG_INT_QUEUE_PRIORITY,
           INT_VC_IQA_CFG_INT_QUEUE_PRIORITY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_INT_QUEUE_PRIORITY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_INT_QUEUE_PRIORITY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.insertFromRight<INT_VC_IQA_CFG_INT_QUEUE_PRIORITY,
           INT_VC_IQA_CFG_INT_QUEUE_PRIORITY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_INT_QUEUE_PRIORITY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_IQA_CFG_INT_QUEUE_PRIORITY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return i_data.extractToRight<INT_VC_IQA_CFG_INT_QUEUE_PRIORITY,
           INT_VC_IQA_CFG_INT_QUEUE_PRIORITY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_INT_QUEUE_PRIORITY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_RESERVED_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.insertFromRight<INT_VC_IQA_CFG_RESERVED_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_RESERVED_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.insertFromRight<INT_VC_IQA_CFG_RESERVED_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_RESERVED_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.setBit<INT_VC_IQA_CFG_RESERVED_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_IQA_CFG_RESERVED_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.clearBit<INT_VC_IQA_CFG_RESERVED_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_IQA_CFG_RESERVED_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return i_data.extractToRight<INT_VC_IQA_CFG_RESERVED_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_VC_IQA_CFG_RESERVED_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return i_data.getBit<INT_VC_IQA_CFG_RESERVED_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_OS_QUEUE_PRIORITY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.insertFromRight<INT_VC_IQA_CFG_OS_QUEUE_PRIORITY,
           INT_VC_IQA_CFG_OS_QUEUE_PRIORITY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_OS_QUEUE_PRIORITY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_OS_QUEUE_PRIORITY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.insertFromRight<INT_VC_IQA_CFG_OS_QUEUE_PRIORITY,
           INT_VC_IQA_CFG_OS_QUEUE_PRIORITY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_OS_QUEUE_PRIORITY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_IQA_CFG_OS_QUEUE_PRIORITY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return i_data.extractToRight<INT_VC_IQA_CFG_OS_QUEUE_PRIORITY,
           INT_VC_IQA_CFG_OS_QUEUE_PRIORITY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_OS_QUEUE_PRIORITY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_RESERVED_20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.insertFromRight<INT_VC_IQA_CFG_RESERVED_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_RESERVED_20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.insertFromRight<INT_VC_IQA_CFG_RESERVED_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_RESERVED_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.setBit<INT_VC_IQA_CFG_RESERVED_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_IQA_CFG_RESERVED_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.clearBit<INT_VC_IQA_CFG_RESERVED_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_IQA_CFG_RESERVED_20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return i_data.extractToRight<INT_VC_IQA_CFG_RESERVED_20,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_VC_IQA_CFG_RESERVED_20(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return i_data.getBit<INT_VC_IQA_CFG_RESERVED_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_POOL_QUEUE_PRIORITY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.insertFromRight<INT_VC_IQA_CFG_POOL_QUEUE_PRIORITY,
           INT_VC_IQA_CFG_POOL_QUEUE_PRIORITY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_POOL_QUEUE_PRIORITY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_POOL_QUEUE_PRIORITY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.insertFromRight<INT_VC_IQA_CFG_POOL_QUEUE_PRIORITY,
           INT_VC_IQA_CFG_POOL_QUEUE_PRIORITY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_POOL_QUEUE_PRIORITY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_IQA_CFG_POOL_QUEUE_PRIORITY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return i_data.extractToRight<INT_VC_IQA_CFG_POOL_QUEUE_PRIORITY,
           INT_VC_IQA_CFG_POOL_QUEUE_PRIORITY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_POOL_QUEUE_PRIORITY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_RESERVED_24(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.insertFromRight<INT_VC_IQA_CFG_RESERVED_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_RESERVED_24(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.insertFromRight<INT_VC_IQA_CFG_RESERVED_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_RESERVED_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.setBit<INT_VC_IQA_CFG_RESERVED_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_IQA_CFG_RESERVED_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.clearBit<INT_VC_IQA_CFG_RESERVED_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_IQA_CFG_RESERVED_24(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return i_data.extractToRight<INT_VC_IQA_CFG_RESERVED_24,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_VC_IQA_CFG_RESERVED_24(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return i_data.getBit<INT_VC_IQA_CFG_RESERVED_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_HARD_QUEUE_PRIORITY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.insertFromRight<INT_VC_IQA_CFG_HARD_QUEUE_PRIORITY,
           INT_VC_IQA_CFG_HARD_QUEUE_PRIORITY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_HARD_QUEUE_PRIORITY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_HARD_QUEUE_PRIORITY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.insertFromRight<INT_VC_IQA_CFG_HARD_QUEUE_PRIORITY,
           INT_VC_IQA_CFG_HARD_QUEUE_PRIORITY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_HARD_QUEUE_PRIORITY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_IQA_CFG_HARD_QUEUE_PRIORITY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return i_data.extractToRight<INT_VC_IQA_CFG_HARD_QUEUE_PRIORITY,
           INT_VC_IQA_CFG_HARD_QUEUE_PRIORITY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_HARD_QUEUE_PRIORITY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_RESERVED_28(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.insertFromRight<INT_VC_IQA_CFG_RESERVED_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_RESERVED_28(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.insertFromRight<INT_VC_IQA_CFG_RESERVED_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_RESERVED_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.setBit<INT_VC_IQA_CFG_RESERVED_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_IQA_CFG_RESERVED_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.clearBit<INT_VC_IQA_CFG_RESERVED_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_IQA_CFG_RESERVED_28(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return i_data.extractToRight<INT_VC_IQA_CFG_RESERVED_28,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_VC_IQA_CFG_RESERVED_28(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return i_data.getBit<INT_VC_IQA_CFG_RESERVED_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_LOCAL_QUEUE_PRIORITY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.insertFromRight<INT_VC_IQA_CFG_LOCAL_QUEUE_PRIORITY,
           INT_VC_IQA_CFG_LOCAL_QUEUE_PRIORITY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_LOCAL_QUEUE_PRIORITY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_LOCAL_QUEUE_PRIORITY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.insertFromRight<INT_VC_IQA_CFG_LOCAL_QUEUE_PRIORITY,
           INT_VC_IQA_CFG_LOCAL_QUEUE_PRIORITY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_LOCAL_QUEUE_PRIORITY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_IQA_CFG_LOCAL_QUEUE_PRIORITY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return i_data.extractToRight<INT_VC_IQA_CFG_LOCAL_QUEUE_PRIORITY,
           INT_VC_IQA_CFG_LOCAL_QUEUE_PRIORITY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_LOCAL_QUEUE_PRIORITY chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_RESERVED_32_33(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.insertFromRight<INT_VC_IQA_CFG_RESERVED_32_33,
           INT_VC_IQA_CFG_RESERVED_32_33_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_32_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_RESERVED_32_33(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.insertFromRight<INT_VC_IQA_CFG_RESERVED_32_33,
           INT_VC_IQA_CFG_RESERVED_32_33_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_32_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_IQA_CFG_RESERVED_32_33(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return i_data.extractToRight<INT_VC_IQA_CFG_RESERVED_32_33,
           INT_VC_IQA_CFG_RESERVED_32_33_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_32_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_MAX_OUTSTANDING_ESBC_DEM(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.insertFromRight<INT_VC_IQA_CFG_MAX_OUTSTANDING_ESBC_DEM,
           INT_VC_IQA_CFG_MAX_OUTSTANDING_ESBC_DEM_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_MAX_OUTSTANDING_ESBC_DEM chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_MAX_OUTSTANDING_ESBC_DEM(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.insertFromRight<INT_VC_IQA_CFG_MAX_OUTSTANDING_ESBC_DEM,
           INT_VC_IQA_CFG_MAX_OUTSTANDING_ESBC_DEM_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_MAX_OUTSTANDING_ESBC_DEM chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_IQA_CFG_MAX_OUTSTANDING_ESBC_DEM(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return i_data.extractToRight<INT_VC_IQA_CFG_MAX_OUTSTANDING_ESBC_DEM,
           INT_VC_IQA_CFG_MAX_OUTSTANDING_ESBC_DEM_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_MAX_OUTSTANDING_ESBC_DEM chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_RESERVED_40_41(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.insertFromRight<INT_VC_IQA_CFG_RESERVED_40_41,
           INT_VC_IQA_CFG_RESERVED_40_41_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_40_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_RESERVED_40_41(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.insertFromRight<INT_VC_IQA_CFG_RESERVED_40_41,
           INT_VC_IQA_CFG_RESERVED_40_41_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_40_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_IQA_CFG_RESERVED_40_41(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return i_data.extractToRight<INT_VC_IQA_CFG_RESERVED_40_41,
           INT_VC_IQA_CFG_RESERVED_40_41_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_40_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_MAX_OUTSTANDING_EASC_DEM(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.insertFromRight<INT_VC_IQA_CFG_MAX_OUTSTANDING_EASC_DEM,
           INT_VC_IQA_CFG_MAX_OUTSTANDING_EASC_DEM_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_MAX_OUTSTANDING_EASC_DEM chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_MAX_OUTSTANDING_EASC_DEM(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.insertFromRight<INT_VC_IQA_CFG_MAX_OUTSTANDING_EASC_DEM,
           INT_VC_IQA_CFG_MAX_OUTSTANDING_EASC_DEM_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_MAX_OUTSTANDING_EASC_DEM chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_IQA_CFG_MAX_OUTSTANDING_EASC_DEM(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return i_data.extractToRight<INT_VC_IQA_CFG_MAX_OUTSTANDING_EASC_DEM,
           INT_VC_IQA_CFG_MAX_OUTSTANDING_EASC_DEM_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_MAX_OUTSTANDING_EASC_DEM chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_RESERVED_48_55(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.insertFromRight<INT_VC_IQA_CFG_RESERVED_48_55,
           INT_VC_IQA_CFG_RESERVED_48_55_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_48_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_IQA_CFG_RESERVED_48_55(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return o_data.insertFromRight<INT_VC_IQA_CFG_RESERVED_48_55,
           INT_VC_IQA_CFG_RESERVED_48_55_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_48_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_IQA_CFG_RESERVED_48_55(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_IQA_CFG));
#endif
    return i_data.extractToRight<INT_VC_IQA_CFG_RESERVED_48_55,
           INT_VC_IQA_CFG_RESERVED_48_55_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_IQA_CFG_RESERVED_48_55 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_QUEUES_PERF_EVENT_SEL_4(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_QUEUES_PERF_EVENT_SEL_4;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_QUEUES_PERF_EVENT_SEL_4(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_QUEUES_PERF_EVENT_SEL_4;
#endif
    return fapi2::getScom(i_target, INT_VC_QUEUES_PERF_EVENT_SEL_4, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_QUEUES_PERF_EVENT_SEL_4(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_4));
#endif
    return fapi2::putScom(i_target, INT_VC_QUEUES_PERF_EVENT_SEL_4, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_4_FROM_AIB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_4_FROM_AIB,
           INT_VC_QUEUES_PERF_EVENT_SEL_4_FROM_AIB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_4_FROM_AIB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_4_FROM_AIB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_4_FROM_AIB,
           INT_VC_QUEUES_PERF_EVENT_SEL_4_FROM_AIB_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_4_FROM_AIB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_PERF_EVENT_SEL_4_FROM_AIB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_4));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_PERF_EVENT_SEL_4_FROM_AIB,
           INT_VC_QUEUES_PERF_EVENT_SEL_4_FROM_AIB_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_4_FROM_AIB chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_4_IRQ_TO_IQA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_4_IRQ_TO_IQA,
           INT_VC_QUEUES_PERF_EVENT_SEL_4_IRQ_TO_IQA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_4_IRQ_TO_IQA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_4_IRQ_TO_IQA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_4_IRQ_TO_IQA,
           INT_VC_QUEUES_PERF_EVENT_SEL_4_IRQ_TO_IQA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_4_IRQ_TO_IQA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_PERF_EVENT_SEL_4_IRQ_TO_IQA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_4));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_PERF_EVENT_SEL_4_IRQ_TO_IQA,
           INT_VC_QUEUES_PERF_EVENT_SEL_4_IRQ_TO_IQA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_4_IRQ_TO_IQA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_4_IQA_TO_DPS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_4_IQA_TO_DPS,
           INT_VC_QUEUES_PERF_EVENT_SEL_4_IQA_TO_DPS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_4_IQA_TO_DPS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_4_IQA_TO_DPS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_4_IQA_TO_DPS,
           INT_VC_QUEUES_PERF_EVENT_SEL_4_IQA_TO_DPS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_4_IQA_TO_DPS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_PERF_EVENT_SEL_4_IQA_TO_DPS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_4));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_PERF_EVENT_SEL_4_IQA_TO_DPS,
           INT_VC_QUEUES_PERF_EVENT_SEL_4_IQA_TO_DPS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_4_IQA_TO_DPS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_4_IQA_TO_IQS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_4_IQA_TO_IQS,
           INT_VC_QUEUES_PERF_EVENT_SEL_4_IQA_TO_IQS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_4_IQA_TO_IQS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_4_IQA_TO_IQS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_4_IQA_TO_IQS,
           INT_VC_QUEUES_PERF_EVENT_SEL_4_IQA_TO_IQS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_4_IQA_TO_IQS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_PERF_EVENT_SEL_4_IQA_TO_IQS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_4));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_PERF_EVENT_SEL_4_IQA_TO_IQS,
           INT_VC_QUEUES_PERF_EVENT_SEL_4_IQA_TO_IQS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_4_IQA_TO_IQS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_4_IQS_TO_EQA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_4_IQS_TO_EQA,
           INT_VC_QUEUES_PERF_EVENT_SEL_4_IQS_TO_EQA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_4_IQS_TO_EQA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_4_IQS_TO_EQA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_4_IQS_TO_EQA,
           INT_VC_QUEUES_PERF_EVENT_SEL_4_IQS_TO_EQA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_4_IQS_TO_EQA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_PERF_EVENT_SEL_4_IQS_TO_EQA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_4));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_PERF_EVENT_SEL_4_IQS_TO_EQA,
           INT_VC_QUEUES_PERF_EVENT_SEL_4_IQS_TO_EQA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_4_IQS_TO_EQA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_4_EQA_TO_ERQ(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_4_EQA_TO_ERQ,
           INT_VC_QUEUES_PERF_EVENT_SEL_4_EQA_TO_ERQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_4_EQA_TO_ERQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_4_EQA_TO_ERQ(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_4_EQA_TO_ERQ,
           INT_VC_QUEUES_PERF_EVENT_SEL_4_EQA_TO_ERQ_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_4_EQA_TO_ERQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_PERF_EVENT_SEL_4_EQA_TO_ERQ(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_4));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_PERF_EVENT_SEL_4_EQA_TO_ERQ,
           INT_VC_QUEUES_PERF_EVENT_SEL_4_EQA_TO_ERQ_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_4_EQA_TO_ERQ chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_4_EQA_TO_ATX(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_4_EQA_TO_ATX,
           INT_VC_QUEUES_PERF_EVENT_SEL_4_EQA_TO_ATX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_4_EQA_TO_ATX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_4_EQA_TO_ATX(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_4_EQA_TO_ATX,
           INT_VC_QUEUES_PERF_EVENT_SEL_4_EQA_TO_ATX_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_4_EQA_TO_ATX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_PERF_EVENT_SEL_4_EQA_TO_ATX(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_4));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_PERF_EVENT_SEL_4_EQA_TO_ATX,
           INT_VC_QUEUES_PERF_EVENT_SEL_4_EQA_TO_ATX_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_4_EQA_TO_ATX chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_4_EQA_TO_ENDC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_4_EQA_TO_ENDC,
           INT_VC_QUEUES_PERF_EVENT_SEL_4_EQA_TO_ENDC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_4_EQA_TO_ENDC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_QUEUES_PERF_EVENT_SEL_4_EQA_TO_ENDC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_4));
#endif
    return o_data.insertFromRight<INT_VC_QUEUES_PERF_EVENT_SEL_4_EQA_TO_ENDC,
           INT_VC_QUEUES_PERF_EVENT_SEL_4_EQA_TO_ENDC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_4_EQA_TO_ENDC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_QUEUES_PERF_EVENT_SEL_4_EQA_TO_ENDC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_QUEUES_PERF_EVENT_SEL_4));
#endif
    return i_data.extractToRight<INT_VC_QUEUES_PERF_EVENT_SEL_4_EQA_TO_ENDC,
           INT_VC_QUEUES_PERF_EVENT_SEL_4_EQA_TO_ENDC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_QUEUES_PERF_EVENT_SEL_4_EQA_TO_ENDC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_INT_VC_VSD_TABLE_ADDR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_VSD_TABLE_ADDR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_INT_VC_VSD_TABLE_ADDR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = INT_VC_VSD_TABLE_ADDR;
#endif
    return fapi2::getScom(i_target, INT_VC_VSD_TABLE_ADDR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_INT_VC_VSD_TABLE_ADDR(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(INT_VC_VSD_TABLE_ADDR));
#endif
    return fapi2::putScom(i_target, INT_VC_VSD_TABLE_ADDR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_INT_VC_VSD_TABLE_ADDR_AUTO_INCREMENT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_VSD_TABLE_ADDR));
#endif
    return o_data.insertFromRight<INT_VC_VSD_TABLE_ADDR_AUTO_INCREMENT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_VSD_TABLE_ADDR_AUTO_INCREMENT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_VSD_TABLE_ADDR_AUTO_INCREMENT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_VSD_TABLE_ADDR));
#endif
    return o_data.insertFromRight<INT_VC_VSD_TABLE_ADDR_AUTO_INCREMENT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_VSD_TABLE_ADDR_AUTO_INCREMENT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_VSD_TABLE_ADDR_AUTO_INCREMENT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_VSD_TABLE_ADDR));
#endif
    return o_data.setBit<INT_VC_VSD_TABLE_ADDR_AUTO_INCREMENT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_VSD_TABLE_ADDR_AUTO_INCREMENT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_INT_VC_VSD_TABLE_ADDR_AUTO_INCREMENT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_VSD_TABLE_ADDR));
#endif
    return o_data.clearBit<INT_VC_VSD_TABLE_ADDR_AUTO_INCREMENT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_VSD_TABLE_ADDR_AUTO_INCREMENT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_VSD_TABLE_ADDR_AUTO_INCREMENT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_VSD_TABLE_ADDR));
#endif
    return i_data.extractToRight<INT_VC_VSD_TABLE_ADDR_AUTO_INCREMENT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_VSD_TABLE_ADDR_AUTO_INCREMENT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_INT_VC_VSD_TABLE_ADDR_AUTO_INCREMENT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_VSD_TABLE_ADDR));
#endif
    return i_data.getBit<INT_VC_VSD_TABLE_ADDR_AUTO_INCREMENT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_VSD_TABLE_ADDR_AUTO_INCREMENT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_VSD_TABLE_ADDR_TABLE_SELECT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_VSD_TABLE_ADDR));
#endif
    return o_data.insertFromRight<INT_VC_VSD_TABLE_ADDR_TABLE_SELECT,
           INT_VC_VSD_TABLE_ADDR_TABLE_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_VSD_TABLE_ADDR_TABLE_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_VSD_TABLE_ADDR_TABLE_SELECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_VSD_TABLE_ADDR));
#endif
    return o_data.insertFromRight<INT_VC_VSD_TABLE_ADDR_TABLE_SELECT,
           INT_VC_VSD_TABLE_ADDR_TABLE_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_VSD_TABLE_ADDR_TABLE_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_VSD_TABLE_ADDR_TABLE_SELECT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_VSD_TABLE_ADDR));
#endif
    return i_data.extractToRight<INT_VC_VSD_TABLE_ADDR_TABLE_SELECT,
           INT_VC_VSD_TABLE_ADDR_TABLE_SELECT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_VSD_TABLE_ADDR_TABLE_SELECT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_VSD_TABLE_ADDR_RESERVED_16_27(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_VSD_TABLE_ADDR));
#endif
    return o_data.insertFromRight<INT_VC_VSD_TABLE_ADDR_RESERVED_16_27,
           INT_VC_VSD_TABLE_ADDR_RESERVED_16_27_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_VSD_TABLE_ADDR_RESERVED_16_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_VSD_TABLE_ADDR_RESERVED_16_27(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_VSD_TABLE_ADDR));
#endif
    return o_data.insertFromRight<INT_VC_VSD_TABLE_ADDR_RESERVED_16_27,
           INT_VC_VSD_TABLE_ADDR_RESERVED_16_27_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_VSD_TABLE_ADDR_RESERVED_16_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_VSD_TABLE_ADDR_RESERVED_16_27(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_VSD_TABLE_ADDR));
#endif
    return i_data.extractToRight<INT_VC_VSD_TABLE_ADDR_RESERVED_16_27,
           INT_VC_VSD_TABLE_ADDR_RESERVED_16_27_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_VSD_TABLE_ADDR_RESERVED_16_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_VSD_TABLE_ADDR_TABLE_ADDRESS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_VSD_TABLE_ADDR));
#endif
    return o_data.insertFromRight<INT_VC_VSD_TABLE_ADDR_TABLE_ADDRESS,
           INT_VC_VSD_TABLE_ADDR_TABLE_ADDRESS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_VSD_TABLE_ADDR_TABLE_ADDRESS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_INT_VC_VSD_TABLE_ADDR_TABLE_ADDRESS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_VSD_TABLE_ADDR));
#endif
    return o_data.insertFromRight<INT_VC_VSD_TABLE_ADDR_TABLE_ADDRESS,
           INT_VC_VSD_TABLE_ADDR_TABLE_ADDRESS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_VSD_TABLE_ADDR_TABLE_ADDRESS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_INT_VC_VSD_TABLE_ADDR_TABLE_ADDRESS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(INT_VC_VSD_TABLE_ADDR));
#endif
    return i_data.extractToRight<INT_VC_VSD_TABLE_ADDR_TABLE_ADDRESS,
           INT_VC_VSD_TABLE_ADDR_TABLE_ADDRESS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access INT_VC_VSD_TABLE_ADDR_TABLE_ADDRESS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_MCD_BANK0_CMD(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MCD_BANK0_CMD;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_MCD_BANK0_CMD(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = MCD_BANK0_CMD;
#endif
    return fapi2::getScom(i_target, MCD_BANK0_CMD, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_MCD_BANK0_CMD(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(MCD_BANK0_CMD));
#endif
    return fapi2::putScom(i_target, MCD_BANK0_CMD, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_CMD_CHECK_CMDS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_CMD));
#endif
    return o_data.insertFromRight<MCD_BANK0_CMD_CHECK_CMDS,
           MCD_BANK0_CMD_CHECK_CMDS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MCD_BANK0_CMD_CHECK_CMDS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_CMD_CHECK_CMDS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_CMD));
#endif
    return o_data.insertFromRight<MCD_BANK0_CMD_CHECK_CMDS,
           MCD_BANK0_CMD_CHECK_CMDS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MCD_BANK0_CMD_CHECK_CMDS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MCD_BANK0_CMD_CHECK_CMDS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_CMD));
#endif
    return i_data.extractToRight<MCD_BANK0_CMD_CHECK_CMDS,
           MCD_BANK0_CMD_CHECK_CMDS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MCD_BANK0_CMD_CHECK_CMDS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_CMD_CHECK_CMDS_EN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_CMD));
#endif
    return o_data.insertFromRight<MCD_BANK0_CMD_CHECK_CMDS_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MCD_BANK0_CMD_CHECK_CMDS_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_CMD_CHECK_CMDS_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_CMD));
#endif
    return o_data.insertFromRight<MCD_BANK0_CMD_CHECK_CMDS_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MCD_BANK0_CMD_CHECK_CMDS_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_CMD_CHECK_CMDS_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_CMD));
#endif
    return o_data.setBit<MCD_BANK0_CMD_CHECK_CMDS_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MCD_BANK0_CMD_CHECK_CMDS_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_MCD_BANK0_CMD_CHECK_CMDS_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_CMD));
#endif
    return o_data.clearBit<MCD_BANK0_CMD_CHECK_CMDS_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MCD_BANK0_CMD_CHECK_CMDS_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MCD_BANK0_CMD_CHECK_CMDS_EN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_CMD));
#endif
    return i_data.extractToRight<MCD_BANK0_CMD_CHECK_CMDS_EN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MCD_BANK0_CMD_CHECK_CMDS_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_MCD_BANK0_CMD_CHECK_CMDS_EN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_CMD));
#endif
    return i_data.getBit<MCD_BANK0_CMD_CHECK_CMDS_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MCD_BANK0_CMD_CHECK_CMDS_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_CMD_SET_CMDS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_CMD));
#endif
    return o_data.insertFromRight<MCD_BANK0_CMD_SET_CMDS,
           MCD_BANK0_CMD_SET_CMDS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MCD_BANK0_CMD_SET_CMDS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_CMD_SET_CMDS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_CMD));
#endif
    return o_data.insertFromRight<MCD_BANK0_CMD_SET_CMDS,
           MCD_BANK0_CMD_SET_CMDS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MCD_BANK0_CMD_SET_CMDS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MCD_BANK0_CMD_SET_CMDS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_CMD));
#endif
    return i_data.extractToRight<MCD_BANK0_CMD_SET_CMDS,
           MCD_BANK0_CMD_SET_CMDS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MCD_BANK0_CMD_SET_CMDS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_CMD_SET_CMDS_EN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_CMD));
#endif
    return o_data.insertFromRight<MCD_BANK0_CMD_SET_CMDS_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MCD_BANK0_CMD_SET_CMDS_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_CMD_SET_CMDS_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_CMD));
#endif
    return o_data.insertFromRight<MCD_BANK0_CMD_SET_CMDS_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MCD_BANK0_CMD_SET_CMDS_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_MCD_BANK0_CMD_SET_CMDS_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_CMD));
#endif
    return o_data.setBit<MCD_BANK0_CMD_SET_CMDS_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MCD_BANK0_CMD_SET_CMDS_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_MCD_BANK0_CMD_SET_CMDS_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_CMD));
#endif
    return o_data.clearBit<MCD_BANK0_CMD_SET_CMDS_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MCD_BANK0_CMD_SET_CMDS_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_MCD_BANK0_CMD_SET_CMDS_EN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_CMD));
#endif
    return i_data.extractToRight<MCD_BANK0_CMD_SET_CMDS_EN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MCD_BANK0_CMD_SET_CMDS_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_MCD_BANK0_CMD_SET_CMDS_EN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(MCD_BANK0_CMD));
#endif
    return i_data.getBit<MCD_BANK0_CMD_SET_CMDS_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access MCD_BANK0_CMD_SET_CMDS_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_DBG_DMA_ENG_FIR_RW(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_DBG_DMA_ENG_FIR_RW;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_DBG_DMA_ENG_FIR_RW(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_DBG_DMA_ENG_FIR_RW;
#endif
    return fapi2::getScom(i_target, NX_DBG_DMA_ENG_FIR_RW, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_DBG_DMA_ENG_FIR_RW(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return fapi2::putScom(i_target, NX_DBG_DMA_ENG_FIR_RW, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_DBG_DMA_ENG_FIR_WO_AND(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_DBG_DMA_ENG_FIR_WO_AND;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_DBG_DMA_ENG_FIR_WO_AND(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_DBG_DMA_ENG_FIR_WO_AND;
#endif
    return fapi2::getScom(i_target, NX_DBG_DMA_ENG_FIR_WO_AND, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_DBG_DMA_ENG_FIR_WO_AND(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return fapi2::putScom(i_target, NX_DBG_DMA_ENG_FIR_WO_AND, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_DBG_DMA_ENG_FIR_WO_OR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_DBG_DMA_ENG_FIR_WO_OR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_DBG_DMA_ENG_FIR_WO_OR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_DBG_DMA_ENG_FIR_WO_OR;
#endif
    return fapi2::getScom(i_target, NX_DBG_DMA_ENG_FIR_WO_OR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_DBG_DMA_ENG_FIR_WO_OR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return fapi2::putScom(i_target, NX_DBG_DMA_ENG_FIR_WO_OR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_DMA_HANG_TIMER_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_DMA_HANG_TIMER_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_HANG_TIMER_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_DMA_HANG_TIMER_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_DMA_HANG_TIMER_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_HANG_TIMER_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_DMA_HANG_TIMER_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_DMA_HANG_TIMER_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_HANG_TIMER_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_DMA_HANG_TIMER_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_DMA_HANG_TIMER_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_HANG_TIMER_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_DMA_HANG_TIMER_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_DMA_HANG_TIMER_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_HANG_TIMER_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_DMA_HANG_TIMER_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_DMA_HANG_TIMER_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_HANG_TIMER_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_SHM_INVALID_STATE_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_SHM_INVALID_STATE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_SHM_INVALID_STATE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_SHM_INVALID_STATE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_SHM_INVALID_STATE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_SHM_INVALID_STATE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_SHM_INVALID_STATE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_SHM_INVALID_STATE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_SHM_INVALID_STATE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_SHM_INVALID_STATE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_SHM_INVALID_STATE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_SHM_INVALID_STATE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_SHM_INVALID_STATE_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_SHM_INVALID_STATE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_SHM_INVALID_STATE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_SHM_INVALID_STATE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_SHM_INVALID_STATE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_SHM_INVALID_STATE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_02_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_RESERVED_02_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_02_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_02_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_RESERVED_02_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_02_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_02_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_RESERVED_02_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_02_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_RESERVED_02_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_RESERVED_02_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_02_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_RESERVED_02_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_RESERVED_02_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_02_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_RESERVED_02_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_RESERVED_02_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_02_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_03_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_RESERVED_03_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_03_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_03_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_RESERVED_03_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_03_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_03_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_RESERVED_03_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_03_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_RESERVED_03_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_RESERVED_03_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_03_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_RESERVED_03_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_RESERVED_03_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_03_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_RESERVED_03_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_RESERVED_03_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_03_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH0_842_ECC_CE_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_CH0_842_ECC_CE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH0_842_ECC_CE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH0_842_ECC_CE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_CH0_842_ECC_CE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH0_842_ECC_CE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH0_842_ECC_CE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_CH0_842_ECC_CE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH0_842_ECC_CE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_CH0_842_ECC_CE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_CH0_842_ECC_CE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH0_842_ECC_CE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_CH0_842_ECC_CE_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_CH0_842_ECC_CE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH0_842_ECC_CE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_CH0_842_ECC_CE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_CH0_842_ECC_CE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH0_842_ECC_CE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH0_842_ECC_UE_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_CH0_842_ECC_UE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH0_842_ECC_UE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH0_842_ECC_UE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_CH0_842_ECC_UE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH0_842_ECC_UE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH0_842_ECC_UE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_CH0_842_ECC_UE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH0_842_ECC_UE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_CH0_842_ECC_UE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_CH0_842_ECC_UE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH0_842_ECC_UE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_CH0_842_ECC_UE_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_CH0_842_ECC_UE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH0_842_ECC_UE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_CH0_842_ECC_UE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_CH0_842_ECC_UE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH0_842_ECC_UE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH1_842_ECC_CE_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_CH1_842_ECC_CE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH1_842_ECC_CE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH1_842_ECC_CE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_CH1_842_ECC_CE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH1_842_ECC_CE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH1_842_ECC_CE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_CH1_842_ECC_CE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH1_842_ECC_CE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_CH1_842_ECC_CE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_CH1_842_ECC_CE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH1_842_ECC_CE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_CH1_842_ECC_CE_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_CH1_842_ECC_CE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH1_842_ECC_CE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_CH1_842_ECC_CE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_CH1_842_ECC_CE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH1_842_ECC_CE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH1_842_ECC_UE_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_CH1_842_ECC_UE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH1_842_ECC_UE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH1_842_ECC_UE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_CH1_842_ECC_UE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH1_842_ECC_UE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH1_842_ECC_UE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_CH1_842_ECC_UE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH1_842_ECC_UE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_CH1_842_ECC_UE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_CH1_842_ECC_UE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH1_842_ECC_UE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_CH1_842_ECC_UE_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_CH1_842_ECC_UE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH1_842_ECC_UE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_CH1_842_ECC_UE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_CH1_842_ECC_UE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH1_842_ECC_UE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_DMA_NONZERO_CSB_CC_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_DMA_NONZERO_CSB_CC_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_NONZERO_CSB_CC_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_DMA_NONZERO_CSB_CC_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_DMA_NONZERO_CSB_CC_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_NONZERO_CSB_CC_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_DMA_NONZERO_CSB_CC_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_DMA_NONZERO_CSB_CC_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_NONZERO_CSB_CC_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_DMA_NONZERO_CSB_CC_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_DMA_NONZERO_CSB_CC_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_NONZERO_CSB_CC_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_DMA_NONZERO_CSB_CC_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_DMA_NONZERO_CSB_CC_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_NONZERO_CSB_CC_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_DMA_NONZERO_CSB_CC_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_DMA_NONZERO_CSB_CC_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_NONZERO_CSB_CC_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_DMA_ECC_CE_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_DMA_ECC_CE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_ECC_CE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_DMA_ECC_CE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_DMA_ECC_CE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_ECC_CE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_DMA_ECC_CE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_DMA_ECC_CE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_ECC_CE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_DMA_ECC_CE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_DMA_ECC_CE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_ECC_CE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_DMA_ECC_CE_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_DMA_ECC_CE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_ECC_CE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_DMA_ECC_CE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_DMA_ECC_CE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_ECC_CE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_CE_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_CE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_CE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_CE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_CE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_CE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_CE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_CE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_CE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_CE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_CE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_CE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_CE_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_CE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_CE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_CE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_CE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_CE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH4_GZIP_ECC_CE_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_CH4_GZIP_ECC_CE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH4_GZIP_ECC_CE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH4_GZIP_ECC_CE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_CH4_GZIP_ECC_CE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH4_GZIP_ECC_CE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH4_GZIP_ECC_CE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_CH4_GZIP_ECC_CE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH4_GZIP_ECC_CE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_CH4_GZIP_ECC_CE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_CH4_GZIP_ECC_CE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH4_GZIP_ECC_CE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_CH4_GZIP_ECC_CE_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_CH4_GZIP_ECC_CE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH4_GZIP_ECC_CE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_CH4_GZIP_ECC_CE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_CH4_GZIP_ECC_CE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH4_GZIP_ECC_CE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH4_GZIP_ECC_UE_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_CH4_GZIP_ECC_UE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH4_GZIP_ECC_UE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH4_GZIP_ECC_UE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_CH4_GZIP_ECC_UE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH4_GZIP_ECC_UE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH4_GZIP_ECC_UE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_CH4_GZIP_ECC_UE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH4_GZIP_ECC_UE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_CH4_GZIP_ECC_UE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_CH4_GZIP_ECC_UE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH4_GZIP_ECC_UE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_CH4_GZIP_ECC_UE_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_CH4_GZIP_ECC_UE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH4_GZIP_ECC_UE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_CH4_GZIP_ECC_UE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_CH4_GZIP_ECC_UE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH4_GZIP_ECC_UE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH4_GZIP_PE_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_CH4_GZIP_PE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH4_GZIP_PE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH4_GZIP_PE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_CH4_GZIP_PE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH4_GZIP_PE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH4_GZIP_PE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_CH4_GZIP_PE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH4_GZIP_PE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_CH4_GZIP_PE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_CH4_GZIP_PE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH4_GZIP_PE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_CH4_GZIP_PE_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_CH4_GZIP_PE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH4_GZIP_PE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_CH4_GZIP_PE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_CH4_GZIP_PE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH4_GZIP_PE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_OTHER_SCOM_SAT_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_OTHER_SCOM_SAT_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_OTHER_SCOM_SAT_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_OTHER_SCOM_SAT_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_OTHER_SCOM_SAT_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_OTHER_SCOM_SAT_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_OTHER_SCOM_SAT_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_OTHER_SCOM_SAT_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_OTHER_SCOM_SAT_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_OTHER_SCOM_SAT_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_OTHER_SCOM_SAT_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_OTHER_SCOM_SAT_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_OTHER_SCOM_SAT_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_OTHER_SCOM_SAT_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_OTHER_SCOM_SAT_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_OTHER_SCOM_SAT_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_OTHER_SCOM_SAT_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_OTHER_SCOM_SAT_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_DMA_INVALID_STATE_UNRECOV_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_DMA_INVALID_STATE_UNRECOV_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_INVALID_STATE_UNRECOV_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_DMA_INVALID_STATE_UNRECOV_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_DMA_INVALID_STATE_UNRECOV_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_INVALID_STATE_UNRECOV_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_DMA_INVALID_STATE_UNRECOV_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_DMA_INVALID_STATE_UNRECOV_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_INVALID_STATE_UNRECOV_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_DMA_INVALID_STATE_UNRECOV_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_DMA_INVALID_STATE_UNRECOV_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_INVALID_STATE_UNRECOV_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_DMA_INVALID_STATE_UNRECOV_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_DMA_INVALID_STATE_UNRECOV_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_INVALID_STATE_UNRECOV_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_DMA_INVALID_STATE_UNRECOV_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_DMA_INVALID_STATE_UNRECOV_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_INVALID_STATE_UNRECOV_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_DMA_INVALID_STATE_RECOV_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_DMA_INVALID_STATE_RECOV_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_INVALID_STATE_RECOV_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_DMA_INVALID_STATE_RECOV_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_DMA_INVALID_STATE_RECOV_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_INVALID_STATE_RECOV_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_DMA_INVALID_STATE_RECOV_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_DMA_INVALID_STATE_RECOV_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_INVALID_STATE_RECOV_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_DMA_INVALID_STATE_RECOV_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_DMA_INVALID_STATE_RECOV_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_INVALID_STATE_RECOV_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_DMA_INVALID_STATE_RECOV_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_DMA_INVALID_STATE_RECOV_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_INVALID_STATE_RECOV_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_DMA_INVALID_STATE_RECOV_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_DMA_INVALID_STATE_RECOV_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_INVALID_STATE_RECOV_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_DMA_ECC_UE_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_DMA_ECC_UE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_ECC_UE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_DMA_ECC_UE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_DMA_ECC_UE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_ECC_UE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_DMA_ECC_UE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_DMA_ECC_UE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_ECC_UE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_DMA_ECC_UE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_DMA_ECC_UE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_ECC_UE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_DMA_ECC_UE_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_DMA_ECC_UE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_ECC_UE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_DMA_ECC_UE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_DMA_ECC_UE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_ECC_UE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_UE_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_UE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_UE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_UE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_UE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_UE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_UE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_UE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_UE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_UE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_UE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_UE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_UE_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_UE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_UE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_UE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_UE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_UE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_DMA_INRD_DONE_ERR_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_DMA_INRD_DONE_ERR_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_INRD_DONE_ERR_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_DMA_INRD_DONE_ERR_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_DMA_INRD_DONE_ERR_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_INRD_DONE_ERR_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_DMA_INRD_DONE_ERR_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_DMA_INRD_DONE_ERR_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_INRD_DONE_ERR_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_DMA_INRD_DONE_ERR_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_DMA_INRD_DONE_ERR_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_INRD_DONE_ERR_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_DMA_INRD_DONE_ERR_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_DMA_INRD_DONE_ERR_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_INRD_DONE_ERR_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_DMA_INRD_DONE_ERR_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_DMA_INRD_DONE_ERR_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_INRD_DONE_ERR_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH0_842_INVALID_STATE_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_CH0_842_INVALID_STATE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH0_842_INVALID_STATE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH0_842_INVALID_STATE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_CH0_842_INVALID_STATE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH0_842_INVALID_STATE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH0_842_INVALID_STATE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_CH0_842_INVALID_STATE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH0_842_INVALID_STATE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_CH0_842_INVALID_STATE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_CH0_842_INVALID_STATE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH0_842_INVALID_STATE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_CH0_842_INVALID_STATE_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_CH0_842_INVALID_STATE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH0_842_INVALID_STATE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_CH0_842_INVALID_STATE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_CH0_842_INVALID_STATE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH0_842_INVALID_STATE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH1_842_INVALID_STATE_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_CH1_842_INVALID_STATE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH1_842_INVALID_STATE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH1_842_INVALID_STATE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_CH1_842_INVALID_STATE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH1_842_INVALID_STATE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH1_842_INVALID_STATE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_CH1_842_INVALID_STATE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH1_842_INVALID_STATE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_CH1_842_INVALID_STATE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_CH1_842_INVALID_STATE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH1_842_INVALID_STATE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_CH1_842_INVALID_STATE_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_CH1_842_INVALID_STATE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH1_842_INVALID_STATE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_CH1_842_INVALID_STATE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_CH1_842_INVALID_STATE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH1_842_INVALID_STATE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH2_SYM_INVALID_STATE_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_CH2_SYM_INVALID_STATE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH2_SYM_INVALID_STATE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH2_SYM_INVALID_STATE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_CH2_SYM_INVALID_STATE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH2_SYM_INVALID_STATE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH2_SYM_INVALID_STATE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_CH2_SYM_INVALID_STATE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH2_SYM_INVALID_STATE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_CH2_SYM_INVALID_STATE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_CH2_SYM_INVALID_STATE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH2_SYM_INVALID_STATE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_CH2_SYM_INVALID_STATE_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_CH2_SYM_INVALID_STATE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH2_SYM_INVALID_STATE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_CH2_SYM_INVALID_STATE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_CH2_SYM_INVALID_STATE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH2_SYM_INVALID_STATE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH3_SYM_INVALID_STATE_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_CH3_SYM_INVALID_STATE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH3_SYM_INVALID_STATE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH3_SYM_INVALID_STATE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_CH3_SYM_INVALID_STATE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH3_SYM_INVALID_STATE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH3_SYM_INVALID_STATE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_CH3_SYM_INVALID_STATE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH3_SYM_INVALID_STATE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_CH3_SYM_INVALID_STATE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_CH3_SYM_INVALID_STATE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH3_SYM_INVALID_STATE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_CH3_SYM_INVALID_STATE_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_CH3_SYM_INVALID_STATE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH3_SYM_INVALID_STATE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_CH3_SYM_INVALID_STATE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_CH3_SYM_INVALID_STATE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH3_SYM_INVALID_STATE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH4_GZIP_INVALID_STATE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_CH4_GZIP_INVALID_STATE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH4_GZIP_INVALID_STATE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH4_GZIP_INVALID_STATE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_CH4_GZIP_INVALID_STATE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH4_GZIP_INVALID_STATE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH4_GZIP_INVALID_STATE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_CH4_GZIP_INVALID_STATE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH4_GZIP_INVALID_STATE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_CH4_GZIP_INVALID_STATE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_CH4_GZIP_INVALID_STATE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH4_GZIP_INVALID_STATE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_CH4_GZIP_INVALID_STATE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_CH4_GZIP_INVALID_STATE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH4_GZIP_INVALID_STATE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_CH4_GZIP_INVALID_STATE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_CH4_GZIP_INVALID_STATE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH4_GZIP_INVALID_STATE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_25_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_RESERVED_25_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_25_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_25_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_RESERVED_25_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_25_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_25_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_RESERVED_25_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_25_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_RESERVED_25_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_RESERVED_25_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_25_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_RESERVED_25_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_RESERVED_25_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_25_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_RESERVED_25_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_RESERVED_25_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_25_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_26_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_RESERVED_26_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_26_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_26_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_RESERVED_26_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_26_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_26_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_RESERVED_26_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_26_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_RESERVED_26_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_RESERVED_26_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_26_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_RESERVED_26_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_RESERVED_26_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_26_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_RESERVED_26_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_RESERVED_26_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_26_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_27_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_RESERVED_27_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_27_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_27_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_RESERVED_27_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_27_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_27_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_RESERVED_27_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_27_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_RESERVED_27_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_RESERVED_27_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_27_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_RESERVED_27_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_RESERVED_27_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_27_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_RESERVED_27_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_RESERVED_27_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_27_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_28_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_RESERVED_28_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_28_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_28_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_RESERVED_28_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_28_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_28_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_RESERVED_28_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_28_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_RESERVED_28_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_RESERVED_28_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_28_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_RESERVED_28_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_RESERVED_28_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_28_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_RESERVED_28_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_RESERVED_28_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_28_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_29_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_RESERVED_29_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_29_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_29_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_RESERVED_29_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_29_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_29_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_RESERVED_29_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_29_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_RESERVED_29_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_RESERVED_29_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_29_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_RESERVED_29_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_RESERVED_29_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_29_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_RESERVED_29_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_RESERVED_29_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_29_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_30_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_RESERVED_30_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_30_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_30_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_RESERVED_30_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_30_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_30_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_RESERVED_30_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_30_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_RESERVED_30_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_RESERVED_30_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_30_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_RESERVED_30_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_RESERVED_30_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_30_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_RESERVED_30_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_RESERVED_30_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_30_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CRB_ECC_UE_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_CRB_ECC_UE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CRB_ECC_UE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CRB_ECC_UE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_CRB_ECC_UE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CRB_ECC_UE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CRB_ECC_UE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_CRB_ECC_UE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CRB_ECC_UE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_CRB_ECC_UE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_CRB_ECC_UE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CRB_ECC_UE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_CRB_ECC_UE_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_CRB_ECC_UE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CRB_ECC_UE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_CRB_ECC_UE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_CRB_ECC_UE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CRB_ECC_UE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CRB_ECC_SUE_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_CRB_ECC_SUE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CRB_ECC_SUE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CRB_ECC_SUE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_CRB_ECC_SUE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CRB_ECC_SUE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CRB_ECC_SUE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_CRB_ECC_SUE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CRB_ECC_SUE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_CRB_ECC_SUE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_CRB_ECC_SUE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CRB_ECC_SUE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_CRB_ECC_SUE_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_CRB_ECC_SUE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CRB_ECC_SUE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_CRB_ECC_SUE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_CRB_ECC_SUE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CRB_ECC_SUE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_SUE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_SUE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_SUE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_SUE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_SUE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_SUE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_SUE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_SUE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_SUE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_SUE_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_SUE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_SUE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_SUE_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_SUE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_SUE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_SUE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_SUE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_DMA_OUTWR_INRD_ECC_SUE_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH0_842_WATCHDOG_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_CH0_842_WATCHDOG_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH0_842_WATCHDOG_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH0_842_WATCHDOG_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_CH0_842_WATCHDOG_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH0_842_WATCHDOG_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH0_842_WATCHDOG_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_CH0_842_WATCHDOG_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH0_842_WATCHDOG_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_CH0_842_WATCHDOG_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_CH0_842_WATCHDOG_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH0_842_WATCHDOG_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_CH0_842_WATCHDOG_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_CH0_842_WATCHDOG_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH0_842_WATCHDOG_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_CH0_842_WATCHDOG_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_CH0_842_WATCHDOG_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH0_842_WATCHDOG_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH1_842_WATCHDOG_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_CH1_842_WATCHDOG_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH1_842_WATCHDOG_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH1_842_WATCHDOG_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_CH1_842_WATCHDOG_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH1_842_WATCHDOG_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH1_842_WATCHDOG_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_CH1_842_WATCHDOG_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH1_842_WATCHDOG_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_CH1_842_WATCHDOG_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_CH1_842_WATCHDOG_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH1_842_WATCHDOG_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_CH1_842_WATCHDOG_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_CH1_842_WATCHDOG_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH1_842_WATCHDOG_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_CH1_842_WATCHDOG_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_CH1_842_WATCHDOG_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH1_842_WATCHDOG_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH2_SYM_WATCHDOG_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_CH2_SYM_WATCHDOG_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH2_SYM_WATCHDOG_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH2_SYM_WATCHDOG_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_CH2_SYM_WATCHDOG_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH2_SYM_WATCHDOG_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH2_SYM_WATCHDOG_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_CH2_SYM_WATCHDOG_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH2_SYM_WATCHDOG_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_CH2_SYM_WATCHDOG_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_CH2_SYM_WATCHDOG_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH2_SYM_WATCHDOG_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_CH2_SYM_WATCHDOG_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_CH2_SYM_WATCHDOG_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH2_SYM_WATCHDOG_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_CH2_SYM_WATCHDOG_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_CH2_SYM_WATCHDOG_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH2_SYM_WATCHDOG_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH3_SYM_WATCHDOG_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_CH3_SYM_WATCHDOG_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH3_SYM_WATCHDOG_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH3_SYM_WATCHDOG_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_CH3_SYM_WATCHDOG_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH3_SYM_WATCHDOG_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH3_SYM_WATCHDOG_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_CH3_SYM_WATCHDOG_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH3_SYM_WATCHDOG_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_CH3_SYM_WATCHDOG_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_CH3_SYM_WATCHDOG_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH3_SYM_WATCHDOG_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_CH3_SYM_WATCHDOG_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_CH3_SYM_WATCHDOG_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH3_SYM_WATCHDOG_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_CH3_SYM_WATCHDOG_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_CH3_SYM_WATCHDOG_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH3_SYM_WATCHDOG_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_38_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_RESERVED_38_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_38_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_38_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_RESERVED_38_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_38_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_38_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_RESERVED_38_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_38_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_RESERVED_38_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_RESERVED_38_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_38_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_RESERVED_38_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_RESERVED_38_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_38_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_RESERVED_38_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_RESERVED_38_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_38_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH4_GZIP_WATCHDOG_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_CH4_GZIP_WATCHDOG_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH4_GZIP_WATCHDOG_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH4_GZIP_WATCHDOG_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_CH4_GZIP_WATCHDOG_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH4_GZIP_WATCHDOG_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_CH4_GZIP_WATCHDOG_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_CH4_GZIP_WATCHDOG_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH4_GZIP_WATCHDOG_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_CH4_GZIP_WATCHDOG_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_CH4_GZIP_WATCHDOG_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH4_GZIP_WATCHDOG_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_CH4_GZIP_WATCHDOG_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_CH4_GZIP_WATCHDOG_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH4_GZIP_WATCHDOG_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_CH4_GZIP_WATCHDOG_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_CH4_GZIP_WATCHDOG_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_CH4_GZIP_WATCHDOG_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_40_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_RESERVED_40_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_40_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_40_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_RESERVED_40_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_40_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_40_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_RESERVED_40_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_40_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_RESERVED_40_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_RESERVED_40_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_40_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_RESERVED_40_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_RESERVED_40_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_40_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_RESERVED_40_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_RESERVED_40_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_40_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_41_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_RESERVED_41_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_41_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_41_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_RESERVED_41_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_41_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_41_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_RESERVED_41_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_41_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_RESERVED_41_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_RESERVED_41_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_41_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_RESERVED_41_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_RESERVED_41_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_41_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_RESERVED_41_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_RESERVED_41_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_41_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_42_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_RESERVED_42_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_42_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_42_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_RESERVED_42_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_42_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_42_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_RESERVED_42_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_42_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_RESERVED_42_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_RESERVED_42_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_42_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_RESERVED_42_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_RESERVED_42_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_42_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_RESERVED_42_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_RESERVED_42_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_42_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_43_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_RESERVED_43_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_43_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_43_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_RESERVED_43_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_43_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_43_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_RESERVED_43_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_43_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_RESERVED_43_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_RESERVED_43_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_43_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_RESERVED_43_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_RESERVED_43_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_43_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_RESERVED_43_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_RESERVED_43_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_43_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_44_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_RESERVED_44_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_44_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_44_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_RESERVED_44_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_44_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_44_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_RESERVED_44_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_44_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_RESERVED_44_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_RESERVED_44_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_44_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_RESERVED_44_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_RESERVED_44_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_44_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_RESERVED_44_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_RESERVED_44_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_44_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_45_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_RESERVED_45_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_45_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_45_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_RESERVED_45_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_45_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_45_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_RESERVED_45_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_45_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_RESERVED_45_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_RESERVED_45_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_45_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_RESERVED_45_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_RESERVED_45_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_45_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_RESERVED_45_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_RESERVED_45_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_45_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_46_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_RESERVED_46_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_46_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_46_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_RESERVED_46_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_46_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_46_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_RESERVED_46_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_46_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_RESERVED_46_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_RESERVED_46_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_46_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_RESERVED_46_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_RESERVED_46_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_46_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_RESERVED_46_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_RESERVED_46_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_46_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_47_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_RESERVED_47_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_47_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_47_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.insertFromRight<NX_DBG_DMA_ENG_FIR_RESERVED_47_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_47_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DBG_DMA_ENG_FIR_RESERVED_47_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.setBit<NX_DBG_DMA_ENG_FIR_RESERVED_47_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_47_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DBG_DMA_ENG_FIR_RESERVED_47_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return o_data.clearBit<NX_DBG_DMA_ENG_FIR_RESERVED_47_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_47_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DBG_DMA_ENG_FIR_RESERVED_47_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.extractToRight<NX_DBG_DMA_ENG_FIR_RESERVED_47_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_47_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DBG_DMA_ENG_FIR_RESERVED_47_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DBG_DMA_ENG_FIR_RW, NX_DBG_DMA_ENG_FIR_WO_AND, NX_DBG_DMA_ENG_FIR_WO_OR));
#endif
    return i_data.getBit<NX_DBG_DMA_ENG_FIR_RESERVED_47_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DBG_DMA_ENG_FIR_RESERVED_47_FIR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_DMA_SU_CH4_ABORT_CSB(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_DMA_SU_CH4_ABORT_CSB;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_DMA_SU_CH4_ABORT_CSB(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_DMA_SU_CH4_ABORT_CSB;
#endif
    return fapi2::getScom(i_target, NX_DMA_SU_CH4_ABORT_CSB, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_DMA_SU_CH4_ABORT_CSB(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_CH4_ABORT_CSB));
#endif
    return fapi2::putScom(i_target, NX_DMA_SU_CH4_ABORT_CSB, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_DMA_SU_ENGINE_ENABLE(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_DMA_SU_ENGINE_ENABLE;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_DMA_SU_ENGINE_ENABLE(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_DMA_SU_ENGINE_ENABLE;
#endif
    return fapi2::getScom(i_target, NX_DMA_SU_ENGINE_ENABLE, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_DMA_SU_ENGINE_ENABLE(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_ENGINE_ENABLE));
#endif
    return fapi2::putScom(i_target, NX_DMA_SU_ENGINE_ENABLE, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_ENGINE_ENABLE_ALLOW_CRYPTO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_ENGINE_ENABLE));
#endif
    return o_data.insertFromRight<NX_DMA_SU_ENGINE_ENABLE_ALLOW_CRYPTO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DMA_SU_ENGINE_ENABLE_ALLOW_CRYPTO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_ENGINE_ENABLE_ALLOW_CRYPTO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_ENGINE_ENABLE));
#endif
    return o_data.insertFromRight<NX_DMA_SU_ENGINE_ENABLE_ALLOW_CRYPTO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DMA_SU_ENGINE_ENABLE_ALLOW_CRYPTO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_ENGINE_ENABLE_ALLOW_CRYPTO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_ENGINE_ENABLE));
#endif
    return o_data.setBit<NX_DMA_SU_ENGINE_ENABLE_ALLOW_CRYPTO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DMA_SU_ENGINE_ENABLE_ALLOW_CRYPTO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DMA_SU_ENGINE_ENABLE_ALLOW_CRYPTO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_ENGINE_ENABLE));
#endif
    return o_data.clearBit<NX_DMA_SU_ENGINE_ENABLE_ALLOW_CRYPTO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DMA_SU_ENGINE_ENABLE_ALLOW_CRYPTO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DMA_SU_ENGINE_ENABLE_ALLOW_CRYPTO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_ENGINE_ENABLE));
#endif
    return i_data.extractToRight<NX_DMA_SU_ENGINE_ENABLE_ALLOW_CRYPTO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DMA_SU_ENGINE_ENABLE_ALLOW_CRYPTO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DMA_SU_ENGINE_ENABLE_ALLOW_CRYPTO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_ENGINE_ENABLE));
#endif
    return i_data.getBit<NX_DMA_SU_ENGINE_ENABLE_ALLOW_CRYPTO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DMA_SU_ENGINE_ENABLE_ALLOW_CRYPTO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_ENGINE_ENABLE_CH3_SYM_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_ENGINE_ENABLE));
#endif
    return o_data.insertFromRight<NX_DMA_SU_ENGINE_ENABLE_CH3_SYM_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DMA_SU_ENGINE_ENABLE_CH3_SYM_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_ENGINE_ENABLE_CH3_SYM_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_ENGINE_ENABLE));
#endif
    return o_data.insertFromRight<NX_DMA_SU_ENGINE_ENABLE_CH3_SYM_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DMA_SU_ENGINE_ENABLE_CH3_SYM_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_ENGINE_ENABLE_CH3_SYM_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_ENGINE_ENABLE));
#endif
    return o_data.setBit<NX_DMA_SU_ENGINE_ENABLE_CH3_SYM_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DMA_SU_ENGINE_ENABLE_CH3_SYM_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DMA_SU_ENGINE_ENABLE_CH3_SYM_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_ENGINE_ENABLE));
#endif
    return o_data.clearBit<NX_DMA_SU_ENGINE_ENABLE_CH3_SYM_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DMA_SU_ENGINE_ENABLE_CH3_SYM_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DMA_SU_ENGINE_ENABLE_CH3_SYM_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_ENGINE_ENABLE));
#endif
    return i_data.extractToRight<NX_DMA_SU_ENGINE_ENABLE_CH3_SYM_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DMA_SU_ENGINE_ENABLE_CH3_SYM_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DMA_SU_ENGINE_ENABLE_CH3_SYM_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_ENGINE_ENABLE));
#endif
    return i_data.getBit<NX_DMA_SU_ENGINE_ENABLE_CH3_SYM_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DMA_SU_ENGINE_ENABLE_CH3_SYM_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_ENGINE_ENABLE_CH2_SYM_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_ENGINE_ENABLE));
#endif
    return o_data.insertFromRight<NX_DMA_SU_ENGINE_ENABLE_CH2_SYM_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DMA_SU_ENGINE_ENABLE_CH2_SYM_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_ENGINE_ENABLE_CH2_SYM_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_ENGINE_ENABLE));
#endif
    return o_data.insertFromRight<NX_DMA_SU_ENGINE_ENABLE_CH2_SYM_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DMA_SU_ENGINE_ENABLE_CH2_SYM_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_ENGINE_ENABLE_CH2_SYM_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_ENGINE_ENABLE));
#endif
    return o_data.setBit<NX_DMA_SU_ENGINE_ENABLE_CH2_SYM_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DMA_SU_ENGINE_ENABLE_CH2_SYM_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DMA_SU_ENGINE_ENABLE_CH2_SYM_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_ENGINE_ENABLE));
#endif
    return o_data.clearBit<NX_DMA_SU_ENGINE_ENABLE_CH2_SYM_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DMA_SU_ENGINE_ENABLE_CH2_SYM_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DMA_SU_ENGINE_ENABLE_CH2_SYM_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_ENGINE_ENABLE));
#endif
    return i_data.extractToRight<NX_DMA_SU_ENGINE_ENABLE_CH2_SYM_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DMA_SU_ENGINE_ENABLE_CH2_SYM_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DMA_SU_ENGINE_ENABLE_CH2_SYM_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_ENGINE_ENABLE));
#endif
    return i_data.getBit<NX_DMA_SU_ENGINE_ENABLE_CH2_SYM_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DMA_SU_ENGINE_ENABLE_CH2_SYM_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_ENGINE_ENABLE_CH4_GZIP_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_ENGINE_ENABLE));
#endif
    return o_data.insertFromRight<NX_DMA_SU_ENGINE_ENABLE_CH4_GZIP_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DMA_SU_ENGINE_ENABLE_CH4_GZIP_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_ENGINE_ENABLE_CH4_GZIP_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_ENGINE_ENABLE));
#endif
    return o_data.insertFromRight<NX_DMA_SU_ENGINE_ENABLE_CH4_GZIP_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DMA_SU_ENGINE_ENABLE_CH4_GZIP_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_ENGINE_ENABLE_CH4_GZIP_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_ENGINE_ENABLE));
#endif
    return o_data.setBit<NX_DMA_SU_ENGINE_ENABLE_CH4_GZIP_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DMA_SU_ENGINE_ENABLE_CH4_GZIP_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DMA_SU_ENGINE_ENABLE_CH4_GZIP_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_ENGINE_ENABLE));
#endif
    return o_data.clearBit<NX_DMA_SU_ENGINE_ENABLE_CH4_GZIP_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DMA_SU_ENGINE_ENABLE_CH4_GZIP_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DMA_SU_ENGINE_ENABLE_CH4_GZIP_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_ENGINE_ENABLE));
#endif
    return i_data.extractToRight<NX_DMA_SU_ENGINE_ENABLE_CH4_GZIP_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DMA_SU_ENGINE_ENABLE_CH4_GZIP_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DMA_SU_ENGINE_ENABLE_CH4_GZIP_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_ENGINE_ENABLE));
#endif
    return i_data.getBit<NX_DMA_SU_ENGINE_ENABLE_CH4_GZIP_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DMA_SU_ENGINE_ENABLE_CH4_GZIP_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_ENGINE_ENABLE_CH1_EFT_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_ENGINE_ENABLE));
#endif
    return o_data.insertFromRight<NX_DMA_SU_ENGINE_ENABLE_CH1_EFT_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DMA_SU_ENGINE_ENABLE_CH1_EFT_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_ENGINE_ENABLE_CH1_EFT_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_ENGINE_ENABLE));
#endif
    return o_data.insertFromRight<NX_DMA_SU_ENGINE_ENABLE_CH1_EFT_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DMA_SU_ENGINE_ENABLE_CH1_EFT_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_ENGINE_ENABLE_CH1_EFT_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_ENGINE_ENABLE));
#endif
    return o_data.setBit<NX_DMA_SU_ENGINE_ENABLE_CH1_EFT_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DMA_SU_ENGINE_ENABLE_CH1_EFT_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DMA_SU_ENGINE_ENABLE_CH1_EFT_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_ENGINE_ENABLE));
#endif
    return o_data.clearBit<NX_DMA_SU_ENGINE_ENABLE_CH1_EFT_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DMA_SU_ENGINE_ENABLE_CH1_EFT_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DMA_SU_ENGINE_ENABLE_CH1_EFT_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_ENGINE_ENABLE));
#endif
    return i_data.extractToRight<NX_DMA_SU_ENGINE_ENABLE_CH1_EFT_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DMA_SU_ENGINE_ENABLE_CH1_EFT_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DMA_SU_ENGINE_ENABLE_CH1_EFT_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_ENGINE_ENABLE));
#endif
    return i_data.getBit<NX_DMA_SU_ENGINE_ENABLE_CH1_EFT_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DMA_SU_ENGINE_ENABLE_CH1_EFT_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_ENGINE_ENABLE_CH0_EFT_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_ENGINE_ENABLE));
#endif
    return o_data.insertFromRight<NX_DMA_SU_ENGINE_ENABLE_CH0_EFT_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DMA_SU_ENGINE_ENABLE_CH0_EFT_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_ENGINE_ENABLE_CH0_EFT_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_ENGINE_ENABLE));
#endif
    return o_data.insertFromRight<NX_DMA_SU_ENGINE_ENABLE_CH0_EFT_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DMA_SU_ENGINE_ENABLE_CH0_EFT_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_DMA_SU_ENGINE_ENABLE_CH0_EFT_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_ENGINE_ENABLE));
#endif
    return o_data.setBit<NX_DMA_SU_ENGINE_ENABLE_CH0_EFT_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DMA_SU_ENGINE_ENABLE_CH0_EFT_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_DMA_SU_ENGINE_ENABLE_CH0_EFT_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_ENGINE_ENABLE));
#endif
    return o_data.clearBit<NX_DMA_SU_ENGINE_ENABLE_CH0_EFT_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DMA_SU_ENGINE_ENABLE_CH0_EFT_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_DMA_SU_ENGINE_ENABLE_CH0_EFT_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_ENGINE_ENABLE));
#endif
    return i_data.extractToRight<NX_DMA_SU_ENGINE_ENABLE_CH0_EFT_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DMA_SU_ENGINE_ENABLE_CH0_EFT_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_DMA_SU_ENGINE_ENABLE_CH0_EFT_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_DMA_SU_ENGINE_ENABLE));
#endif
    return i_data.getBit<NX_DMA_SU_ENGINE_ENABLE_CH0_EFT_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_DMA_SU_ENGINE_ENABLE_CH0_EFT_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG;
#endif
    return fapi2::getScom(i_target, NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return fapi2::putScom(i_target, NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_ENABLE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_FREEZE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_FREEZE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_FREEZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_FREEZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_FREEZE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_FREEZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_FREEZE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_FREEZE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_FREEZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_FREEZE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_FREEZE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_FREEZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_FREEZE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_FREEZE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_FREEZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_FREEZE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_FREEZE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_FREEZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_RESET(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_RESET,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_RESET chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_RESET(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_RESET,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_RESET chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_RESET(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_RESET chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_RESET(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_RESET chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_RESET(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_RESET,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_RESET chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_RESET(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_RESET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_RESET chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_DIS_GLOB_SCOM(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_DIS_GLOB_SCOM,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_DIS_GLOB_SCOM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_DIS_GLOB_SCOM(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_DIS_GLOB_SCOM,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_DIS_GLOB_SCOM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_DIS_GLOB_SCOM(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_DIS_GLOB_SCOM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_DIS_GLOB_SCOM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_DIS_GLOB_SCOM(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_DIS_GLOB_SCOM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_DIS_GLOB_SCOM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_DIS_GLOB_SCOM(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_DIS_GLOB_SCOM,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_DIS_GLOB_SCOM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_DIS_GLOB_SCOM(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_DIS_GLOB_SCOM>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_DIS_GLOB_SCOM chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL0,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL0,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL0,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL1,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL1,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL1,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL2,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL2,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL2,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL3,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL3,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL3,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_PRESCALAR_SEL3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT0_PAIR_OP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT0_PAIR_OP,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT0_PAIR_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT0_PAIR_OP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT0_PAIR_OP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT0_PAIR_OP,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT0_PAIR_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT0_PAIR_OP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT0_PAIR_OP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT0_PAIR_OP,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT0_PAIR_OP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT0_PAIR_OP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT1_PAIR_OP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT1_PAIR_OP,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT1_PAIR_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT1_PAIR_OP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT1_PAIR_OP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT1_PAIR_OP,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT1_PAIR_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT1_PAIR_OP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT1_PAIR_OP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT1_PAIR_OP,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT1_PAIR_OP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT1_PAIR_OP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT2_PAIR_OP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT2_PAIR_OP,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT2_PAIR_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT2_PAIR_OP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT2_PAIR_OP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT2_PAIR_OP,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT2_PAIR_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT2_PAIR_OP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT2_PAIR_OP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT2_PAIR_OP,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT2_PAIR_OP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT2_PAIR_OP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT3_PAIR_OP(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT3_PAIR_OP,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT3_PAIR_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT3_PAIR_OP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT3_PAIR_OP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT3_PAIR_OP,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT3_PAIR_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT3_PAIR_OP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT3_PAIR_OP(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT3_PAIR_OP,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT3_PAIR_OP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT3_PAIR_OP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT0_MUX_SEL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT0_MUX_SEL,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT0_MUX_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT0_MUX_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT0_MUX_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT0_MUX_SEL,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT0_MUX_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT0_MUX_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT0_MUX_SEL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT0_MUX_SEL,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT0_MUX_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT0_MUX_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT1_MUX_SEL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT1_MUX_SEL,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT1_MUX_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT1_MUX_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT1_MUX_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT1_MUX_SEL,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT1_MUX_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT1_MUX_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT1_MUX_SEL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT1_MUX_SEL,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT1_MUX_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT1_MUX_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT2_MUX_SEL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT2_MUX_SEL,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT2_MUX_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT2_MUX_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT2_MUX_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT2_MUX_SEL,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT2_MUX_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT2_MUX_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT2_MUX_SEL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT2_MUX_SEL,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT2_MUX_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT2_MUX_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT3_MUX_SEL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT3_MUX_SEL,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT3_MUX_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT3_MUX_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT3_MUX_SEL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT3_MUX_SEL,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT3_MUX_SEL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT3_MUX_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT3_MUX_SEL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT3_MUX_SEL,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT3_MUX_SEL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CNT3_MUX_SEL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_FREEZE_ON_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_FREEZE_ON_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_FREEZE_ON_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_FREEZE_ON_OVERFLOW(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_FREEZE_ON_OVERFLOW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_FREEZE_ON_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_FREEZE_ON_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.setBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_FREEZE_ON_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_FREEZE_ON_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_FREEZE_ON_OVERFLOW(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.clearBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_FREEZE_ON_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_FREEZE_ON_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_FREEZE_ON_OVERFLOW(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_FREEZE_ON_OVERFLOW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_FREEZE_ON_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_FREEZE_ON_OVERFLOW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return i_data.getBit<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_FREEZE_ON_OVERFLOW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_FREEZE_ON_OVERFLOW chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CASCADE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CASCADE,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CASCADE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CASCADE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CASCADE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CASCADE,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CASCADE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CASCADE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CASCADE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CASCADE,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CASCADE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_CONTROL_REG_CASCADE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG;
#endif
    return fapi2::getScom(i_target, NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG));
#endif
    return fapi2::putScom(i_target, NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_0,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_0,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_0,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_1,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_1,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_1,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_2,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_2,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_2,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_3,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG));
#endif
    return o_data.insertFromRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_3,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG));
#endif
    return i_data.extractToRight<NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_3,
           NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_CQ_WRAP_NXCQ_SCOM_PMU0_COUNTER_REG_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_NX_PBI_UMAC_SU_ERROR_RPT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_UMAC_SU_ERROR_RPT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_NX_PBI_UMAC_SU_ERROR_RPT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = NX_PBI_UMAC_SU_ERROR_RPT;
#endif
    return fapi2::getScom(i_target, NX_PBI_UMAC_SU_ERROR_RPT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_NX_PBI_UMAC_SU_ERROR_RPT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SU_ERROR_RPT));
#endif
    return fapi2::putScom(i_target, NX_PBI_UMAC_SU_ERROR_RPT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SU_ERROR_RPT_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SU_ERROR_RPT));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_SU_ERROR_RPT_0,
           NX_PBI_UMAC_SU_ERROR_RPT_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_UMAC_SU_ERROR_RPT_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SU_ERROR_RPT_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SU_ERROR_RPT));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_SU_ERROR_RPT_0,
           NX_PBI_UMAC_SU_ERROR_RPT_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_UMAC_SU_ERROR_RPT_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_SU_ERROR_RPT_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SU_ERROR_RPT));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_SU_ERROR_RPT_0,
           NX_PBI_UMAC_SU_ERROR_RPT_0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_UMAC_SU_ERROR_RPT_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SU_ERROR_RPT_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SU_ERROR_RPT));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_SU_ERROR_RPT_1,
           NX_PBI_UMAC_SU_ERROR_RPT_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_UMAC_SU_ERROR_RPT_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_NX_PBI_UMAC_SU_ERROR_RPT_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SU_ERROR_RPT));
#endif
    return o_data.insertFromRight<NX_PBI_UMAC_SU_ERROR_RPT_1,
           NX_PBI_UMAC_SU_ERROR_RPT_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_UMAC_SU_ERROR_RPT_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_NX_PBI_UMAC_SU_ERROR_RPT_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(NX_PBI_UMAC_SU_ERROR_RPT));
#endif
    return i_data.extractToRight<NX_PBI_UMAC_SU_ERROR_RPT_1,
           NX_PBI_UMAC_SU_ERROR_RPT_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access NX_PBI_UMAC_SU_ERROR_RPT_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN2_STATION_EVENT_COMPA(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN2_STATION_EVENT_COMPA;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN2_STATION_EVENT_COMPA(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN2_STATION_EVENT_COMPA;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN2_STATION_EVENT_COMPA, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN2_STATION_EVENT_COMPA(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPA));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN2_STATION_EVENT_COMPA, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTYPE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTYPE_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTYPE_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTYPE_EN2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTYPE_EN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTYPE_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTYPE_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTYPE_EN2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTYPE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTYPE_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTYPE_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTYPE_EN2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTYPE_MASK_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTYPE_MASK_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTYPE_MASK_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTYPE_MASK_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTYPE_MASK_EN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTYPE_MASK_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTYPE_MASK_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTYPE_MASK_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTYPE_MASK_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTYPE_MASK_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTYPE_MASK_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTYPE_MASK_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TSIZE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TSIZE_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TSIZE_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TSIZE_EN2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TSIZE_EN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TSIZE_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TSIZE_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TSIZE_EN2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TSIZE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TSIZE_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TSIZE_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TSIZE_EN2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TSIZE_MASK_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TSIZE_MASK_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TSIZE_MASK_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TSIZE_MASK_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TSIZE_MASK_EN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TSIZE_MASK_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TSIZE_MASK_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TSIZE_MASK_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TSIZE_MASK_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TSIZE_MASK_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TSIZE_MASK_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TSIZE_MASK_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTAG_EN2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTAG_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTAG_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTAG_EN2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTAG_EN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTAG_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTAG_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTAG_EN2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTAG_EN2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTAG_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTAG_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTAG_EN2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTAG_MASK_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTAG_MASK_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTAG_MASK_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTAG_MASK_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTAG_MASK_EN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTAG_MASK_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTAG_MASK_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTAG_MASK_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTAG_MASK_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTAG_MASK_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTAG_MASK_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPA_TTAG_MASK_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_COMPA_CRESP_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPA_CRESP_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPA_CRESP_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPA_CRESP_EN2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_COMPA_CRESP_EN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPA_CRESP_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPA_CRESP_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPA_CRESP_EN2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_EVENT_COMPA_CRESP_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPA_CRESP_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPA_CRESP_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPA_CRESP_EN2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_COMPA_CRESP_MASK_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPA_CRESP_MASK_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPA_CRESP_MASK_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPA_CRESP_MASK_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_COMPA_CRESP_MASK_EN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPA_CRESP_MASK_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPA_CRESP_MASK_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPA_CRESP_MASK_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_EVENT_COMPA_CRESP_MASK_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPA_CRESP_MASK_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPA_CRESP_MASK_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPA_CRESP_MASK_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_COMPA_CRESP_POLARITY_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPA_CRESP_POLARITY_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPA_CRESP_POLARITY_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_COMPA_CRESP_POLARITY_EN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPA_CRESP_POLARITY_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPA_CRESP_POLARITY_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_COMPA_CRESP_POLARITY_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPA));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_EVENT_COMPA_CRESP_POLARITY_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPA_CRESP_POLARITY_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_EVENT_COMPA_CRESP_POLARITY_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPA));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_EVENT_COMPA_CRESP_POLARITY_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPA_CRESP_POLARITY_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_EVENT_COMPA_CRESP_POLARITY_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPA_CRESP_POLARITY_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPA_CRESP_POLARITY_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN2_STATION_EVENT_COMPA_CRESP_POLARITY_EN2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPA));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_EVENT_COMPA_CRESP_POLARITY_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPA_CRESP_POLARITY_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_COMPA_SCOPE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPA_SCOPE_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPA_SCOPE_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPA_SCOPE_EN2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_COMPA_SCOPE_EN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPA_SCOPE_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPA_SCOPE_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPA_SCOPE_EN2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_EVENT_COMPA_SCOPE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPA_SCOPE_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPA_SCOPE_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPA_SCOPE_EN2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN2_STATION_EVENT_COMPX(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN2_STATION_EVENT_COMPX;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN2_STATION_EVENT_COMPX(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN2_STATION_EVENT_COMPX;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN2_STATION_EVENT_COMPX, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN2_STATION_EVENT_COMPX(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPX));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN2_STATION_EVENT_COMPX, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_COMPX_A_SCOPE_MASK_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPX_A_SCOPE_MASK_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPX_A_SCOPE_MASK_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPX_A_SCOPE_MASK_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_COMPX_A_SCOPE_MASK_EN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPX_A_SCOPE_MASK_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPX_A_SCOPE_MASK_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPX_A_SCOPE_MASK_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_EVENT_COMPX_A_SCOPE_MASK_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPX_A_SCOPE_MASK_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPX_A_SCOPE_MASK_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPX_A_SCOPE_MASK_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_COMPX_A_PRESP_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPX_A_PRESP_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPX_A_PRESP_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPX_A_PRESP_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_COMPX_A_PRESP_EN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPX_A_PRESP_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPX_A_PRESP_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPX_A_PRESP_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_EVENT_COMPX_A_PRESP_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPX_A_PRESP_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPX_A_PRESP_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPX_A_PRESP_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_COMPX_A_PRESP_MASK_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPX_A_PRESP_MASK_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPX_A_PRESP_MASK_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPX_A_PRESP_MASK_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_COMPX_A_PRESP_MASK_EN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPX_A_PRESP_MASK_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPX_A_PRESP_MASK_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPX_A_PRESP_MASK_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_EVENT_COMPX_A_PRESP_MASK_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPX_A_PRESP_MASK_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPX_A_PRESP_MASK_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPX_A_PRESP_MASK_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_COMPX_B_SCOPE_MASK_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPX_B_SCOPE_MASK_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPX_B_SCOPE_MASK_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPX_B_SCOPE_MASK_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_COMPX_B_SCOPE_MASK_EN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPX_B_SCOPE_MASK_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPX_B_SCOPE_MASK_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPX_B_SCOPE_MASK_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_EVENT_COMPX_B_SCOPE_MASK_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPX_B_SCOPE_MASK_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPX_B_SCOPE_MASK_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPX_B_SCOPE_MASK_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_COMPX_B_PRESP_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPX_B_PRESP_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPX_B_PRESP_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPX_B_PRESP_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_COMPX_B_PRESP_EN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPX_B_PRESP_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPX_B_PRESP_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPX_B_PRESP_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_EVENT_COMPX_B_PRESP_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPX_B_PRESP_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPX_B_PRESP_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPX_B_PRESP_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_COMPX_B_PRESP_MASK_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPX_B_PRESP_MASK_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPX_B_PRESP_MASK_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPX_B_PRESP_MASK_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_COMPX_B_PRESP_MASK_EN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPX_B_PRESP_MASK_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPX_B_PRESP_MASK_EN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPX_B_PRESP_MASK_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_EVENT_COMPX_B_PRESP_MASK_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPX_B_PRESP_MASK_EN2,
           PB_COM_SCOM_EN2_STATION_EVENT_COMPX_B_PRESP_MASK_EN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPX_B_PRESP_MASK_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPX));
#endif
    return o_data.setBit<PB_COM_SCOM_EN2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPX));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN2_STATION_EVENT_COMPX));
#endif
    return i_data.getBit<PB_COM_SCOM_EN2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN2_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_EN_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_EN_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_EN_CURR_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_EN_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_EN_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_EN_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_EN_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_EN_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_EN_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_EN_CURR_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_EN_CURR_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_EN_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_EN_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_EN_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_EN_CURR_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_EN_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_EN_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_EN_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_EN_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_EN_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_EN_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_EN_CURR_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_EN_CURR_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_EN_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_EN_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_EN_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_EN_CURR_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_EN_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_EN_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_EN_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_EN_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_EN_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_EN_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_EN_CURR_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_EN_CURR_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_EN_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_EN_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_EN_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_EN_CURR_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_EN_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_EN_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_EN_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_EN_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_EN_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_EN_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_EN_CURR_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_EN_CURR_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_EN_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_EN_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_EN_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_EN_CURR_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_EN_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_EN_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_EN_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_EN_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_EN_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_EN_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_EN_CURR_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_EN_CURR_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_EN_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_EN_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_EN_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_EN_CURR_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_EN_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_EN_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_EN_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_EN_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_EN_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_EN_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_EN_CURR_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_EN_CURR_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_EN_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_EN_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_EN_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_EN_CURR_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_EN_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_EN_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_EN_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_EN_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_EN_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_EN_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_EN_CURR_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_EN_CURR_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_EN_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_EN_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_EN_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_EN_CURR_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_EN_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_EN_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_EN_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_EN_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_EN_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_EN_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_EN_CURR_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_EN_CURR_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_EN_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_EN_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_ADDR_DIS_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_ADDR_DIS_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_ADDR_DIS_CURR_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_ADDR_DIS_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_ADDR_DIS_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_ADDR_DIS_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_ADDR_DIS_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_ADDR_DIS_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_ADDR_DIS_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_ADDR_DIS_CURR_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_ADDR_DIS_CURR_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_ADDR_DIS_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_ADDR_DIS_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_ADDR_DIS_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_ADDR_DIS_CURR_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_ADDR_DIS_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_ADDR_DIS_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_ADDR_DIS_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_ADDR_DIS_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_ADDR_DIS_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_ADDR_DIS_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_ADDR_DIS_CURR_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_ADDR_DIS_CURR_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_ADDR_DIS_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_ADDR_DIS_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_ADDR_DIS_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_ADDR_DIS_CURR_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_ADDR_DIS_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_ADDR_DIS_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_ADDR_DIS_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_ADDR_DIS_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_ADDR_DIS_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_ADDR_DIS_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_ADDR_DIS_CURR_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_ADDR_DIS_CURR_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_ADDR_DIS_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_ADDR_DIS_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_ADDR_DIS_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_ADDR_DIS_CURR_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_ADDR_DIS_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_ADDR_DIS_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_ADDR_DIS_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_ADDR_DIS_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_ADDR_DIS_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_ADDR_DIS_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_ADDR_DIS_CURR_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_ADDR_DIS_CURR_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_ADDR_DIS_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_ADDR_DIS_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_ADDR_DIS_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_ADDR_DIS_CURR_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_ADDR_DIS_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_ADDR_DIS_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_ADDR_DIS_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_ADDR_DIS_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_ADDR_DIS_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_ADDR_DIS_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_ADDR_DIS_CURR_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_ADDR_DIS_CURR_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_ADDR_DIS_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_ADDR_DIS_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_ADDR_DIS_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_ADDR_DIS_CURR_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_ADDR_DIS_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_ADDR_DIS_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_ADDR_DIS_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_ADDR_DIS_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_ADDR_DIS_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_ADDR_DIS_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_ADDR_DIS_CURR_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_ADDR_DIS_CURR_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_ADDR_DIS_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_ADDR_DIS_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_ADDR_DIS_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_ADDR_DIS_CURR_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_ADDR_DIS_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_ADDR_DIS_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_ADDR_DIS_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_ADDR_DIS_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_ADDR_DIS_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_ADDR_DIS_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_ADDR_DIS_CURR_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_ADDR_DIS_CURR_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_ADDR_DIS_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_ADDR_DIS_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_ADDR_DIS_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_ADDR_DIS_CURR_EN3(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_ADDR_DIS_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_ADDR_DIS_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_ADDR_DIS_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_ADDR_DIS_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_ADDR_DIS_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_ADDR_DIS_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_ADDR_DIS_CURR_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_ADDR_DIS_CURR_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_ADDR_DIS_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_ADDR_DIS_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_MODE_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_MODE_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_MODE_CURR_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_MODE_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_MODE_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_MODE_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_MODE_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_MODE_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_MODE_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_MODE_CURR_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_MODE_CURR_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_MODE_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_ID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_ID_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_ID_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_ID_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_ID_CURR_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_ID_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_ID_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_ID_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_ID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_ID_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_ID_CURR_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_0_ID_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_MODE_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_MODE_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_MODE_CURR_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_MODE_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_MODE_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_MODE_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_MODE_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_MODE_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_MODE_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_MODE_CURR_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_MODE_CURR_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_MODE_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_ID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_ID_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_ID_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_ID_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_ID_CURR_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_ID_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_ID_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_ID_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_ID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_ID_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_ID_CURR_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_1_ID_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_MODE_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_MODE_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_MODE_CURR_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_MODE_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_MODE_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_MODE_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_MODE_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_MODE_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_MODE_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_MODE_CURR_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_MODE_CURR_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_MODE_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_ID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_ID_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_ID_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_ID_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_ID_CURR_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_ID_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_ID_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_ID_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_ID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_ID_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_ID_CURR_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_2_ID_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_MODE_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_MODE_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_MODE_CURR_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_MODE_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_MODE_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_MODE_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_MODE_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_MODE_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_MODE_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_MODE_CURR_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_MODE_CURR_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_MODE_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_ID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_ID_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_ID_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_ID_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_ID_CURR_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_ID_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_ID_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_ID_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_ID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_ID_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_ID_CURR_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_3_ID_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_MODE_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_MODE_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_MODE_CURR_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_MODE_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_MODE_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_MODE_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_MODE_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_MODE_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_MODE_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_MODE_CURR_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_MODE_CURR_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_MODE_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_ID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_ID_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_ID_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_ID_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_ID_CURR_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_ID_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_ID_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_ID_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_ID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_ID_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_ID_CURR_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_4_ID_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_MODE_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_MODE_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_MODE_CURR_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_MODE_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_MODE_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_MODE_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_MODE_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_MODE_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_MODE_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_MODE_CURR_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_MODE_CURR_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_MODE_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_ID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_ID_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_ID_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_ID_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_ID_CURR_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_ID_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_ID_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_ID_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_ID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_ID_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_ID_CURR_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_5_ID_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_MODE_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_MODE_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_MODE_CURR_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_MODE_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_MODE_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_MODE_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_MODE_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_MODE_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_MODE_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_MODE_CURR_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_MODE_CURR_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_MODE_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_ID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_ID_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_ID_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_ID_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_ID_CURR_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_ID_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_ID_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_ID_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_ID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_ID_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_ID_CURR_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_6_ID_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_MODE_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_MODE_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_MODE_CURR_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_MODE_CURR_EN3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_MODE_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_MODE_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_MODE_CURR_EN3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_MODE_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_MODE_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_MODE_CURR_EN3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_MODE_CURR_EN3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_MODE_CURR_EN3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_MODE_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_ID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_ID_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_ID_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_ID_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_ID_CURR_EN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_ID_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_ID_CURR_EN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_ID_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_ID_CURR_EN3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_ID_CURR_EN3,
           PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_ID_CURR_EN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN3_STATION_HP_MODE2_CURR_7_ID_CURR_EN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN4_STATION_EVENT_COMPA(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN4_STATION_EVENT_COMPA;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN4_STATION_EVENT_COMPA(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN4_STATION_EVENT_COMPA;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN4_STATION_EVENT_COMPA, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN4_STATION_EVENT_COMPA(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPA));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN4_STATION_EVENT_COMPA, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTYPE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTYPE_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTYPE_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTYPE_EN4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTYPE_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTYPE_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTYPE_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTYPE_EN4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTYPE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTYPE_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTYPE_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTYPE_EN4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTYPE_MASK_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTYPE_MASK_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTYPE_MASK_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTYPE_MASK_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTYPE_MASK_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTYPE_MASK_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTYPE_MASK_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTYPE_MASK_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTYPE_MASK_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTYPE_MASK_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTYPE_MASK_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTYPE_MASK_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TSIZE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TSIZE_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TSIZE_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TSIZE_EN4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TSIZE_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TSIZE_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TSIZE_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TSIZE_EN4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TSIZE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TSIZE_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TSIZE_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TSIZE_EN4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TSIZE_MASK_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TSIZE_MASK_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TSIZE_MASK_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TSIZE_MASK_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TSIZE_MASK_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TSIZE_MASK_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TSIZE_MASK_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TSIZE_MASK_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TSIZE_MASK_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TSIZE_MASK_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TSIZE_MASK_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TSIZE_MASK_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTAG_EN4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTAG_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTAG_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTAG_EN4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTAG_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTAG_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTAG_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTAG_EN4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTAG_EN4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTAG_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTAG_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTAG_EN4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTAG_MASK_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTAG_MASK_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTAG_MASK_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTAG_MASK_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTAG_MASK_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTAG_MASK_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTAG_MASK_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTAG_MASK_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTAG_MASK_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTAG_MASK_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTAG_MASK_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPA_TTAG_MASK_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_COMPA_CRESP_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPA_CRESP_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPA_CRESP_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPA_CRESP_EN4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_COMPA_CRESP_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPA_CRESP_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPA_CRESP_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPA_CRESP_EN4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_EVENT_COMPA_CRESP_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPA_CRESP_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPA_CRESP_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPA_CRESP_EN4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_COMPA_CRESP_MASK_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPA_CRESP_MASK_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPA_CRESP_MASK_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPA_CRESP_MASK_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_COMPA_CRESP_MASK_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPA_CRESP_MASK_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPA_CRESP_MASK_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPA_CRESP_MASK_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_EVENT_COMPA_CRESP_MASK_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPA_CRESP_MASK_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPA_CRESP_MASK_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPA_CRESP_MASK_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_COMPA_CRESP_POLARITY_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPA_CRESP_POLARITY_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPA_CRESP_POLARITY_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_COMPA_CRESP_POLARITY_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPA_CRESP_POLARITY_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPA_CRESP_POLARITY_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_COMPA_CRESP_POLARITY_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPA));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_EVENT_COMPA_CRESP_POLARITY_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPA_CRESP_POLARITY_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_EVENT_COMPA_CRESP_POLARITY_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPA));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_EVENT_COMPA_CRESP_POLARITY_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPA_CRESP_POLARITY_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_EVENT_COMPA_CRESP_POLARITY_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPA_CRESP_POLARITY_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPA_CRESP_POLARITY_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN4_STATION_EVENT_COMPA_CRESP_POLARITY_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPA));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_EVENT_COMPA_CRESP_POLARITY_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPA_CRESP_POLARITY_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_COMPA_SCOPE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPA_SCOPE_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPA_SCOPE_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPA_SCOPE_EN4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_COMPA_SCOPE_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPA));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPA_SCOPE_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPA_SCOPE_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPA_SCOPE_EN4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_EVENT_COMPA_SCOPE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPA));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPA_SCOPE_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPA_SCOPE_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPA_SCOPE_EN4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EN4_STATION_EVENT_COMPX(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN4_STATION_EVENT_COMPX;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EN4_STATION_EVENT_COMPX(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EN4_STATION_EVENT_COMPX;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EN4_STATION_EVENT_COMPX, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EN4_STATION_EVENT_COMPX(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPX));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EN4_STATION_EVENT_COMPX, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_COMPX_A_SCOPE_MASK_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPX_A_SCOPE_MASK_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPX_A_SCOPE_MASK_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPX_A_SCOPE_MASK_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_COMPX_A_SCOPE_MASK_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPX_A_SCOPE_MASK_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPX_A_SCOPE_MASK_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPX_A_SCOPE_MASK_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_EVENT_COMPX_A_SCOPE_MASK_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPX_A_SCOPE_MASK_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPX_A_SCOPE_MASK_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPX_A_SCOPE_MASK_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_COMPX_A_PRESP_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPX_A_PRESP_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPX_A_PRESP_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPX_A_PRESP_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_COMPX_A_PRESP_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPX_A_PRESP_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPX_A_PRESP_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPX_A_PRESP_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_EVENT_COMPX_A_PRESP_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPX_A_PRESP_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPX_A_PRESP_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPX_A_PRESP_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_COMPX_A_PRESP_MASK_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPX_A_PRESP_MASK_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPX_A_PRESP_MASK_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPX_A_PRESP_MASK_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_COMPX_A_PRESP_MASK_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPX_A_PRESP_MASK_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPX_A_PRESP_MASK_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPX_A_PRESP_MASK_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_EVENT_COMPX_A_PRESP_MASK_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPX_A_PRESP_MASK_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPX_A_PRESP_MASK_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPX_A_PRESP_MASK_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_COMPX_B_SCOPE_MASK_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPX_B_SCOPE_MASK_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPX_B_SCOPE_MASK_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPX_B_SCOPE_MASK_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_COMPX_B_SCOPE_MASK_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPX_B_SCOPE_MASK_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPX_B_SCOPE_MASK_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPX_B_SCOPE_MASK_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_EVENT_COMPX_B_SCOPE_MASK_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPX_B_SCOPE_MASK_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPX_B_SCOPE_MASK_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPX_B_SCOPE_MASK_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_COMPX_B_PRESP_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPX_B_PRESP_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPX_B_PRESP_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPX_B_PRESP_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_COMPX_B_PRESP_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPX_B_PRESP_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPX_B_PRESP_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPX_B_PRESP_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_EVENT_COMPX_B_PRESP_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPX_B_PRESP_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPX_B_PRESP_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPX_B_PRESP_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_COMPX_B_PRESP_MASK_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPX_B_PRESP_MASK_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPX_B_PRESP_MASK_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPX_B_PRESP_MASK_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_COMPX_B_PRESP_MASK_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPX_B_PRESP_MASK_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPX_B_PRESP_MASK_EN4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPX_B_PRESP_MASK_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_EVENT_COMPX_B_PRESP_MASK_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPX_B_PRESP_MASK_EN4,
           PB_COM_SCOM_EN4_STATION_EVENT_COMPX_B_PRESP_MASK_EN4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPX_B_PRESP_MASK_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPX));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EN4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPX));
#endif
    return o_data.setBit<PB_COM_SCOM_EN4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EN4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPX));
#endif
    return o_data.clearBit<PB_COM_SCOM_EN4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EN4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPX));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EN4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EN4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EN4_STATION_EVENT_COMPX));
#endif
    return i_data.getBit<PB_COM_SCOM_EN4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EN4_STATION_EVENT_COMPX_AB_LPC_D_MODE_EN4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_0_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_0_FIR_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_0_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_0_FIR_ERR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_0_FIR_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_0_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_0_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_0_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_0_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_0_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_0_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_0_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_0_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_0_FIR_ERR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_0_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_0_FIR_ERR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_0_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_0_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_1_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_1_FIR_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_1_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_1_FIR_ERR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_1_FIR_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_1_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_1_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_1_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_1_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_1_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_1_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_1_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_1_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_1_FIR_ERR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_1_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_1_FIR_ERR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_1_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_1_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_2_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_2_FIR_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_2_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_2_FIR_ERR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_2_FIR_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_2_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_2_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_2_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_2_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_2_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_2_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_2_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_2_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_2_FIR_ERR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_2_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_2_FIR_ERR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_2_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_2_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_3_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_3_FIR_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_3_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_3_FIR_ERR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_3_FIR_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_3_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_3_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_3_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_3_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_3_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_3_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_3_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_3_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_3_FIR_ERR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_3_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_3_FIR_ERR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_3_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_3_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_4_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_4_FIR_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_4_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_4_FIR_ERR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_4_FIR_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_4_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_4_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_4_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_4_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_4_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_4_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_4_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_4_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_4_FIR_ERR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_4_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_4_FIR_ERR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_4_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_4_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_5_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_5_FIR_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_5_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_5_FIR_ERR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_5_FIR_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_5_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_5_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_5_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_5_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_5_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_5_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_5_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_5_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_5_FIR_ERR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_5_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_5_FIR_ERR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_5_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_5_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_6_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_6_FIR_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_6_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_6_FIR_ERR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_6_FIR_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_6_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_6_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_6_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_6_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_6_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_6_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_6_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_6_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_6_FIR_ERR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_6_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_6_FIR_ERR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_6_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_6_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_7_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_7_FIR_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_7_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_7_FIR_ERR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_7_FIR_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_7_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_7_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_7_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_7_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_7_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_7_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_7_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_7_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_7_FIR_ERR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_7_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_7_FIR_ERR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_RW, PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_7_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ0_EXTFIR_MASK_REG_7_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_MASTER_CHIP_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_MASTER_CHIP_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_MASTER_CHIP_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_MASTER_CHIP_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_MASTER_CHIP_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_MASTER_CHIP_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_MASTER_CHIP_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_MASTER_CHIP_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_MASTER_CHIP_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_MASTER_CHIP_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_MASTER_CHIP_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_MASTER_CHIP_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_MASTER_CHIP_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_MASTER_CHIP_CURR_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_MASTER_CHIP_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_MASTER_CHIP_CURR_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_MASTER_CHIP_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_MASTER_CHIP_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_TM_MASTER_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_TM_MASTER_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_TM_MASTER_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_TM_MASTER_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_TM_MASTER_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_TM_MASTER_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_TM_MASTER_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_TM_MASTER_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_TM_MASTER_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_TM_MASTER_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_TM_MASTER_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_TM_MASTER_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_TM_MASTER_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_TM_MASTER_CURR_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_TM_MASTER_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_TM_MASTER_CURR_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_TM_MASTER_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_TM_MASTER_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_CHG_RATE_GP_MASTER_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_CHG_RATE_GP_MASTER_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_CHG_RATE_GP_MASTER_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_CHG_RATE_GP_MASTER_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_CHG_RATE_GP_MASTER_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_CHG_RATE_GP_MASTER_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_CHG_RATE_GP_MASTER_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_CHG_RATE_GP_MASTER_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_CHG_RATE_GP_MASTER_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_CHG_RATE_GP_MASTER_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_CHG_RATE_GP_MASTER_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_CHG_RATE_GP_MASTER_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_CHG_RATE_GP_MASTER_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_CHG_RATE_GP_MASTER_CURR_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_CHG_RATE_GP_MASTER_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_CHG_RATE_GP_MASTER_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_CHG_RATE_GP_MASTER_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_CHG_RATE_GP_MASTER_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_CHG_RATE_SP_MASTER_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_CHG_RATE_SP_MASTER_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_CHG_RATE_SP_MASTER_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_CHG_RATE_SP_MASTER_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_CHG_RATE_SP_MASTER_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_CHG_RATE_SP_MASTER_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_CHG_RATE_SP_MASTER_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_CHG_RATE_SP_MASTER_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_CHG_RATE_SP_MASTER_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_CHG_RATE_SP_MASTER_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_CHG_RATE_SP_MASTER_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_CHG_RATE_SP_MASTER_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_CHG_RATE_SP_MASTER_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_CHG_RATE_SP_MASTER_CURR_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_CHG_RATE_SP_MASTER_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_CHG_RATE_SP_MASTER_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_CHG_RATE_SP_MASTER_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_CHG_RATE_SP_MASTER_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_NP_CMD_RATE_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_NP_CMD_RATE_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_NP_CMD_RATE_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_NP_CMD_RATE_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_NP_CMD_RATE_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_NP_CMD_RATE_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_NP_CMD_RATE_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_NP_CMD_RATE_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_NP_CMD_RATE_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_NP_CMD_RATE_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_NP_CMD_RATE_CURR_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_NP_CMD_RATE_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_AGGREGATE_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_AGGREGATE_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_AGGREGATE_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_AGGREGATE_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_AGGREGATE_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_AGGREGATE_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_AGGREGATE_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_AGGREGATE_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_AGGREGATE_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_AGGREGATE_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_AGGREGATE_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_AGGREGATE_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_AGGREGATE_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_AGGREGATE_CURR_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_AGGREGATE_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_AGGREGATE_CURR_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_AGGREGATE_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_AGGREGATE_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_INDIRECT_EN_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_INDIRECT_EN_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_INDIRECT_EN_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_INDIRECT_EN_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_INDIRECT_EN_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_INDIRECT_EN_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_INDIRECT_EN_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_INDIRECT_EN_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_INDIRECT_EN_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_INDIRECT_EN_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_INDIRECT_EN_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_INDIRECT_EN_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_INDIRECT_EN_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_INDIRECT_EN_CURR_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_INDIRECT_EN_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_INDIRECT_EN_CURR_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_INDIRECT_EN_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_INDIRECT_EN_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_GATHER_ENABLE_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_GATHER_ENABLE_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_GATHER_ENABLE_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_GATHER_ENABLE_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_GATHER_ENABLE_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_GATHER_ENABLE_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_GATHER_ENABLE_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_GATHER_ENABLE_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_GATHER_ENABLE_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_GATHER_ENABLE_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_GATHER_ENABLE_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_GATHER_ENABLE_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_GATHER_ENABLE_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_GATHER_ENABLE_CURR_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_GATHER_ENABLE_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_GATHER_ENABLE_CURR_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_GATHER_ENABLE_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_G_GATHER_ENABLE_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_MIN_G_CMD_RATE_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_MIN_G_CMD_RATE_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_MIN_G_CMD_RATE_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_MIN_G_CMD_RATE_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_MIN_G_CMD_RATE_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_MIN_G_CMD_RATE_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_MIN_G_CMD_RATE_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_MIN_G_CMD_RATE_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_MIN_G_CMD_RATE_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_MIN_G_CMD_RATE_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_MIN_G_CMD_RATE_CURR_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_MIN_G_CMD_RATE_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_AGGREGATE_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_AGGREGATE_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_AGGREGATE_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_AGGREGATE_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_AGGREGATE_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_AGGREGATE_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_AGGREGATE_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_AGGREGATE_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_AGGREGATE_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_AGGREGATE_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_AGGREGATE_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_AGGREGATE_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_AGGREGATE_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_AGGREGATE_CURR_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_AGGREGATE_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_AGGREGATE_CURR_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_AGGREGATE_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_AGGREGATE_CURR_EQ2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_INDIRECT_EN_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_INDIRECT_EN_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_INDIRECT_EN_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_INDIRECT_EN_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_INDIRECT_EN_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_INDIRECT_EN_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_INDIRECT_EN_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_INDIRECT_EN_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_INDIRECT_EN_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_INDIRECT_EN_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_INDIRECT_EN_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_INDIRECT_EN_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_INDIRECT_EN_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_INDIRECT_EN_CURR_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_INDIRECT_EN_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_INDIRECT_EN_CURR_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_INDIRECT_EN_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_INDIRECT_EN_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_GATHER_ENABLE_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_GATHER_ENABLE_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_GATHER_ENABLE_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_GATHER_ENABLE_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_GATHER_ENABLE_CURR_EQ2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_GATHER_ENABLE_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_GATHER_ENABLE_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_GATHER_ENABLE_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_GATHER_ENABLE_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_GATHER_ENABLE_CURR_EQ2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_GATHER_ENABLE_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_GATHER_ENABLE_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_GATHER_ENABLE_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_GATHER_ENABLE_CURR_EQ2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_GATHER_ENABLE_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_GATHER_ENABLE_CURR_EQ2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_GATHER_ENABLE_CURR_EQ2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_R_GATHER_ENABLE_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_MIN_R_CMD_RATE_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_MIN_R_CMD_RATE_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_MIN_R_CMD_RATE_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_MIN_R_CMD_RATE_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_MIN_R_CMD_RATE_CURR_EQ2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_MIN_R_CMD_RATE_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_MIN_R_CMD_RATE_CURR_EQ2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_MIN_R_CMD_RATE_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_MIN_R_CMD_RATE_CURR_EQ2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_MIN_R_CMD_RATE_CURR_EQ2,
           PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_MIN_R_CMD_RATE_CURR_EQ2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ2_STATION_HP_MODE1_CURR_MIN_R_CMD_RATE_CURR_EQ2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ5_STATION_MODE(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ5_STATION_MODE;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ5_STATION_MODE(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ5_STATION_MODE;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ5_STATION_MODE, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ5_STATION_MODE(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ5_STATION_MODE, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_HOP_MODE_EQ5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_HOP_MODE_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_HOP_MODE_EQ5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_HOP_MODE_EQ5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_HOP_MODE_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_HOP_MODE_EQ5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_HOP_MODE_EQ5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_MODE_HOP_MODE_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_HOP_MODE_EQ5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_MODE_HOP_MODE_EQ5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_MODE_HOP_MODE_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_HOP_MODE_EQ5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_MODE_HOP_MODE_EQ5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_MODE_HOP_MODE_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_HOP_MODE_EQ5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ5_STATION_MODE_HOP_MODE_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_MODE_HOP_MODE_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_HOP_MODE_EQ5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_PUMP_MODE_EQ5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_PUMP_MODE_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_PUMP_MODE_EQ5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_PUMP_MODE_EQ5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_PUMP_MODE_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_PUMP_MODE_EQ5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_PUMP_MODE_EQ5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_MODE_PUMP_MODE_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_PUMP_MODE_EQ5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_MODE_PUMP_MODE_EQ5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_MODE_PUMP_MODE_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_PUMP_MODE_EQ5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_MODE_PUMP_MODE_EQ5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_MODE_PUMP_MODE_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_PUMP_MODE_EQ5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ5_STATION_MODE_PUMP_MODE_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_MODE_PUMP_MODE_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_PUMP_MODE_EQ5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_REPRO_MODE_EQ5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_REPRO_MODE_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_REPRO_MODE_EQ5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_REPRO_MODE_EQ5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_REPRO_MODE_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_REPRO_MODE_EQ5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_REPRO_MODE_EQ5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_MODE_REPRO_MODE_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_REPRO_MODE_EQ5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_MODE_REPRO_MODE_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_MODE_REPRO_MODE_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_REPRO_MODE_EQ5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_MODE_REPRO_MODE_EQ5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_MODE_REPRO_MODE_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_REPRO_MODE_EQ5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ5_STATION_MODE_REPRO_MODE_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_MODE_REPRO_MODE_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_REPRO_MODE_EQ5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_SL_DOMAIN_SIZE_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_SL_DOMAIN_SIZE_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_SL_DOMAIN_SIZE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_SL_DOMAIN_SIZE_EQ5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_SL_DOMAIN_SIZE_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_SL_DOMAIN_SIZE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_SL_DOMAIN_SIZE_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_MODE_SL_DOMAIN_SIZE_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_SL_DOMAIN_SIZE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_MODE_SL_DOMAIN_SIZE_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_MODE_SL_DOMAIN_SIZE_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_SL_DOMAIN_SIZE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_MODE_SL_DOMAIN_SIZE_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_MODE_SL_DOMAIN_SIZE_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_SL_DOMAIN_SIZE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ5_STATION_MODE_SL_DOMAIN_SIZE_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_MODE_SL_DOMAIN_SIZE_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_SL_DOMAIN_SIZE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_REQ_GATHER_ENABLE_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_REQ_GATHER_ENABLE_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_REQ_GATHER_ENABLE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_REQ_GATHER_ENABLE_EQ5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_REQ_GATHER_ENABLE_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_REQ_GATHER_ENABLE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_REQ_GATHER_ENABLE_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_MODE_REQ_GATHER_ENABLE_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_REQ_GATHER_ENABLE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_MODE_REQ_GATHER_ENABLE_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_MODE_REQ_GATHER_ENABLE_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_REQ_GATHER_ENABLE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_MODE_REQ_GATHER_ENABLE_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_MODE_REQ_GATHER_ENABLE_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_REQ_GATHER_ENABLE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ5_STATION_MODE_REQ_GATHER_ENABLE_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_MODE_REQ_GATHER_ENABLE_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_REQ_GATHER_ENABLE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_NHTM_EVENT_COMP_EN_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_NHTM_EVENT_COMP_EN_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_NHTM_EVENT_COMP_EN_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_NHTM_EVENT_COMP_EN_EQ5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_NHTM_EVENT_COMP_EN_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_NHTM_EVENT_COMP_EN_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_NHTM_EVENT_COMP_EN_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_MODE_NHTM_EVENT_COMP_EN_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_NHTM_EVENT_COMP_EN_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_MODE_NHTM_EVENT_COMP_EN_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_MODE_NHTM_EVENT_COMP_EN_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_NHTM_EVENT_COMP_EN_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_MODE_NHTM_EVENT_COMP_EN_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_MODE_NHTM_EVENT_COMP_EN_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_NHTM_EVENT_COMP_EN_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ5_STATION_MODE_NHTM_EVENT_COMP_EN_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_MODE_NHTM_EVENT_COMP_EN_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_NHTM_EVENT_COMP_EN_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_SWITCH_OPTION_AB_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_SWITCH_OPTION_AB_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_SWITCH_OPTION_AB_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_SWITCH_OPTION_AB_EQ5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_SWITCH_OPTION_AB_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_SWITCH_OPTION_AB_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_SWITCH_OPTION_AB_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_MODE_SWITCH_OPTION_AB_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_SWITCH_OPTION_AB_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_MODE_SWITCH_OPTION_AB_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_MODE_SWITCH_OPTION_AB_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_SWITCH_OPTION_AB_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_MODE_SWITCH_OPTION_AB_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_MODE_SWITCH_OPTION_AB_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_SWITCH_OPTION_AB_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ5_STATION_MODE_SWITCH_OPTION_AB_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_MODE_SWITCH_OPTION_AB_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_SWITCH_OPTION_AB_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_SW_AB_WAIT_EQ5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_SW_AB_WAIT_EQ5,
           PB_COM_SCOM_EQ5_STATION_MODE_SW_AB_WAIT_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_SW_AB_WAIT_EQ5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_SW_AB_WAIT_EQ5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_SW_AB_WAIT_EQ5,
           PB_COM_SCOM_EQ5_STATION_MODE_SW_AB_WAIT_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_SW_AB_WAIT_EQ5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_MODE_SW_AB_WAIT_EQ5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_MODE_SW_AB_WAIT_EQ5,
           PB_COM_SCOM_EQ5_STATION_MODE_SW_AB_WAIT_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_SW_AB_WAIT_EQ5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_SP_HW_MARK_EQ5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_SP_HW_MARK_EQ5,
           PB_COM_SCOM_EQ5_STATION_MODE_SP_HW_MARK_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_SP_HW_MARK_EQ5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_SP_HW_MARK_EQ5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_SP_HW_MARK_EQ5,
           PB_COM_SCOM_EQ5_STATION_MODE_SP_HW_MARK_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_SP_HW_MARK_EQ5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_MODE_SP_HW_MARK_EQ5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_MODE_SP_HW_MARK_EQ5,
           PB_COM_SCOM_EQ5_STATION_MODE_SP_HW_MARK_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_SP_HW_MARK_EQ5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_GP_HW_MARK_EQ5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_GP_HW_MARK_EQ5,
           PB_COM_SCOM_EQ5_STATION_MODE_GP_HW_MARK_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_GP_HW_MARK_EQ5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_GP_HW_MARK_EQ5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_GP_HW_MARK_EQ5,
           PB_COM_SCOM_EQ5_STATION_MODE_GP_HW_MARK_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_GP_HW_MARK_EQ5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_MODE_GP_HW_MARK_EQ5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_MODE_GP_HW_MARK_EQ5,
           PB_COM_SCOM_EQ5_STATION_MODE_GP_HW_MARK_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_GP_HW_MARK_EQ5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_NP_HW_MARK_EQ5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_NP_HW_MARK_EQ5,
           PB_COM_SCOM_EQ5_STATION_MODE_NP_HW_MARK_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_NP_HW_MARK_EQ5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_NP_HW_MARK_EQ5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_NP_HW_MARK_EQ5,
           PB_COM_SCOM_EQ5_STATION_MODE_NP_HW_MARK_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_NP_HW_MARK_EQ5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_MODE_NP_HW_MARK_EQ5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_MODE_NP_HW_MARK_EQ5,
           PB_COM_SCOM_EQ5_STATION_MODE_NP_HW_MARK_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_NP_HW_MARK_EQ5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_MCA_RATIO_OVERRIDE_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_MCA_RATIO_OVERRIDE_EQ5,
           PB_COM_SCOM_EQ5_STATION_MODE_MCA_RATIO_OVERRIDE_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_MCA_RATIO_OVERRIDE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_MCA_RATIO_OVERRIDE_EQ5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_MCA_RATIO_OVERRIDE_EQ5,
           PB_COM_SCOM_EQ5_STATION_MODE_MCA_RATIO_OVERRIDE_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_MCA_RATIO_OVERRIDE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_MODE_MCA_RATIO_OVERRIDE_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_MODE_MCA_RATIO_OVERRIDE_EQ5,
           PB_COM_SCOM_EQ5_STATION_MODE_MCA_RATIO_OVERRIDE_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_MCA_RATIO_OVERRIDE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_MCA_RATIO_SEL_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_MCA_RATIO_SEL_EQ5,
           PB_COM_SCOM_EQ5_STATION_MODE_MCA_RATIO_SEL_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_MCA_RATIO_SEL_EQ5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_MCA_RATIO_SEL_EQ5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_MCA_RATIO_SEL_EQ5,
           PB_COM_SCOM_EQ5_STATION_MODE_MCA_RATIO_SEL_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_MCA_RATIO_SEL_EQ5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_MODE_MCA_RATIO_SEL_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_MODE_MCA_RATIO_SEL_EQ5,
           PB_COM_SCOM_EQ5_STATION_MODE_MCA_RATIO_SEL_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_MCA_RATIO_SEL_EQ5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_PAU_STEP_OVERRIDE_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_PAU_STEP_OVERRIDE_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_PAU_STEP_OVERRIDE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_PAU_STEP_OVERRIDE_EQ5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_PAU_STEP_OVERRIDE_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_PAU_STEP_OVERRIDE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_PAU_STEP_OVERRIDE_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_MODE_PAU_STEP_OVERRIDE_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_PAU_STEP_OVERRIDE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_MODE_PAU_STEP_OVERRIDE_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_MODE_PAU_STEP_OVERRIDE_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_PAU_STEP_OVERRIDE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_MODE_PAU_STEP_OVERRIDE_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_MODE_PAU_STEP_OVERRIDE_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_PAU_STEP_OVERRIDE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ5_STATION_MODE_PAU_STEP_OVERRIDE_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_MODE_PAU_STEP_OVERRIDE_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_PAU_STEP_OVERRIDE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_PAU_STEP_SEL_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_PAU_STEP_SEL_EQ5,
           PB_COM_SCOM_EQ5_STATION_MODE_PAU_STEP_SEL_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_PAU_STEP_SEL_EQ5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_PAU_STEP_SEL_EQ5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_PAU_STEP_SEL_EQ5,
           PB_COM_SCOM_EQ5_STATION_MODE_PAU_STEP_SEL_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_PAU_STEP_SEL_EQ5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_MODE_PAU_STEP_SEL_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_MODE_PAU_STEP_SEL_EQ5,
           PB_COM_SCOM_EQ5_STATION_MODE_PAU_STEP_SEL_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_PAU_STEP_SEL_EQ5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_SWITCH_CD_GATE_ENABLE_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_SWITCH_CD_GATE_ENABLE_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_SWITCH_CD_GATE_ENABLE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_SWITCH_CD_GATE_ENABLE_EQ5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_SWITCH_CD_GATE_ENABLE_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_SWITCH_CD_GATE_ENABLE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_SWITCH_CD_GATE_ENABLE_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_MODE_SWITCH_CD_GATE_ENABLE_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_SWITCH_CD_GATE_ENABLE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_MODE_SWITCH_CD_GATE_ENABLE_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_MODE_SWITCH_CD_GATE_ENABLE_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_SWITCH_CD_GATE_ENABLE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_MODE_SWITCH_CD_GATE_ENABLE_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_MODE_SWITCH_CD_GATE_ENABLE_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_SWITCH_CD_GATE_ENABLE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ5_STATION_MODE_SWITCH_CD_GATE_ENABLE_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_MODE_SWITCH_CD_GATE_ENABLE_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_SWITCH_CD_GATE_ENABLE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_TMGR_OP2_OVERLAP_DISABLE_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_TMGR_OP2_OVERLAP_DISABLE_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_TMGR_OP2_OVERLAP_DISABLE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_TMGR_OP2_OVERLAP_DISABLE_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_TMGR_OP2_OVERLAP_DISABLE_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_TMGR_OP2_OVERLAP_DISABLE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_TMGR_OP2_OVERLAP_DISABLE_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_MODE_TMGR_OP2_OVERLAP_DISABLE_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_TMGR_OP2_OVERLAP_DISABLE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_MODE_TMGR_OP2_OVERLAP_DISABLE_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_MODE_TMGR_OP2_OVERLAP_DISABLE_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_TMGR_OP2_OVERLAP_DISABLE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_MODE_TMGR_OP2_OVERLAP_DISABLE_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_MODE_TMGR_OP2_OVERLAP_DISABLE_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_TMGR_OP2_OVERLAP_DISABLE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ5_STATION_MODE_TMGR_OP2_OVERLAP_DISABLE_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_MODE_TMGR_OP2_OVERLAP_DISABLE_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_TMGR_OP2_OVERLAP_DISABLE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_TMGR_SERIES_ID_DISABLE_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_TMGR_SERIES_ID_DISABLE_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_TMGR_SERIES_ID_DISABLE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_TMGR_SERIES_ID_DISABLE_EQ5(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_TMGR_SERIES_ID_DISABLE_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_TMGR_SERIES_ID_DISABLE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_TMGR_SERIES_ID_DISABLE_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_MODE_TMGR_SERIES_ID_DISABLE_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_TMGR_SERIES_ID_DISABLE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_MODE_TMGR_SERIES_ID_DISABLE_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_MODE_TMGR_SERIES_ID_DISABLE_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_TMGR_SERIES_ID_DISABLE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_MODE_TMGR_SERIES_ID_DISABLE_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_MODE_TMGR_SERIES_ID_DISABLE_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_TMGR_SERIES_ID_DISABLE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ5_STATION_MODE_TMGR_SERIES_ID_DISABLE_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_MODE_TMGR_SERIES_ID_DISABLE_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_TMGR_SERIES_ID_DISABLE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_TMGR_TOKEN_ID_RANGE_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_TMGR_TOKEN_ID_RANGE_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_TMGR_TOKEN_ID_RANGE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_TMGR_TOKEN_ID_RANGE_EQ5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_TMGR_TOKEN_ID_RANGE_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_TMGR_TOKEN_ID_RANGE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_TMGR_TOKEN_ID_RANGE_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_MODE_TMGR_TOKEN_ID_RANGE_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_TMGR_TOKEN_ID_RANGE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_MODE_TMGR_TOKEN_ID_RANGE_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_MODE_TMGR_TOKEN_ID_RANGE_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_TMGR_TOKEN_ID_RANGE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_MODE_TMGR_TOKEN_ID_RANGE_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_MODE_TMGR_TOKEN_ID_RANGE_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_TMGR_TOKEN_ID_RANGE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ5_STATION_MODE_TMGR_TOKEN_ID_RANGE_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_MODE_TMGR_TOKEN_ID_RANGE_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_TMGR_TOKEN_ID_RANGE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_TMGR_MAX_TLBI_TOKENS_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_TMGR_MAX_TLBI_TOKENS_EQ5,
           PB_COM_SCOM_EQ5_STATION_MODE_TMGR_MAX_TLBI_TOKENS_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_TMGR_MAX_TLBI_TOKENS_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_TMGR_MAX_TLBI_TOKENS_EQ5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_TMGR_MAX_TLBI_TOKENS_EQ5,
           PB_COM_SCOM_EQ5_STATION_MODE_TMGR_MAX_TLBI_TOKENS_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_TMGR_MAX_TLBI_TOKENS_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_MODE_TMGR_MAX_TLBI_TOKENS_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_MODE_TMGR_MAX_TLBI_TOKENS_EQ5,
           PB_COM_SCOM_EQ5_STATION_MODE_TMGR_MAX_TLBI_TOKENS_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_TMGR_MAX_TLBI_TOKENS_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_TMGR_MAX_SLBI_TOKENS_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_TMGR_MAX_SLBI_TOKENS_EQ5,
           PB_COM_SCOM_EQ5_STATION_MODE_TMGR_MAX_SLBI_TOKENS_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_TMGR_MAX_SLBI_TOKENS_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_TMGR_MAX_SLBI_TOKENS_EQ5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_TMGR_MAX_SLBI_TOKENS_EQ5,
           PB_COM_SCOM_EQ5_STATION_MODE_TMGR_MAX_SLBI_TOKENS_EQ5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_TMGR_MAX_SLBI_TOKENS_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_MODE_TMGR_MAX_SLBI_TOKENS_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_MODE_TMGR_MAX_SLBI_TOKENS_EQ5,
           PB_COM_SCOM_EQ5_STATION_MODE_TMGR_MAX_SLBI_TOKENS_EQ5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_TMGR_MAX_SLBI_TOKENS_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_RESET_ERROR_CAPTURE_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_RESET_ERROR_CAPTURE_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_RESET_ERROR_CAPTURE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_RESET_ERROR_CAPTURE_EQ5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ5_STATION_MODE_RESET_ERROR_CAPTURE_EQ5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_RESET_ERROR_CAPTURE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ5_STATION_MODE_RESET_ERROR_CAPTURE_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ5_STATION_MODE_RESET_ERROR_CAPTURE_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_RESET_ERROR_CAPTURE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ5_STATION_MODE_RESET_ERROR_CAPTURE_EQ5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ5_STATION_MODE_RESET_ERROR_CAPTURE_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_RESET_ERROR_CAPTURE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ5_STATION_MODE_RESET_ERROR_CAPTURE_EQ5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ5_STATION_MODE_RESET_ERROR_CAPTURE_EQ5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_RESET_ERROR_CAPTURE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ5_STATION_MODE_RESET_ERROR_CAPTURE_EQ5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ5_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ5_STATION_MODE_RESET_ERROR_CAPTURE_EQ5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ5_STATION_MODE_RESET_ERROR_CAPTURE_EQ5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ6_STATION_CR_ERROR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ6_STATION_CR_ERROR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ6_STATION_CR_ERROR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ6_STATION_CR_ERROR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ6_STATION_CR_ERROR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ6_STATION_CR_ERROR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_CR_ERROR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ6_STATION_CR_ERROR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_EN_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_EN_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_EN_CURR_EQ6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_EN_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_EN_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_EN_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_EN_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_EN_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_EN_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_EN_CURR_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_EN_CURR_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_EN_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_EN_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_EN_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_EN_CURR_EQ6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_EN_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_EN_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_EN_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_EN_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_EN_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_EN_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_EN_CURR_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_EN_CURR_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_EN_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_EN_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_EN_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_EN_CURR_EQ6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_EN_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_EN_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_EN_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_EN_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_EN_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_EN_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_EN_CURR_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_EN_CURR_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_EN_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_EN_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_EN_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_EN_CURR_EQ6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_EN_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_EN_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_EN_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_EN_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_EN_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_EN_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_EN_CURR_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_EN_CURR_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_EN_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_EN_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_EN_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_EN_CURR_EQ6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_EN_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_EN_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_EN_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_EN_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_EN_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_EN_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_EN_CURR_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_EN_CURR_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_EN_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_EN_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_EN_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_EN_CURR_EQ6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_EN_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_EN_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_EN_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_EN_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_EN_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_EN_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_EN_CURR_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_EN_CURR_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_EN_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_EN_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_EN_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_EN_CURR_EQ6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_EN_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_EN_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_EN_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_EN_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_EN_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_EN_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_EN_CURR_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_EN_CURR_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_EN_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_EN_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_EN_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_EN_CURR_EQ6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_EN_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_EN_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_EN_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_EN_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_EN_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_EN_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_EN_CURR_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_EN_CURR_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_EN_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_EN_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_ADDR_DIS_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_ADDR_DIS_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_ADDR_DIS_CURR_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_ADDR_DIS_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_ADDR_DIS_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_ADDR_DIS_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_ADDR_DIS_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_ADDR_DIS_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_ADDR_DIS_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_ADDR_DIS_CURR_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_ADDR_DIS_CURR_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_ADDR_DIS_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_ADDR_DIS_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_ADDR_DIS_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_ADDR_DIS_CURR_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_ADDR_DIS_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_ADDR_DIS_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_ADDR_DIS_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_ADDR_DIS_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_ADDR_DIS_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_ADDR_DIS_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_ADDR_DIS_CURR_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_ADDR_DIS_CURR_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_ADDR_DIS_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_ADDR_DIS_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_ADDR_DIS_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_ADDR_DIS_CURR_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_ADDR_DIS_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_ADDR_DIS_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_ADDR_DIS_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_ADDR_DIS_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_ADDR_DIS_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_ADDR_DIS_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_ADDR_DIS_CURR_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_ADDR_DIS_CURR_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_ADDR_DIS_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_ADDR_DIS_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_ADDR_DIS_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_ADDR_DIS_CURR_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_ADDR_DIS_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_ADDR_DIS_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_ADDR_DIS_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_ADDR_DIS_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_ADDR_DIS_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_ADDR_DIS_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_ADDR_DIS_CURR_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_ADDR_DIS_CURR_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_ADDR_DIS_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_ADDR_DIS_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_ADDR_DIS_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_ADDR_DIS_CURR_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_ADDR_DIS_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_ADDR_DIS_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_ADDR_DIS_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_ADDR_DIS_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_ADDR_DIS_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_ADDR_DIS_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_ADDR_DIS_CURR_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_ADDR_DIS_CURR_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_ADDR_DIS_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_ADDR_DIS_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_ADDR_DIS_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_ADDR_DIS_CURR_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_ADDR_DIS_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_ADDR_DIS_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_ADDR_DIS_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_ADDR_DIS_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_ADDR_DIS_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_ADDR_DIS_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_ADDR_DIS_CURR_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_ADDR_DIS_CURR_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_ADDR_DIS_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_ADDR_DIS_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_ADDR_DIS_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_ADDR_DIS_CURR_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_ADDR_DIS_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_ADDR_DIS_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_ADDR_DIS_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_ADDR_DIS_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_ADDR_DIS_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_ADDR_DIS_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_ADDR_DIS_CURR_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_ADDR_DIS_CURR_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_ADDR_DIS_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_ADDR_DIS_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_ADDR_DIS_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_ADDR_DIS_CURR_EQ6(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_ADDR_DIS_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_ADDR_DIS_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_ADDR_DIS_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_ADDR_DIS_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_ADDR_DIS_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_ADDR_DIS_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_ADDR_DIS_CURR_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_ADDR_DIS_CURR_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_ADDR_DIS_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_ADDR_DIS_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_MODE_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_MODE_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_MODE_CURR_EQ6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_MODE_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_MODE_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_MODE_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_MODE_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_MODE_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_MODE_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_MODE_CURR_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_MODE_CURR_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_MODE_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_ID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_ID_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_ID_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_ID_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_ID_CURR_EQ6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_ID_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_ID_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_ID_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_ID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_ID_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_ID_CURR_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_0_ID_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_MODE_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_MODE_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_MODE_CURR_EQ6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_MODE_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_MODE_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_MODE_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_MODE_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_MODE_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_MODE_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_MODE_CURR_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_MODE_CURR_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_MODE_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_ID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_ID_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_ID_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_ID_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_ID_CURR_EQ6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_ID_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_ID_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_ID_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_ID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_ID_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_ID_CURR_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_1_ID_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_MODE_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_MODE_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_MODE_CURR_EQ6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_MODE_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_MODE_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_MODE_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_MODE_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_MODE_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_MODE_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_MODE_CURR_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_MODE_CURR_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_MODE_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_ID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_ID_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_ID_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_ID_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_ID_CURR_EQ6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_ID_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_ID_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_ID_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_ID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_ID_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_ID_CURR_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_2_ID_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_MODE_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_MODE_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_MODE_CURR_EQ6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_MODE_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_MODE_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_MODE_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_MODE_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_MODE_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_MODE_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_MODE_CURR_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_MODE_CURR_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_MODE_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_ID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_ID_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_ID_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_ID_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_ID_CURR_EQ6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_ID_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_ID_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_ID_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_ID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_ID_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_ID_CURR_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_3_ID_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_MODE_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_MODE_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_MODE_CURR_EQ6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_MODE_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_MODE_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_MODE_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_MODE_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_MODE_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_MODE_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_MODE_CURR_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_MODE_CURR_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_MODE_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_ID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_ID_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_ID_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_ID_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_ID_CURR_EQ6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_ID_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_ID_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_ID_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_ID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_ID_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_ID_CURR_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_4_ID_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_MODE_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_MODE_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_MODE_CURR_EQ6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_MODE_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_MODE_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_MODE_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_MODE_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_MODE_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_MODE_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_MODE_CURR_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_MODE_CURR_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_MODE_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_ID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_ID_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_ID_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_ID_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_ID_CURR_EQ6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_ID_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_ID_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_ID_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_ID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_ID_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_ID_CURR_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_5_ID_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_MODE_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_MODE_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_MODE_CURR_EQ6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_MODE_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_MODE_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_MODE_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_MODE_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_MODE_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_MODE_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_MODE_CURR_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_MODE_CURR_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_MODE_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_ID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_ID_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_ID_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_ID_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_ID_CURR_EQ6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_ID_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_ID_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_ID_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_ID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_ID_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_ID_CURR_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_6_ID_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_MODE_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_MODE_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_MODE_CURR_EQ6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_MODE_CURR_EQ6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_MODE_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.setBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_MODE_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_MODE_CURR_EQ6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.clearBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_MODE_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_MODE_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_MODE_CURR_EQ6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_MODE_CURR_EQ6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.getBit<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_MODE_CURR_EQ6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_MODE_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_ID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_ID_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_ID_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_ID_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_ID_CURR_EQ6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_ID_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_ID_CURR_EQ6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_ID_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_ID_CURR_EQ6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_ID_CURR_EQ6,
           PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_ID_CURR_EQ6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ6_STATION_HP_MODE2_CURR_7_ID_CURR_EQ6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ7_EXTFIR_ACTION0_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ7_EXTFIR_ACTION0_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ7_EXTFIR_ACTION0_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ7_EXTFIR_ACTION0_REG;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ7_EXTFIR_ACTION0_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ7_EXTFIR_ACTION0_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_EXTFIR_ACTION0_REG));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ7_EXTFIR_ACTION0_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_EXTFIR_ACTION0_REG_EXTFIR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_EXTFIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_EXTFIR_ACTION0_REG_EXTFIR_ACTION0,
           PB_COM_SCOM_EQ7_EXTFIR_ACTION0_REG_EXTFIR_ACTION0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_EXTFIR_ACTION0_REG_EXTFIR_ACTION0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_EXTFIR_ACTION0_REG_EXTFIR_ACTION0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_EXTFIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_EXTFIR_ACTION0_REG_EXTFIR_ACTION0,
           PB_COM_SCOM_EQ7_EXTFIR_ACTION0_REG_EXTFIR_ACTION0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_EXTFIR_ACTION0_REG_EXTFIR_ACTION0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_EXTFIR_ACTION0_REG_EXTFIR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_EXTFIR_ACTION0_REG));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_EXTFIR_ACTION0_REG_EXTFIR_ACTION0,
           PB_COM_SCOM_EQ7_EXTFIR_ACTION0_REG_EXTFIR_ACTION0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_EXTFIR_ACTION0_REG_EXTFIR_ACTION0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_EQ7_EXTFIR_ACTION1_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ7_EXTFIR_ACTION1_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_EQ7_EXTFIR_ACTION1_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_EQ7_EXTFIR_ACTION1_REG;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_EQ7_EXTFIR_ACTION1_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_EQ7_EXTFIR_ACTION1_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_EXTFIR_ACTION1_REG));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_EQ7_EXTFIR_ACTION1_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_EXTFIR_ACTION1_REG_EXTFIR_ACTION1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_EXTFIR_ACTION1_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_EXTFIR_ACTION1_REG_EXTFIR_ACTION1,
           PB_COM_SCOM_EQ7_EXTFIR_ACTION1_REG_EXTFIR_ACTION1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_EXTFIR_ACTION1_REG_EXTFIR_ACTION1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_EQ7_EXTFIR_ACTION1_REG_EXTFIR_ACTION1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_EXTFIR_ACTION1_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_EQ7_EXTFIR_ACTION1_REG_EXTFIR_ACTION1,
           PB_COM_SCOM_EQ7_EXTFIR_ACTION1_REG_EXTFIR_ACTION1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_EXTFIR_ACTION1_REG_EXTFIR_ACTION1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_EQ7_EXTFIR_ACTION1_REG_EXTFIR_ACTION1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_EQ7_EXTFIR_ACTION1_REG));
#endif
    return i_data.extractToRight<PB_COM_SCOM_EQ7_EXTFIR_ACTION1_REG_EXTFIR_ACTION1,
           PB_COM_SCOM_EQ7_EXTFIR_ACTION1_REG_EXTFIR_ACTION1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_EQ7_EXTFIR_ACTION1_REG_EXTFIR_ACTION1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_0_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_0_FIR_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_0_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_0_FIR_ERR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_0_FIR_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_0_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_0_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_0_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_0_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_0_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_0_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_0_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_0_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_0_FIR_ERR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_0_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_0_FIR_ERR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_0_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_0_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_1_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_1_FIR_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_1_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_1_FIR_ERR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_1_FIR_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_1_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_1_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_1_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_1_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_1_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_1_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_1_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_1_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_1_FIR_ERR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_1_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_1_FIR_ERR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_1_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_1_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_2_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_2_FIR_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_2_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_2_FIR_ERR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_2_FIR_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_2_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_2_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_2_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_2_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_2_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_2_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_2_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_2_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_2_FIR_ERR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_2_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_2_FIR_ERR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_2_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_2_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_3_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_3_FIR_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_3_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_3_FIR_ERR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_3_FIR_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_3_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_3_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_3_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_3_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_3_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_3_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_3_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_3_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_3_FIR_ERR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_3_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_3_FIR_ERR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_3_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_3_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_4_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_4_FIR_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_4_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_4_FIR_ERR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_4_FIR_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_4_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_4_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_4_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_4_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_4_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_4_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_4_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_4_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_4_FIR_ERR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_4_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_4_FIR_ERR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_4_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_4_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_5_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_5_FIR_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_5_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_5_FIR_ERR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_5_FIR_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_5_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_5_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_5_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_5_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_5_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_5_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_5_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_5_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_5_FIR_ERR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_5_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_5_FIR_ERR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_5_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_5_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_6_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_6_FIR_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_6_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_6_FIR_ERR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_6_FIR_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_6_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_6_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_6_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_6_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_6_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_6_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_6_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_6_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_6_FIR_ERR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_6_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_6_FIR_ERR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_6_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_6_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_7_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_7_FIR_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_7_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_7_FIR_ERR_MASK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_7_FIR_ERR_MASK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_7_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_7_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_7_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_7_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_7_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_7_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_7_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_7_FIR_ERR_MASK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_7_FIR_ERR_MASK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_7_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES1_EXTFIR_MASK_REG_7_FIR_ERR_MASK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES1_EXTFIR_MASK_REG_RW, PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_AND,
                           PB_COM_SCOM_ES1_EXTFIR_MASK_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES1_EXTFIR_MASK_REG_7_FIR_ERR_MASK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES1_EXTFIR_MASK_REG_7_FIR_ERR_MASK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_MASTER_CHIP_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_MASTER_CHIP_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_MASTER_CHIP_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_MASTER_CHIP_NEXT_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_MASTER_CHIP_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_MASTER_CHIP_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_MASTER_CHIP_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_MASTER_CHIP_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_MASTER_CHIP_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_MASTER_CHIP_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_MASTER_CHIP_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_MASTER_CHIP_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_MASTER_CHIP_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_MASTER_CHIP_NEXT_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_MASTER_CHIP_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_MASTER_CHIP_NEXT_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_MASTER_CHIP_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_MASTER_CHIP_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_TM_MASTER_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_TM_MASTER_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_TM_MASTER_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_TM_MASTER_NEXT_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_TM_MASTER_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_TM_MASTER_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_TM_MASTER_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_TM_MASTER_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_TM_MASTER_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_TM_MASTER_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_TM_MASTER_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_TM_MASTER_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_TM_MASTER_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_TM_MASTER_NEXT_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_TM_MASTER_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_TM_MASTER_NEXT_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_TM_MASTER_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_TM_MASTER_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_CHG_RATE_GP_MASTER_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_CHG_RATE_GP_MASTER_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_CHG_RATE_GP_MASTER_NEXT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_CHG_RATE_GP_MASTER_NEXT_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_CHG_RATE_GP_MASTER_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_CHG_RATE_GP_MASTER_NEXT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_CHG_RATE_GP_MASTER_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_CHG_RATE_GP_MASTER_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_CHG_RATE_GP_MASTER_NEXT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_CHG_RATE_GP_MASTER_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_CHG_RATE_GP_MASTER_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_CHG_RATE_GP_MASTER_NEXT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_CHG_RATE_GP_MASTER_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_CHG_RATE_GP_MASTER_NEXT_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_CHG_RATE_GP_MASTER_NEXT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_CHG_RATE_GP_MASTER_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_CHG_RATE_GP_MASTER_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_CHG_RATE_GP_MASTER_NEXT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_CHG_RATE_SP_MASTER_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_CHG_RATE_SP_MASTER_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_CHG_RATE_SP_MASTER_NEXT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_CHG_RATE_SP_MASTER_NEXT_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_CHG_RATE_SP_MASTER_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_CHG_RATE_SP_MASTER_NEXT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_CHG_RATE_SP_MASTER_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_CHG_RATE_SP_MASTER_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_CHG_RATE_SP_MASTER_NEXT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_CHG_RATE_SP_MASTER_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_CHG_RATE_SP_MASTER_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_CHG_RATE_SP_MASTER_NEXT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_CHG_RATE_SP_MASTER_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_CHG_RATE_SP_MASTER_NEXT_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_CHG_RATE_SP_MASTER_NEXT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_CHG_RATE_SP_MASTER_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_CHG_RATE_SP_MASTER_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_CHG_RATE_SP_MASTER_NEXT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_NP_CMD_RATE_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_NP_CMD_RATE_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_NP_CMD_RATE_NEXT_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_NP_CMD_RATE_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_NP_CMD_RATE_NEXT_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_NP_CMD_RATE_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_NP_CMD_RATE_NEXT_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_NP_CMD_RATE_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_NP_CMD_RATE_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_NP_CMD_RATE_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_NP_CMD_RATE_NEXT_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_NP_CMD_RATE_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_AGGREGATE_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_AGGREGATE_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_AGGREGATE_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_AGGREGATE_NEXT_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_AGGREGATE_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_AGGREGATE_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_AGGREGATE_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_AGGREGATE_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_AGGREGATE_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_AGGREGATE_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_AGGREGATE_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_AGGREGATE_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_AGGREGATE_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_AGGREGATE_NEXT_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_AGGREGATE_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_AGGREGATE_NEXT_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_AGGREGATE_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_AGGREGATE_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_INDIRECT_EN_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_INDIRECT_EN_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_INDIRECT_EN_NEXT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_INDIRECT_EN_NEXT_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_INDIRECT_EN_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_INDIRECT_EN_NEXT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_INDIRECT_EN_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_INDIRECT_EN_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_INDIRECT_EN_NEXT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_INDIRECT_EN_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_INDIRECT_EN_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_INDIRECT_EN_NEXT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_INDIRECT_EN_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_INDIRECT_EN_NEXT_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_INDIRECT_EN_NEXT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_INDIRECT_EN_NEXT_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_INDIRECT_EN_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_INDIRECT_EN_NEXT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_GATHER_ENABLE_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_GATHER_ENABLE_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_GATHER_ENABLE_NEXT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_GATHER_ENABLE_NEXT_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_GATHER_ENABLE_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_GATHER_ENABLE_NEXT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_GATHER_ENABLE_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_GATHER_ENABLE_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_GATHER_ENABLE_NEXT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_GATHER_ENABLE_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_GATHER_ENABLE_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_GATHER_ENABLE_NEXT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_GATHER_ENABLE_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_GATHER_ENABLE_NEXT_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_GATHER_ENABLE_NEXT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_GATHER_ENABLE_NEXT_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_GATHER_ENABLE_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_G_GATHER_ENABLE_NEXT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_MIN_G_CMD_RATE_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_MIN_G_CMD_RATE_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_MIN_G_CMD_RATE_NEXT_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_MIN_G_CMD_RATE_NEXT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_MIN_G_CMD_RATE_NEXT_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_MIN_G_CMD_RATE_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_MIN_G_CMD_RATE_NEXT_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_MIN_G_CMD_RATE_NEXT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_MIN_G_CMD_RATE_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_MIN_G_CMD_RATE_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_MIN_G_CMD_RATE_NEXT_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_MIN_G_CMD_RATE_NEXT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_AGGREGATE_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_AGGREGATE_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_AGGREGATE_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_AGGREGATE_NEXT_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_AGGREGATE_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_AGGREGATE_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_AGGREGATE_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_AGGREGATE_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_AGGREGATE_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_AGGREGATE_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_AGGREGATE_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_AGGREGATE_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_AGGREGATE_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_AGGREGATE_NEXT_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_AGGREGATE_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_AGGREGATE_NEXT_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_AGGREGATE_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_AGGREGATE_NEXT_ES2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_INDIRECT_EN_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_INDIRECT_EN_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_INDIRECT_EN_NEXT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_INDIRECT_EN_NEXT_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_INDIRECT_EN_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_INDIRECT_EN_NEXT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_INDIRECT_EN_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_INDIRECT_EN_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_INDIRECT_EN_NEXT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_INDIRECT_EN_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_INDIRECT_EN_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_INDIRECT_EN_NEXT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_INDIRECT_EN_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_INDIRECT_EN_NEXT_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_INDIRECT_EN_NEXT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_INDIRECT_EN_NEXT_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_INDIRECT_EN_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_INDIRECT_EN_NEXT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_GATHER_ENABLE_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_GATHER_ENABLE_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_GATHER_ENABLE_NEXT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_GATHER_ENABLE_NEXT_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_GATHER_ENABLE_NEXT_ES2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_GATHER_ENABLE_NEXT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_GATHER_ENABLE_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.setBit<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_GATHER_ENABLE_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_GATHER_ENABLE_NEXT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_GATHER_ENABLE_NEXT_ES2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_GATHER_ENABLE_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_GATHER_ENABLE_NEXT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_GATHER_ENABLE_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_GATHER_ENABLE_NEXT_ES2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_GATHER_ENABLE_NEXT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_GATHER_ENABLE_NEXT_ES2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.getBit<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_GATHER_ENABLE_NEXT_ES2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_R_GATHER_ENABLE_NEXT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_MIN_R_CMD_RATE_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_MIN_R_CMD_RATE_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_MIN_R_CMD_RATE_NEXT_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_MIN_R_CMD_RATE_NEXT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_MIN_R_CMD_RATE_NEXT_ES2(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_MIN_R_CMD_RATE_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_MIN_R_CMD_RATE_NEXT_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_MIN_R_CMD_RATE_NEXT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_MIN_R_CMD_RATE_NEXT_ES2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_MIN_R_CMD_RATE_NEXT_ES2,
           PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_MIN_R_CMD_RATE_NEXT_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_HP_MODE1_NEXT_MIN_R_CMD_RATE_NEXT_ES2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES2_STATION_SP_CMD_RATE(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES2_STATION_SP_CMD_RATE;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES2_STATION_SP_CMD_RATE(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES2_STATION_SP_CMD_RATE;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES2_STATION_SP_CMD_RATE, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES2_STATION_SP_CMD_RATE(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_SP_CMD_RATE));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES2_STATION_SP_CMD_RATE, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_0_ES2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_0_ES2,
           PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_0_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_0_ES2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_0_ES2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_0_ES2,
           PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_0_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_0_ES2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_0_ES2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_0_ES2,
           PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_0_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_0_ES2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_1_ES2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_1_ES2,
           PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_1_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_1_ES2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_1_ES2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_1_ES2,
           PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_1_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_1_ES2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_1_ES2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_1_ES2,
           PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_1_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_1_ES2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_2_ES2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_2_ES2,
           PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_2_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_2_ES2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_2_ES2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_2_ES2,
           PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_2_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_2_ES2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_2_ES2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_2_ES2,
           PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_2_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_2_ES2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_3_ES2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_3_ES2,
           PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_3_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_3_ES2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_3_ES2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_3_ES2,
           PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_3_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_3_ES2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_3_ES2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_3_ES2,
           PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_3_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_3_ES2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_4_ES2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_4_ES2,
           PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_4_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_4_ES2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_4_ES2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_4_ES2,
           PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_4_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_4_ES2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_4_ES2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_4_ES2,
           PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_4_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_4_ES2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_5_ES2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_5_ES2,
           PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_5_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_5_ES2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_5_ES2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_5_ES2,
           PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_5_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_5_ES2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_5_ES2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_5_ES2,
           PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_5_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_5_ES2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_6_ES2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_6_ES2,
           PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_6_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_6_ES2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_6_ES2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_6_ES2,
           PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_6_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_6_ES2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_6_ES2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_6_ES2,
           PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_6_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_6_ES2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_7_ES2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_7_ES2,
           PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_7_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_7_ES2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_7_ES2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_7_ES2,
           PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_7_ES2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_7_ES2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_7_ES2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES2_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_7_ES2,
           PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_7_ES2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES2_STATION_SP_CMD_RATE_7_ES2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES3_EXTFIR_REG_RW(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES3_EXTFIR_REG_RW;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES3_EXTFIR_REG_RW(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES3_EXTFIR_REG_RW;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES3_EXTFIR_REG_RW, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES3_EXTFIR_REG_RW(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES3_EXTFIR_REG_RW, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_EXTFIR_REG_0_FIR_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_EXTFIR_REG_0_FIR_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_0_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_EXTFIR_REG_0_FIR_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_EXTFIR_REG_0_FIR_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_0_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_EXTFIR_REG_0_FIR_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_EXTFIR_REG_0_FIR_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_0_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_EXTFIR_REG_0_FIR_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_EXTFIR_REG_0_FIR_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_0_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_EXTFIR_REG_0_FIR_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_EXTFIR_REG_0_FIR_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_0_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_EXTFIR_REG_0_FIR_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_EXTFIR_REG_0_FIR_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_0_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_EXTFIR_REG_1_FIR_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_EXTFIR_REG_1_FIR_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_1_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_EXTFIR_REG_1_FIR_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_EXTFIR_REG_1_FIR_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_1_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_EXTFIR_REG_1_FIR_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_EXTFIR_REG_1_FIR_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_1_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_EXTFIR_REG_1_FIR_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_EXTFIR_REG_1_FIR_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_1_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_EXTFIR_REG_1_FIR_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_EXTFIR_REG_1_FIR_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_1_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_EXTFIR_REG_1_FIR_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_EXTFIR_REG_1_FIR_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_1_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_EXTFIR_REG_2_FIR_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_EXTFIR_REG_2_FIR_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_2_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_EXTFIR_REG_2_FIR_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_EXTFIR_REG_2_FIR_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_2_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_EXTFIR_REG_2_FIR_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_EXTFIR_REG_2_FIR_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_2_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_EXTFIR_REG_2_FIR_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_EXTFIR_REG_2_FIR_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_2_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_EXTFIR_REG_2_FIR_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_EXTFIR_REG_2_FIR_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_2_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_EXTFIR_REG_2_FIR_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_EXTFIR_REG_2_FIR_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_2_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_EXTFIR_REG_3_FIR_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_EXTFIR_REG_3_FIR_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_3_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_EXTFIR_REG_3_FIR_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_EXTFIR_REG_3_FIR_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_3_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_EXTFIR_REG_3_FIR_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_EXTFIR_REG_3_FIR_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_3_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_EXTFIR_REG_3_FIR_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_EXTFIR_REG_3_FIR_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_3_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_EXTFIR_REG_3_FIR_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_EXTFIR_REG_3_FIR_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_3_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_EXTFIR_REG_3_FIR_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_EXTFIR_REG_3_FIR_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_3_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_EXTFIR_REG_4_FIR_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_EXTFIR_REG_4_FIR_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_4_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_EXTFIR_REG_4_FIR_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_EXTFIR_REG_4_FIR_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_4_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_EXTFIR_REG_4_FIR_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_EXTFIR_REG_4_FIR_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_4_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_EXTFIR_REG_4_FIR_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_EXTFIR_REG_4_FIR_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_4_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_EXTFIR_REG_4_FIR_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_EXTFIR_REG_4_FIR_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_4_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_EXTFIR_REG_4_FIR_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_EXTFIR_REG_4_FIR_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_4_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_EXTFIR_REG_5_FIR_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_EXTFIR_REG_5_FIR_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_5_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_EXTFIR_REG_5_FIR_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_EXTFIR_REG_5_FIR_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_5_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_EXTFIR_REG_5_FIR_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_EXTFIR_REG_5_FIR_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_5_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_EXTFIR_REG_5_FIR_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_EXTFIR_REG_5_FIR_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_5_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_EXTFIR_REG_5_FIR_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_EXTFIR_REG_5_FIR_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_5_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_EXTFIR_REG_5_FIR_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_EXTFIR_REG_5_FIR_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_5_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_EXTFIR_REG_6_FIR_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_EXTFIR_REG_6_FIR_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_6_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_EXTFIR_REG_6_FIR_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_EXTFIR_REG_6_FIR_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_6_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_EXTFIR_REG_6_FIR_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_EXTFIR_REG_6_FIR_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_6_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_EXTFIR_REG_6_FIR_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_EXTFIR_REG_6_FIR_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_6_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_EXTFIR_REG_6_FIR_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_EXTFIR_REG_6_FIR_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_6_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_EXTFIR_REG_6_FIR_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_EXTFIR_REG_6_FIR_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_6_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_EXTFIR_REG_7_FIR_ERR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_EXTFIR_REG_7_FIR_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_7_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_EXTFIR_REG_7_FIR_ERR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_EXTFIR_REG_7_FIR_ERR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_7_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_EXTFIR_REG_7_FIR_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return o_data.setBit<PB_COM_SCOM_ES3_EXTFIR_REG_7_FIR_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_7_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES3_EXTFIR_REG_7_FIR_ERR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES3_EXTFIR_REG_7_FIR_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_7_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_EXTFIR_REG_7_FIR_ERR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_EXTFIR_REG_7_FIR_ERR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_7_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES3_EXTFIR_REG_7_FIR_ERR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_EXTFIR_REG_RW, PB_COM_SCOM_ES3_EXTFIR_REG_WO_AND,
                           PB_COM_SCOM_ES3_EXTFIR_REG_WO_OR));
#endif
    return i_data.getBit<PB_COM_SCOM_ES3_EXTFIR_REG_7_FIR_ERR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_EXTFIR_REG_7_FIR_ERR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES3_STATION_FIR_ACTION0_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES3_STATION_FIR_ACTION0_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES3_STATION_FIR_ACTION0_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES3_STATION_FIR_ACTION0_REG;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES3_STATION_FIR_ACTION0_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES3_STATION_FIR_ACTION0_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_FIR_ACTION0_REG));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES3_STATION_FIR_ACTION0_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0,
           PB_COM_SCOM_ES3_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0,
           PB_COM_SCOM_ES3_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_FIR_ACTION0_REG));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0,
           PB_COM_SCOM_ES3_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_FIR_ACTION0_REG_PB_STATION_FIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES3_STATION_FIR_ACTION1_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES3_STATION_FIR_ACTION1_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES3_STATION_FIR_ACTION1_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES3_STATION_FIR_ACTION1_REG;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES3_STATION_FIR_ACTION1_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES3_STATION_FIR_ACTION1_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_FIR_ACTION1_REG));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES3_STATION_FIR_ACTION1_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_FIR_ACTION1_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1,
           PB_COM_SCOM_ES3_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES3_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_FIR_ACTION1_REG));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES3_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1,
           PB_COM_SCOM_ES3_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES3_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES3_STATION_FIR_ACTION1_REG));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES3_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1,
           PB_COM_SCOM_ES3_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES3_STATION_FIR_ACTION1_REG_PB_STATION_FIR_ACTION1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES4_STATION_MODE(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES4_STATION_MODE;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES4_STATION_MODE(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES4_STATION_MODE;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES4_STATION_MODE, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES4_STATION_MODE(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES4_STATION_MODE, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_HOP_MODE_ES4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_HOP_MODE_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_HOP_MODE_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_HOP_MODE_ES4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_HOP_MODE_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_HOP_MODE_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_HOP_MODE_ES4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_MODE_HOP_MODE_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_HOP_MODE_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_MODE_HOP_MODE_ES4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_MODE_HOP_MODE_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_HOP_MODE_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_MODE_HOP_MODE_ES4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_MODE_HOP_MODE_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_HOP_MODE_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES4_STATION_MODE_HOP_MODE_ES4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_MODE_HOP_MODE_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_HOP_MODE_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_PUMP_MODE_ES4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_PUMP_MODE_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_PUMP_MODE_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_PUMP_MODE_ES4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_PUMP_MODE_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_PUMP_MODE_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_PUMP_MODE_ES4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_MODE_PUMP_MODE_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_PUMP_MODE_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_MODE_PUMP_MODE_ES4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_MODE_PUMP_MODE_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_PUMP_MODE_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_MODE_PUMP_MODE_ES4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_MODE_PUMP_MODE_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_PUMP_MODE_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES4_STATION_MODE_PUMP_MODE_ES4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_MODE_PUMP_MODE_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_PUMP_MODE_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_REPRO_MODE_ES4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_REPRO_MODE_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_REPRO_MODE_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_REPRO_MODE_ES4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_REPRO_MODE_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_REPRO_MODE_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_REPRO_MODE_ES4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_MODE_REPRO_MODE_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_REPRO_MODE_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_MODE_REPRO_MODE_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_MODE_REPRO_MODE_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_REPRO_MODE_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_MODE_REPRO_MODE_ES4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_MODE_REPRO_MODE_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_REPRO_MODE_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES4_STATION_MODE_REPRO_MODE_ES4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_MODE_REPRO_MODE_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_REPRO_MODE_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_SL_DOMAIN_SIZE_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_SL_DOMAIN_SIZE_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_SL_DOMAIN_SIZE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_SL_DOMAIN_SIZE_ES4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_SL_DOMAIN_SIZE_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_SL_DOMAIN_SIZE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_SL_DOMAIN_SIZE_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_MODE_SL_DOMAIN_SIZE_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_SL_DOMAIN_SIZE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_MODE_SL_DOMAIN_SIZE_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_MODE_SL_DOMAIN_SIZE_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_SL_DOMAIN_SIZE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_MODE_SL_DOMAIN_SIZE_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_MODE_SL_DOMAIN_SIZE_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_SL_DOMAIN_SIZE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES4_STATION_MODE_SL_DOMAIN_SIZE_ES4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_MODE_SL_DOMAIN_SIZE_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_SL_DOMAIN_SIZE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_REQ_GATHER_ENABLE_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_REQ_GATHER_ENABLE_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_REQ_GATHER_ENABLE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_REQ_GATHER_ENABLE_ES4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_REQ_GATHER_ENABLE_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_REQ_GATHER_ENABLE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_REQ_GATHER_ENABLE_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_MODE_REQ_GATHER_ENABLE_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_REQ_GATHER_ENABLE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_MODE_REQ_GATHER_ENABLE_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_MODE_REQ_GATHER_ENABLE_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_REQ_GATHER_ENABLE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_MODE_REQ_GATHER_ENABLE_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_MODE_REQ_GATHER_ENABLE_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_REQ_GATHER_ENABLE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES4_STATION_MODE_REQ_GATHER_ENABLE_ES4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_MODE_REQ_GATHER_ENABLE_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_REQ_GATHER_ENABLE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_NHTM_EVENT_COMP_EN_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_NHTM_EVENT_COMP_EN_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_NHTM_EVENT_COMP_EN_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_NHTM_EVENT_COMP_EN_ES4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_NHTM_EVENT_COMP_EN_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_NHTM_EVENT_COMP_EN_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_NHTM_EVENT_COMP_EN_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_MODE_NHTM_EVENT_COMP_EN_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_NHTM_EVENT_COMP_EN_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_MODE_NHTM_EVENT_COMP_EN_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_MODE_NHTM_EVENT_COMP_EN_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_NHTM_EVENT_COMP_EN_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_MODE_NHTM_EVENT_COMP_EN_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_MODE_NHTM_EVENT_COMP_EN_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_NHTM_EVENT_COMP_EN_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES4_STATION_MODE_NHTM_EVENT_COMP_EN_ES4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_MODE_NHTM_EVENT_COMP_EN_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_NHTM_EVENT_COMP_EN_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_SWITCH_OPTION_AB_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_SWITCH_OPTION_AB_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_SWITCH_OPTION_AB_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_SWITCH_OPTION_AB_ES4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_SWITCH_OPTION_AB_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_SWITCH_OPTION_AB_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_SWITCH_OPTION_AB_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_MODE_SWITCH_OPTION_AB_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_SWITCH_OPTION_AB_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_MODE_SWITCH_OPTION_AB_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_MODE_SWITCH_OPTION_AB_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_SWITCH_OPTION_AB_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_MODE_SWITCH_OPTION_AB_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_MODE_SWITCH_OPTION_AB_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_SWITCH_OPTION_AB_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES4_STATION_MODE_SWITCH_OPTION_AB_ES4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_MODE_SWITCH_OPTION_AB_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_SWITCH_OPTION_AB_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_SW_AB_WAIT_ES4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_SW_AB_WAIT_ES4,
           PB_COM_SCOM_ES4_STATION_MODE_SW_AB_WAIT_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_SW_AB_WAIT_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_SW_AB_WAIT_ES4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_SW_AB_WAIT_ES4,
           PB_COM_SCOM_ES4_STATION_MODE_SW_AB_WAIT_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_SW_AB_WAIT_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_MODE_SW_AB_WAIT_ES4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_MODE_SW_AB_WAIT_ES4,
           PB_COM_SCOM_ES4_STATION_MODE_SW_AB_WAIT_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_SW_AB_WAIT_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_SP_HW_MARK_ES4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_SP_HW_MARK_ES4,
           PB_COM_SCOM_ES4_STATION_MODE_SP_HW_MARK_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_SP_HW_MARK_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_SP_HW_MARK_ES4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_SP_HW_MARK_ES4,
           PB_COM_SCOM_ES4_STATION_MODE_SP_HW_MARK_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_SP_HW_MARK_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_MODE_SP_HW_MARK_ES4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_MODE_SP_HW_MARK_ES4,
           PB_COM_SCOM_ES4_STATION_MODE_SP_HW_MARK_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_SP_HW_MARK_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_GP_HW_MARK_ES4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_GP_HW_MARK_ES4,
           PB_COM_SCOM_ES4_STATION_MODE_GP_HW_MARK_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_GP_HW_MARK_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_GP_HW_MARK_ES4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_GP_HW_MARK_ES4,
           PB_COM_SCOM_ES4_STATION_MODE_GP_HW_MARK_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_GP_HW_MARK_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_MODE_GP_HW_MARK_ES4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_MODE_GP_HW_MARK_ES4,
           PB_COM_SCOM_ES4_STATION_MODE_GP_HW_MARK_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_GP_HW_MARK_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_NP_HW_MARK_ES4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_NP_HW_MARK_ES4,
           PB_COM_SCOM_ES4_STATION_MODE_NP_HW_MARK_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_NP_HW_MARK_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_NP_HW_MARK_ES4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_NP_HW_MARK_ES4,
           PB_COM_SCOM_ES4_STATION_MODE_NP_HW_MARK_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_NP_HW_MARK_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_MODE_NP_HW_MARK_ES4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_MODE_NP_HW_MARK_ES4,
           PB_COM_SCOM_ES4_STATION_MODE_NP_HW_MARK_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_NP_HW_MARK_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_MCA_RATIO_OVERRIDE_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_MCA_RATIO_OVERRIDE_ES4,
           PB_COM_SCOM_ES4_STATION_MODE_MCA_RATIO_OVERRIDE_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_MCA_RATIO_OVERRIDE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_MCA_RATIO_OVERRIDE_ES4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_MCA_RATIO_OVERRIDE_ES4,
           PB_COM_SCOM_ES4_STATION_MODE_MCA_RATIO_OVERRIDE_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_MCA_RATIO_OVERRIDE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_MODE_MCA_RATIO_OVERRIDE_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_MODE_MCA_RATIO_OVERRIDE_ES4,
           PB_COM_SCOM_ES4_STATION_MODE_MCA_RATIO_OVERRIDE_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_MCA_RATIO_OVERRIDE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_MCA_RATIO_SEL_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_MCA_RATIO_SEL_ES4,
           PB_COM_SCOM_ES4_STATION_MODE_MCA_RATIO_SEL_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_MCA_RATIO_SEL_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_MCA_RATIO_SEL_ES4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_MCA_RATIO_SEL_ES4,
           PB_COM_SCOM_ES4_STATION_MODE_MCA_RATIO_SEL_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_MCA_RATIO_SEL_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_MODE_MCA_RATIO_SEL_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_MODE_MCA_RATIO_SEL_ES4,
           PB_COM_SCOM_ES4_STATION_MODE_MCA_RATIO_SEL_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_MCA_RATIO_SEL_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_PAU_STEP_OVERRIDE_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_PAU_STEP_OVERRIDE_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_PAU_STEP_OVERRIDE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_PAU_STEP_OVERRIDE_ES4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_PAU_STEP_OVERRIDE_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_PAU_STEP_OVERRIDE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_PAU_STEP_OVERRIDE_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_MODE_PAU_STEP_OVERRIDE_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_PAU_STEP_OVERRIDE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_MODE_PAU_STEP_OVERRIDE_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_MODE_PAU_STEP_OVERRIDE_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_PAU_STEP_OVERRIDE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_MODE_PAU_STEP_OVERRIDE_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_MODE_PAU_STEP_OVERRIDE_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_PAU_STEP_OVERRIDE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES4_STATION_MODE_PAU_STEP_OVERRIDE_ES4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_MODE_PAU_STEP_OVERRIDE_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_PAU_STEP_OVERRIDE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_PAU_STEP_SEL_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_PAU_STEP_SEL_ES4,
           PB_COM_SCOM_ES4_STATION_MODE_PAU_STEP_SEL_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_PAU_STEP_SEL_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_PAU_STEP_SEL_ES4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_PAU_STEP_SEL_ES4,
           PB_COM_SCOM_ES4_STATION_MODE_PAU_STEP_SEL_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_PAU_STEP_SEL_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_MODE_PAU_STEP_SEL_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_MODE_PAU_STEP_SEL_ES4,
           PB_COM_SCOM_ES4_STATION_MODE_PAU_STEP_SEL_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_PAU_STEP_SEL_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_SWITCH_CD_GATE_ENABLE_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_SWITCH_CD_GATE_ENABLE_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_SWITCH_CD_GATE_ENABLE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_SWITCH_CD_GATE_ENABLE_ES4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_SWITCH_CD_GATE_ENABLE_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_SWITCH_CD_GATE_ENABLE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_SWITCH_CD_GATE_ENABLE_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_MODE_SWITCH_CD_GATE_ENABLE_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_SWITCH_CD_GATE_ENABLE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_MODE_SWITCH_CD_GATE_ENABLE_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_MODE_SWITCH_CD_GATE_ENABLE_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_SWITCH_CD_GATE_ENABLE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_MODE_SWITCH_CD_GATE_ENABLE_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_MODE_SWITCH_CD_GATE_ENABLE_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_SWITCH_CD_GATE_ENABLE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES4_STATION_MODE_SWITCH_CD_GATE_ENABLE_ES4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_MODE_SWITCH_CD_GATE_ENABLE_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_SWITCH_CD_GATE_ENABLE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_TMGR_OP2_OVERLAP_DISABLE_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_TMGR_OP2_OVERLAP_DISABLE_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_TMGR_OP2_OVERLAP_DISABLE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_TMGR_OP2_OVERLAP_DISABLE_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_TMGR_OP2_OVERLAP_DISABLE_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_TMGR_OP2_OVERLAP_DISABLE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_TMGR_OP2_OVERLAP_DISABLE_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_MODE_TMGR_OP2_OVERLAP_DISABLE_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_TMGR_OP2_OVERLAP_DISABLE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_MODE_TMGR_OP2_OVERLAP_DISABLE_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_MODE_TMGR_OP2_OVERLAP_DISABLE_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_TMGR_OP2_OVERLAP_DISABLE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_MODE_TMGR_OP2_OVERLAP_DISABLE_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_MODE_TMGR_OP2_OVERLAP_DISABLE_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_TMGR_OP2_OVERLAP_DISABLE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES4_STATION_MODE_TMGR_OP2_OVERLAP_DISABLE_ES4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_MODE_TMGR_OP2_OVERLAP_DISABLE_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_TMGR_OP2_OVERLAP_DISABLE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_TMGR_SERIES_ID_DISABLE_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_TMGR_SERIES_ID_DISABLE_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_TMGR_SERIES_ID_DISABLE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_TMGR_SERIES_ID_DISABLE_ES4(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_TMGR_SERIES_ID_DISABLE_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_TMGR_SERIES_ID_DISABLE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_TMGR_SERIES_ID_DISABLE_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_MODE_TMGR_SERIES_ID_DISABLE_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_TMGR_SERIES_ID_DISABLE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_MODE_TMGR_SERIES_ID_DISABLE_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_MODE_TMGR_SERIES_ID_DISABLE_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_TMGR_SERIES_ID_DISABLE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_MODE_TMGR_SERIES_ID_DISABLE_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_MODE_TMGR_SERIES_ID_DISABLE_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_TMGR_SERIES_ID_DISABLE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES4_STATION_MODE_TMGR_SERIES_ID_DISABLE_ES4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_MODE_TMGR_SERIES_ID_DISABLE_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_TMGR_SERIES_ID_DISABLE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_TMGR_TOKEN_ID_RANGE_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_TMGR_TOKEN_ID_RANGE_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_TMGR_TOKEN_ID_RANGE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_TMGR_TOKEN_ID_RANGE_ES4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_TMGR_TOKEN_ID_RANGE_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_TMGR_TOKEN_ID_RANGE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_TMGR_TOKEN_ID_RANGE_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_MODE_TMGR_TOKEN_ID_RANGE_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_TMGR_TOKEN_ID_RANGE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_MODE_TMGR_TOKEN_ID_RANGE_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_MODE_TMGR_TOKEN_ID_RANGE_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_TMGR_TOKEN_ID_RANGE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_MODE_TMGR_TOKEN_ID_RANGE_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_MODE_TMGR_TOKEN_ID_RANGE_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_TMGR_TOKEN_ID_RANGE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES4_STATION_MODE_TMGR_TOKEN_ID_RANGE_ES4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_MODE_TMGR_TOKEN_ID_RANGE_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_TMGR_TOKEN_ID_RANGE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_TMGR_MAX_TLBI_TOKENS_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_TMGR_MAX_TLBI_TOKENS_ES4,
           PB_COM_SCOM_ES4_STATION_MODE_TMGR_MAX_TLBI_TOKENS_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_TMGR_MAX_TLBI_TOKENS_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_TMGR_MAX_TLBI_TOKENS_ES4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_TMGR_MAX_TLBI_TOKENS_ES4,
           PB_COM_SCOM_ES4_STATION_MODE_TMGR_MAX_TLBI_TOKENS_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_TMGR_MAX_TLBI_TOKENS_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_MODE_TMGR_MAX_TLBI_TOKENS_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_MODE_TMGR_MAX_TLBI_TOKENS_ES4,
           PB_COM_SCOM_ES4_STATION_MODE_TMGR_MAX_TLBI_TOKENS_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_TMGR_MAX_TLBI_TOKENS_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_TMGR_MAX_SLBI_TOKENS_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_TMGR_MAX_SLBI_TOKENS_ES4,
           PB_COM_SCOM_ES4_STATION_MODE_TMGR_MAX_SLBI_TOKENS_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_TMGR_MAX_SLBI_TOKENS_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_TMGR_MAX_SLBI_TOKENS_ES4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_TMGR_MAX_SLBI_TOKENS_ES4,
           PB_COM_SCOM_ES4_STATION_MODE_TMGR_MAX_SLBI_TOKENS_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_TMGR_MAX_SLBI_TOKENS_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_MODE_TMGR_MAX_SLBI_TOKENS_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_MODE_TMGR_MAX_SLBI_TOKENS_ES4,
           PB_COM_SCOM_ES4_STATION_MODE_TMGR_MAX_SLBI_TOKENS_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_TMGR_MAX_SLBI_TOKENS_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_RESET_ERROR_CAPTURE_ES4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_RESET_ERROR_CAPTURE_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_RESET_ERROR_CAPTURE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_RESET_ERROR_CAPTURE_ES4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_MODE_RESET_ERROR_CAPTURE_ES4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_RESET_ERROR_CAPTURE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_MODE_RESET_ERROR_CAPTURE_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.setBit<PB_COM_SCOM_ES4_STATION_MODE_RESET_ERROR_CAPTURE_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_RESET_ERROR_CAPTURE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_COM_SCOM_ES4_STATION_MODE_RESET_ERROR_CAPTURE_ES4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return o_data.clearBit<PB_COM_SCOM_ES4_STATION_MODE_RESET_ERROR_CAPTURE_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_RESET_ERROR_CAPTURE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_MODE_RESET_ERROR_CAPTURE_ES4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_MODE_RESET_ERROR_CAPTURE_ES4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_RESET_ERROR_CAPTURE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_COM_SCOM_ES4_STATION_MODE_RESET_ERROR_CAPTURE_ES4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_MODE));
#endif
    return i_data.getBit<PB_COM_SCOM_ES4_STATION_MODE_RESET_ERROR_CAPTURE_ES4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_MODE_RESET_ERROR_CAPTURE_ES4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_COM_SCOM_ES4_STATION_SP_CMD_RATE(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES4_STATION_SP_CMD_RATE;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_COM_SCOM_ES4_STATION_SP_CMD_RATE(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_COM_SCOM_ES4_STATION_SP_CMD_RATE;
#endif
    return fapi2::getScom(i_target, PB_COM_SCOM_ES4_STATION_SP_CMD_RATE, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_COM_SCOM_ES4_STATION_SP_CMD_RATE(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_SP_CMD_RATE));
#endif
    return fapi2::putScom(i_target, PB_COM_SCOM_ES4_STATION_SP_CMD_RATE, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_0_ES4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_0_ES4,
           PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_0_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_0_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_0_ES4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_0_ES4,
           PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_0_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_0_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_0_ES4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_0_ES4,
           PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_0_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_0_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_1_ES4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_1_ES4,
           PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_1_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_1_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_1_ES4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_1_ES4,
           PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_1_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_1_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_1_ES4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_1_ES4,
           PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_1_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_1_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_2_ES4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_2_ES4,
           PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_2_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_2_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_2_ES4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_2_ES4,
           PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_2_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_2_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_2_ES4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_2_ES4,
           PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_2_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_2_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_3_ES4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_3_ES4,
           PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_3_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_3_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_3_ES4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_3_ES4,
           PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_3_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_3_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_3_ES4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_3_ES4,
           PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_3_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_3_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_4_ES4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_4_ES4,
           PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_4_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_4_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_4_ES4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_4_ES4,
           PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_4_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_4_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_4_ES4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_4_ES4,
           PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_4_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_4_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_5_ES4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_5_ES4,
           PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_5_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_5_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_5_ES4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_5_ES4,
           PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_5_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_5_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_5_ES4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_5_ES4,
           PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_5_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_5_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_6_ES4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_6_ES4,
           PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_6_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_6_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_6_ES4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_6_ES4,
           PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_6_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_6_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_6_ES4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_6_ES4,
           PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_6_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_6_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_7_ES4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_7_ES4,
           PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_7_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_7_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_7_ES4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_SP_CMD_RATE));
#endif
    return o_data.insertFromRight<PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_7_ES4,
           PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_7_ES4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_7_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_7_ES4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_COM_SCOM_ES4_STATION_SP_CMD_RATE));
#endif
    return i_data.extractToRight<PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_7_ES4,
           PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_7_ES4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_COM_SCOM_ES4_STATION_SP_CMD_RATE_7_ES4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM10_PMU1_TLPM_COUNTER(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_PMU1_TLPM_COUNTER;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM10_PMU1_TLPM_COUNTER(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM10_PMU1_TLPM_COUNTER;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM10_PMU1_TLPM_COUNTER, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM10_PMU1_TLPM_COUNTER(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM10_PMU1_TLPM_COUNTER));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM10_PMU1_TLPM_COUNTER, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM23_CFG_TLPM_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM23_CFG_TLPM_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM23_CFG_TLPM_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM23_CFG_TLPM_REG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM23_CFG_TLPM_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM23_CFG_TLPM_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM23_CFG_TLPM_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_EN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_CFG_TLPM_REG_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_CFG_TLPM_REG_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_CFG_TLPM_REG_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_EN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_EN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_PTLSCOM23_CFG_TLPM_REG_EN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_CFG_TLPM_REG_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline bool GET_PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_0_1_OP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_0_1_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_0_1_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_0_1_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_0_1_OP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_0_1_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_0_1_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_0_1_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_0_1_OP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_0_1_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_0_1_OP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_0_1_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_2_3_OP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_2_3_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_2_3_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_2_3_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_2_3_OP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_2_3_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_2_3_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_2_3_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_2_3_OP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_2_3_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_2_3_OP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_2_3_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_4_5_OP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_4_5_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_4_5_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_4_5_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_4_5_OP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_4_5_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_4_5_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_4_5_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_4_5_OP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_4_5_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_4_5_OP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_4_5_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_6_7_OP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_6_7_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_6_7_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_6_7_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_6_7_OP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_6_7_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_6_7_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_6_7_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_6_7_OP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_6_7_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_6_7_OP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_6_7_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_8_9_OP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_8_9_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_8_9_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_8_9_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_8_9_OP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_8_9_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_8_9_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_8_9_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_8_9_OP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_8_9_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_8_9_OP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_8_9_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_10_11_OP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_10_11_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_10_11_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_10_11_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_10_11_OP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_10_11_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_10_11_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_10_11_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_10_11_OP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_10_11_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_10_11_OP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_10_11_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_12_13_OP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_12_13_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_12_13_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_12_13_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_12_13_OP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_12_13_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_12_13_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_12_13_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_12_13_OP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_12_13_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_12_13_OP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_12_13_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_14_15_OP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_14_15_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_14_15_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_14_15_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_14_15_OP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_14_15_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_14_15_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_14_15_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_14_15_OP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_14_15_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_14_15_OP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_14_15_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_16_17_OP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_16_17_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_16_17_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_16_17_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_16_17_OP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_16_17_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_16_17_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_16_17_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_16_17_OP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_16_17_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_16_17_OP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_16_17_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_18_19_OP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_18_19_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_18_19_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_18_19_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_18_19_OP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_18_19_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_18_19_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_18_19_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_18_19_OP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_18_19_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_18_19_OP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_18_19_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_20_21_OP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_20_21_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_20_21_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_20_21_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_20_21_OP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_20_21_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_20_21_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_20_21_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_20_21_OP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_20_21_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_20_21_OP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_20_21_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_22_23_OP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_22_23_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_22_23_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_22_23_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_22_23_OP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_22_23_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_22_23_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_22_23_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_22_23_OP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_22_23_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_22_23_OP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_22_23_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_24_25_OP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_24_25_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_24_25_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_24_25_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_24_25_OP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_24_25_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_24_25_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_24_25_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_24_25_OP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_24_25_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_24_25_OP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_24_25_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_26_27_OP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_26_27_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_26_27_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_26_27_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_26_27_OP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_26_27_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_26_27_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_26_27_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_26_27_OP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_26_27_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_26_27_OP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_26_27_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_28_29_OP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_28_29_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_28_29_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_28_29_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_28_29_OP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_28_29_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_28_29_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_28_29_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_28_29_OP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_28_29_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_28_29_OP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_28_29_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_30_31_OP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_30_31_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_30_31_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_30_31_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_30_31_OP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_30_31_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_30_31_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_30_31_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_30_31_OP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_30_31_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_30_31_OP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_30_31_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU0,
           PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU0,
           PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU0,
           PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU1,
           PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU1,
           PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU1,
           PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU2,
           PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU2,
           PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU2,
           PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU3,
           PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU3,
           PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU3,
           PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_SPARE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_SPARE,
           PB_PTLSCOM23_CFG_TLPM_REG_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_SPARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_SPARE,
           PB_PTLSCOM23_CFG_TLPM_REG_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_SPARE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_SPARE,
           PB_PTLSCOM23_CFG_TLPM_REG_SPARE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM23_CNPM_PMU_PRESCALER(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM23_CNPM_PMU_PRESCALER;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM23_CNPM_PMU_PRESCALER;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM23_CNPM_PMU_PRESCALER, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM23_CNPM_PMU_PRESCALER(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM23_CNPM_PMU_PRESCALER, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM23_PMU3_TLPM_COUNTER(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM23_PMU3_TLPM_COUNTER;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM23_PMU3_TLPM_COUNTER(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM23_PMU3_TLPM_COUNTER;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM23_PMU3_TLPM_COUNTER, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM23_PMU3_TLPM_COUNTER(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PMU3_TLPM_COUNTER));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM23_PMU3_TLPM_COUNTER, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM23_PSAVE01_MODE_CFG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM23_PSAVE01_MODE_CFG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM23_PSAVE01_MODE_CFG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM23_PSAVE01_MODE_CFG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM23_PSAVE01_MODE_CFG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM23_PSAVE01_MODE_CFG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PSAVE01_MODE_CFG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM23_PSAVE01_MODE_CFG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}


static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PSAVE01_MODE_CFG_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PSAVE01_MODE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PSAVE01_MODE_CFG_MODE,
           PB_PTLSCOM23_PSAVE01_MODE_CFG_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_PSAVE01_MODE_CFG_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PSAVE01_MODE_CFG_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PSAVE01_MODE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PSAVE01_MODE_CFG_MODE,
           PB_PTLSCOM23_PSAVE01_MODE_CFG_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_PSAVE01_MODE_CFG_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_PSAVE01_MODE_CFG_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PSAVE01_MODE_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_PSAVE01_MODE_CFG_MODE,
           PB_PTLSCOM23_PSAVE01_MODE_CFG_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_PSAVE01_MODE_CFG_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PSAVE01_MODE_CFG_WIDTH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PSAVE01_MODE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PSAVE01_MODE_CFG_WIDTH,
           PB_PTLSCOM23_PSAVE01_MODE_CFG_WIDTH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_PSAVE01_MODE_CFG_WIDTH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PSAVE01_MODE_CFG_WIDTH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PSAVE01_MODE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PSAVE01_MODE_CFG_WIDTH,
           PB_PTLSCOM23_PSAVE01_MODE_CFG_WIDTH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_PSAVE01_MODE_CFG_WIDTH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_PSAVE01_MODE_CFG_WIDTH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PSAVE01_MODE_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_PSAVE01_MODE_CFG_WIDTH,
           PB_PTLSCOM23_PSAVE01_MODE_CFG_WIDTH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_PSAVE01_MODE_CFG_WIDTH chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PSAVE01_MODE_CFG_SPARE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PSAVE01_MODE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PSAVE01_MODE_CFG_SPARE,
           PB_PTLSCOM23_PSAVE01_MODE_CFG_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_PSAVE01_MODE_CFG_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PSAVE01_MODE_CFG_SPARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PSAVE01_MODE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PSAVE01_MODE_CFG_SPARE,
           PB_PTLSCOM23_PSAVE01_MODE_CFG_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_PSAVE01_MODE_CFG_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_PSAVE01_MODE_CFG_SPARE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PSAVE01_MODE_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_PSAVE01_MODE_CFG_SPARE,
           PB_PTLSCOM23_PSAVE01_MODE_CFG_SPARE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_PSAVE01_MODE_CFG_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PSAVE01_MODE_CFG_MIN_RAND_UC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PSAVE01_MODE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PSAVE01_MODE_CFG_MIN_RAND_UC,
           PB_PTLSCOM23_PSAVE01_MODE_CFG_MIN_RAND_UC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_PSAVE01_MODE_CFG_MIN_RAND_UC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PSAVE01_MODE_CFG_MIN_RAND_UC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PSAVE01_MODE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PSAVE01_MODE_CFG_MIN_RAND_UC,
           PB_PTLSCOM23_PSAVE01_MODE_CFG_MIN_RAND_UC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_PSAVE01_MODE_CFG_MIN_RAND_UC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}

static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_PSAVE01_MODE_CFG_MIN_RAND_UC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PSAVE01_MODE_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_PSAVE01_MODE_CFG_MIN_RAND_UC,
           PB_PTLSCOM23_PSAVE01_MODE_CFG_MIN_RAND_UC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("Invalid dial access PB_PTLSCOM23_PSAVE01_MODE_CFG_MIN_RAND_UC chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM23_TL_LINK_DLY_0123_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM23_TL_LINK_DLY_0123_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM23_TL_LINK_DLY_0123_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM23_TL_LINK_DLY_0123_REG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM23_TL_LINK_DLY_0123_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}

template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM23_TL_LINK_DLY_0123_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_DLY_0123_REG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM23_TL_LINK_DLY_0123_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}



}
}

#endif
