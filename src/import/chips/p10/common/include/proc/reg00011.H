/* IBM_PROLOG_BEGIN_TAG                                                   */
/* This is an automatically generated prolog.                             */
/*                                                                        */
/* $Source: src/import/chips/p10/common/include/proc/reg00011.H $         */
/*                                                                        */
/* OpenPOWER sbe Project                                                  */
/*                                                                        */
/* Contributors Listed Below - COPYRIGHT 2019,2020                        */
/* [+] International Business Machines Corp.                              */
/*                                                                        */
/*                                                                        */
/* Licensed under the Apache License, Version 2.0 (the "License");        */
/* you may not use this file except in compliance with the License.       */
/* You may obtain a copy of the License at                                */
/*                                                                        */
/*     http://www.apache.org/licenses/LICENSE-2.0                         */
/*                                                                        */
/* Unless required by applicable law or agreed to in writing, software    */
/* distributed under the License is distributed on an "AS IS" BASIS,      */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or        */
/* implied. See the License for the specific language governing           */
/* permissions and limitations under the License.                         */
/*                                                                        */
/* IBM_PROLOG_END_TAG                                                     */
#include "fapi2.H"

#ifndef __PROC_REG00011_H_
#define __PROC_REG00011_H_

#ifndef __PPE_HCODE__
namespace scomt
{
namespace proc
{
#endif


//>> PREP_[PB_PTLSCOM23_CFG_TLPM_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM23_CFG_TLPM_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM23_CFG_TLPM_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM23_CFG_TLPM_REG]

//>> GET_[PB_PTLSCOM23_CFG_TLPM_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM23_CFG_TLPM_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM23_CFG_TLPM_REG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM23_CFG_TLPM_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM23_CFG_TLPM_REG]

//>> PUT_[PB_PTLSCOM23_CFG_TLPM_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM23_CFG_TLPM_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM23_CFG_TLPM_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM23_CFG_TLPM_REG]


//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_EN]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_EN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_EN]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_EN]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_EN]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_EN]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_CFG_TLPM_REG_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_EN]

//>> CLEAR_[PB_PTLSCOM23_CFG_TLPM_REG_EN]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_CFG_TLPM_REG_EN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_CFG_TLPM_REG_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_CFG_TLPM_REG_EN]

//>> GET_[PB_PTLSCOM23_CFG_TLPM_REG_EN]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_EN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_EN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CFG_TLPM_REG_EN]

//>> GET_[PB_PTLSCOM23_CFG_TLPM_REG_EN]
static inline bool GET_PB_PTLSCOM23_CFG_TLPM_REG_EN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_CFG_TLPM_REG_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_EN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CFG_TLPM_REG_EN]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE]

//>> CLEAR_[PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE]

//>> GET_[PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE]

//>> GET_[PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE]
static inline bool GET_PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CFG_TLPM_REG_RESET_MODE]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE]

//>> CLEAR_[PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE]

//>> GET_[PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE]

//>> GET_[PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE]
static inline bool GET_PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CFG_TLPM_REG_COUNTER_MODE]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS]

//>> CLEAR_[PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS]

//>> GET_[PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS]

//>> GET_[PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS]
static inline bool GET_PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_DIS]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE]

//>> CLEAR_[PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE]

//>> GET_[PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE]

//>> GET_[PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE]
static inline bool GET_PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CFG_TLPM_REG_GLOBAL_PMISC_MODE]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.setBit<PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE]

//>> CLEAR_[PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE]

//>> GET_[PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE]

//>> GET_[PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE]
static inline bool GET_PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.getBit<PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CFG_TLPM_REG_EXTERNAL_FREEZE]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_0_1_OP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_0_1_OP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_0_1_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_0_1_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_0_1_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_0_1_OP]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_0_1_OP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_0_1_OP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_0_1_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_0_1_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_0_1_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_0_1_OP]

//>> GET_[PB_PTLSCOM23_CFG_TLPM_REG_0_1_OP]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_0_1_OP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_0_1_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_0_1_OP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_0_1_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CFG_TLPM_REG_0_1_OP]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_2_3_OP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_2_3_OP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_2_3_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_2_3_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_2_3_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_2_3_OP]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_2_3_OP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_2_3_OP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_2_3_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_2_3_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_2_3_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_2_3_OP]

//>> GET_[PB_PTLSCOM23_CFG_TLPM_REG_2_3_OP]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_2_3_OP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_2_3_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_2_3_OP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_2_3_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CFG_TLPM_REG_2_3_OP]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_4_5_OP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_4_5_OP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_4_5_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_4_5_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_4_5_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_4_5_OP]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_4_5_OP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_4_5_OP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_4_5_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_4_5_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_4_5_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_4_5_OP]

//>> GET_[PB_PTLSCOM23_CFG_TLPM_REG_4_5_OP]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_4_5_OP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_4_5_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_4_5_OP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_4_5_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CFG_TLPM_REG_4_5_OP]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_6_7_OP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_6_7_OP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_6_7_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_6_7_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_6_7_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_6_7_OP]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_6_7_OP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_6_7_OP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_6_7_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_6_7_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_6_7_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_6_7_OP]

//>> GET_[PB_PTLSCOM23_CFG_TLPM_REG_6_7_OP]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_6_7_OP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_6_7_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_6_7_OP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_6_7_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CFG_TLPM_REG_6_7_OP]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_8_9_OP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_8_9_OP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_8_9_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_8_9_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_8_9_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_8_9_OP]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_8_9_OP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_8_9_OP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_8_9_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_8_9_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_8_9_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_8_9_OP]

//>> GET_[PB_PTLSCOM23_CFG_TLPM_REG_8_9_OP]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_8_9_OP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_8_9_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_8_9_OP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_8_9_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CFG_TLPM_REG_8_9_OP]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_10_11_OP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_10_11_OP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_10_11_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_10_11_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_10_11_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_10_11_OP]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_10_11_OP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_10_11_OP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_10_11_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_10_11_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_10_11_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_10_11_OP]

//>> GET_[PB_PTLSCOM23_CFG_TLPM_REG_10_11_OP]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_10_11_OP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_10_11_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_10_11_OP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_10_11_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CFG_TLPM_REG_10_11_OP]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_12_13_OP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_12_13_OP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_12_13_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_12_13_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_12_13_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_12_13_OP]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_12_13_OP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_12_13_OP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_12_13_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_12_13_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_12_13_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_12_13_OP]

//>> GET_[PB_PTLSCOM23_CFG_TLPM_REG_12_13_OP]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_12_13_OP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_12_13_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_12_13_OP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_12_13_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CFG_TLPM_REG_12_13_OP]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_14_15_OP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_14_15_OP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_14_15_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_14_15_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_14_15_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_14_15_OP]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_14_15_OP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_14_15_OP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_14_15_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_14_15_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_14_15_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_14_15_OP]

//>> GET_[PB_PTLSCOM23_CFG_TLPM_REG_14_15_OP]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_14_15_OP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_14_15_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_14_15_OP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_14_15_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CFG_TLPM_REG_14_15_OP]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_16_17_OP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_16_17_OP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_16_17_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_16_17_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_16_17_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_16_17_OP]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_16_17_OP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_16_17_OP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_16_17_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_16_17_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_16_17_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_16_17_OP]

//>> GET_[PB_PTLSCOM23_CFG_TLPM_REG_16_17_OP]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_16_17_OP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_16_17_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_16_17_OP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_16_17_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CFG_TLPM_REG_16_17_OP]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_18_19_OP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_18_19_OP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_18_19_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_18_19_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_18_19_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_18_19_OP]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_18_19_OP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_18_19_OP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_18_19_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_18_19_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_18_19_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_18_19_OP]

//>> GET_[PB_PTLSCOM23_CFG_TLPM_REG_18_19_OP]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_18_19_OP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_18_19_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_18_19_OP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_18_19_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CFG_TLPM_REG_18_19_OP]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_20_21_OP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_20_21_OP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_20_21_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_20_21_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_20_21_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_20_21_OP]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_20_21_OP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_20_21_OP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_20_21_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_20_21_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_20_21_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_20_21_OP]

//>> GET_[PB_PTLSCOM23_CFG_TLPM_REG_20_21_OP]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_20_21_OP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_20_21_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_20_21_OP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_20_21_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CFG_TLPM_REG_20_21_OP]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_22_23_OP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_22_23_OP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_22_23_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_22_23_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_22_23_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_22_23_OP]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_22_23_OP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_22_23_OP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_22_23_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_22_23_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_22_23_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_22_23_OP]

//>> GET_[PB_PTLSCOM23_CFG_TLPM_REG_22_23_OP]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_22_23_OP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_22_23_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_22_23_OP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_22_23_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CFG_TLPM_REG_22_23_OP]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_24_25_OP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_24_25_OP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_24_25_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_24_25_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_24_25_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_24_25_OP]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_24_25_OP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_24_25_OP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_24_25_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_24_25_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_24_25_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_24_25_OP]

//>> GET_[PB_PTLSCOM23_CFG_TLPM_REG_24_25_OP]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_24_25_OP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_24_25_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_24_25_OP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_24_25_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CFG_TLPM_REG_24_25_OP]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_26_27_OP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_26_27_OP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_26_27_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_26_27_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_26_27_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_26_27_OP]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_26_27_OP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_26_27_OP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_26_27_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_26_27_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_26_27_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_26_27_OP]

//>> GET_[PB_PTLSCOM23_CFG_TLPM_REG_26_27_OP]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_26_27_OP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_26_27_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_26_27_OP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_26_27_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CFG_TLPM_REG_26_27_OP]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_28_29_OP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_28_29_OP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_28_29_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_28_29_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_28_29_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_28_29_OP]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_28_29_OP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_28_29_OP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_28_29_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_28_29_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_28_29_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_28_29_OP]

//>> GET_[PB_PTLSCOM23_CFG_TLPM_REG_28_29_OP]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_28_29_OP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_28_29_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_28_29_OP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_28_29_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CFG_TLPM_REG_28_29_OP]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_30_31_OP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_30_31_OP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_30_31_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_30_31_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_30_31_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_30_31_OP]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_30_31_OP]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_30_31_OP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_30_31_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_30_31_OP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_30_31_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_30_31_OP]

//>> GET_[PB_PTLSCOM23_CFG_TLPM_REG_30_31_OP]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_30_31_OP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_30_31_OP,
           PB_PTLSCOM23_CFG_TLPM_REG_30_31_OP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_30_31_OP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CFG_TLPM_REG_30_31_OP]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU0,
           PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU0]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU0,
           PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU0]

//>> GET_[PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU0]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU0,
           PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU0]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU1,
           PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU1]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU1,
           PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU1]

//>> GET_[PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU1]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU1,
           PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU1]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU2,
           PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU2]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU2,
           PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU2]

//>> GET_[PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU2]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU2,
           PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU2]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU3,
           PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU3]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU3,
           PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU3]

//>> GET_[PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU3]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU3,
           PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CFG_TLPM_REG_CASCADE_PMU3]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_SPARE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_SPARE,
           PB_PTLSCOM23_CFG_TLPM_REG_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_SPARE]

//>> SET_[PB_PTLSCOM23_CFG_TLPM_REG_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CFG_TLPM_REG_SPARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CFG_TLPM_REG_SPARE,
           PB_PTLSCOM23_CFG_TLPM_REG_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CFG_TLPM_REG_SPARE]

//>> GET_[PB_PTLSCOM23_CFG_TLPM_REG_SPARE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CFG_TLPM_REG_SPARE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CFG_TLPM_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CFG_TLPM_REG_SPARE,
           PB_PTLSCOM23_CFG_TLPM_REG_SPARE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CFG_TLPM_REG_SPARE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CFG_TLPM_REG_SPARE]

//>> PREP_[PB_PTLSCOM23_CNPM_PMU_PRESCALER]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM23_CNPM_PMU_PRESCALER(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM23_CNPM_PMU_PRESCALER;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM23_CNPM_PMU_PRESCALER]

//>> GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM23_CNPM_PMU_PRESCALER;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM23_CNPM_PMU_PRESCALER, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER]

//>> PUT_[PB_PTLSCOM23_CNPM_PMU_PRESCALER]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM23_CNPM_PMU_PRESCALER(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM23_CNPM_PMU_PRESCALER, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM23_CNPM_PMU_PRESCALER]


//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C0]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C0]

//>> GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C0]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C0]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C1]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C1]

//>> GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C1]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C1]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C2]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C2]

//>> GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C2]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C2]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C3]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C3]

//>> GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C3]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP0_C3]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C0]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C0]

//>> GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C0]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C0]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C1]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C1]

//>> GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C1]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C1]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C2]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C2]

//>> GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C2]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C2]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C3]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C3]

//>> GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C3]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP1_C3]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C0]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C0]

//>> GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C0]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C0]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C1]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C1]

//>> GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C1]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C1]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C2]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C2]

//>> GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C2]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C2]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C3]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C3]

//>> GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C3]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP2_C3]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C0]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C0]

//>> GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C0]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C0]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C1]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C1]

//>> GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C1]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C1]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C2]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C2]

//>> GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C2]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C2]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C3]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C3]

//>> GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C3]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_CNPM_PRESCALER_GRP3_C3]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C0]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C0]

//>> GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C0]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C0]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C1]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C1]

//>> GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C1]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C1]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C2]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C2]

//>> GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C2]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C2]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C3]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C3]

//>> GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C3]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP0_C3]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C0]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C0]

//>> GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C0]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C0]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C1]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C1]

//>> GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C1]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C1]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C2]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C2]

//>> GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C2]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C2]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C3]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C3]

//>> GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C3]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP1_C3]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C0]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C0]

//>> GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C0]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C0]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C1]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C1]

//>> GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C1]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C1]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C2]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C2]

//>> GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C2]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C2]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C3]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C3]

//>> GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C3]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP2_C3]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C0]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C0]

//>> GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C0]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C0,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C0]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C1]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C1]

//>> GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C1]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C1,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C1 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C1]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C2]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C2]

//>> GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C2]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C2,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C2 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C2]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C3]

//>> SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C3]

//>> GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C3]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_CNPM_PMU_PRESCALER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C3,
           PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C3 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_CNPM_PMU_PRESCALER_TLPM_PRESCALER_GRP3_C3]

//>> PREP_[PB_PTLSCOM23_PMU3_TLPM_COUNTER]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM23_PMU3_TLPM_COUNTER(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM23_PMU3_TLPM_COUNTER;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM23_PMU3_TLPM_COUNTER]

//>> GET_[PB_PTLSCOM23_PMU3_TLPM_COUNTER]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM23_PMU3_TLPM_COUNTER(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM23_PMU3_TLPM_COUNTER;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM23_PMU3_TLPM_COUNTER, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM23_PMU3_TLPM_COUNTER]

//>> PUT_[PB_PTLSCOM23_PMU3_TLPM_COUNTER]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM23_PMU3_TLPM_COUNTER(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PMU3_TLPM_COUNTER));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM23_PMU3_TLPM_COUNTER, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM23_PMU3_TLPM_COUNTER]


//>> SET_[PB_PTLSCOM23_PMU3_TLPM_COUNTER_0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PMU3_TLPM_COUNTER_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PMU3_TLPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PMU3_TLPM_COUNTER_0,
           PB_PTLSCOM23_PMU3_TLPM_COUNTER_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_PMU3_TLPM_COUNTER_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_PMU3_TLPM_COUNTER_0]

//>> SET_[PB_PTLSCOM23_PMU3_TLPM_COUNTER_0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PMU3_TLPM_COUNTER_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PMU3_TLPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PMU3_TLPM_COUNTER_0,
           PB_PTLSCOM23_PMU3_TLPM_COUNTER_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_PMU3_TLPM_COUNTER_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_PMU3_TLPM_COUNTER_0]

//>> GET_[PB_PTLSCOM23_PMU3_TLPM_COUNTER_0]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_PMU3_TLPM_COUNTER_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PMU3_TLPM_COUNTER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_PMU3_TLPM_COUNTER_0,
           PB_PTLSCOM23_PMU3_TLPM_COUNTER_0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_PMU3_TLPM_COUNTER_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_PMU3_TLPM_COUNTER_0]

//>> SET_[PB_PTLSCOM23_PMU3_TLPM_COUNTER_1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PMU3_TLPM_COUNTER_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PMU3_TLPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PMU3_TLPM_COUNTER_1,
           PB_PTLSCOM23_PMU3_TLPM_COUNTER_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_PMU3_TLPM_COUNTER_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_PMU3_TLPM_COUNTER_1]

//>> SET_[PB_PTLSCOM23_PMU3_TLPM_COUNTER_1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PMU3_TLPM_COUNTER_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PMU3_TLPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PMU3_TLPM_COUNTER_1,
           PB_PTLSCOM23_PMU3_TLPM_COUNTER_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_PMU3_TLPM_COUNTER_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_PMU3_TLPM_COUNTER_1]

//>> GET_[PB_PTLSCOM23_PMU3_TLPM_COUNTER_1]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_PMU3_TLPM_COUNTER_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PMU3_TLPM_COUNTER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_PMU3_TLPM_COUNTER_1,
           PB_PTLSCOM23_PMU3_TLPM_COUNTER_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_PMU3_TLPM_COUNTER_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_PMU3_TLPM_COUNTER_1]

//>> SET_[PB_PTLSCOM23_PMU3_TLPM_COUNTER_2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PMU3_TLPM_COUNTER_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PMU3_TLPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PMU3_TLPM_COUNTER_2,
           PB_PTLSCOM23_PMU3_TLPM_COUNTER_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_PMU3_TLPM_COUNTER_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_PMU3_TLPM_COUNTER_2]

//>> SET_[PB_PTLSCOM23_PMU3_TLPM_COUNTER_2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PMU3_TLPM_COUNTER_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PMU3_TLPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PMU3_TLPM_COUNTER_2,
           PB_PTLSCOM23_PMU3_TLPM_COUNTER_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_PMU3_TLPM_COUNTER_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_PMU3_TLPM_COUNTER_2]

//>> GET_[PB_PTLSCOM23_PMU3_TLPM_COUNTER_2]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_PMU3_TLPM_COUNTER_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PMU3_TLPM_COUNTER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_PMU3_TLPM_COUNTER_2,
           PB_PTLSCOM23_PMU3_TLPM_COUNTER_2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_PMU3_TLPM_COUNTER_2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_PMU3_TLPM_COUNTER_2]

//>> SET_[PB_PTLSCOM23_PMU3_TLPM_COUNTER_3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PMU3_TLPM_COUNTER_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PMU3_TLPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PMU3_TLPM_COUNTER_3,
           PB_PTLSCOM23_PMU3_TLPM_COUNTER_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_PMU3_TLPM_COUNTER_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_PMU3_TLPM_COUNTER_3]

//>> SET_[PB_PTLSCOM23_PMU3_TLPM_COUNTER_3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PMU3_TLPM_COUNTER_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PMU3_TLPM_COUNTER));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PMU3_TLPM_COUNTER_3,
           PB_PTLSCOM23_PMU3_TLPM_COUNTER_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_PMU3_TLPM_COUNTER_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_PMU3_TLPM_COUNTER_3]

//>> GET_[PB_PTLSCOM23_PMU3_TLPM_COUNTER_3]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_PMU3_TLPM_COUNTER_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PMU3_TLPM_COUNTER));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_PMU3_TLPM_COUNTER_3,
           PB_PTLSCOM23_PMU3_TLPM_COUNTER_3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_PMU3_TLPM_COUNTER_3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_PMU3_TLPM_COUNTER_3]

//>> PREP_[PB_PTLSCOM23_PSAVE01_MODE_CFG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM23_PSAVE01_MODE_CFG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM23_PSAVE01_MODE_CFG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM23_PSAVE01_MODE_CFG]

//>> GET_[PB_PTLSCOM23_PSAVE01_MODE_CFG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM23_PSAVE01_MODE_CFG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM23_PSAVE01_MODE_CFG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM23_PSAVE01_MODE_CFG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM23_PSAVE01_MODE_CFG]

//>> PUT_[PB_PTLSCOM23_PSAVE01_MODE_CFG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM23_PSAVE01_MODE_CFG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PSAVE01_MODE_CFG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM23_PSAVE01_MODE_CFG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM23_PSAVE01_MODE_CFG]


//>> SET_[PB_PTLSCOM23_PSAVE01_MODE_CFG_MODE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PSAVE01_MODE_CFG_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PSAVE01_MODE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PSAVE01_MODE_CFG_MODE,
           PB_PTLSCOM23_PSAVE01_MODE_CFG_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_PSAVE01_MODE_CFG_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_PSAVE01_MODE_CFG_MODE]

//>> SET_[PB_PTLSCOM23_PSAVE01_MODE_CFG_MODE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PSAVE01_MODE_CFG_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PSAVE01_MODE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PSAVE01_MODE_CFG_MODE,
           PB_PTLSCOM23_PSAVE01_MODE_CFG_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_PSAVE01_MODE_CFG_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_PSAVE01_MODE_CFG_MODE]

//>> GET_[PB_PTLSCOM23_PSAVE01_MODE_CFG_MODE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_PSAVE01_MODE_CFG_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PSAVE01_MODE_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_PSAVE01_MODE_CFG_MODE,
           PB_PTLSCOM23_PSAVE01_MODE_CFG_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_PSAVE01_MODE_CFG_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_PSAVE01_MODE_CFG_MODE]

//>> SET_[PB_PTLSCOM23_PSAVE01_MODE_CFG_WIDTH]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PSAVE01_MODE_CFG_WIDTH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PSAVE01_MODE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PSAVE01_MODE_CFG_WIDTH,
           PB_PTLSCOM23_PSAVE01_MODE_CFG_WIDTH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_PSAVE01_MODE_CFG_WIDTH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_PSAVE01_MODE_CFG_WIDTH]

//>> SET_[PB_PTLSCOM23_PSAVE01_MODE_CFG_WIDTH]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PSAVE01_MODE_CFG_WIDTH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PSAVE01_MODE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PSAVE01_MODE_CFG_WIDTH,
           PB_PTLSCOM23_PSAVE01_MODE_CFG_WIDTH_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_PSAVE01_MODE_CFG_WIDTH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_PSAVE01_MODE_CFG_WIDTH]

//>> GET_[PB_PTLSCOM23_PSAVE01_MODE_CFG_WIDTH]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_PSAVE01_MODE_CFG_WIDTH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PSAVE01_MODE_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_PSAVE01_MODE_CFG_WIDTH,
           PB_PTLSCOM23_PSAVE01_MODE_CFG_WIDTH_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_PSAVE01_MODE_CFG_WIDTH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_PSAVE01_MODE_CFG_WIDTH]

//>> SET_[PB_PTLSCOM23_PSAVE01_MODE_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PSAVE01_MODE_CFG_SPARE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PSAVE01_MODE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PSAVE01_MODE_CFG_SPARE,
           PB_PTLSCOM23_PSAVE01_MODE_CFG_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_PSAVE01_MODE_CFG_SPARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_PSAVE01_MODE_CFG_SPARE]

//>> SET_[PB_PTLSCOM23_PSAVE01_MODE_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PSAVE01_MODE_CFG_SPARE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PSAVE01_MODE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PSAVE01_MODE_CFG_SPARE,
           PB_PTLSCOM23_PSAVE01_MODE_CFG_SPARE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_PSAVE01_MODE_CFG_SPARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_PSAVE01_MODE_CFG_SPARE]

//>> GET_[PB_PTLSCOM23_PSAVE01_MODE_CFG_SPARE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_PSAVE01_MODE_CFG_SPARE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PSAVE01_MODE_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_PSAVE01_MODE_CFG_SPARE,
           PB_PTLSCOM23_PSAVE01_MODE_CFG_SPARE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_PSAVE01_MODE_CFG_SPARE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_PSAVE01_MODE_CFG_SPARE]

//>> SET_[PB_PTLSCOM23_PSAVE01_MODE_CFG_MIN_RAND_UC]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PSAVE01_MODE_CFG_MIN_RAND_UC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PSAVE01_MODE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PSAVE01_MODE_CFG_MIN_RAND_UC,
           PB_PTLSCOM23_PSAVE01_MODE_CFG_MIN_RAND_UC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_PSAVE01_MODE_CFG_MIN_RAND_UC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_PSAVE01_MODE_CFG_MIN_RAND_UC]

//>> SET_[PB_PTLSCOM23_PSAVE01_MODE_CFG_MIN_RAND_UC]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_PSAVE01_MODE_CFG_MIN_RAND_UC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PSAVE01_MODE_CFG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_PSAVE01_MODE_CFG_MIN_RAND_UC,
           PB_PTLSCOM23_PSAVE01_MODE_CFG_MIN_RAND_UC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_PSAVE01_MODE_CFG_MIN_RAND_UC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_PSAVE01_MODE_CFG_MIN_RAND_UC]

//>> GET_[PB_PTLSCOM23_PSAVE01_MODE_CFG_MIN_RAND_UC]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_PSAVE01_MODE_CFG_MIN_RAND_UC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_PSAVE01_MODE_CFG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_PSAVE01_MODE_CFG_MIN_RAND_UC,
           PB_PTLSCOM23_PSAVE01_MODE_CFG_MIN_RAND_UC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_PSAVE01_MODE_CFG_MIN_RAND_UC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_PSAVE01_MODE_CFG_MIN_RAND_UC]

//>> PREP_[PB_PTLSCOM23_TL_LINK_DLY_0123_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM23_TL_LINK_DLY_0123_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM23_TL_LINK_DLY_0123_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM23_TL_LINK_DLY_0123_REG]

//>> GET_[PB_PTLSCOM23_TL_LINK_DLY_0123_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM23_TL_LINK_DLY_0123_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM23_TL_LINK_DLY_0123_REG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM23_TL_LINK_DLY_0123_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM23_TL_LINK_DLY_0123_REG]

//>> PUT_[PB_PTLSCOM23_TL_LINK_DLY_0123_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM23_TL_LINK_DLY_0123_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_DLY_0123_REG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM23_TL_LINK_DLY_0123_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM23_TL_LINK_DLY_0123_REG]


//>> SET_[PB_PTLSCOM23_TL_LINK_DLY_0123_REG_X0_LINK_DELAY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_TL_LINK_DLY_0123_REG_X0_LINK_DELAY(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_DLY_0123_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_TL_LINK_DLY_0123_REG_X0_LINK_DELAY,
           PB_PTLSCOM23_TL_LINK_DLY_0123_REG_X0_LINK_DELAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_DLY_0123_REG_X0_LINK_DELAY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_TL_LINK_DLY_0123_REG_X0_LINK_DELAY]

//>> SET_[PB_PTLSCOM23_TL_LINK_DLY_0123_REG_X0_LINK_DELAY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_TL_LINK_DLY_0123_REG_X0_LINK_DELAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_DLY_0123_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_TL_LINK_DLY_0123_REG_X0_LINK_DELAY,
           PB_PTLSCOM23_TL_LINK_DLY_0123_REG_X0_LINK_DELAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_DLY_0123_REG_X0_LINK_DELAY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_TL_LINK_DLY_0123_REG_X0_LINK_DELAY]

//>> GET_[PB_PTLSCOM23_TL_LINK_DLY_0123_REG_X0_LINK_DELAY]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_TL_LINK_DLY_0123_REG_X0_LINK_DELAY(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_DLY_0123_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_TL_LINK_DLY_0123_REG_X0_LINK_DELAY,
           PB_PTLSCOM23_TL_LINK_DLY_0123_REG_X0_LINK_DELAY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_DLY_0123_REG_X0_LINK_DELAY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_TL_LINK_DLY_0123_REG_X0_LINK_DELAY]

//>> SET_[PB_PTLSCOM23_TL_LINK_DLY_0123_REG_X1_LINK_DELAY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_TL_LINK_DLY_0123_REG_X1_LINK_DELAY(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_DLY_0123_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_TL_LINK_DLY_0123_REG_X1_LINK_DELAY,
           PB_PTLSCOM23_TL_LINK_DLY_0123_REG_X1_LINK_DELAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_DLY_0123_REG_X1_LINK_DELAY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_TL_LINK_DLY_0123_REG_X1_LINK_DELAY]

//>> SET_[PB_PTLSCOM23_TL_LINK_DLY_0123_REG_X1_LINK_DELAY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_TL_LINK_DLY_0123_REG_X1_LINK_DELAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_DLY_0123_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_TL_LINK_DLY_0123_REG_X1_LINK_DELAY,
           PB_PTLSCOM23_TL_LINK_DLY_0123_REG_X1_LINK_DELAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_DLY_0123_REG_X1_LINK_DELAY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_TL_LINK_DLY_0123_REG_X1_LINK_DELAY]

//>> GET_[PB_PTLSCOM23_TL_LINK_DLY_0123_REG_X1_LINK_DELAY]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_TL_LINK_DLY_0123_REG_X1_LINK_DELAY(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_DLY_0123_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_TL_LINK_DLY_0123_REG_X1_LINK_DELAY,
           PB_PTLSCOM23_TL_LINK_DLY_0123_REG_X1_LINK_DELAY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_DLY_0123_REG_X1_LINK_DELAY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_TL_LINK_DLY_0123_REG_X1_LINK_DELAY]

//>> SET_[PB_PTLSCOM23_TL_LINK_DLY_0123_REG_Y0_LINK_DELAY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_TL_LINK_DLY_0123_REG_Y0_LINK_DELAY(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_DLY_0123_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_TL_LINK_DLY_0123_REG_Y0_LINK_DELAY,
           PB_PTLSCOM23_TL_LINK_DLY_0123_REG_Y0_LINK_DELAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_DLY_0123_REG_Y0_LINK_DELAY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_TL_LINK_DLY_0123_REG_Y0_LINK_DELAY]

//>> SET_[PB_PTLSCOM23_TL_LINK_DLY_0123_REG_Y0_LINK_DELAY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_TL_LINK_DLY_0123_REG_Y0_LINK_DELAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_DLY_0123_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_TL_LINK_DLY_0123_REG_Y0_LINK_DELAY,
           PB_PTLSCOM23_TL_LINK_DLY_0123_REG_Y0_LINK_DELAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_DLY_0123_REG_Y0_LINK_DELAY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_TL_LINK_DLY_0123_REG_Y0_LINK_DELAY]

//>> GET_[PB_PTLSCOM23_TL_LINK_DLY_0123_REG_Y0_LINK_DELAY]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_TL_LINK_DLY_0123_REG_Y0_LINK_DELAY(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_DLY_0123_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_TL_LINK_DLY_0123_REG_Y0_LINK_DELAY,
           PB_PTLSCOM23_TL_LINK_DLY_0123_REG_Y0_LINK_DELAY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_DLY_0123_REG_Y0_LINK_DELAY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_TL_LINK_DLY_0123_REG_Y0_LINK_DELAY]

//>> SET_[PB_PTLSCOM23_TL_LINK_DLY_0123_REG_Y1_LINK_DELAY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_TL_LINK_DLY_0123_REG_Y1_LINK_DELAY(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_DLY_0123_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_TL_LINK_DLY_0123_REG_Y1_LINK_DELAY,
           PB_PTLSCOM23_TL_LINK_DLY_0123_REG_Y1_LINK_DELAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_DLY_0123_REG_Y1_LINK_DELAY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_TL_LINK_DLY_0123_REG_Y1_LINK_DELAY]

//>> SET_[PB_PTLSCOM23_TL_LINK_DLY_0123_REG_Y1_LINK_DELAY]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_TL_LINK_DLY_0123_REG_Y1_LINK_DELAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_DLY_0123_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_TL_LINK_DLY_0123_REG_Y1_LINK_DELAY,
           PB_PTLSCOM23_TL_LINK_DLY_0123_REG_Y1_LINK_DELAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_DLY_0123_REG_Y1_LINK_DELAY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_TL_LINK_DLY_0123_REG_Y1_LINK_DELAY]

//>> GET_[PB_PTLSCOM23_TL_LINK_DLY_0123_REG_Y1_LINK_DELAY]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_TL_LINK_DLY_0123_REG_Y1_LINK_DELAY(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_DLY_0123_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_TL_LINK_DLY_0123_REG_Y1_LINK_DELAY,
           PB_PTLSCOM23_TL_LINK_DLY_0123_REG_Y1_LINK_DELAY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_DLY_0123_REG_Y1_LINK_DELAY chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_TL_LINK_DLY_0123_REG_Y1_LINK_DELAY]

//>> PREP_[PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG]

//>> GET_[PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG]

//>> PUT_[PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG]


//>> SET_[PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET,
           PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET]

//>> SET_[PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET,
           PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET]

//>> GET_[PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET,
           PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_SET]

//>> SET_[PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET,
           PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET]

//>> SET_[PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET,
           PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET]

//>> GET_[PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET,
           PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_SET]

//>> SET_[PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT,
           PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT]

//>> SET_[PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT,
           PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT]

//>> GET_[PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT,
           PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_01_RT_DELAY_CTL_STAT]

//>> SET_[PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT,
           PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT]

//>> SET_[PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT,
           PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT]

//>> GET_[PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT,
           PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM23_TL_LINK_RT_DELAY_CTL_REG_23_RT_DELAY_CTL_STAT]

//>> PREP_[PB_PTLSCOM45_TL_LINK_SYN_01_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM45_TL_LINK_SYN_01_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM45_TL_LINK_SYN_01_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM45_TL_LINK_SYN_01_REG]

//>> GET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM45_TL_LINK_SYN_01_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM45_TL_LINK_SYN_01_REG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM45_TL_LINK_SYN_01_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG]

//>> PUT_[PB_PTLSCOM45_TL_LINK_SYN_01_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM45_TL_LINK_SYN_01_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_TL_LINK_SYN_01_REG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM45_TL_LINK_SYN_01_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM45_TL_LINK_SYN_01_REG]


//>> SET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_TL_LINK_SYN_01_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN0,
           PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN0]

//>> SET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_TL_LINK_SYN_01_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN0,
           PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN0]

//>> GET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN0]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_TL_LINK_SYN_01_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN0,
           PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN0]

//>> SET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_TL_LINK_SYN_01_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN1,
           PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN1]

//>> SET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_TL_LINK_SYN_01_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN1,
           PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN1]

//>> GET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN1]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_TL_LINK_SYN_01_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN1,
           PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN1]

//>> SET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_TL_LINK_SYN_01_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN2,
           PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN2]

//>> SET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_TL_LINK_SYN_01_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN2,
           PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN2]

//>> GET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN2]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_TL_LINK_SYN_01_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN2,
           PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN2]

//>> SET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_TL_LINK_SYN_01_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN3,
           PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN3]

//>> SET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_TL_LINK_SYN_01_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN3,
           PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN3]

//>> GET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN3]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_TL_LINK_SYN_01_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN3,
           PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_0_SCOM_SYN3]

//>> SET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_TL_LINK_SYN_01_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN0,
           PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN0]

//>> SET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_TL_LINK_SYN_01_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN0,
           PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN0]

//>> GET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN0]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_TL_LINK_SYN_01_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN0,
           PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN0]

//>> SET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_TL_LINK_SYN_01_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN1,
           PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN1]

//>> SET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_TL_LINK_SYN_01_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN1,
           PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN1]

//>> GET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN1]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_TL_LINK_SYN_01_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN1,
           PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN1]

//>> SET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_TL_LINK_SYN_01_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN2,
           PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN2]

//>> SET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_TL_LINK_SYN_01_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN2,
           PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN2]

//>> GET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN2]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_TL_LINK_SYN_01_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN2,
           PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN2]

//>> SET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_TL_LINK_SYN_01_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN3,
           PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN3]

//>> SET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_TL_LINK_SYN_01_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN3,
           PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN3]

//>> GET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN3]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM45_TL_LINK_SYN_01_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN3,
           PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM45_TL_LINK_SYN_01_REG_1_SCOM_SYN3]

//>> PREP_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM67_CFG_TLPM_MUX1_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM67_CFG_TLPM_MUX1_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG]

//>> GET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM67_CFG_TLPM_MUX1_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM67_CFG_TLPM_MUX1_REG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM67_CFG_TLPM_MUX1_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG]

//>> PUT_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM67_CFG_TLPM_MUX1_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX1_REG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM67_CFG_TLPM_MUX1_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG]


//>> SET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX1_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_0,
           PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_0]

//>> SET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_0]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX1_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_0,
           PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_0]

//>> GET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_0]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX1_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_0,
           PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_0]

//>> SET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX1_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_1,
           PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_1]

//>> SET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_1]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX1_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_1,
           PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_1]

//>> GET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_1]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX1_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_1,
           PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_1]

//>> SET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX1_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_2,
           PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_2]

//>> SET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_2]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX1_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_2,
           PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_2_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_2]

//>> GET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_2]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX1_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_2,
           PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_2_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_2]

//>> SET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX1_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_3,
           PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_3]

//>> SET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_3]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX1_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_3,
           PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_3_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_3]

//>> GET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_3]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX1_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_3,
           PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_3_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_3]

//>> SET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_4]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX1_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_4,
           PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_4]

//>> SET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_4]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX1_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_4,
           PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_4_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_4]

//>> GET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_4]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX1_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_4,
           PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_4_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_4]

//>> SET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_5]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX1_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_5,
           PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_5]

//>> SET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_5]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX1_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_5,
           PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_5_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_5]

//>> GET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_5]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX1_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_5,
           PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_5_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_5]

//>> SET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_6]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX1_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_6,
           PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_6]

//>> SET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_6]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX1_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_6,
           PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_6_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_6]

//>> GET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_6]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX1_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_6,
           PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_6_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_6]

//>> SET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_7]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX1_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_7,
           PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_7]

//>> SET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_7]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX1_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_7,
           PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_7_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_7]

//>> GET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_7]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX1_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_7,
           PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_7_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_7]

//>> SET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_8]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX1_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_8,
           PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_8]

//>> SET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_8]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX1_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_8,
           PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_8_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_8]

//>> GET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_8]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX1_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_8,
           PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_8_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_LINK_EVENT_8]

//>> SET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_ALT_EVENTS]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_CFG_TLPM_MUX1_REG_ALT_EVENTS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX1_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_CFG_TLPM_MUX1_REG_ALT_EVENTS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX1_REG_ALT_EVENTS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_ALT_EVENTS]

//>> SET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_ALT_EVENTS]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_CFG_TLPM_MUX1_REG_ALT_EVENTS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX1_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_CFG_TLPM_MUX1_REG_ALT_EVENTS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX1_REG_ALT_EVENTS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_ALT_EVENTS]

//>> SET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_ALT_EVENTS]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_CFG_TLPM_MUX1_REG_ALT_EVENTS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX1_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_CFG_TLPM_MUX1_REG_ALT_EVENTS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX1_REG_ALT_EVENTS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_ALT_EVENTS]

//>> CLEAR_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_ALT_EVENTS]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_CFG_TLPM_MUX1_REG_ALT_EVENTS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX1_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_CFG_TLPM_MUX1_REG_ALT_EVENTS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX1_REG_ALT_EVENTS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_ALT_EVENTS]

//>> GET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_ALT_EVENTS]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_CFG_TLPM_MUX1_REG_ALT_EVENTS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX1_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_CFG_TLPM_MUX1_REG_ALT_EVENTS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX1_REG_ALT_EVENTS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_ALT_EVENTS]

//>> GET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_ALT_EVENTS]
static inline bool GET_PB_PTLSCOM67_CFG_TLPM_MUX1_REG_ALT_EVENTS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX1_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_CFG_TLPM_MUX1_REG_ALT_EVENTS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX1_REG_ALT_EVENTS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_CFG_TLPM_MUX1_REG_ALT_EVENTS]

//>> PREP_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM67_CFG_TLPM_MUX2_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM67_CFG_TLPM_MUX2_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG]

//>> GET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM67_CFG_TLPM_MUX2_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM67_CFG_TLPM_MUX2_REG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM67_CFG_TLPM_MUX2_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG]

//>> PUT_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM67_CFG_TLPM_MUX2_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX2_REG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM67_CFG_TLPM_MUX2_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG]


//>> SET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG_9]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_CFG_TLPM_MUX2_REG_9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX2_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_CFG_TLPM_MUX2_REG_9,
           PB_PTLSCOM67_CFG_TLPM_MUX2_REG_9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX2_REG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG_9]

//>> SET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG_9]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_CFG_TLPM_MUX2_REG_9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX2_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_CFG_TLPM_MUX2_REG_9,
           PB_PTLSCOM67_CFG_TLPM_MUX2_REG_9_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX2_REG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG_9]

//>> GET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG_9]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_CFG_TLPM_MUX2_REG_9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX2_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_CFG_TLPM_MUX2_REG_9,
           PB_PTLSCOM67_CFG_TLPM_MUX2_REG_9_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX2_REG_9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG_9]

//>> SET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG_10]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_CFG_TLPM_MUX2_REG_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX2_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_CFG_TLPM_MUX2_REG_10,
           PB_PTLSCOM67_CFG_TLPM_MUX2_REG_10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX2_REG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG_10]

//>> SET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG_10]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_CFG_TLPM_MUX2_REG_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX2_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_CFG_TLPM_MUX2_REG_10,
           PB_PTLSCOM67_CFG_TLPM_MUX2_REG_10_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX2_REG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG_10]

//>> GET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG_10]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_CFG_TLPM_MUX2_REG_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX2_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_CFG_TLPM_MUX2_REG_10,
           PB_PTLSCOM67_CFG_TLPM_MUX2_REG_10_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX2_REG_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG_10]

//>> SET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG_11]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_CFG_TLPM_MUX2_REG_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX2_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_CFG_TLPM_MUX2_REG_11,
           PB_PTLSCOM67_CFG_TLPM_MUX2_REG_11_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX2_REG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG_11]

//>> SET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG_11]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_CFG_TLPM_MUX2_REG_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX2_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_CFG_TLPM_MUX2_REG_11,
           PB_PTLSCOM67_CFG_TLPM_MUX2_REG_11_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX2_REG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG_11]

//>> GET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG_11]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_CFG_TLPM_MUX2_REG_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX2_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_CFG_TLPM_MUX2_REG_11,
           PB_PTLSCOM67_CFG_TLPM_MUX2_REG_11_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX2_REG_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG_11]

//>> SET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG_12]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_CFG_TLPM_MUX2_REG_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX2_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_CFG_TLPM_MUX2_REG_12,
           PB_PTLSCOM67_CFG_TLPM_MUX2_REG_12_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX2_REG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG_12]

//>> SET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG_12]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_CFG_TLPM_MUX2_REG_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX2_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_CFG_TLPM_MUX2_REG_12,
           PB_PTLSCOM67_CFG_TLPM_MUX2_REG_12_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX2_REG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG_12]

//>> GET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG_12]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_CFG_TLPM_MUX2_REG_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX2_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_CFG_TLPM_MUX2_REG_12,
           PB_PTLSCOM67_CFG_TLPM_MUX2_REG_12_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX2_REG_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG_12]

//>> SET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG_13]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_CFG_TLPM_MUX2_REG_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX2_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_CFG_TLPM_MUX2_REG_13,
           PB_PTLSCOM67_CFG_TLPM_MUX2_REG_13_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX2_REG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG_13]

//>> SET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG_13]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_CFG_TLPM_MUX2_REG_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX2_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_CFG_TLPM_MUX2_REG_13,
           PB_PTLSCOM67_CFG_TLPM_MUX2_REG_13_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX2_REG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG_13]

//>> GET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG_13]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_CFG_TLPM_MUX2_REG_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX2_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_CFG_TLPM_MUX2_REG_13,
           PB_PTLSCOM67_CFG_TLPM_MUX2_REG_13_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX2_REG_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG_13]

//>> SET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG_14]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_CFG_TLPM_MUX2_REG_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX2_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_CFG_TLPM_MUX2_REG_14,
           PB_PTLSCOM67_CFG_TLPM_MUX2_REG_14_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX2_REG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG_14]

//>> SET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG_14]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_CFG_TLPM_MUX2_REG_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX2_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_CFG_TLPM_MUX2_REG_14,
           PB_PTLSCOM67_CFG_TLPM_MUX2_REG_14_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX2_REG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG_14]

//>> GET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG_14]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_CFG_TLPM_MUX2_REG_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX2_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_CFG_TLPM_MUX2_REG_14,
           PB_PTLSCOM67_CFG_TLPM_MUX2_REG_14_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX2_REG_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG_14]

//>> SET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG_15]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_CFG_TLPM_MUX2_REG_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX2_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_CFG_TLPM_MUX2_REG_15,
           PB_PTLSCOM67_CFG_TLPM_MUX2_REG_15_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX2_REG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG_15]

//>> SET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG_15]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_CFG_TLPM_MUX2_REG_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX2_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_CFG_TLPM_MUX2_REG_15,
           PB_PTLSCOM67_CFG_TLPM_MUX2_REG_15_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX2_REG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG_15]

//>> GET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG_15]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_CFG_TLPM_MUX2_REG_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_CFG_TLPM_MUX2_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_CFG_TLPM_MUX2_REG_15,
           PB_PTLSCOM67_CFG_TLPM_MUX2_REG_15_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_CFG_TLPM_MUX2_REG_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_CFG_TLPM_MUX2_REG_15]

//>> PREP_[PB_PTLSCOM67_EN_DOB_ECC_ERR_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM67_EN_DOB_ECC_ERR_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM67_EN_DOB_ECC_ERR_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM67_EN_DOB_ECC_ERR_REG]

//>> GET_[PB_PTLSCOM67_EN_DOB_ECC_ERR_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM67_EN_DOB_ECC_ERR_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM67_EN_DOB_ECC_ERR_REG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM67_EN_DOB_ECC_ERR_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM67_EN_DOB_ECC_ERR_REG]

//>> PUT_[PB_PTLSCOM67_EN_DOB_ECC_ERR_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM67_EN_DOB_ECC_ERR_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_EN_DOB_ECC_ERR_REG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM67_EN_DOB_ECC_ERR_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM67_EN_DOB_ECC_ERR_REG]


//>> SET_[PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_UE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_EN_DOB_ECC_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_UE,
           PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_UE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_UE]

//>> SET_[PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_UE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_EN_DOB_ECC_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_UE,
           PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_UE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_UE]

//>> GET_[PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_UE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_EN_DOB_ECC_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_UE,
           PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_UE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_UE]

//>> SET_[PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_CE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_EN_DOB_ECC_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_CE,
           PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_CE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_CE]

//>> SET_[PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_CE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_EN_DOB_ECC_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_CE,
           PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_CE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_CE]

//>> GET_[PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_CE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_EN_DOB_ECC_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_CE,
           PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_CE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_CE]

//>> SET_[PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_SUE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_SUE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_EN_DOB_ECC_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_SUE,
           PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_SUE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_SUE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_SUE]

//>> SET_[PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_SUE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_SUE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_EN_DOB_ECC_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_SUE,
           PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_SUE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_SUE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_SUE]

//>> GET_[PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_SUE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_SUE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_EN_DOB_ECC_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_SUE,
           PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_SUE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_SUE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_01_SUE]

//>> SET_[PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_UE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_UE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_EN_DOB_ECC_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_UE,
           PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_UE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_UE]

//>> SET_[PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_UE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_UE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_EN_DOB_ECC_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_UE,
           PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_UE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_UE]

//>> GET_[PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_UE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_UE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_EN_DOB_ECC_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_UE,
           PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_UE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_UE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_UE]

//>> SET_[PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_CE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_CE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_EN_DOB_ECC_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_CE,
           PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_CE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_CE]

//>> SET_[PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_CE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_CE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_EN_DOB_ECC_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_CE,
           PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_CE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_CE]

//>> GET_[PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_CE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_CE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_EN_DOB_ECC_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_CE,
           PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_CE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_CE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_CE]

//>> SET_[PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_SUE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_SUE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_EN_DOB_ECC_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_SUE,
           PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_SUE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_SUE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_SUE]

//>> SET_[PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_SUE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_SUE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_EN_DOB_ECC_ERR_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_SUE,
           PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_SUE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_SUE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_SUE]

//>> GET_[PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_SUE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_SUE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_EN_DOB_ECC_ERR_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_SUE,
           PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_SUE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_SUE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_EN_DOB_ECC_ERR_REG_23_SUE]

//>> PREP_[PB_PTLSCOM67_PERFTRACE_CFG_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_PTLSCOM67_PERFTRACE_CFG_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM67_PERFTRACE_CFG_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_PTLSCOM67_PERFTRACE_CFG_REG]

//>> GET_[PB_PTLSCOM67_PERFTRACE_CFG_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_PTLSCOM67_PERFTRACE_CFG_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_PTLSCOM67_PERFTRACE_CFG_REG;
#endif
    return fapi2::getScom(i_target, PB_PTLSCOM67_PERFTRACE_CFG_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_PTLSCOM67_PERFTRACE_CFG_REG]

//>> PUT_[PB_PTLSCOM67_PERFTRACE_CFG_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_PTLSCOM67_PERFTRACE_CFG_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return fapi2::putScom(i_target, PB_PTLSCOM67_PERFTRACE_CFG_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_PTLSCOM67_PERFTRACE_CFG_REG]


//>> SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_ENABLE]

//>> SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_ENABLE]

//>> SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_ENABLE]

//>> CLEAR_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_ENABLE]

//>> GET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_ENABLE]

//>> GET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_ENABLE]
static inline bool GET_PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_ENABLE]

//>> SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_FIXED_WINDOW_MODE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_FIXED_WINDOW_MODE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_FIXED_WINDOW_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_FIXED_WINDOW_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_FIXED_WINDOW_MODE]

//>> SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_FIXED_WINDOW_MODE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_FIXED_WINDOW_MODE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_FIXED_WINDOW_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_FIXED_WINDOW_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_FIXED_WINDOW_MODE]

//>> SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_FIXED_WINDOW_MODE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_FIXED_WINDOW_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_FIXED_WINDOW_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_FIXED_WINDOW_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_FIXED_WINDOW_MODE]

//>> CLEAR_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_FIXED_WINDOW_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_FIXED_WINDOW_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_FIXED_WINDOW_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_FIXED_WINDOW_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_FIXED_WINDOW_MODE]

//>> GET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_FIXED_WINDOW_MODE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_FIXED_WINDOW_MODE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_FIXED_WINDOW_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_FIXED_WINDOW_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_FIXED_WINDOW_MODE]

//>> GET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_FIXED_WINDOW_MODE]
static inline bool GET_PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_FIXED_WINDOW_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_FIXED_WINDOW_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_FIXED_WINDOW_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_FIXED_WINDOW_MODE]

//>> SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_PRESCALE_MODE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_PRESCALE_MODE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_PRESCALE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_PRESCALE_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_PRESCALE_MODE]

//>> SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_PRESCALE_MODE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_PRESCALE_MODE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_PRESCALE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_PRESCALE_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_PRESCALE_MODE]

//>> SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_PRESCALE_MODE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_PRESCALE_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_PRESCALE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_PRESCALE_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_PRESCALE_MODE]

//>> CLEAR_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_PRESCALE_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_PRESCALE_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_PRESCALE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_PRESCALE_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_PRESCALE_MODE]

//>> GET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_PRESCALE_MODE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_PRESCALE_MODE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_PRESCALE_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_PRESCALE_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_PRESCALE_MODE]

//>> GET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_PRESCALE_MODE]
static inline bool GET_PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_PRESCALE_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_PRESCALE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_PRESCALE_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_PRESCALE_MODE]

//>> SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE6]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE6]

//>> SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE6]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE6]

//>> SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE6]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE6]

//>> CLEAR_[PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE6]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE6]

//>> GET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE6]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE6]

//>> GET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE6]
static inline bool GET_PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE6]

//>> SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_ENABLE]

//>> SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_ENABLE]

//>> SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_ENABLE]

//>> CLEAR_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_ENABLE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_ENABLE]

//>> GET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_ENABLE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_ENABLE]

//>> GET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_ENABLE]
static inline bool GET_PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_ENABLE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_ENABLE]

//>> SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_FIXED_WINDOW_MODE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_FIXED_WINDOW_MODE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_FIXED_WINDOW_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_FIXED_WINDOW_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_FIXED_WINDOW_MODE]

//>> SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_FIXED_WINDOW_MODE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_FIXED_WINDOW_MODE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_FIXED_WINDOW_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_FIXED_WINDOW_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_FIXED_WINDOW_MODE]

//>> SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_FIXED_WINDOW_MODE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_FIXED_WINDOW_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_FIXED_WINDOW_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_FIXED_WINDOW_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_FIXED_WINDOW_MODE]

//>> CLEAR_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_FIXED_WINDOW_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_FIXED_WINDOW_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_FIXED_WINDOW_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_FIXED_WINDOW_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_FIXED_WINDOW_MODE]

//>> GET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_FIXED_WINDOW_MODE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_FIXED_WINDOW_MODE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_FIXED_WINDOW_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_FIXED_WINDOW_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_FIXED_WINDOW_MODE]

//>> GET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_FIXED_WINDOW_MODE]
static inline bool GET_PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_FIXED_WINDOW_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_FIXED_WINDOW_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_FIXED_WINDOW_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_FIXED_WINDOW_MODE]

//>> SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_PRESCALE_MODE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_PRESCALE_MODE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_PRESCALE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_PRESCALE_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_PRESCALE_MODE]

//>> SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_PRESCALE_MODE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_PRESCALE_MODE(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_PRESCALE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_PRESCALE_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_PRESCALE_MODE]

//>> SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_PRESCALE_MODE]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_PRESCALE_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_PRESCALE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_PRESCALE_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_PRESCALE_MODE]

//>> CLEAR_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_PRESCALE_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_PRESCALE_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_PRESCALE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_PRESCALE_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_PRESCALE_MODE]

//>> GET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_PRESCALE_MODE]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_PRESCALE_MODE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_PRESCALE_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_PRESCALE_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_PRESCALE_MODE]

//>> GET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_PRESCALE_MODE]
static inline bool GET_PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_PRESCALE_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_PRESCALE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_PRESCALE_MODE chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_PRESCALE_MODE]

//>> SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE7]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE7]

//>> SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE7]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE7]

//>> SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE7]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return o_data.setBit<PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE7]

//>> CLEAR_[PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE7]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return o_data.clearBit<PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE7]

//>> GET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE7]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE7]

//>> GET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE7]
static inline bool GET_PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return i_data.getBit<PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_TSPARE7]

//>> SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_SELECT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_SELECT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_SELECT,
           PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_SELECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_SELECT]

//>> SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_SELECT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_SELECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_SELECT,
           PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_SELECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_SELECT]

//>> GET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_SELECT]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_SELECT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_SELECT,
           PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_SELECT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_SELECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_HI_SELECT]

//>> SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_SELECT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_SELECT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_SELECT,
           PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_SELECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_SELECT]

//>> SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_SELECT]
static inline fapi2::buffer<uint64_t>& SET_PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_SELECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return o_data.insertFromRight<PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_SELECT,
           PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_SELECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_SELECT]

//>> GET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_SELECT]
static inline fapi2::buffer<uint64_t>& GET_PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_SELECT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_PTLSCOM67_PERFTRACE_CFG_REG));
#endif
    return i_data.extractToRight<PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_SELECT,
           PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_SELECT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_SELECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_PTLSCOM67_PERFTRACE_CFG_REG_ERFTRACE_LO_SELECT]

//>> PREP_[PB_BRIDGE_HCA_FIR_DATA_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_BRIDGE_HCA_FIR_DATA_RW(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_BRIDGE_HCA_FIR_DATA_RW;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_BRIDGE_HCA_FIR_DATA_RW]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_BRIDGE_HCA_FIR_DATA_RW(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_BRIDGE_HCA_FIR_DATA_RW;
#endif
    return fapi2::getScom(i_target, PB_BRIDGE_HCA_FIR_DATA_RW, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_RW]

//>> PUT_[PB_BRIDGE_HCA_FIR_DATA_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_BRIDGE_HCA_FIR_DATA_RW(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_BRIDGE_HCA_FIR_DATA_RW, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_BRIDGE_HCA_FIR_DATA_RW]

//>> PREP_[PB_BRIDGE_HCA_FIR_DATA_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_BRIDGE_HCA_FIR_DATA_WO_AND(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_BRIDGE_HCA_FIR_DATA_WO_AND;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_BRIDGE_HCA_FIR_DATA_WO_AND]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_BRIDGE_HCA_FIR_DATA_WO_AND(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_BRIDGE_HCA_FIR_DATA_WO_AND;
#endif
    return fapi2::getScom(i_target, PB_BRIDGE_HCA_FIR_DATA_WO_AND, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_WO_AND]

//>> PUT_[PB_BRIDGE_HCA_FIR_DATA_WO_AND]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_BRIDGE_HCA_FIR_DATA_WO_AND(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_BRIDGE_HCA_FIR_DATA_WO_AND, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_BRIDGE_HCA_FIR_DATA_WO_AND]

//>> PREP_[PB_BRIDGE_HCA_FIR_DATA_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_BRIDGE_HCA_FIR_DATA_WO_OR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_BRIDGE_HCA_FIR_DATA_WO_OR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_BRIDGE_HCA_FIR_DATA_WO_OR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_BRIDGE_HCA_FIR_DATA_WO_OR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_BRIDGE_HCA_FIR_DATA_WO_OR;
#endif
    return fapi2::getScom(i_target, PB_BRIDGE_HCA_FIR_DATA_WO_OR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_WO_OR]

//>> PUT_[PB_BRIDGE_HCA_FIR_DATA_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_BRIDGE_HCA_FIR_DATA_WO_OR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return fapi2::putScom(i_target, PB_BRIDGE_HCA_FIR_DATA_WO_OR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_BRIDGE_HCA_FIR_DATA_WO_OR]


//>> SET_[PB_BRIDGE_HCA_FIR_DATA_RCMD_ADDR_PE_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_RCMD_ADDR_PE_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_RCMD_ADDR_PE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_RCMD_ADDR_PE_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_RCMD_ADDR_PE_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_RCMD_ADDR_PE_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_RCMD_ADDR_PE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_RCMD_ADDR_PE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_RCMD_ADDR_PE_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_RCMD_ADDR_PE_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_RCMD_ADDR_PE_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_RCMD_ADDR_PE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.setBit<PB_BRIDGE_HCA_FIR_DATA_RCMD_ADDR_PE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_RCMD_ADDR_PE_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_RCMD_ADDR_PE_FIR]

//>> CLEAR_[PB_BRIDGE_HCA_FIR_DATA_RCMD_ADDR_PE_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_HCA_FIR_DATA_RCMD_ADDR_PE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.clearBit<PB_BRIDGE_HCA_FIR_DATA_RCMD_ADDR_PE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_RCMD_ADDR_PE_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_HCA_FIR_DATA_RCMD_ADDR_PE_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_RCMD_ADDR_PE_FIR]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_HCA_FIR_DATA_RCMD_ADDR_PE_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.extractToRight<PB_BRIDGE_HCA_FIR_DATA_RCMD_ADDR_PE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_RCMD_ADDR_PE_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_RCMD_ADDR_PE_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_RCMD_ADDR_PE_FIR]
static inline bool GET_PB_BRIDGE_HCA_FIR_DATA_RCMD_ADDR_PE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.getBit<PB_BRIDGE_HCA_FIR_DATA_RCMD_ADDR_PE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_RCMD_ADDR_PE_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_RCMD_ADDR_PE_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_RCMD_TTAG_PE_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_RCMD_TTAG_PE_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_RCMD_TTAG_PE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_RCMD_TTAG_PE_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_RCMD_TTAG_PE_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_RCMD_TTAG_PE_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_RCMD_TTAG_PE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_RCMD_TTAG_PE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_RCMD_TTAG_PE_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_RCMD_TTAG_PE_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_RCMD_TTAG_PE_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_RCMD_TTAG_PE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.setBit<PB_BRIDGE_HCA_FIR_DATA_RCMD_TTAG_PE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_RCMD_TTAG_PE_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_RCMD_TTAG_PE_FIR]

//>> CLEAR_[PB_BRIDGE_HCA_FIR_DATA_RCMD_TTAG_PE_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_HCA_FIR_DATA_RCMD_TTAG_PE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.clearBit<PB_BRIDGE_HCA_FIR_DATA_RCMD_TTAG_PE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_RCMD_TTAG_PE_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_HCA_FIR_DATA_RCMD_TTAG_PE_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_RCMD_TTAG_PE_FIR]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_HCA_FIR_DATA_RCMD_TTAG_PE_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.extractToRight<PB_BRIDGE_HCA_FIR_DATA_RCMD_TTAG_PE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_RCMD_TTAG_PE_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_RCMD_TTAG_PE_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_RCMD_TTAG_PE_FIR]
static inline bool GET_PB_BRIDGE_HCA_FIR_DATA_RCMD_TTAG_PE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.getBit<PB_BRIDGE_HCA_FIR_DATA_RCMD_TTAG_PE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_RCMD_TTAG_PE_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_RCMD_TTAG_PE_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_CRESP_TTAG_PE_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_CRESP_TTAG_PE_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_CRESP_TTAG_PE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_CRESP_TTAG_PE_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_CRESP_TTAG_PE_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_CRESP_TTAG_PE_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_CRESP_TTAG_PE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_CRESP_TTAG_PE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_CRESP_TTAG_PE_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_CRESP_TTAG_PE_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_CRESP_TTAG_PE_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_CRESP_TTAG_PE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.setBit<PB_BRIDGE_HCA_FIR_DATA_CRESP_TTAG_PE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_CRESP_TTAG_PE_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_CRESP_TTAG_PE_FIR]

//>> CLEAR_[PB_BRIDGE_HCA_FIR_DATA_CRESP_TTAG_PE_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_HCA_FIR_DATA_CRESP_TTAG_PE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.clearBit<PB_BRIDGE_HCA_FIR_DATA_CRESP_TTAG_PE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_CRESP_TTAG_PE_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_HCA_FIR_DATA_CRESP_TTAG_PE_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_CRESP_TTAG_PE_FIR]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_HCA_FIR_DATA_CRESP_TTAG_PE_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.extractToRight<PB_BRIDGE_HCA_FIR_DATA_CRESP_TTAG_PE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_CRESP_TTAG_PE_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_CRESP_TTAG_PE_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_CRESP_TTAG_PE_FIR]
static inline bool GET_PB_BRIDGE_HCA_FIR_DATA_CRESP_TTAG_PE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.getBit<PB_BRIDGE_HCA_FIR_DATA_CRESP_TTAG_PE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_CRESP_TTAG_PE_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_CRESP_TTAG_PE_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_CRESP_ATAG_PE_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_CRESP_ATAG_PE_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_CRESP_ATAG_PE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_CRESP_ATAG_PE_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_CRESP_ATAG_PE_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_CRESP_ATAG_PE_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_CRESP_ATAG_PE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_CRESP_ATAG_PE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_CRESP_ATAG_PE_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_CRESP_ATAG_PE_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_CRESP_ATAG_PE_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_CRESP_ATAG_PE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.setBit<PB_BRIDGE_HCA_FIR_DATA_CRESP_ATAG_PE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_CRESP_ATAG_PE_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_CRESP_ATAG_PE_FIR]

//>> CLEAR_[PB_BRIDGE_HCA_FIR_DATA_CRESP_ATAG_PE_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_HCA_FIR_DATA_CRESP_ATAG_PE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.clearBit<PB_BRIDGE_HCA_FIR_DATA_CRESP_ATAG_PE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_CRESP_ATAG_PE_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_HCA_FIR_DATA_CRESP_ATAG_PE_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_CRESP_ATAG_PE_FIR]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_HCA_FIR_DATA_CRESP_ATAG_PE_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.extractToRight<PB_BRIDGE_HCA_FIR_DATA_CRESP_ATAG_PE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_CRESP_ATAG_PE_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_CRESP_ATAG_PE_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_CRESP_ATAG_PE_FIR]
static inline bool GET_PB_BRIDGE_HCA_FIR_DATA_CRESP_ATAG_PE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.getBit<PB_BRIDGE_HCA_FIR_DATA_CRESP_ATAG_PE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_CRESP_ATAG_PE_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_CRESP_ATAG_PE_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_ADDR_ERR_CRESP_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_UPDT_ADDR_ERR_CRESP_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_UPDT_ADDR_ERR_CRESP_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_UPDT_ADDR_ERR_CRESP_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_ADDR_ERR_CRESP_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_ADDR_ERR_CRESP_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_UPDT_ADDR_ERR_CRESP_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_UPDT_ADDR_ERR_CRESP_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_UPDT_ADDR_ERR_CRESP_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_ADDR_ERR_CRESP_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_ADDR_ERR_CRESP_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_UPDT_ADDR_ERR_CRESP_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.setBit<PB_BRIDGE_HCA_FIR_DATA_UPDT_ADDR_ERR_CRESP_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_UPDT_ADDR_ERR_CRESP_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_ADDR_ERR_CRESP_FIR]

//>> CLEAR_[PB_BRIDGE_HCA_FIR_DATA_UPDT_ADDR_ERR_CRESP_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_HCA_FIR_DATA_UPDT_ADDR_ERR_CRESP_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.clearBit<PB_BRIDGE_HCA_FIR_DATA_UPDT_ADDR_ERR_CRESP_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_UPDT_ADDR_ERR_CRESP_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_HCA_FIR_DATA_UPDT_ADDR_ERR_CRESP_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_ADDR_ERR_CRESP_FIR]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_HCA_FIR_DATA_UPDT_ADDR_ERR_CRESP_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.extractToRight<PB_BRIDGE_HCA_FIR_DATA_UPDT_ADDR_ERR_CRESP_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_UPDT_ADDR_ERR_CRESP_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_ADDR_ERR_CRESP_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_ADDR_ERR_CRESP_FIR]
static inline bool GET_PB_BRIDGE_HCA_FIR_DATA_UPDT_ADDR_ERR_CRESP_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.getBit<PB_BRIDGE_HCA_FIR_DATA_UPDT_ADDR_ERR_CRESP_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_UPDT_ADDR_ERR_CRESP_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_ADDR_ERR_CRESP_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_INVALID_CRESP_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_UPDT_INVALID_CRESP_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_UPDT_INVALID_CRESP_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_UPDT_INVALID_CRESP_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_INVALID_CRESP_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_INVALID_CRESP_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_UPDT_INVALID_CRESP_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_UPDT_INVALID_CRESP_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_UPDT_INVALID_CRESP_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_INVALID_CRESP_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_INVALID_CRESP_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_UPDT_INVALID_CRESP_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.setBit<PB_BRIDGE_HCA_FIR_DATA_UPDT_INVALID_CRESP_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_UPDT_INVALID_CRESP_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_INVALID_CRESP_FIR]

//>> CLEAR_[PB_BRIDGE_HCA_FIR_DATA_UPDT_INVALID_CRESP_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_HCA_FIR_DATA_UPDT_INVALID_CRESP_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.clearBit<PB_BRIDGE_HCA_FIR_DATA_UPDT_INVALID_CRESP_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_UPDT_INVALID_CRESP_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_HCA_FIR_DATA_UPDT_INVALID_CRESP_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_INVALID_CRESP_FIR]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_HCA_FIR_DATA_UPDT_INVALID_CRESP_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.extractToRight<PB_BRIDGE_HCA_FIR_DATA_UPDT_INVALID_CRESP_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_UPDT_INVALID_CRESP_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_INVALID_CRESP_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_INVALID_CRESP_FIR]
static inline bool GET_PB_BRIDGE_HCA_FIR_DATA_UPDT_INVALID_CRESP_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.getBit<PB_BRIDGE_HCA_FIR_DATA_UPDT_INVALID_CRESP_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_UPDT_INVALID_CRESP_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_INVALID_CRESP_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_UNEXPECTED_CRESP_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_UPDT_UNEXPECTED_CRESP_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_UPDT_UNEXPECTED_CRESP_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_UPDT_UNEXPECTED_CRESP_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_UNEXPECTED_CRESP_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_UNEXPECTED_CRESP_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_UPDT_UNEXPECTED_CRESP_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_UPDT_UNEXPECTED_CRESP_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_UPDT_UNEXPECTED_CRESP_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_UNEXPECTED_CRESP_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_UNEXPECTED_CRESP_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_UPDT_UNEXPECTED_CRESP_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.setBit<PB_BRIDGE_HCA_FIR_DATA_UPDT_UNEXPECTED_CRESP_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_UPDT_UNEXPECTED_CRESP_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_UNEXPECTED_CRESP_FIR]

//>> CLEAR_[PB_BRIDGE_HCA_FIR_DATA_UPDT_UNEXPECTED_CRESP_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_HCA_FIR_DATA_UPDT_UNEXPECTED_CRESP_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.clearBit<PB_BRIDGE_HCA_FIR_DATA_UPDT_UNEXPECTED_CRESP_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_UPDT_UNEXPECTED_CRESP_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_HCA_FIR_DATA_UPDT_UNEXPECTED_CRESP_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_UNEXPECTED_CRESP_FIR]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_HCA_FIR_DATA_UPDT_UNEXPECTED_CRESP_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.extractToRight<PB_BRIDGE_HCA_FIR_DATA_UPDT_UNEXPECTED_CRESP_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_UPDT_UNEXPECTED_CRESP_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_UNEXPECTED_CRESP_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_UNEXPECTED_CRESP_FIR]
static inline bool GET_PB_BRIDGE_HCA_FIR_DATA_UPDT_UNEXPECTED_CRESP_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.getBit<PB_BRIDGE_HCA_FIR_DATA_UPDT_UNEXPECTED_CRESP_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_UPDT_UNEXPECTED_CRESP_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_UNEXPECTED_CRESP_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_HANG_DETECTED_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_UPDT_HANG_DETECTED_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_UPDT_HANG_DETECTED_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_UPDT_HANG_DETECTED_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_HANG_DETECTED_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_HANG_DETECTED_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_UPDT_HANG_DETECTED_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_UPDT_HANG_DETECTED_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_UPDT_HANG_DETECTED_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_HANG_DETECTED_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_HANG_DETECTED_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_UPDT_HANG_DETECTED_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.setBit<PB_BRIDGE_HCA_FIR_DATA_UPDT_HANG_DETECTED_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_UPDT_HANG_DETECTED_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_HANG_DETECTED_FIR]

//>> CLEAR_[PB_BRIDGE_HCA_FIR_DATA_UPDT_HANG_DETECTED_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_HCA_FIR_DATA_UPDT_HANG_DETECTED_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.clearBit<PB_BRIDGE_HCA_FIR_DATA_UPDT_HANG_DETECTED_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_UPDT_HANG_DETECTED_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_HCA_FIR_DATA_UPDT_HANG_DETECTED_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_HANG_DETECTED_FIR]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_HCA_FIR_DATA_UPDT_HANG_DETECTED_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.extractToRight<PB_BRIDGE_HCA_FIR_DATA_UPDT_HANG_DETECTED_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_UPDT_HANG_DETECTED_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_HANG_DETECTED_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_HANG_DETECTED_FIR]
static inline bool GET_PB_BRIDGE_HCA_FIR_DATA_UPDT_HANG_DETECTED_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.getBit<PB_BRIDGE_HCA_FIR_DATA_UPDT_HANG_DETECTED_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_UPDT_HANG_DETECTED_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_HANG_DETECTED_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_RCMD_MULTIHIT_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_RCMD_MULTIHIT_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_RCMD_MULTIHIT_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_RCMD_MULTIHIT_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_RCMD_MULTIHIT_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_RCMD_MULTIHIT_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_RCMD_MULTIHIT_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_RCMD_MULTIHIT_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_RCMD_MULTIHIT_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_RCMD_MULTIHIT_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_RCMD_MULTIHIT_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_RCMD_MULTIHIT_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.setBit<PB_BRIDGE_HCA_FIR_DATA_RCMD_MULTIHIT_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_RCMD_MULTIHIT_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_RCMD_MULTIHIT_FIR]

//>> CLEAR_[PB_BRIDGE_HCA_FIR_DATA_RCMD_MULTIHIT_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_HCA_FIR_DATA_RCMD_MULTIHIT_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.clearBit<PB_BRIDGE_HCA_FIR_DATA_RCMD_MULTIHIT_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_RCMD_MULTIHIT_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_HCA_FIR_DATA_RCMD_MULTIHIT_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_RCMD_MULTIHIT_FIR]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_HCA_FIR_DATA_RCMD_MULTIHIT_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.extractToRight<PB_BRIDGE_HCA_FIR_DATA_RCMD_MULTIHIT_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_RCMD_MULTIHIT_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_RCMD_MULTIHIT_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_RCMD_MULTIHIT_FIR]
static inline bool GET_PB_BRIDGE_HCA_FIR_DATA_RCMD_MULTIHIT_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.getBit<PB_BRIDGE_HCA_FIR_DATA_RCMD_MULTIHIT_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_RCMD_MULTIHIT_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_RCMD_MULTIHIT_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_CE_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_CE_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_CE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_CE_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_CE_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_CE_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_CE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_CE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_CE_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_CE_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_CE_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_CE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.setBit<PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_CE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_CE_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_CE_FIR]

//>> CLEAR_[PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_CE_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_CE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.clearBit<PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_CE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_CE_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_CE_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_CE_FIR]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_CE_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.extractToRight<PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_CE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_CE_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_CE_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_CE_FIR]
static inline bool GET_PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_CE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.getBit<PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_CE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_CE_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_CE_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_UE_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_UE_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_UE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_UE_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_UE_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_UE_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_UE_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_UE_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_UE_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_UE_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_UE_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_UE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.setBit<PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_UE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_UE_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_UE_FIR]

//>> CLEAR_[PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_UE_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_UE_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.clearBit<PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_UE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_UE_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_UE_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_UE_FIR]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_UE_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.extractToRight<PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_UE_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_UE_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_UE_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_UE_FIR]
static inline bool GET_PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_UE_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.getBit<PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_UE_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_UE_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_CACHE_ECC_UE_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_RCMD_DROP_COUNT_OVERFLOW_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_RCMD_DROP_COUNT_OVERFLOW_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_RCMD_DROP_COUNT_OVERFLOW_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_RCMD_DROP_COUNT_OVERFLOW_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_RCMD_DROP_COUNT_OVERFLOW_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_RCMD_DROP_COUNT_OVERFLOW_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_RCMD_DROP_COUNT_OVERFLOW_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_RCMD_DROP_COUNT_OVERFLOW_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_RCMD_DROP_COUNT_OVERFLOW_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_RCMD_DROP_COUNT_OVERFLOW_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_RCMD_DROP_COUNT_OVERFLOW_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_RCMD_DROP_COUNT_OVERFLOW_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.setBit<PB_BRIDGE_HCA_FIR_DATA_RCMD_DROP_COUNT_OVERFLOW_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_RCMD_DROP_COUNT_OVERFLOW_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_RCMD_DROP_COUNT_OVERFLOW_FIR]

//>> CLEAR_[PB_BRIDGE_HCA_FIR_DATA_RCMD_DROP_COUNT_OVERFLOW_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_HCA_FIR_DATA_RCMD_DROP_COUNT_OVERFLOW_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.clearBit<PB_BRIDGE_HCA_FIR_DATA_RCMD_DROP_COUNT_OVERFLOW_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_RCMD_DROP_COUNT_OVERFLOW_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_HCA_FIR_DATA_RCMD_DROP_COUNT_OVERFLOW_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_RCMD_DROP_COUNT_OVERFLOW_FIR]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_HCA_FIR_DATA_RCMD_DROP_COUNT_OVERFLOW_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.extractToRight<PB_BRIDGE_HCA_FIR_DATA_RCMD_DROP_COUNT_OVERFLOW_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_RCMD_DROP_COUNT_OVERFLOW_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_RCMD_DROP_COUNT_OVERFLOW_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_RCMD_DROP_COUNT_OVERFLOW_FIR]
static inline bool GET_PB_BRIDGE_HCA_FIR_DATA_RCMD_DROP_COUNT_OVERFLOW_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.getBit<PB_BRIDGE_HCA_FIR_DATA_RCMD_DROP_COUNT_OVERFLOW_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_RCMD_DROP_COUNT_OVERFLOW_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_RCMD_DROP_COUNT_OVERFLOW_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_DROP_COUNT_OVERFLOW_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_UPDT_DROP_COUNT_OVERFLOW_FIR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_UPDT_DROP_COUNT_OVERFLOW_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_UPDT_DROP_COUNT_OVERFLOW_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_DROP_COUNT_OVERFLOW_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_DROP_COUNT_OVERFLOW_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_UPDT_DROP_COUNT_OVERFLOW_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_UPDT_DROP_COUNT_OVERFLOW_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_UPDT_DROP_COUNT_OVERFLOW_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_DROP_COUNT_OVERFLOW_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_DROP_COUNT_OVERFLOW_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_UPDT_DROP_COUNT_OVERFLOW_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.setBit<PB_BRIDGE_HCA_FIR_DATA_UPDT_DROP_COUNT_OVERFLOW_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_UPDT_DROP_COUNT_OVERFLOW_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_DROP_COUNT_OVERFLOW_FIR]

//>> CLEAR_[PB_BRIDGE_HCA_FIR_DATA_UPDT_DROP_COUNT_OVERFLOW_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_HCA_FIR_DATA_UPDT_DROP_COUNT_OVERFLOW_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.clearBit<PB_BRIDGE_HCA_FIR_DATA_UPDT_DROP_COUNT_OVERFLOW_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_UPDT_DROP_COUNT_OVERFLOW_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_HCA_FIR_DATA_UPDT_DROP_COUNT_OVERFLOW_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_DROP_COUNT_OVERFLOW_FIR]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_HCA_FIR_DATA_UPDT_DROP_COUNT_OVERFLOW_FIR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.extractToRight<PB_BRIDGE_HCA_FIR_DATA_UPDT_DROP_COUNT_OVERFLOW_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_UPDT_DROP_COUNT_OVERFLOW_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_DROP_COUNT_OVERFLOW_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_DROP_COUNT_OVERFLOW_FIR]
static inline bool GET_PB_BRIDGE_HCA_FIR_DATA_UPDT_DROP_COUNT_OVERFLOW_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.getBit<PB_BRIDGE_HCA_FIR_DATA_UPDT_DROP_COUNT_OVERFLOW_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_UPDT_DROP_COUNT_OVERFLOW_FIR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_DROP_COUNT_OVERFLOW_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_LOST_DECAY_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_UPDT_LOST_DECAY_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_UPDT_LOST_DECAY_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_UPDT_LOST_DECAY_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_LOST_DECAY_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_LOST_DECAY_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_UPDT_LOST_DECAY_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_UPDT_LOST_DECAY_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_UPDT_LOST_DECAY_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_LOST_DECAY_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_LOST_DECAY_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_UPDT_LOST_DECAY_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.setBit<PB_BRIDGE_HCA_FIR_DATA_UPDT_LOST_DECAY_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_UPDT_LOST_DECAY_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_LOST_DECAY_FIR]

//>> CLEAR_[PB_BRIDGE_HCA_FIR_DATA_UPDT_LOST_DECAY_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_HCA_FIR_DATA_UPDT_LOST_DECAY_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.clearBit<PB_BRIDGE_HCA_FIR_DATA_UPDT_LOST_DECAY_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_UPDT_LOST_DECAY_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_HCA_FIR_DATA_UPDT_LOST_DECAY_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_LOST_DECAY_FIR]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_HCA_FIR_DATA_UPDT_LOST_DECAY_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.extractToRight<PB_BRIDGE_HCA_FIR_DATA_UPDT_LOST_DECAY_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_UPDT_LOST_DECAY_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_LOST_DECAY_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_LOST_DECAY_FIR]
static inline bool GET_PB_BRIDGE_HCA_FIR_DATA_UPDT_LOST_DECAY_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.getBit<PB_BRIDGE_HCA_FIR_DATA_UPDT_LOST_DECAY_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_UPDT_LOST_DECAY_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_UPDT_LOST_DECAY_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_PSI_SMF_ERROR_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_ADU_PSI_SMF_ERROR_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_ADU_PSI_SMF_ERROR_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_PSI_SMF_ERROR_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_PSI_SMF_ERROR_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_PSI_SMF_ERROR_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_ADU_PSI_SMF_ERROR_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_ADU_PSI_SMF_ERROR_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_PSI_SMF_ERROR_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_PSI_SMF_ERROR_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_PSI_SMF_ERROR_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_ADU_PSI_SMF_ERROR_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.setBit<PB_BRIDGE_HCA_FIR_DATA_ADU_PSI_SMF_ERROR_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_PSI_SMF_ERROR_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_PSI_SMF_ERROR_FIR]

//>> CLEAR_[PB_BRIDGE_HCA_FIR_DATA_ADU_PSI_SMF_ERROR_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_HCA_FIR_DATA_ADU_PSI_SMF_ERROR_FIR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.clearBit<PB_BRIDGE_HCA_FIR_DATA_ADU_PSI_SMF_ERROR_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_PSI_SMF_ERROR_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_HCA_FIR_DATA_ADU_PSI_SMF_ERROR_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_PSI_SMF_ERROR_FIR]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_HCA_FIR_DATA_ADU_PSI_SMF_ERROR_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.extractToRight<PB_BRIDGE_HCA_FIR_DATA_ADU_PSI_SMF_ERROR_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_PSI_SMF_ERROR_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_PSI_SMF_ERROR_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_PSI_SMF_ERROR_FIR]
static inline bool GET_PB_BRIDGE_HCA_FIR_DATA_ADU_PSI_SMF_ERROR_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.getBit<PB_BRIDGE_HCA_FIR_DATA_ADU_PSI_SMF_ERROR_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_PSI_SMF_ERROR_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_PSI_SMF_ERROR_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_SPARE_15_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_SPARE_15_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_SPARE_15_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_SPARE_15_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_SPARE_15_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_SPARE_15_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_SPARE_15_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_SPARE_15_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_SPARE_15_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_SPARE_15_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_SPARE_15_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_SPARE_15_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.setBit<PB_BRIDGE_HCA_FIR_DATA_SPARE_15_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_SPARE_15_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_SPARE_15_FIR]

//>> CLEAR_[PB_BRIDGE_HCA_FIR_DATA_SPARE_15_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_HCA_FIR_DATA_SPARE_15_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.clearBit<PB_BRIDGE_HCA_FIR_DATA_SPARE_15_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_SPARE_15_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_HCA_FIR_DATA_SPARE_15_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_SPARE_15_FIR]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_HCA_FIR_DATA_SPARE_15_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.extractToRight<PB_BRIDGE_HCA_FIR_DATA_SPARE_15_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_SPARE_15_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_SPARE_15_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_SPARE_15_FIR]
static inline bool GET_PB_BRIDGE_HCA_FIR_DATA_SPARE_15_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.getBit<PB_BRIDGE_HCA_FIR_DATA_SPARE_15_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_SPARE_15_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_SPARE_15_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_0_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_0_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_0_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_0_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_0_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_0_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_0_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_0_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_0_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_0_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_0_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_0_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.setBit<PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_0_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_0_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_0_FIR]

//>> CLEAR_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_0_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_0_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.clearBit<PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_0_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_0_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_0_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_0_FIR]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_0_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.extractToRight<PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_0_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_0_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_0_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_0_FIR]
static inline bool GET_PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_0_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.getBit<PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_0_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_0_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_0_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_1_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_1_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_1_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_1_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_1_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_1_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_1_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_1_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_1_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_1_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_1_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_1_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.setBit<PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_1_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_1_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_1_FIR]

//>> CLEAR_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_1_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_1_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.clearBit<PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_1_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_1_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_1_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_1_FIR]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_1_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.extractToRight<PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_1_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_1_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_1_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_1_FIR]
static inline bool GET_PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_1_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.getBit<PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_1_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_1_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_1_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_2_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_2_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_2_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_2_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_2_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_2_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_2_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_2_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_2_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_2_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_2_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_2_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.setBit<PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_2_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_2_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_2_FIR]

//>> CLEAR_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_2_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_2_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.clearBit<PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_2_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_2_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_2_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_2_FIR]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_2_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.extractToRight<PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_2_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_2_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_2_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_2_FIR]
static inline bool GET_PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_2_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.getBit<PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_2_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_2_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_2_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_3_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_3_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_3_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_3_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_3_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_3_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_3_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_3_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_3_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_3_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_3_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_3_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.setBit<PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_3_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_3_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_3_FIR]

//>> CLEAR_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_3_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_3_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.clearBit<PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_3_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_3_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_3_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_3_FIR]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_3_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.extractToRight<PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_3_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_3_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_3_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_3_FIR]
static inline bool GET_PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_3_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.getBit<PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_3_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_3_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_3_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_4_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_4_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_4_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_4_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_4_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_4_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_4_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_4_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_4_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_4_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_4_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_4_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.setBit<PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_4_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_4_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_4_FIR]

//>> CLEAR_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_4_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_4_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.clearBit<PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_4_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_4_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_4_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_4_FIR]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_4_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.extractToRight<PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_4_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_4_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_4_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_4_FIR]
static inline bool GET_PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_4_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.getBit<PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_4_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_4_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_4_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_5_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_5_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_5_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_5_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_5_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_5_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_5_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_5_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_5_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_5_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_5_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_5_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.setBit<PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_5_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_5_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_5_FIR]

//>> CLEAR_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_5_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_5_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.clearBit<PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_5_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_5_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_5_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_5_FIR]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_5_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.extractToRight<PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_5_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_5_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_5_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_5_FIR]
static inline bool GET_PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_5_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.getBit<PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_5_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_5_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_RECOV_ERR_5_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_0_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_0_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_0_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_0_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_0_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_0_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_0_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_0_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_0_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_0_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_0_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_0_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.setBit<PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_0_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_0_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_0_FIR]

//>> CLEAR_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_0_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_0_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.clearBit<PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_0_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_0_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_0_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_0_FIR]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_0_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.extractToRight<PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_0_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_0_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_0_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_0_FIR]
static inline bool GET_PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_0_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.getBit<PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_0_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_0_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_0_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_1_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_1_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_1_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_1_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_1_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_1_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_1_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_1_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_1_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_1_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_1_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_1_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.setBit<PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_1_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_1_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_1_FIR]

//>> CLEAR_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_1_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_1_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.clearBit<PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_1_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_1_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_1_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_1_FIR]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_1_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.extractToRight<PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_1_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_1_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_1_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_1_FIR]
static inline bool GET_PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_1_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.getBit<PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_1_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_1_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_1_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_2_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_2_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_2_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_2_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_2_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_2_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_2_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_2_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_2_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_2_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_2_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_2_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.setBit<PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_2_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_2_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_2_FIR]

//>> CLEAR_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_2_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_2_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.clearBit<PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_2_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_2_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_2_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_2_FIR]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_2_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.extractToRight<PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_2_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_2_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_2_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_2_FIR]
static inline bool GET_PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_2_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.getBit<PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_2_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_2_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_2_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_3_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_3_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_3_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_3_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_3_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_3_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_3_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_3_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_3_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_3_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_3_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_3_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.setBit<PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_3_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_3_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_3_FIR]

//>> CLEAR_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_3_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_3_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.clearBit<PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_3_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_3_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_3_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_3_FIR]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_3_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.extractToRight<PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_3_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_3_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_3_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_3_FIR]
static inline bool GET_PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_3_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.getBit<PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_3_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_3_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_3_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_4_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_4_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_4_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_4_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_4_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_4_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_4_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_4_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_4_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_4_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_4_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_4_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.setBit<PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_4_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_4_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_4_FIR]

//>> CLEAR_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_4_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_4_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.clearBit<PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_4_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_4_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_4_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_4_FIR]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_4_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.extractToRight<PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_4_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_4_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_4_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_4_FIR]
static inline bool GET_PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_4_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.getBit<PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_4_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_4_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_4_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_5_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_5_FIR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_5_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_5_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_5_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_5_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_5_FIR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.insertFromRight<PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_5_FIR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_5_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_5_FIR]

//>> SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_5_FIR]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_5_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.setBit<PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_5_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_5_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_5_FIR]

//>> CLEAR_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_5_FIR]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_5_FIR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return o_data.clearBit<PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_5_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_5_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_5_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_5_FIR]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_5_FIR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.extractToRight<PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_5_FIR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_5_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_5_FIR]

//>> GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_5_FIR]
static inline bool GET_PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_5_FIR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_HCA_FIR_DATA_RW, PB_BRIDGE_HCA_FIR_DATA_WO_AND, PB_BRIDGE_HCA_FIR_DATA_WO_OR));
#endif
    return i_data.getBit<PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_5_FIR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_5_FIR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_HCA_FIR_DATA_ADU_XSTOP_ERR_5_FIR]

//>> PREP_[PB_BRIDGE_NHTM_SC_HTM_CTRL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_PB_BRIDGE_NHTM_SC_HTM_CTRL(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_BRIDGE_NHTM_SC_HTM_CTRL;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[PB_BRIDGE_NHTM_SC_HTM_CTRL]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_CTRL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_PB_BRIDGE_NHTM_SC_HTM_CTRL(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = PB_BRIDGE_NHTM_SC_HTM_CTRL;
#endif
    return fapi2::getScom(i_target, PB_BRIDGE_NHTM_SC_HTM_CTRL, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_CTRL]

//>> PUT_[PB_BRIDGE_NHTM_SC_HTM_CTRL]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_PB_BRIDGE_NHTM_SC_HTM_CTRL(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return fapi2::putScom(i_target, PB_BRIDGE_NHTM_SC_HTM_CTRL, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[PB_BRIDGE_NHTM_SC_HTM_CTRL]


//>> SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_TRIG]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_CTRL_TRIG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_CTRL_TRIG,
           PB_BRIDGE_NHTM_SC_HTM_CTRL_TRIG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CTRL_TRIG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_TRIG]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_TRIG]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_CTRL_TRIG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_CTRL_TRIG,
           PB_BRIDGE_NHTM_SC_HTM_CTRL_TRIG_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CTRL_TRIG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_TRIG]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_TRIG]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_CTRL_TRIG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_CTRL_TRIG,
           PB_BRIDGE_NHTM_SC_HTM_CTRL_TRIG_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CTRL_TRIG chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_TRIG]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_MARK]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_CTRL_MARK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_CTRL_MARK,
           PB_BRIDGE_NHTM_SC_HTM_CTRL_MARK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CTRL_MARK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_MARK]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_MARK]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_CTRL_MARK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_CTRL_MARK,
           PB_BRIDGE_NHTM_SC_HTM_CTRL_MARK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CTRL_MARK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_MARK]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_MARK]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_CTRL_MARK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_CTRL_MARK,
           PB_BRIDGE_NHTM_SC_HTM_CTRL_MARK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CTRL_MARK chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_MARK]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG0_STOP]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG0_STOP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG0_STOP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG0_STOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG0_STOP]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG0_STOP]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG0_STOP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG0_STOP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG0_STOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG0_STOP]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG0_STOP]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG0_STOP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return o_data.setBit<PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG0_STOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG0_STOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG0_STOP]

//>> CLEAR_[PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG0_STOP]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG0_STOP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return o_data.clearBit<PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG0_STOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG0_STOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG0_STOP]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG0_STOP]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG0_STOP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG0_STOP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG0_STOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG0_STOP]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG0_STOP]
static inline bool GET_PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG0_STOP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return i_data.getBit<PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG0_STOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG0_STOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG0_STOP]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG1_STOP]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG1_STOP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG1_STOP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG1_STOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG1_STOP]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG1_STOP]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG1_STOP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG1_STOP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG1_STOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG1_STOP]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG1_STOP]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG1_STOP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return o_data.setBit<PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG1_STOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG1_STOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG1_STOP]

//>> CLEAR_[PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG1_STOP]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG1_STOP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return o_data.clearBit<PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG1_STOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG1_STOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG1_STOP]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG1_STOP]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG1_STOP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG1_STOP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG1_STOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG1_STOP]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG1_STOP]
static inline bool GET_PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG1_STOP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return i_data.getBit<PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG1_STOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG1_STOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_DBG1_STOP]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_RUN_STOP]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_CTRL_RUN_STOP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_CTRL_RUN_STOP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CTRL_RUN_STOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_RUN_STOP]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_RUN_STOP]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_CTRL_RUN_STOP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_CTRL_RUN_STOP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CTRL_RUN_STOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_RUN_STOP]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_RUN_STOP]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_CTRL_RUN_STOP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return o_data.setBit<PB_BRIDGE_NHTM_SC_HTM_CTRL_RUN_STOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CTRL_RUN_STOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_RUN_STOP]

//>> CLEAR_[PB_BRIDGE_NHTM_SC_HTM_CTRL_RUN_STOP]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_NHTM_SC_HTM_CTRL_RUN_STOP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return o_data.clearBit<PB_BRIDGE_NHTM_SC_HTM_CTRL_RUN_STOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CTRL_RUN_STOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_NHTM_SC_HTM_CTRL_RUN_STOP]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_RUN_STOP]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_CTRL_RUN_STOP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_CTRL_RUN_STOP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CTRL_RUN_STOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_RUN_STOP]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_RUN_STOP]
static inline bool GET_PB_BRIDGE_NHTM_SC_HTM_CTRL_RUN_STOP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return i_data.getBit<PB_BRIDGE_NHTM_SC_HTM_CTRL_RUN_STOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CTRL_RUN_STOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_RUN_STOP]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_OTHER_DBG0_STOP]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_CTRL_OTHER_DBG0_STOP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_CTRL_OTHER_DBG0_STOP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CTRL_OTHER_DBG0_STOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_OTHER_DBG0_STOP]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_OTHER_DBG0_STOP]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_CTRL_OTHER_DBG0_STOP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_CTRL_OTHER_DBG0_STOP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CTRL_OTHER_DBG0_STOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_OTHER_DBG0_STOP]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_OTHER_DBG0_STOP]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_CTRL_OTHER_DBG0_STOP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return o_data.setBit<PB_BRIDGE_NHTM_SC_HTM_CTRL_OTHER_DBG0_STOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CTRL_OTHER_DBG0_STOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_OTHER_DBG0_STOP]

//>> CLEAR_[PB_BRIDGE_NHTM_SC_HTM_CTRL_OTHER_DBG0_STOP]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_NHTM_SC_HTM_CTRL_OTHER_DBG0_STOP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return o_data.clearBit<PB_BRIDGE_NHTM_SC_HTM_CTRL_OTHER_DBG0_STOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CTRL_OTHER_DBG0_STOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_NHTM_SC_HTM_CTRL_OTHER_DBG0_STOP]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_OTHER_DBG0_STOP]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_CTRL_OTHER_DBG0_STOP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_CTRL_OTHER_DBG0_STOP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CTRL_OTHER_DBG0_STOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_OTHER_DBG0_STOP]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_OTHER_DBG0_STOP]
static inline bool GET_PB_BRIDGE_NHTM_SC_HTM_CTRL_OTHER_DBG0_STOP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return i_data.getBit<PB_BRIDGE_NHTM_SC_HTM_CTRL_OTHER_DBG0_STOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CTRL_OTHER_DBG0_STOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_OTHER_DBG0_STOP]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_SPARE1012]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_CTRL_SPARE1012(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_CTRL_SPARE1012,
           PB_BRIDGE_NHTM_SC_HTM_CTRL_SPARE1012_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CTRL_SPARE1012 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_SPARE1012]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_SPARE1012]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_CTRL_SPARE1012(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_CTRL_SPARE1012,
           PB_BRIDGE_NHTM_SC_HTM_CTRL_SPARE1012_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CTRL_SPARE1012 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_SPARE1012]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_SPARE1012]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_CTRL_SPARE1012(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_CTRL_SPARE1012,
           PB_BRIDGE_NHTM_SC_HTM_CTRL_SPARE1012_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CTRL_SPARE1012 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_SPARE1012]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_XSTOP_STOP]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_CTRL_XSTOP_STOP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_CTRL_XSTOP_STOP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CTRL_XSTOP_STOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_XSTOP_STOP]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_XSTOP_STOP]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_CTRL_XSTOP_STOP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_CTRL_XSTOP_STOP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CTRL_XSTOP_STOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_XSTOP_STOP]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_XSTOP_STOP]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_CTRL_XSTOP_STOP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return o_data.setBit<PB_BRIDGE_NHTM_SC_HTM_CTRL_XSTOP_STOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CTRL_XSTOP_STOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_XSTOP_STOP]

//>> CLEAR_[PB_BRIDGE_NHTM_SC_HTM_CTRL_XSTOP_STOP]
static inline fapi2::buffer<uint64_t>& CLEAR_PB_BRIDGE_NHTM_SC_HTM_CTRL_XSTOP_STOP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return o_data.clearBit<PB_BRIDGE_NHTM_SC_HTM_CTRL_XSTOP_STOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CTRL_XSTOP_STOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[PB_BRIDGE_NHTM_SC_HTM_CTRL_XSTOP_STOP]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_XSTOP_STOP]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_CTRL_XSTOP_STOP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_CTRL_XSTOP_STOP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CTRL_XSTOP_STOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_XSTOP_STOP]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_XSTOP_STOP]
static inline bool GET_PB_BRIDGE_NHTM_SC_HTM_CTRL_XSTOP_STOP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return i_data.getBit<PB_BRIDGE_NHTM_SC_HTM_CTRL_XSTOP_STOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CTRL_XSTOP_STOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_XSTOP_STOP]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_SPARE1415]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_CTRL_SPARE1415(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_CTRL_SPARE1415,
           PB_BRIDGE_NHTM_SC_HTM_CTRL_SPARE1415_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CTRL_SPARE1415 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_SPARE1415]

//>> SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_SPARE1415]
static inline fapi2::buffer<uint64_t>& SET_PB_BRIDGE_NHTM_SC_HTM_CTRL_SPARE1415(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return o_data.insertFromRight<PB_BRIDGE_NHTM_SC_HTM_CTRL_SPARE1415,
           PB_BRIDGE_NHTM_SC_HTM_CTRL_SPARE1415_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CTRL_SPARE1415 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_SPARE1415]

//>> GET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_SPARE1415]
static inline fapi2::buffer<uint64_t>& GET_PB_BRIDGE_NHTM_SC_HTM_CTRL_SPARE1415(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(PB_BRIDGE_NHTM_SC_HTM_CTRL));
#endif
    return i_data.extractToRight<PB_BRIDGE_NHTM_SC_HTM_CTRL_SPARE1415,
           PB_BRIDGE_NHTM_SC_HTM_CTRL_SPARE1415_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access PB_BRIDGE_NHTM_SC_HTM_CTRL_SPARE1415 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[PB_BRIDGE_NHTM_SC_HTM_CTRL_SPARE1415]

//>> PREP_[TP_TCN0_N0_CLK_REGION]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_CLK_REGION(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_CLK_REGION;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_CLK_REGION]

//>> GET_[TP_TCN0_N0_CLK_REGION]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_CLK_REGION(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_CLK_REGION;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_CLK_REGION, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION]

//>> PUT_[TP_TCN0_N0_CLK_REGION]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_CLK_REGION(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_CLK_REGION, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_CLK_REGION]


//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_CMD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_CLOCK_CMD,
           TP_TCN0_N0_CLK_REGION_CLOCK_CMD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_CMD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_CMD]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_CMD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_CLOCK_CMD,
           TP_TCN0_N0_CLK_REGION_CLOCK_CMD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_CMD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_CMD]

//>> GET_[TP_TCN0_N0_CLK_REGION_CLOCK_CMD]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CLK_REGION_CLOCK_CMD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CLK_REGION_CLOCK_CMD,
           TP_TCN0_N0_CLK_REGION_CLOCK_CMD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_CMD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_CLOCK_CMD]

//>> SET_[TP_TCN0_N0_CLK_REGION_SLAVE_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_SLAVE_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_SLAVE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_SLAVE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_SLAVE_MODE]

//>> SET_[TP_TCN0_N0_CLK_REGION_SLAVE_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_SLAVE_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_SLAVE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_SLAVE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_SLAVE_MODE]

//>> SET_[TP_TCN0_N0_CLK_REGION_SLAVE_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_SLAVE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.setBit<TP_TCN0_N0_CLK_REGION_SLAVE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_SLAVE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_SLAVE_MODE]

//>> CLEAR_[TP_TCN0_N0_CLK_REGION_SLAVE_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CLK_REGION_SLAVE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.clearBit<TP_TCN0_N0_CLK_REGION_SLAVE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_SLAVE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CLK_REGION_SLAVE_MODE]

//>> GET_[TP_TCN0_N0_CLK_REGION_SLAVE_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CLK_REGION_SLAVE_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CLK_REGION_SLAVE_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_SLAVE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_SLAVE_MODE]

//>> GET_[TP_TCN0_N0_CLK_REGION_SLAVE_MODE]
static inline bool GET_TP_TCN0_N0_CLK_REGION_SLAVE_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.getBit<TP_TCN0_N0_CLK_REGION_SLAVE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_SLAVE_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_SLAVE_MODE]

//>> SET_[TP_TCN0_N0_CLK_REGION_MASTER_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_MASTER_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_MASTER_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_MASTER_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_MASTER_MODE]

//>> SET_[TP_TCN0_N0_CLK_REGION_MASTER_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_MASTER_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_MASTER_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_MASTER_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_MASTER_MODE]

//>> SET_[TP_TCN0_N0_CLK_REGION_MASTER_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_MASTER_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.setBit<TP_TCN0_N0_CLK_REGION_MASTER_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_MASTER_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_MASTER_MODE]

//>> CLEAR_[TP_TCN0_N0_CLK_REGION_MASTER_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CLK_REGION_MASTER_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.clearBit<TP_TCN0_N0_CLK_REGION_MASTER_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_MASTER_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CLK_REGION_MASTER_MODE]

//>> GET_[TP_TCN0_N0_CLK_REGION_MASTER_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CLK_REGION_MASTER_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CLK_REGION_MASTER_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_MASTER_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_MASTER_MODE]

//>> GET_[TP_TCN0_N0_CLK_REGION_MASTER_MODE]
static inline bool GET_TP_TCN0_N0_CLK_REGION_MASTER_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.getBit<TP_TCN0_N0_CLK_REGION_MASTER_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_MASTER_MODE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_MASTER_MODE]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_PERV]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_PERV(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_PERV,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_PERV chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_PERV]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_PERV]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_PERV(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_PERV,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_PERV chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_PERV]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_PERV]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_PERV(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.setBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_PERV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_PERV chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_PERV]

//>> CLEAR_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_PERV]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_PERV(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.clearBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_PERV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_PERV chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_PERV]

//>> GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_PERV]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_PERV(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_PERV,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_PERV chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_PERV]

//>> GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_PERV]
static inline bool GET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_PERV(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.getBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_PERV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_PERV chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_PERV]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT1]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT1]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.setBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT1]

//>> CLEAR_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT1]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.clearBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT1]

//>> GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT1]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT1]

//>> GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT1]
static inline bool GET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.getBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT1]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT2]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT2]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT2]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT2]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT2]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.setBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT2]

//>> CLEAR_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT2]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.clearBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT2]

//>> GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT2]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT2]

//>> GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT2]
static inline bool GET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.getBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT2]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT3]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT3]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT3]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT3]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT3]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.setBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT3]

//>> CLEAR_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT3]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.clearBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT3]

//>> GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT3]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT3]

//>> GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT3]
static inline bool GET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.getBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT3]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT4]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT4]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT4]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT4]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT4]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.setBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT4]

//>> CLEAR_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT4]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.clearBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT4]

//>> GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT4]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT4]

//>> GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT4]
static inline bool GET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.getBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT4]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT5]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT5]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT5]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT5]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT5]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.setBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT5]

//>> CLEAR_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT5]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.clearBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT5]

//>> GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT5]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT5]

//>> GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT5]
static inline bool GET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.getBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT5]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT6]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT6]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT6]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT6]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT6]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.setBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT6]

//>> CLEAR_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT6]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.clearBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT6]

//>> GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT6]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT6]

//>> GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT6]
static inline bool GET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.getBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT6]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT7]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT7]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT7]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT7]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT7]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.setBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT7]

//>> CLEAR_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT7]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.clearBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT7]

//>> GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT7]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT7]

//>> GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT7]
static inline bool GET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.getBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT7]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT8]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT8]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT8]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT8]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT8]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.setBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT8]

//>> CLEAR_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT8]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.clearBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT8]

//>> GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT8]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT8]

//>> GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT8]
static inline bool GET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.getBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT8]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT9]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT9 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT9]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT9]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT9 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT9]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT9]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.setBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT9 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT9]

//>> CLEAR_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT9]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.clearBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT9 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT9]

//>> GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT9]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT9 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT9]

//>> GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT9]
static inline bool GET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.getBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT9 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT9]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT10]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT10]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.setBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT10]

//>> CLEAR_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT10]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.clearBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT10]

//>> GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT10]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT10]

//>> GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT10]
static inline bool GET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.getBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT10]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT11]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT11]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.setBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT11]

//>> CLEAR_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT11]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.clearBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT11]

//>> GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT11]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT11]

//>> GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT11]
static inline bool GET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.getBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT11]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT12]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT12]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.setBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT12]

//>> CLEAR_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT12]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.clearBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT12]

//>> GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT12]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT12]

//>> GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT12]
static inline bool GET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.getBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT12]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT13]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT13]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.setBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT13]

//>> CLEAR_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT13]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.clearBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT13]

//>> GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT13]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT13]

//>> GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT13]
static inline bool GET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.getBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT13]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT14]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT14]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.setBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT14]

//>> CLEAR_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT14]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.clearBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT14]

//>> GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT14]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT14]

//>> GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT14]
static inline bool GET_TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.getBit<TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_CLOCK_REGION_UNIT14]

//>> SET_[TP_TCN0_N0_CLK_REGION_SEL_THOLD_SL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_SEL_THOLD_SL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_SEL_THOLD_SL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_SEL_THOLD_SL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_SEL_THOLD_SL]

//>> SET_[TP_TCN0_N0_CLK_REGION_SEL_THOLD_SL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_SEL_THOLD_SL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_SEL_THOLD_SL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_SEL_THOLD_SL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_SEL_THOLD_SL]

//>> SET_[TP_TCN0_N0_CLK_REGION_SEL_THOLD_SL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_SEL_THOLD_SL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.setBit<TP_TCN0_N0_CLK_REGION_SEL_THOLD_SL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_SEL_THOLD_SL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_SEL_THOLD_SL]

//>> CLEAR_[TP_TCN0_N0_CLK_REGION_SEL_THOLD_SL]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CLK_REGION_SEL_THOLD_SL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.clearBit<TP_TCN0_N0_CLK_REGION_SEL_THOLD_SL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_SEL_THOLD_SL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CLK_REGION_SEL_THOLD_SL]

//>> GET_[TP_TCN0_N0_CLK_REGION_SEL_THOLD_SL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CLK_REGION_SEL_THOLD_SL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CLK_REGION_SEL_THOLD_SL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_SEL_THOLD_SL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_SEL_THOLD_SL]

//>> GET_[TP_TCN0_N0_CLK_REGION_SEL_THOLD_SL]
static inline bool GET_TP_TCN0_N0_CLK_REGION_SEL_THOLD_SL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.getBit<TP_TCN0_N0_CLK_REGION_SEL_THOLD_SL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_SEL_THOLD_SL chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_SEL_THOLD_SL]

//>> SET_[TP_TCN0_N0_CLK_REGION_SEL_THOLD_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_SEL_THOLD_NSL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_SEL_THOLD_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_SEL_THOLD_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_SEL_THOLD_NSL]

//>> SET_[TP_TCN0_N0_CLK_REGION_SEL_THOLD_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_SEL_THOLD_NSL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_SEL_THOLD_NSL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_SEL_THOLD_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_SEL_THOLD_NSL]

//>> SET_[TP_TCN0_N0_CLK_REGION_SEL_THOLD_NSL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_SEL_THOLD_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.setBit<TP_TCN0_N0_CLK_REGION_SEL_THOLD_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_SEL_THOLD_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_SEL_THOLD_NSL]

//>> CLEAR_[TP_TCN0_N0_CLK_REGION_SEL_THOLD_NSL]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CLK_REGION_SEL_THOLD_NSL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.clearBit<TP_TCN0_N0_CLK_REGION_SEL_THOLD_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_SEL_THOLD_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CLK_REGION_SEL_THOLD_NSL]

//>> GET_[TP_TCN0_N0_CLK_REGION_SEL_THOLD_NSL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CLK_REGION_SEL_THOLD_NSL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CLK_REGION_SEL_THOLD_NSL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_SEL_THOLD_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_SEL_THOLD_NSL]

//>> GET_[TP_TCN0_N0_CLK_REGION_SEL_THOLD_NSL]
static inline bool GET_TP_TCN0_N0_CLK_REGION_SEL_THOLD_NSL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.getBit<TP_TCN0_N0_CLK_REGION_SEL_THOLD_NSL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_SEL_THOLD_NSL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_SEL_THOLD_NSL]

//>> SET_[TP_TCN0_N0_CLK_REGION_SEL_THOLD_ARY]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_SEL_THOLD_ARY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_SEL_THOLD_ARY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_SEL_THOLD_ARY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_SEL_THOLD_ARY]

//>> SET_[TP_TCN0_N0_CLK_REGION_SEL_THOLD_ARY]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_SEL_THOLD_ARY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_SEL_THOLD_ARY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_SEL_THOLD_ARY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_SEL_THOLD_ARY]

//>> SET_[TP_TCN0_N0_CLK_REGION_SEL_THOLD_ARY]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_SEL_THOLD_ARY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.setBit<TP_TCN0_N0_CLK_REGION_SEL_THOLD_ARY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_SEL_THOLD_ARY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_SEL_THOLD_ARY]

//>> CLEAR_[TP_TCN0_N0_CLK_REGION_SEL_THOLD_ARY]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CLK_REGION_SEL_THOLD_ARY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.clearBit<TP_TCN0_N0_CLK_REGION_SEL_THOLD_ARY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_SEL_THOLD_ARY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CLK_REGION_SEL_THOLD_ARY]

//>> GET_[TP_TCN0_N0_CLK_REGION_SEL_THOLD_ARY]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CLK_REGION_SEL_THOLD_ARY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CLK_REGION_SEL_THOLD_ARY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_SEL_THOLD_ARY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_SEL_THOLD_ARY]

//>> GET_[TP_TCN0_N0_CLK_REGION_SEL_THOLD_ARY]
static inline bool GET_TP_TCN0_N0_CLK_REGION_SEL_THOLD_ARY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.getBit<TP_TCN0_N0_CLK_REGION_SEL_THOLD_ARY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_SEL_THOLD_ARY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_SEL_THOLD_ARY]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_PULSE_USE_EVEN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_PULSE_USE_EVEN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_CLOCK_PULSE_USE_EVEN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_PULSE_USE_EVEN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_PULSE_USE_EVEN]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_PULSE_USE_EVEN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_PULSE_USE_EVEN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_CLOCK_PULSE_USE_EVEN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_PULSE_USE_EVEN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_PULSE_USE_EVEN]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_PULSE_USE_EVEN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_PULSE_USE_EVEN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.setBit<TP_TCN0_N0_CLK_REGION_CLOCK_PULSE_USE_EVEN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_PULSE_USE_EVEN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_PULSE_USE_EVEN]

//>> CLEAR_[TP_TCN0_N0_CLK_REGION_CLOCK_PULSE_USE_EVEN]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CLK_REGION_CLOCK_PULSE_USE_EVEN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.clearBit<TP_TCN0_N0_CLK_REGION_CLOCK_PULSE_USE_EVEN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_PULSE_USE_EVEN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CLK_REGION_CLOCK_PULSE_USE_EVEN]

//>> GET_[TP_TCN0_N0_CLK_REGION_CLOCK_PULSE_USE_EVEN]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CLK_REGION_CLOCK_PULSE_USE_EVEN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CLK_REGION_CLOCK_PULSE_USE_EVEN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_PULSE_USE_EVEN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_CLOCK_PULSE_USE_EVEN]

//>> GET_[TP_TCN0_N0_CLK_REGION_CLOCK_PULSE_USE_EVEN]
static inline bool GET_TP_TCN0_N0_CLK_REGION_CLOCK_PULSE_USE_EVEN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.getBit<TP_TCN0_N0_CLK_REGION_CLOCK_PULSE_USE_EVEN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_PULSE_USE_EVEN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_CLOCK_PULSE_USE_EVEN]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_START_RUNN_SUPPR_FIRST_CLK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_START_RUNN_SUPPR_FIRST_CLK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_CLOCK_START_RUNN_SUPPR_FIRST_CLK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_START_RUNN_SUPPR_FIRST_CLK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_START_RUNN_SUPPR_FIRST_CLK]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_START_RUNN_SUPPR_FIRST_CLK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_START_RUNN_SUPPR_FIRST_CLK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_CLOCK_START_RUNN_SUPPR_FIRST_CLK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_START_RUNN_SUPPR_FIRST_CLK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_START_RUNN_SUPPR_FIRST_CLK]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_START_RUNN_SUPPR_FIRST_CLK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_START_RUNN_SUPPR_FIRST_CLK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.setBit<TP_TCN0_N0_CLK_REGION_CLOCK_START_RUNN_SUPPR_FIRST_CLK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_START_RUNN_SUPPR_FIRST_CLK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_START_RUNN_SUPPR_FIRST_CLK]

//>> CLEAR_[TP_TCN0_N0_CLK_REGION_CLOCK_START_RUNN_SUPPR_FIRST_CLK]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CLK_REGION_CLOCK_START_RUNN_SUPPR_FIRST_CLK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.clearBit<TP_TCN0_N0_CLK_REGION_CLOCK_START_RUNN_SUPPR_FIRST_CLK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_START_RUNN_SUPPR_FIRST_CLK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CLK_REGION_CLOCK_START_RUNN_SUPPR_FIRST_CLK]

//>> GET_[TP_TCN0_N0_CLK_REGION_CLOCK_START_RUNN_SUPPR_FIRST_CLK]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CLK_REGION_CLOCK_START_RUNN_SUPPR_FIRST_CLK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CLK_REGION_CLOCK_START_RUNN_SUPPR_FIRST_CLK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_START_RUNN_SUPPR_FIRST_CLK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_CLOCK_START_RUNN_SUPPR_FIRST_CLK]

//>> GET_[TP_TCN0_N0_CLK_REGION_CLOCK_START_RUNN_SUPPR_FIRST_CLK]
static inline bool GET_TP_TCN0_N0_CLK_REGION_CLOCK_START_RUNN_SUPPR_FIRST_CLK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.getBit<TP_TCN0_N0_CLK_REGION_CLOCK_START_RUNN_SUPPR_FIRST_CLK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_START_RUNN_SUPPR_FIRST_CLK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_CLOCK_START_RUNN_SUPPR_FIRST_CLK]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_STOP_RUNN_SUPPR_LAST_CLK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_STOP_RUNN_SUPPR_LAST_CLK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_CLOCK_STOP_RUNN_SUPPR_LAST_CLK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_STOP_RUNN_SUPPR_LAST_CLK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_STOP_RUNN_SUPPR_LAST_CLK]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_STOP_RUNN_SUPPR_LAST_CLK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_STOP_RUNN_SUPPR_LAST_CLK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CLK_REGION_CLOCK_STOP_RUNN_SUPPR_LAST_CLK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_STOP_RUNN_SUPPR_LAST_CLK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_STOP_RUNN_SUPPR_LAST_CLK]

//>> SET_[TP_TCN0_N0_CLK_REGION_CLOCK_STOP_RUNN_SUPPR_LAST_CLK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CLK_REGION_CLOCK_STOP_RUNN_SUPPR_LAST_CLK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.setBit<TP_TCN0_N0_CLK_REGION_CLOCK_STOP_RUNN_SUPPR_LAST_CLK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_STOP_RUNN_SUPPR_LAST_CLK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CLK_REGION_CLOCK_STOP_RUNN_SUPPR_LAST_CLK]

//>> CLEAR_[TP_TCN0_N0_CLK_REGION_CLOCK_STOP_RUNN_SUPPR_LAST_CLK]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CLK_REGION_CLOCK_STOP_RUNN_SUPPR_LAST_CLK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return o_data.clearBit<TP_TCN0_N0_CLK_REGION_CLOCK_STOP_RUNN_SUPPR_LAST_CLK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_STOP_RUNN_SUPPR_LAST_CLK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CLK_REGION_CLOCK_STOP_RUNN_SUPPR_LAST_CLK]

//>> GET_[TP_TCN0_N0_CLK_REGION_CLOCK_STOP_RUNN_SUPPR_LAST_CLK]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CLK_REGION_CLOCK_STOP_RUNN_SUPPR_LAST_CLK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CLK_REGION_CLOCK_STOP_RUNN_SUPPR_LAST_CLK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_STOP_RUNN_SUPPR_LAST_CLK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_CLOCK_STOP_RUNN_SUPPR_LAST_CLK]

//>> GET_[TP_TCN0_N0_CLK_REGION_CLOCK_STOP_RUNN_SUPPR_LAST_CLK]
static inline bool GET_TP_TCN0_N0_CLK_REGION_CLOCK_STOP_RUNN_SUPPR_LAST_CLK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CLK_REGION));
#endif
    return i_data.getBit<TP_TCN0_N0_CLK_REGION_CLOCK_STOP_RUNN_SUPPR_LAST_CLK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CLK_REGION_CLOCK_STOP_RUNN_SUPPR_LAST_CLK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CLK_REGION_CLOCK_STOP_RUNN_SUPPR_LAST_CLK]

//>> PREP_[TP_TCN0_N0_CPLT_CONF0_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_CPLT_CONF0_RW(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_CPLT_CONF0_RW;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_CPLT_CONF0_RW]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_CPLT_CONF0_RW(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_CPLT_CONF0_RW;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_CPLT_CONF0_RW, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_RW]

//>> PUT_[TP_TCN0_N0_CPLT_CONF0_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_CPLT_CONF0_RW(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_CPLT_CONF0_RW, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_CPLT_CONF0_RW]

//>> PREP_[TP_TCN0_N0_CPLT_CONF0_WO_CLEAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_CPLT_CONF0_WO_CLEAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_CPLT_CONF0_WO_CLEAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_CPLT_CONF0_WO_CLEAR]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_WO_CLEAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_CPLT_CONF0_WO_CLEAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_CPLT_CONF0_WO_CLEAR;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_WO_CLEAR]

//>> PUT_[TP_TCN0_N0_CPLT_CONF0_WO_CLEAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_CPLT_CONF0_WO_CLEAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_CPLT_CONF0_WO_CLEAR]

//>> PREP_[TP_TCN0_N0_CPLT_CONF0_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_CPLT_CONF0_WO_OR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_CPLT_CONF0_WO_OR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_CPLT_CONF0_WO_OR]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_CPLT_CONF0_WO_OR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_CPLT_CONF0_WO_OR;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_CPLT_CONF0_WO_OR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_WO_OR]

//>> PUT_[TP_TCN0_N0_CPLT_CONF0_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_CPLT_CONF0_WO_OR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_CPLT_CONF0_WO_OR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_CPLT_CONF0_WO_OR]


//>> SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE0_SEL_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE0_SEL_DC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE0_SEL_DC,
           TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE0_SEL_DC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE0_SEL_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE0_SEL_DC]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE0_SEL_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE0_SEL_DC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE0_SEL_DC,
           TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE0_SEL_DC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE0_SEL_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE0_SEL_DC]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE0_SEL_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE0_SEL_DC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE0_SEL_DC,
           TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE0_SEL_DC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE0_SEL_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE0_SEL_DC]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_6G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_6G(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_6G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_6G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_6G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_6G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_6G(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_6G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_6G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_6G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_6G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_6G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_6G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_6G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_6G]

//>> CLEAR_[TP_TCN0_N0_CPLT_CONF0_RESERVED_6G]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CONF0_RESERVED_6G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_6G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_6G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CONF0_RESERVED_6G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_6G]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CONF0_RESERVED_6G(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_6G,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_6G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_6G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_6G]
static inline bool GET_TP_TCN0_N0_CPLT_CONF0_RESERVED_6G(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_6G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_6G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_6G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_7G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_7G(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_7G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_7G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_7G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_7G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_7G(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_7G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_7G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_7G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_7G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_7G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_7G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_7G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_7G]

//>> CLEAR_[TP_TCN0_N0_CPLT_CONF0_RESERVED_7G]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CONF0_RESERVED_7G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_7G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_7G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CONF0_RESERVED_7G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_7G]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CONF0_RESERVED_7G(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_7G,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_7G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_7G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_7G]
static inline bool GET_TP_TCN0_N0_CPLT_CONF0_RESERVED_7G(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_7G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_7G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_7G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE1_SEL_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE1_SEL_DC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE1_SEL_DC,
           TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE1_SEL_DC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE1_SEL_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE1_SEL_DC]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE1_SEL_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE1_SEL_DC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE1_SEL_DC,
           TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE1_SEL_DC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE1_SEL_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE1_SEL_DC]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE1_SEL_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE1_SEL_DC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE1_SEL_DC,
           TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE1_SEL_DC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE1_SEL_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE1_SEL_DC]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_14G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_14G(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_14G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_14G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_14G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_14G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_14G(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_14G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_14G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_14G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_14G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_14G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_14G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_14G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_14G]

//>> CLEAR_[TP_TCN0_N0_CPLT_CONF0_RESERVED_14G]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CONF0_RESERVED_14G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_14G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_14G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CONF0_RESERVED_14G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_14G]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CONF0_RESERVED_14G(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_14G,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_14G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_14G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_14G]
static inline bool GET_TP_TCN0_N0_CPLT_CONF0_RESERVED_14G(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_14G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_14G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_14G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_15G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_15G(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_15G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_15G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_15G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_15G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_15G(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_15G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_15G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_15G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_15G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_15G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_15G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_15G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_15G]

//>> CLEAR_[TP_TCN0_N0_CPLT_CONF0_RESERVED_15G]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CONF0_RESERVED_15G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_15G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_15G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CONF0_RESERVED_15G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_15G]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CONF0_RESERVED_15G(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_15G,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_15G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_15G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_15G]
static inline bool GET_TP_TCN0_N0_CPLT_CONF0_RESERVED_15G(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_15G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_15G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_15G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE2_SEL_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE2_SEL_DC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE2_SEL_DC,
           TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE2_SEL_DC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE2_SEL_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE2_SEL_DC]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE2_SEL_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE2_SEL_DC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE2_SEL_DC,
           TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE2_SEL_DC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE2_SEL_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE2_SEL_DC]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE2_SEL_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE2_SEL_DC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE2_SEL_DC,
           TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE2_SEL_DC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE2_SEL_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE2_SEL_DC]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_22G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_22G(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_22G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_22G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_22G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_22G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_22G(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_22G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_22G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_22G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_22G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_22G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_22G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_22G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_22G]

//>> CLEAR_[TP_TCN0_N0_CPLT_CONF0_RESERVED_22G]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CONF0_RESERVED_22G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_22G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_22G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CONF0_RESERVED_22G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_22G]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CONF0_RESERVED_22G(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_22G,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_22G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_22G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_22G]
static inline bool GET_TP_TCN0_N0_CPLT_CONF0_RESERVED_22G(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_22G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_22G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_22G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_23G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_23G(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_23G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_23G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_23G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_23G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_23G(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_23G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_23G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_23G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_23G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_23G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_23G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_23G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_23G]

//>> CLEAR_[TP_TCN0_N0_CPLT_CONF0_RESERVED_23G]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CONF0_RESERVED_23G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_23G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_23G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CONF0_RESERVED_23G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_23G]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CONF0_RESERVED_23G(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_23G,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_23G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_23G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_23G]
static inline bool GET_TP_TCN0_N0_CPLT_CONF0_RESERVED_23G(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_23G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_23G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_23G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE3_SEL_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE3_SEL_DC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE3_SEL_DC,
           TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE3_SEL_DC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE3_SEL_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE3_SEL_DC]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE3_SEL_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE3_SEL_DC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE3_SEL_DC,
           TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE3_SEL_DC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE3_SEL_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE3_SEL_DC]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE3_SEL_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE3_SEL_DC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE3_SEL_DC,
           TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE3_SEL_DC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE3_SEL_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_PROBE3_SEL_DC]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_30G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_30G(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_30G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_30G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_30G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_30G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_30G(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_30G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_30G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_30G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_30G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_30G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_30G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_30G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_30G]

//>> CLEAR_[TP_TCN0_N0_CPLT_CONF0_RESERVED_30G]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CONF0_RESERVED_30G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_30G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_30G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CONF0_RESERVED_30G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_30G]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CONF0_RESERVED_30G(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_30G,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_30G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_30G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_30G]
static inline bool GET_TP_TCN0_N0_CPLT_CONF0_RESERVED_30G(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_30G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_30G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_30G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_31G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_31G(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_31G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_31G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_31G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_31G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_31G(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_31G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_31G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_31G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_31G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_31G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_31G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_31G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_31G]

//>> CLEAR_[TP_TCN0_N0_CPLT_CONF0_RESERVED_31G]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CONF0_RESERVED_31G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_31G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_31G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CONF0_RESERVED_31G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_31G]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CONF0_RESERVED_31G(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_31G,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_31G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_31G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_31G]
static inline bool GET_TP_TCN0_N0_CPLT_CONF0_RESERVED_31G(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_31G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_31G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_31G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_OFLOW_FEH_SEL_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_OFLOW_FEH_SEL_DC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_OFLOW_FEH_SEL_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_OFLOW_FEH_SEL_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_OFLOW_FEH_SEL_DC]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_OFLOW_FEH_SEL_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_OFLOW_FEH_SEL_DC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_OFLOW_FEH_SEL_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_OFLOW_FEH_SEL_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_OFLOW_FEH_SEL_DC]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_OFLOW_FEH_SEL_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_OFLOW_FEH_SEL_DC(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_OFLOW_FEH_SEL_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_OFLOW_FEH_SEL_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_OFLOW_FEH_SEL_DC]

//>> CLEAR_[TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_OFLOW_FEH_SEL_DC]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_OFLOW_FEH_SEL_DC(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_OFLOW_FEH_SEL_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_OFLOW_FEH_SEL_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_OFLOW_FEH_SEL_DC]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_OFLOW_FEH_SEL_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_OFLOW_FEH_SEL_DC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_OFLOW_FEH_SEL_DC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_OFLOW_FEH_SEL_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_OFLOW_FEH_SEL_DC]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_OFLOW_FEH_SEL_DC]
static inline bool GET_TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_OFLOW_FEH_SEL_DC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_OFLOW_FEH_SEL_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_OFLOW_FEH_SEL_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_CTRL_MISC_OFLOW_FEH_SEL_DC]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_PROTECT_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_PROTECT_DC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_PROTECT_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_PROTECT_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_PROTECT_DC]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_PROTECT_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_PROTECT_DC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_PROTECT_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_PROTECT_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_PROTECT_DC]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_PROTECT_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_PROTECT_DC(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_PROTECT_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_PROTECT_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_PROTECT_DC]

//>> CLEAR_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_PROTECT_DC]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_PROTECT_DC(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_PROTECT_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_PROTECT_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_PROTECT_DC]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_PROTECT_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_PROTECT_DC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_PROTECT_DC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_PROTECT_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_PROTECT_DC]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_PROTECT_DC]
static inline bool GET_TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_PROTECT_DC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_PROTECT_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_PROTECT_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_PROTECT_DC]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SDIS_DC_N]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SDIS_DC_N(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SDIS_DC_N,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SDIS_DC_N chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SDIS_DC_N]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SDIS_DC_N]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SDIS_DC_N(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SDIS_DC_N,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SDIS_DC_N chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SDIS_DC_N]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SDIS_DC_N]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SDIS_DC_N(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SDIS_DC_N>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SDIS_DC_N chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SDIS_DC_N]

//>> CLEAR_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SDIS_DC_N]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SDIS_DC_N(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SDIS_DC_N>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SDIS_DC_N chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SDIS_DC_N]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SDIS_DC_N]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SDIS_DC_N(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SDIS_DC_N,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SDIS_DC_N chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SDIS_DC_N]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SDIS_DC_N]
static inline bool GET_TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SDIS_DC_N(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SDIS_DC_N>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SDIS_DC_N chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SDIS_DC_N]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_DIAG_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_DIAG_DC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_DIAG_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_DIAG_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_DIAG_DC]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_DIAG_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_DIAG_DC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_DIAG_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_DIAG_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_DIAG_DC]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_DIAG_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_DIAG_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_DIAG_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_DIAG_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_DIAG_DC]

//>> CLEAR_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_DIAG_DC]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_DIAG_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_DIAG_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_DIAG_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_DIAG_DC]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_DIAG_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_DIAG_DC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_DIAG_DC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_DIAG_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_DIAG_DC]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_DIAG_DC]
static inline bool GET_TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_DIAG_DC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_DIAG_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_DIAG_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_SCAN_DIAG_DC]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_36G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_36G(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_36G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_36G chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_36G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_36G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_36G(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_36G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_36G chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_36G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_36G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_36G(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_36G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_36G chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_36G]

//>> CLEAR_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_36G]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_36G(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_36G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_36G chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_36G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_36G]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_36G(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_36G,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_36G chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_36G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_36G]
static inline bool GET_TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_36G(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_36G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_36G chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_36G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_37G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_37G(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_37G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_37G chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_37G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_37G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_37G(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_37G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_37G chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_37G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_37G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_37G(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_37G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_37G chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_37G]

//>> CLEAR_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_37G]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_37G(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_37G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_37G chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_37G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_37G]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_37G(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_37G,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_37G chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_37G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_37G]
static inline bool GET_TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_37G(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_37G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_37G chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_37G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_38G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_38G(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_38G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_38G chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_38G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_38G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_38G(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_38G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_38G chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_38G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_38G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_38G(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_38G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_38G chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_38G]

//>> CLEAR_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_38G]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_38G(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_38G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_38G chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_38G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_38G]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_38G(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_38G,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_38G chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_38G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_38G]
static inline bool GET_TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_38G(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_38G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_38G chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_38G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_39G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_39G(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_39G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_39G chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_39G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_39G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_39G(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_39G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_39G chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_39G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_39G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_39G(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_39G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_39G chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_39G]

//>> CLEAR_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_39G]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_39G(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_39G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_39G chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_39G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_39G]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_39G(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_39G,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_39G chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_39G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_39G]
static inline bool GET_TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_39G(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_39G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_39G chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_TEST_CONTROL_39G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_EPS_MASK_VITL_PCB_ERR_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_CTRL_EPS_MASK_VITL_PCB_ERR_DC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_CTRL_EPS_MASK_VITL_PCB_ERR_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_EPS_MASK_VITL_PCB_ERR_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_EPS_MASK_VITL_PCB_ERR_DC]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_EPS_MASK_VITL_PCB_ERR_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_CTRL_EPS_MASK_VITL_PCB_ERR_DC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_CTRL_EPS_MASK_VITL_PCB_ERR_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_EPS_MASK_VITL_PCB_ERR_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_EPS_MASK_VITL_PCB_ERR_DC]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_EPS_MASK_VITL_PCB_ERR_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_CTRL_EPS_MASK_VITL_PCB_ERR_DC(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CONF0_CTRL_EPS_MASK_VITL_PCB_ERR_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_EPS_MASK_VITL_PCB_ERR_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_EPS_MASK_VITL_PCB_ERR_DC]

//>> CLEAR_[TP_TCN0_N0_CPLT_CONF0_CTRL_EPS_MASK_VITL_PCB_ERR_DC]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CONF0_CTRL_EPS_MASK_VITL_PCB_ERR_DC(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CONF0_CTRL_EPS_MASK_VITL_PCB_ERR_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_EPS_MASK_VITL_PCB_ERR_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CONF0_CTRL_EPS_MASK_VITL_PCB_ERR_DC]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_CTRL_EPS_MASK_VITL_PCB_ERR_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CONF0_CTRL_EPS_MASK_VITL_PCB_ERR_DC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CONF0_CTRL_EPS_MASK_VITL_PCB_ERR_DC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_EPS_MASK_VITL_PCB_ERR_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_CTRL_EPS_MASK_VITL_PCB_ERR_DC]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_CTRL_EPS_MASK_VITL_PCB_ERR_DC]
static inline bool GET_TP_TCN0_N0_CPLT_CONF0_CTRL_EPS_MASK_VITL_PCB_ERR_DC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CONF0_CTRL_EPS_MASK_VITL_PCB_ERR_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_EPS_MASK_VITL_PCB_ERR_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_CTRL_EPS_MASK_VITL_PCB_ERR_DC]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_MASK_VITL_SCAN_OPCG_ERR_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_CTRL_CC_MASK_VITL_SCAN_OPCG_ERR_DC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_CTRL_CC_MASK_VITL_SCAN_OPCG_ERR_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_CC_MASK_VITL_SCAN_OPCG_ERR_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_MASK_VITL_SCAN_OPCG_ERR_DC]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_MASK_VITL_SCAN_OPCG_ERR_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_CTRL_CC_MASK_VITL_SCAN_OPCG_ERR_DC(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_CTRL_CC_MASK_VITL_SCAN_OPCG_ERR_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_CC_MASK_VITL_SCAN_OPCG_ERR_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_MASK_VITL_SCAN_OPCG_ERR_DC]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_MASK_VITL_SCAN_OPCG_ERR_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_CTRL_CC_MASK_VITL_SCAN_OPCG_ERR_DC(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CONF0_CTRL_CC_MASK_VITL_SCAN_OPCG_ERR_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_CC_MASK_VITL_SCAN_OPCG_ERR_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_MASK_VITL_SCAN_OPCG_ERR_DC]

//>> CLEAR_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_MASK_VITL_SCAN_OPCG_ERR_DC]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CONF0_CTRL_CC_MASK_VITL_SCAN_OPCG_ERR_DC(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CONF0_CTRL_CC_MASK_VITL_SCAN_OPCG_ERR_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_CC_MASK_VITL_SCAN_OPCG_ERR_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_MASK_VITL_SCAN_OPCG_ERR_DC]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_MASK_VITL_SCAN_OPCG_ERR_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CONF0_CTRL_CC_MASK_VITL_SCAN_OPCG_ERR_DC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CONF0_CTRL_CC_MASK_VITL_SCAN_OPCG_ERR_DC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_CC_MASK_VITL_SCAN_OPCG_ERR_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_MASK_VITL_SCAN_OPCG_ERR_DC]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_MASK_VITL_SCAN_OPCG_ERR_DC]
static inline bool GET_TP_TCN0_N0_CPLT_CONF0_CTRL_CC_MASK_VITL_SCAN_OPCG_ERR_DC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CONF0_CTRL_CC_MASK_VITL_SCAN_OPCG_ERR_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_CTRL_CC_MASK_VITL_SCAN_OPCG_ERR_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_CTRL_CC_MASK_VITL_SCAN_OPCG_ERR_DC]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_42G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_42G(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_42G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_42G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_42G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_42G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_42G(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_42G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_42G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_42G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_42G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_42G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_42G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_42G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_42G]

//>> CLEAR_[TP_TCN0_N0_CPLT_CONF0_RESERVED_42G]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CONF0_RESERVED_42G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_42G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_42G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CONF0_RESERVED_42G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_42G]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CONF0_RESERVED_42G(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_42G,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_42G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_42G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_42G]
static inline bool GET_TP_TCN0_N0_CPLT_CONF0_RESERVED_42G(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_42G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_42G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_42G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_43G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_43G(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_43G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_43G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_43G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_43G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_43G(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_43G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_43G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_43G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_43G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_43G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_43G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_43G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_43G]

//>> CLEAR_[TP_TCN0_N0_CPLT_CONF0_RESERVED_43G]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CONF0_RESERVED_43G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_43G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_43G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CONF0_RESERVED_43G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_43G]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CONF0_RESERVED_43G(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_43G,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_43G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_43G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_43G]
static inline bool GET_TP_TCN0_N0_CPLT_CONF0_RESERVED_43G(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_43G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_43G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_43G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_TC_PCB_DBG_GLB_BRCST_EN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_TC_PCB_DBG_GLB_BRCST_EN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_TC_PCB_DBG_GLB_BRCST_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_TC_PCB_DBG_GLB_BRCST_EN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_TC_PCB_DBG_GLB_BRCST_EN]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_TC_PCB_DBG_GLB_BRCST_EN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_TC_PCB_DBG_GLB_BRCST_EN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_TC_PCB_DBG_GLB_BRCST_EN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_TC_PCB_DBG_GLB_BRCST_EN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_TC_PCB_DBG_GLB_BRCST_EN]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_TC_PCB_DBG_GLB_BRCST_EN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_TC_PCB_DBG_GLB_BRCST_EN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CONF0_TC_PCB_DBG_GLB_BRCST_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_TC_PCB_DBG_GLB_BRCST_EN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_TC_PCB_DBG_GLB_BRCST_EN]

//>> CLEAR_[TP_TCN0_N0_CPLT_CONF0_TC_PCB_DBG_GLB_BRCST_EN]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CONF0_TC_PCB_DBG_GLB_BRCST_EN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CONF0_TC_PCB_DBG_GLB_BRCST_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_TC_PCB_DBG_GLB_BRCST_EN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CONF0_TC_PCB_DBG_GLB_BRCST_EN]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_TC_PCB_DBG_GLB_BRCST_EN]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CONF0_TC_PCB_DBG_GLB_BRCST_EN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CONF0_TC_PCB_DBG_GLB_BRCST_EN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_TC_PCB_DBG_GLB_BRCST_EN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_TC_PCB_DBG_GLB_BRCST_EN]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_TC_PCB_DBG_GLB_BRCST_EN]
static inline bool GET_TP_TCN0_N0_CPLT_CONF0_TC_PCB_DBG_GLB_BRCST_EN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CONF0_TC_PCB_DBG_GLB_BRCST_EN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_TC_PCB_DBG_GLB_BRCST_EN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_TC_PCB_DBG_GLB_BRCST_EN]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_45G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_45G(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_45G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_45G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_45G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_45G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_45G(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_45G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_45G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_45G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_45G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_RESERVED_45G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_45G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_45G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_45G]

//>> CLEAR_[TP_TCN0_N0_CPLT_CONF0_RESERVED_45G]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CONF0_RESERVED_45G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_45G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_45G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CONF0_RESERVED_45G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_45G]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CONF0_RESERVED_45G(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CONF0_RESERVED_45G,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_45G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_45G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_45G]
static inline bool GET_TP_TCN0_N0_CPLT_CONF0_RESERVED_45G(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CONF0_RESERVED_45G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_RESERVED_45G chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_RESERVED_45G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_TC_SKIT_CANARY_MODE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_TC_SKIT_CANARY_MODE_DC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_TC_SKIT_CANARY_MODE_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_TC_SKIT_CANARY_MODE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_TC_SKIT_CANARY_MODE_DC]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_TC_SKIT_CANARY_MODE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_TC_SKIT_CANARY_MODE_DC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_TC_SKIT_CANARY_MODE_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_TC_SKIT_CANARY_MODE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_TC_SKIT_CANARY_MODE_DC]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_TC_SKIT_CANARY_MODE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_TC_SKIT_CANARY_MODE_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CONF0_TC_SKIT_CANARY_MODE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_TC_SKIT_CANARY_MODE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_TC_SKIT_CANARY_MODE_DC]

//>> CLEAR_[TP_TCN0_N0_CPLT_CONF0_TC_SKIT_CANARY_MODE_DC]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CONF0_TC_SKIT_CANARY_MODE_DC(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CONF0_TC_SKIT_CANARY_MODE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_TC_SKIT_CANARY_MODE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CONF0_TC_SKIT_CANARY_MODE_DC]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_TC_SKIT_CANARY_MODE_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CONF0_TC_SKIT_CANARY_MODE_DC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CONF0_TC_SKIT_CANARY_MODE_DC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_TC_SKIT_CANARY_MODE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_TC_SKIT_CANARY_MODE_DC]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_TC_SKIT_CANARY_MODE_DC]
static inline bool GET_TP_TCN0_N0_CPLT_CONF0_TC_SKIT_CANARY_MODE_DC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CONF0_TC_SKIT_CANARY_MODE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_TC_SKIT_CANARY_MODE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_TC_SKIT_CANARY_MODE_DC]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_MODE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_MODE_DC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_MODE_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_MODE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_MODE_DC]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_MODE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_MODE_DC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_MODE_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_MODE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_MODE_DC]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_MODE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_MODE_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_MODE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_MODE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_MODE_DC]

//>> CLEAR_[TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_MODE_DC]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_MODE_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_MODE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_MODE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_MODE_DC]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_MODE_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_MODE_DC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_MODE_DC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_MODE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_MODE_DC]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_MODE_DC]
static inline bool GET_TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_MODE_DC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_MODE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_MODE_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_MODE_DC]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_ID_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_ID_DC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_ID_DC,
           TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_ID_DC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_ID_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_ID_DC]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_ID_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_ID_DC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_ID_DC,
           TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_ID_DC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_ID_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_ID_DC]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_ID_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_ID_DC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_ID_DC,
           TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_ID_DC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_ID_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_TC_TOPOLOGY_ID_DC]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_52G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_52G(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_52G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_52G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_52G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_52G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_52G(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_52G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_52G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_52G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_52G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_52G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_52G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_52G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_52G]

//>> CLEAR_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_52G]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_52G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_52G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_52G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_52G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_52G]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_52G(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_52G,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_52G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_52G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_52G]
static inline bool GET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_52G(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_52G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_52G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_52G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_53G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_53G(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_53G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_53G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_53G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_53G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_53G(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_53G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_53G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_53G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_53G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_53G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_53G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_53G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_53G]

//>> CLEAR_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_53G]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_53G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_53G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_53G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_53G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_53G]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_53G(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_53G,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_53G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_53G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_53G]
static inline bool GET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_53G(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_53G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_53G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_53G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_54G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_54G(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_54G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_54G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_54G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_54G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_54G(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_54G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_54G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_54G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_54G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_54G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_54G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_54G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_54G]

//>> CLEAR_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_54G]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_54G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_54G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_54G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_54G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_54G]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_54G(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_54G,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_54G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_54G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_54G]
static inline bool GET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_54G(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_54G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_54G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_54G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_55G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_55G(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_55G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_55G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_55G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_55G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_55G(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_55G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_55G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_55G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_55G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_55G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_55G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_55G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_55G]

//>> CLEAR_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_55G]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_55G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_55G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_55G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_55G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_55G]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_55G(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_55G,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_55G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_55G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_55G]
static inline bool GET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_55G(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_55G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_55G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_55G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_56G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_56G(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_56G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_56G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_56G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_56G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_56G(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_56G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_56G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_56G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_56G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_56G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_56G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_56G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_56G]

//>> CLEAR_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_56G]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_56G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_56G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_56G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_56G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_56G]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_56G(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_56G,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_56G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_56G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_56G]
static inline bool GET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_56G(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_56G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_56G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_56G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_57G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_57G(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_57G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_57G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_57G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_57G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_57G(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_57G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_57G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_57G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_57G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_57G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_57G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_57G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_57G]

//>> CLEAR_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_57G]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_57G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_57G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_57G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_57G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_57G]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_57G(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_57G,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_57G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_57G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_57G]
static inline bool GET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_57G(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_57G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_57G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_57G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_58G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_58G(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_58G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_58G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_58G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_58G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_58G(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_58G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_58G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_58G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_58G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_58G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_58G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_58G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_58G]

//>> CLEAR_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_58G]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_58G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_58G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_58G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_58G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_58G]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_58G(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_58G,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_58G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_58G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_58G]
static inline bool GET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_58G(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_58G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_58G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_58G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_59G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_59G(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_59G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_59G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_59G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_59G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_59G(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_59G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_59G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_59G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_59G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_59G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_59G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_59G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_59G]

//>> CLEAR_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_59G]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_59G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_59G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_59G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_59G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_59G]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_59G(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_59G,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_59G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_59G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_59G]
static inline bool GET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_59G(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_59G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_59G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_59G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_60G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_60G(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_60G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_60G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_60G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_60G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_60G(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_60G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_60G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_60G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_60G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_60G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_60G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_60G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_60G]

//>> CLEAR_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_60G]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_60G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_60G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_60G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_60G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_60G]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_60G(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_60G,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_60G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_60G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_60G]
static inline bool GET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_60G(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_60G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_60G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_60G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_61G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_61G(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_61G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_61G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_61G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_61G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_61G(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_61G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_61G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_61G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_61G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_61G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_61G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_61G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_61G]

//>> CLEAR_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_61G]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_61G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_61G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_61G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_61G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_61G]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_61G(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_61G,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_61G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_61G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_61G]
static inline bool GET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_61G(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_61G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_61G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_61G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_62G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_62G(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_62G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_62G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_62G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_62G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_62G(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_62G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_62G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_62G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_62G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_62G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_62G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_62G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_62G]

//>> CLEAR_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_62G]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_62G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_62G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_62G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_62G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_62G]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_62G(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_62G,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_62G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_62G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_62G]
static inline bool GET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_62G(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_62G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_62G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_62G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_63G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_63G(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_63G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_63G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_63G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_63G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_63G(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_63G,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_63G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_63G]

//>> SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_63G]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_63G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_63G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_63G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_63G]

//>> CLEAR_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_63G]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_63G(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_63G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_63G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_63G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_63G]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_63G(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_63G,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_63G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_63G]

//>> GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_63G]
static inline bool GET_TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_63G(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CONF0_RW, TP_TCN0_N0_CPLT_CONF0_WO_CLEAR, TP_TCN0_N0_CPLT_CONF0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_63G>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_63G chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CONF0_FREE_USAGE_63G]

//>> PREP_[TP_TCN0_N0_CPLT_CTRL0_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_CPLT_CTRL0_RW(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_CPLT_CTRL0_RW;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_CPLT_CTRL0_RW]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_CPLT_CTRL0_RW(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_CPLT_CTRL0_RW;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_CPLT_CTRL0_RW, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_RW]

//>> PUT_[TP_TCN0_N0_CPLT_CTRL0_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_CPLT_CTRL0_RW(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_CPLT_CTRL0_RW, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_CPLT_CTRL0_RW]

//>> PREP_[TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR]

//>> PUT_[TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR]

//>> PREP_[TP_TCN0_N0_CPLT_CTRL0_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_CPLT_CTRL0_WO_OR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_CPLT_CTRL0_WO_OR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_CPLT_CTRL0_WO_OR]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_CPLT_CTRL0_WO_OR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_CPLT_CTRL0_WO_OR;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_CPLT_CTRL0_WO_OR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_WO_OR]

//>> PUT_[TP_TCN0_N0_CPLT_CTRL0_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_CPLT_CTRL0_WO_OR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_CPLT_CTRL0_WO_OR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_CPLT_CTRL0_WO_OR]


//>> SET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABSTCLK_MUXSEL_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABSTCLK_MUXSEL_DC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABSTCLK_MUXSEL_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABSTCLK_MUXSEL_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABSTCLK_MUXSEL_DC]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABSTCLK_MUXSEL_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABSTCLK_MUXSEL_DC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABSTCLK_MUXSEL_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABSTCLK_MUXSEL_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABSTCLK_MUXSEL_DC]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABSTCLK_MUXSEL_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABSTCLK_MUXSEL_DC(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABSTCLK_MUXSEL_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABSTCLK_MUXSEL_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABSTCLK_MUXSEL_DC]

//>> CLEAR_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABSTCLK_MUXSEL_DC]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABSTCLK_MUXSEL_DC(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABSTCLK_MUXSEL_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABSTCLK_MUXSEL_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABSTCLK_MUXSEL_DC]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABSTCLK_MUXSEL_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABSTCLK_MUXSEL_DC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABSTCLK_MUXSEL_DC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABSTCLK_MUXSEL_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABSTCLK_MUXSEL_DC]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABSTCLK_MUXSEL_DC]
static inline bool GET_TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABSTCLK_MUXSEL_DC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABSTCLK_MUXSEL_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABSTCLK_MUXSEL_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABSTCLK_MUXSEL_DC]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_SYNCCLK_MUXSEL_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_SYNCCLK_MUXSEL_DC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_SYNCCLK_MUXSEL_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_SYNCCLK_MUXSEL_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_SYNCCLK_MUXSEL_DC]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_SYNCCLK_MUXSEL_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_SYNCCLK_MUXSEL_DC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_SYNCCLK_MUXSEL_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_SYNCCLK_MUXSEL_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_SYNCCLK_MUXSEL_DC]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_SYNCCLK_MUXSEL_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_SYNCCLK_MUXSEL_DC(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_SYNCCLK_MUXSEL_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_SYNCCLK_MUXSEL_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_SYNCCLK_MUXSEL_DC]

//>> CLEAR_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_SYNCCLK_MUXSEL_DC]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_SYNCCLK_MUXSEL_DC(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_SYNCCLK_MUXSEL_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_SYNCCLK_MUXSEL_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_SYNCCLK_MUXSEL_DC]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_SYNCCLK_MUXSEL_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_SYNCCLK_MUXSEL_DC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_SYNCCLK_MUXSEL_DC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_SYNCCLK_MUXSEL_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_SYNCCLK_MUXSEL_DC]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_SYNCCLK_MUXSEL_DC]
static inline bool GET_TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_SYNCCLK_MUXSEL_DC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_SYNCCLK_MUXSEL_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_SYNCCLK_MUXSEL_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_SYNCCLK_MUXSEL_DC]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FLUSHMODE_INH]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FLUSHMODE_INH(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FLUSHMODE_INH,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FLUSHMODE_INH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FLUSHMODE_INH]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FLUSHMODE_INH]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FLUSHMODE_INH(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FLUSHMODE_INH,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FLUSHMODE_INH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FLUSHMODE_INH]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FLUSHMODE_INH]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FLUSHMODE_INH(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FLUSHMODE_INH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FLUSHMODE_INH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FLUSHMODE_INH]

//>> CLEAR_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FLUSHMODE_INH]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FLUSHMODE_INH(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FLUSHMODE_INH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FLUSHMODE_INH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FLUSHMODE_INH]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FLUSHMODE_INH]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FLUSHMODE_INH(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FLUSHMODE_INH,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FLUSHMODE_INH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FLUSHMODE_INH]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FLUSHMODE_INH]
static inline bool GET_TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FLUSHMODE_INH(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FLUSHMODE_INH>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FLUSHMODE_INH chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FLUSHMODE_INH]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FORCE_ALIGN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FORCE_ALIGN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FORCE_ALIGN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FORCE_ALIGN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FORCE_ALIGN]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FORCE_ALIGN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FORCE_ALIGN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FORCE_ALIGN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FORCE_ALIGN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FORCE_ALIGN]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FORCE_ALIGN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FORCE_ALIGN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FORCE_ALIGN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FORCE_ALIGN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FORCE_ALIGN]

//>> CLEAR_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FORCE_ALIGN]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FORCE_ALIGN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FORCE_ALIGN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FORCE_ALIGN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FORCE_ALIGN]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FORCE_ALIGN]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FORCE_ALIGN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FORCE_ALIGN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FORCE_ALIGN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FORCE_ALIGN]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FORCE_ALIGN]
static inline bool GET_TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FORCE_ALIGN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FORCE_ALIGN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FORCE_ALIGN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_FORCE_ALIGN]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_ARY_WRT_THRU_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_ARY_WRT_THRU_DC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_ARY_WRT_THRU_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_ARY_WRT_THRU_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_ARY_WRT_THRU_DC]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_ARY_WRT_THRU_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_ARY_WRT_THRU_DC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_ARY_WRT_THRU_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_ARY_WRT_THRU_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_ARY_WRT_THRU_DC]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_ARY_WRT_THRU_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_ARY_WRT_THRU_DC(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_ARY_WRT_THRU_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_ARY_WRT_THRU_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_ARY_WRT_THRU_DC]

//>> CLEAR_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_ARY_WRT_THRU_DC]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_ARY_WRT_THRU_DC(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_ARY_WRT_THRU_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_ARY_WRT_THRU_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_ARY_WRT_THRU_DC]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_ARY_WRT_THRU_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_ARY_WRT_THRU_DC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_ARY_WRT_THRU_DC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_ARY_WRT_THRU_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_ARY_WRT_THRU_DC]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_ARY_WRT_THRU_DC]
static inline bool GET_TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_ARY_WRT_THRU_DC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_ARY_WRT_THRU_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_ARY_WRT_THRU_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_ARY_WRT_THRU_DC]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_TC_VITL_PROTECTION]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_TC_VITL_PROTECTION(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_TC_VITL_PROTECTION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_VITL_PROTECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_TC_VITL_PROTECTION]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_TC_VITL_PROTECTION]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_TC_VITL_PROTECTION(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_TC_VITL_PROTECTION,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_VITL_PROTECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_TC_VITL_PROTECTION]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_TC_VITL_PROTECTION]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_TC_VITL_PROTECTION(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CTRL0_TC_VITL_PROTECTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_VITL_PROTECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_TC_VITL_PROTECTION]

//>> CLEAR_[TP_TCN0_N0_CPLT_CTRL0_TC_VITL_PROTECTION]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CTRL0_TC_VITL_PROTECTION(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CTRL0_TC_VITL_PROTECTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_VITL_PROTECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CTRL0_TC_VITL_PROTECTION]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_TC_VITL_PROTECTION]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CTRL0_TC_VITL_PROTECTION(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CTRL0_TC_VITL_PROTECTION,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_VITL_PROTECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_TC_VITL_PROTECTION]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_TC_VITL_PROTECTION]
static inline bool GET_TP_TCN0_N0_CPLT_CTRL0_TC_VITL_PROTECTION(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CTRL0_TC_VITL_PROTECTION>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_VITL_PROTECTION chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_TC_VITL_PROTECTION]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABIST_RECOV_DISABLE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABIST_RECOV_DISABLE_DC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABIST_RECOV_DISABLE_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABIST_RECOV_DISABLE_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABIST_RECOV_DISABLE_DC]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABIST_RECOV_DISABLE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABIST_RECOV_DISABLE_DC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABIST_RECOV_DISABLE_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABIST_RECOV_DISABLE_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABIST_RECOV_DISABLE_DC]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABIST_RECOV_DISABLE_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABIST_RECOV_DISABLE_DC(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABIST_RECOV_DISABLE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABIST_RECOV_DISABLE_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABIST_RECOV_DISABLE_DC]

//>> CLEAR_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABIST_RECOV_DISABLE_DC]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABIST_RECOV_DISABLE_DC(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABIST_RECOV_DISABLE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABIST_RECOV_DISABLE_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABIST_RECOV_DISABLE_DC]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABIST_RECOV_DISABLE_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABIST_RECOV_DISABLE_DC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABIST_RECOV_DISABLE_DC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABIST_RECOV_DISABLE_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABIST_RECOV_DISABLE_DC]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABIST_RECOV_DISABLE_DC]
static inline bool GET_TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABIST_RECOV_DISABLE_DC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABIST_RECOV_DISABLE_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABIST_RECOV_DISABLE_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_ABIST_RECOV_DISABLE_DC]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_11A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_11A(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_RESERVED_11A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_11A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_11A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_11A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_11A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_RESERVED_11A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_11A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_11A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_11A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_11A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CTRL0_RESERVED_11A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_11A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_11A]

//>> CLEAR_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_11A]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CTRL0_RESERVED_11A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CTRL0_RESERVED_11A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_11A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_11A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_11A]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_11A(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CTRL0_RESERVED_11A,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_11A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_11A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_11A]
static inline bool GET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_11A(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CTRL0_RESERVED_11A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_11A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_11A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_TC_SKIT_MODE_BIST_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_TC_SKIT_MODE_BIST_DC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_TC_SKIT_MODE_BIST_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_SKIT_MODE_BIST_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_TC_SKIT_MODE_BIST_DC]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_TC_SKIT_MODE_BIST_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_TC_SKIT_MODE_BIST_DC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_TC_SKIT_MODE_BIST_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_SKIT_MODE_BIST_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_TC_SKIT_MODE_BIST_DC]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_TC_SKIT_MODE_BIST_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_TC_SKIT_MODE_BIST_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CTRL0_TC_SKIT_MODE_BIST_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_SKIT_MODE_BIST_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_TC_SKIT_MODE_BIST_DC]

//>> CLEAR_[TP_TCN0_N0_CPLT_CTRL0_TC_SKIT_MODE_BIST_DC]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CTRL0_TC_SKIT_MODE_BIST_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CTRL0_TC_SKIT_MODE_BIST_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_SKIT_MODE_BIST_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CTRL0_TC_SKIT_MODE_BIST_DC]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_TC_SKIT_MODE_BIST_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CTRL0_TC_SKIT_MODE_BIST_DC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CTRL0_TC_SKIT_MODE_BIST_DC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_SKIT_MODE_BIST_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_TC_SKIT_MODE_BIST_DC]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_TC_SKIT_MODE_BIST_DC]
static inline bool GET_TP_TCN0_N0_CPLT_CTRL0_TC_SKIT_MODE_BIST_DC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CTRL0_TC_SKIT_MODE_BIST_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_SKIT_MODE_BIST_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_TC_SKIT_MODE_BIST_DC]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_DETERMINISTIC_TEST_ENA_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_DETERMINISTIC_TEST_ENA_DC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_DETERMINISTIC_TEST_ENA_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_DETERMINISTIC_TEST_ENA_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_DETERMINISTIC_TEST_ENA_DC]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_DETERMINISTIC_TEST_ENA_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_DETERMINISTIC_TEST_ENA_DC(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_DETERMINISTIC_TEST_ENA_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_DETERMINISTIC_TEST_ENA_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_DETERMINISTIC_TEST_ENA_DC]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_DETERMINISTIC_TEST_ENA_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_DETERMINISTIC_TEST_ENA_DC(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_DETERMINISTIC_TEST_ENA_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_DETERMINISTIC_TEST_ENA_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_DETERMINISTIC_TEST_ENA_DC]

//>> CLEAR_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_DETERMINISTIC_TEST_ENA_DC]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_DETERMINISTIC_TEST_ENA_DC(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_DETERMINISTIC_TEST_ENA_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_DETERMINISTIC_TEST_ENA_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_DETERMINISTIC_TEST_ENA_DC]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_DETERMINISTIC_TEST_ENA_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_DETERMINISTIC_TEST_ENA_DC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_DETERMINISTIC_TEST_ENA_DC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_DETERMINISTIC_TEST_ENA_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_DETERMINISTIC_TEST_ENA_DC]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_DETERMINISTIC_TEST_ENA_DC]
static inline bool GET_TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_DETERMINISTIC_TEST_ENA_DC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_DETERMINISTIC_TEST_ENA_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_DETERMINISTIC_TEST_ENA_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_DETERMINISTIC_TEST_ENA_DC]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_CONSTRAIN_SAFESCAN_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_CONSTRAIN_SAFESCAN_DC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_CONSTRAIN_SAFESCAN_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_CONSTRAIN_SAFESCAN_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_CONSTRAIN_SAFESCAN_DC]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_CONSTRAIN_SAFESCAN_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_CONSTRAIN_SAFESCAN_DC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_CONSTRAIN_SAFESCAN_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_CONSTRAIN_SAFESCAN_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_CONSTRAIN_SAFESCAN_DC]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_CONSTRAIN_SAFESCAN_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_CONSTRAIN_SAFESCAN_DC(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_CONSTRAIN_SAFESCAN_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_CONSTRAIN_SAFESCAN_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_CONSTRAIN_SAFESCAN_DC]

//>> CLEAR_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_CONSTRAIN_SAFESCAN_DC]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_CONSTRAIN_SAFESCAN_DC(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_CONSTRAIN_SAFESCAN_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_CONSTRAIN_SAFESCAN_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_CONSTRAIN_SAFESCAN_DC]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_CONSTRAIN_SAFESCAN_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_CONSTRAIN_SAFESCAN_DC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_CONSTRAIN_SAFESCAN_DC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_CONSTRAIN_SAFESCAN_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_CONSTRAIN_SAFESCAN_DC]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_CONSTRAIN_SAFESCAN_DC]
static inline bool GET_TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_CONSTRAIN_SAFESCAN_DC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_CONSTRAIN_SAFESCAN_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_CONSTRAIN_SAFESCAN_DC chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_CONSTRAIN_SAFESCAN_DC]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_RRFA_TEST_ENA_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_RRFA_TEST_ENA_DC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_RRFA_TEST_ENA_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_RRFA_TEST_ENA_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_RRFA_TEST_ENA_DC]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_RRFA_TEST_ENA_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_RRFA_TEST_ENA_DC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_RRFA_TEST_ENA_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_RRFA_TEST_ENA_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_RRFA_TEST_ENA_DC]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_RRFA_TEST_ENA_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_RRFA_TEST_ENA_DC(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_RRFA_TEST_ENA_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_RRFA_TEST_ENA_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_RRFA_TEST_ENA_DC]

//>> CLEAR_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_RRFA_TEST_ENA_DC]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_RRFA_TEST_ENA_DC(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_RRFA_TEST_ENA_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_RRFA_TEST_ENA_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_RRFA_TEST_ENA_DC]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_RRFA_TEST_ENA_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_RRFA_TEST_ENA_DC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_RRFA_TEST_ENA_DC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_RRFA_TEST_ENA_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_RRFA_TEST_ENA_DC]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_RRFA_TEST_ENA_DC]
static inline bool GET_TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_RRFA_TEST_ENA_DC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_RRFA_TEST_ENA_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_RRFA_TEST_ENA_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_TC_UNIT_RRFA_TEST_ENA_DC]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_18A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_18A(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_RESERVED_18A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_18A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_18A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_18A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_18A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_RESERVED_18A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_18A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_18A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_18A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_18A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CTRL0_RESERVED_18A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_18A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_18A]

//>> CLEAR_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_18A]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CTRL0_RESERVED_18A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CTRL0_RESERVED_18A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_18A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_18A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_18A]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_18A(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CTRL0_RESERVED_18A,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_18A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_18A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_18A]
static inline bool GET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_18A(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CTRL0_RESERVED_18A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_18A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_18A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_19A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_19A(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_RESERVED_19A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_19A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_19A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_19A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_19A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_RESERVED_19A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_19A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_19A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_19A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_19A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CTRL0_RESERVED_19A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_19A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_19A]

//>> CLEAR_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_19A]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CTRL0_RESERVED_19A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CTRL0_RESERVED_19A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_19A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_19A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_19A]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_19A(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CTRL0_RESERVED_19A,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_19A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_19A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_19A]
static inline bool GET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_19A(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CTRL0_RESERVED_19A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_19A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_19A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_TC_PSRO_SEL_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_TC_PSRO_SEL_DC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_TC_PSRO_SEL_DC,
           TP_TCN0_N0_CPLT_CTRL0_TC_PSRO_SEL_DC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_PSRO_SEL_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_TC_PSRO_SEL_DC]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_TC_PSRO_SEL_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_TC_PSRO_SEL_DC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_TC_PSRO_SEL_DC,
           TP_TCN0_N0_CPLT_CTRL0_TC_PSRO_SEL_DC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_PSRO_SEL_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_TC_PSRO_SEL_DC]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_TC_PSRO_SEL_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CTRL0_TC_PSRO_SEL_DC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CTRL0_TC_PSRO_SEL_DC,
           TP_TCN0_N0_CPLT_CTRL0_TC_PSRO_SEL_DC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_TC_PSRO_SEL_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_TC_PSRO_SEL_DC]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_32A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_32A(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_RESERVED_32A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_32A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_32A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_32A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_32A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_RESERVED_32A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_32A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_32A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_32A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_32A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CTRL0_RESERVED_32A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_32A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_32A]

//>> CLEAR_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_32A]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CTRL0_RESERVED_32A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CTRL0_RESERVED_32A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_32A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_32A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_32A]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_32A(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CTRL0_RESERVED_32A,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_32A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_32A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_32A]
static inline bool GET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_32A(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CTRL0_RESERVED_32A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_32A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_32A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_33A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_33A(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_RESERVED_33A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_33A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_33A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_33A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_33A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_RESERVED_33A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_33A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_33A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_33A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_33A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CTRL0_RESERVED_33A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_33A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_33A]

//>> CLEAR_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_33A]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CTRL0_RESERVED_33A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CTRL0_RESERVED_33A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_33A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_33A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_33A]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_33A(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CTRL0_RESERVED_33A,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_33A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_33A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_33A]
static inline bool GET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_33A(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CTRL0_RESERVED_33A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_33A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_33A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_34A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_34A(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_RESERVED_34A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_34A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_34A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_34A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_34A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_RESERVED_34A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_34A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_34A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_34A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_34A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CTRL0_RESERVED_34A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_34A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_34A]

//>> CLEAR_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_34A]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CTRL0_RESERVED_34A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CTRL0_RESERVED_34A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_34A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_34A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_34A]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_34A(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CTRL0_RESERVED_34A,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_34A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_34A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_34A]
static inline bool GET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_34A(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CTRL0_RESERVED_34A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_34A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_34A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_35A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_35A(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_RESERVED_35A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_35A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_35A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_35A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_35A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_RESERVED_35A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_35A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_35A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_35A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_35A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CTRL0_RESERVED_35A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_35A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_35A]

//>> CLEAR_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_35A]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CTRL0_RESERVED_35A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CTRL0_RESERVED_35A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_35A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_35A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_35A]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_35A(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CTRL0_RESERVED_35A,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_35A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_35A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_35A]
static inline bool GET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_35A(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CTRL0_RESERVED_35A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_35A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_35A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_38A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_38A(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_RESERVED_38A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_38A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_38A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_38A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_38A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_RESERVED_38A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_38A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_38A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_38A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_38A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CTRL0_RESERVED_38A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_38A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_38A]

//>> CLEAR_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_38A]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CTRL0_RESERVED_38A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CTRL0_RESERVED_38A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_38A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_38A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_38A]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_38A(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CTRL0_RESERVED_38A,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_38A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_38A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_38A]
static inline bool GET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_38A(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CTRL0_RESERVED_38A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_38A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_38A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_39A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_39A(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_RESERVED_39A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_39A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_39A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_39A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_39A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_RESERVED_39A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_39A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_39A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_39A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_39A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CTRL0_RESERVED_39A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_39A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_39A]

//>> CLEAR_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_39A]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CTRL0_RESERVED_39A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CTRL0_RESERVED_39A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_39A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_39A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_39A]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_39A(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CTRL0_RESERVED_39A,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_39A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_39A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_39A]
static inline bool GET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_39A(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CTRL0_RESERVED_39A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_39A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_39A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_MISC_CLKDIV_SEL_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_CTRL_MISC_CLKDIV_SEL_DC(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_CTRL_MISC_CLKDIV_SEL_DC,
           TP_TCN0_N0_CPLT_CTRL0_CTRL_MISC_CLKDIV_SEL_DC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_CTRL_MISC_CLKDIV_SEL_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_MISC_CLKDIV_SEL_DC]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_MISC_CLKDIV_SEL_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_CTRL_MISC_CLKDIV_SEL_DC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_CTRL_MISC_CLKDIV_SEL_DC,
           TP_TCN0_N0_CPLT_CTRL0_CTRL_MISC_CLKDIV_SEL_DC_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_CTRL_MISC_CLKDIV_SEL_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_MISC_CLKDIV_SEL_DC]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_MISC_CLKDIV_SEL_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CTRL0_CTRL_MISC_CLKDIV_SEL_DC(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CTRL0_CTRL_MISC_CLKDIV_SEL_DC,
           TP_TCN0_N0_CPLT_CTRL0_CTRL_MISC_CLKDIV_SEL_DC_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_CTRL_MISC_CLKDIV_SEL_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_MISC_CLKDIV_SEL_DC]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_42A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_42A(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_RESERVED_42A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_42A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_42A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_42A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_42A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_RESERVED_42A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_42A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_42A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_42A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_42A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CTRL0_RESERVED_42A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_42A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_42A]

//>> CLEAR_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_42A]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CTRL0_RESERVED_42A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CTRL0_RESERVED_42A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_42A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_42A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_42A]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_42A(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CTRL0_RESERVED_42A,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_42A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_42A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_42A]
static inline bool GET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_42A(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CTRL0_RESERVED_42A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_42A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_42A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_43A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_43A(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_RESERVED_43A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_43A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_43A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_43A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_43A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_RESERVED_43A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_43A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_43A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_43A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_43A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CTRL0_RESERVED_43A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_43A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_43A]

//>> CLEAR_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_43A]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CTRL0_RESERVED_43A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CTRL0_RESERVED_43A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_43A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_43A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_43A]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_43A(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CTRL0_RESERVED_43A,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_43A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_43A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_43A]
static inline bool GET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_43A(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CTRL0_RESERVED_43A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_43A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_43A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_PIN_LBIST_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_PIN_LBIST_DC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_PIN_LBIST_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_PIN_LBIST_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_PIN_LBIST_DC]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_PIN_LBIST_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_PIN_LBIST_DC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_PIN_LBIST_DC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_PIN_LBIST_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_PIN_LBIST_DC]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_PIN_LBIST_DC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_PIN_LBIST_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_PIN_LBIST_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_PIN_LBIST_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_PIN_LBIST_DC]

//>> CLEAR_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_PIN_LBIST_DC]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_PIN_LBIST_DC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_PIN_LBIST_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_PIN_LBIST_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_PIN_LBIST_DC]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_PIN_LBIST_DC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_PIN_LBIST_DC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_PIN_LBIST_DC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_PIN_LBIST_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_PIN_LBIST_DC]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_PIN_LBIST_DC]
static inline bool GET_TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_PIN_LBIST_DC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_PIN_LBIST_DC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_PIN_LBIST_DC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_CTRL_CC_PIN_LBIST_DC]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_48A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_48A(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_48A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_48A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_48A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_48A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_48A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_48A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_48A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_48A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_48A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_48A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_48A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_48A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_48A]

//>> CLEAR_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_48A]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_48A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_48A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_48A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_48A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_48A]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_48A(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_48A,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_48A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_48A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_48A]
static inline bool GET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_48A(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_48A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_48A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_48A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_49A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_49A(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_49A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_49A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_49A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_49A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_49A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_49A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_49A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_49A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_49A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_49A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_49A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_49A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_49A]

//>> CLEAR_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_49A]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_49A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_49A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_49A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_49A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_49A]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_49A(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_49A,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_49A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_49A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_49A]
static inline bool GET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_49A(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_49A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_49A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_49A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_50A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_50A(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_50A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_50A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_50A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_50A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_50A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_50A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_50A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_50A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_50A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_50A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_50A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_50A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_50A]

//>> CLEAR_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_50A]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_50A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_50A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_50A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_50A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_50A]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_50A(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_50A,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_50A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_50A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_50A]
static inline bool GET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_50A(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_50A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_50A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_50A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_51A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_51A(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_51A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_51A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_51A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_51A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_51A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_51A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_51A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_51A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_51A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_51A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_51A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_51A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_51A]

//>> CLEAR_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_51A]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_51A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_51A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_51A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_51A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_51A]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_51A(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_51A,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_51A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_51A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_51A]
static inline bool GET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_51A(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_51A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_51A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_51A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_52A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_52A(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_52A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_52A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_52A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_52A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_52A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_52A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_52A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_52A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_52A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_52A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_52A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_52A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_52A]

//>> CLEAR_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_52A]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_52A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_52A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_52A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_52A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_52A]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_52A(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_52A,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_52A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_52A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_52A]
static inline bool GET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_52A(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_52A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_52A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_52A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_53A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_53A(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_53A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_53A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_53A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_53A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_53A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_53A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_53A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_53A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_53A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_53A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_53A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_53A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_53A]

//>> CLEAR_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_53A]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_53A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_53A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_53A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_53A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_53A]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_53A(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_53A,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_53A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_53A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_53A]
static inline bool GET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_53A(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_53A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_53A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_53A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_54A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_54A(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_54A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_54A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_54A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_54A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_54A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_54A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_54A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_54A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_54A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_54A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_54A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_54A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_54A]

//>> CLEAR_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_54A]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_54A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_54A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_54A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_54A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_54A]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_54A(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_54A,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_54A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_54A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_54A]
static inline bool GET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_54A(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_54A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_54A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_54A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_55A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_55A(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_RESERVED_55A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_55A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_55A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_55A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_55A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_RESERVED_55A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_55A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_55A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_55A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_55A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CTRL0_RESERVED_55A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_55A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_55A]

//>> CLEAR_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_55A]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CTRL0_RESERVED_55A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CTRL0_RESERVED_55A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_55A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_55A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_55A]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_55A(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CTRL0_RESERVED_55A,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_55A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_55A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_55A]
static inline bool GET_TP_TCN0_N0_CPLT_CTRL0_RESERVED_55A(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CTRL0_RESERVED_55A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_RESERVED_55A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_RESERVED_55A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_56A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_56A(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_56A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_56A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_56A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_56A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_56A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_56A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_56A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_56A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_56A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_56A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_56A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_56A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_56A]

//>> CLEAR_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_56A]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_56A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_56A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_56A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_56A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_56A]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_56A(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_56A,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_56A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_56A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_56A]
static inline bool GET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_56A(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_56A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_56A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_56A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_57A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_57A(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_57A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_57A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_57A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_57A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_57A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_57A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_57A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_57A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_57A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_57A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_57A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_57A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_57A]

//>> CLEAR_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_57A]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_57A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_57A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_57A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_57A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_57A]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_57A(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_57A,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_57A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_57A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_57A]
static inline bool GET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_57A(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_57A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_57A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_57A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_58A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_58A(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_58A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_58A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_58A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_58A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_58A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_58A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_58A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_58A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_58A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_58A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_58A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_58A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_58A]

//>> CLEAR_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_58A]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_58A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_58A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_58A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_58A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_58A]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_58A(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_58A,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_58A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_58A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_58A]
static inline bool GET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_58A(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_58A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_58A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_58A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_59A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_59A(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_59A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_59A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_59A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_59A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_59A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_59A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_59A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_59A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_59A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_59A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_59A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_59A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_59A]

//>> CLEAR_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_59A]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_59A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_59A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_59A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_59A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_59A]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_59A(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_59A,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_59A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_59A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_59A]
static inline bool GET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_59A(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_59A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_59A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_59A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_60A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_60A(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_60A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_60A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_60A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_60A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_60A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_60A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_60A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_60A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_60A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_60A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_60A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_60A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_60A]

//>> CLEAR_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_60A]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_60A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_60A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_60A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_60A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_60A]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_60A(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_60A,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_60A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_60A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_60A]
static inline bool GET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_60A(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_60A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_60A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_60A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_61A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_61A(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_61A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_61A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_61A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_61A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_61A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_61A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_61A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_61A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_61A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_61A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_61A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_61A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_61A]

//>> CLEAR_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_61A]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_61A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_61A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_61A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_61A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_61A]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_61A(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_61A,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_61A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_61A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_61A]
static inline bool GET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_61A(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_61A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_61A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_61A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_62A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_62A(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_62A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_62A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_62A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_62A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_62A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_62A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_62A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_62A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_62A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_62A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_62A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_62A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_62A]

//>> CLEAR_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_62A]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_62A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_62A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_62A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_62A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_62A]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_62A(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_62A,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_62A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_62A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_62A]
static inline bool GET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_62A(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_62A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_62A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_62A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_63A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_63A(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_63A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_63A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_63A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_63A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_63A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_63A,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_63A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_63A]

//>> SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_63A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_63A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_63A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_63A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_63A]

//>> CLEAR_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_63A]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_63A(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_63A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_63A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_63A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_63A]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_63A(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_63A,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_63A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_63A]

//>> GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_63A]
static inline bool GET_TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_63A(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_CPLT_CTRL0_RW, TP_TCN0_N0_CPLT_CTRL0_WO_CLEAR, TP_TCN0_N0_CPLT_CTRL0_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_63A>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_63A chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_CPLT_CTRL0_FREE_USAGE_63A]

//>> PREP_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_EPS_DBG_TRACE_REG_1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_EPS_DBG_TRACE_REG_1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1]

//>> GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_EPS_DBG_TRACE_REG_1;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_EPS_DBG_TRACE_REG_1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1]

//>> PUT_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_EPS_DBG_TRACE_REG_1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_EPS_DBG_TRACE_REG_1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1]


//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_DO]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_DO(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_DO,
           TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_DO_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_DO chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_DO]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_DO]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_DO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_DO,
           TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_DO_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_DO chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_DO]

//>> GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_DO]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_DO(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_DO,
           TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_DO_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_DO chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_DO]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_DO]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_DO(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_DO,
           TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_DO_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_DO chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_DO]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_DO]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_DO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_DO,
           TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_DO_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_DO chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_DO]

//>> GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_DO]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_DO(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_DO,
           TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_DO_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_DO chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_DO]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_DO]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_DO(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_DO,
           TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_DO_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_DO chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_DO]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_DO]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_DO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_DO,
           TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_DO_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_DO chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_DO]

//>> GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_DO]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_DO(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_DO,
           TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_DO_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_DO chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_DO]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_DO]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_DO(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_DO,
           TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_DO_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_DO chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_DO]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_DO]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_DO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_DO,
           TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_DO_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_DO chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_DO]

//>> GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_DO]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_DO(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_DO,
           TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_DO_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_DO chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_DO]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_DO]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_DO(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_DO,
           TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_DO_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_DO chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_DO]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_DO]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_DO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_DO,
           TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_DO_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_DO chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_DO]

//>> GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_DO]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_DO(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_DO,
           TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_DO_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_DO chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_DO]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_DO]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_DO(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_DO,
           TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_DO_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_DO chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_DO]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_DO]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_DO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_DO,
           TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_DO_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_DO chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_DO]

//>> GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_DO]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_DO(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_DO,
           TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_DO_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_DO chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_DO]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_WAITN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_WAITN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_WAITN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_WAITN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_WAITN]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_WAITN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_WAITN(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_WAITN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_WAITN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_WAITN]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_WAITN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_WAITN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_WAITN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_WAITN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_WAITN]

//>> CLEAR_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_WAITN]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_WAITN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_WAITN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_WAITN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_WAITN]

//>> GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_WAITN]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_WAITN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_WAITN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_WAITN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_WAITN]

//>> GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_WAITN]
static inline bool GET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_WAITN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_WAITN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_WAITN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_WAITN]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_WAITN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_WAITN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_WAITN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_WAITN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_WAITN]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_WAITN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_WAITN(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_WAITN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_WAITN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_WAITN]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_WAITN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_WAITN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_WAITN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_WAITN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_WAITN]

//>> CLEAR_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_WAITN]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_WAITN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_WAITN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_WAITN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_WAITN]

//>> GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_WAITN]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_WAITN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_WAITN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_WAITN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_WAITN]

//>> GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_WAITN]
static inline bool GET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_WAITN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_WAITN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_WAITN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_WAITN]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_WAITN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_WAITN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_WAITN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_WAITN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_WAITN]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_WAITN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_WAITN(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_WAITN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_WAITN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_WAITN]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_WAITN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_WAITN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_WAITN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_WAITN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_WAITN]

//>> CLEAR_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_WAITN]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_WAITN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_WAITN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_WAITN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_WAITN]

//>> GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_WAITN]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_WAITN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_WAITN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_WAITN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_WAITN]

//>> GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_WAITN]
static inline bool GET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_WAITN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_WAITN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_WAITN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_WAITN]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_WAITN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_WAITN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_WAITN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_WAITN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_WAITN]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_WAITN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_WAITN(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_WAITN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_WAITN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_WAITN]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_WAITN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_WAITN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_WAITN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_WAITN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_WAITN]

//>> CLEAR_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_WAITN]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_WAITN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_WAITN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_WAITN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_WAITN]

//>> GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_WAITN]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_WAITN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_WAITN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_WAITN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_WAITN]

//>> GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_WAITN]
static inline bool GET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_WAITN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_WAITN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_WAITN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_WAITN]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_WAITN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_WAITN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_WAITN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_WAITN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_WAITN]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_WAITN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_WAITN(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_WAITN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_WAITN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_WAITN]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_WAITN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_WAITN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_WAITN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_WAITN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_WAITN]

//>> CLEAR_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_WAITN]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_WAITN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_WAITN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_WAITN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_WAITN]

//>> GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_WAITN]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_WAITN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_WAITN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_WAITN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_WAITN]

//>> GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_WAITN]
static inline bool GET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_WAITN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_WAITN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_WAITN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_WAITN]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_WAITN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_WAITN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_WAITN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_WAITN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_WAITN]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_WAITN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_WAITN(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_WAITN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_WAITN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_WAITN]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_WAITN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_WAITN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_WAITN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_WAITN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_WAITN]

//>> CLEAR_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_WAITN]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_WAITN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_WAITN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_WAITN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_WAITN]

//>> GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_WAITN]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_WAITN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_WAITN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_WAITN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_WAITN]

//>> GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_WAITN]
static inline bool GET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_WAITN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_WAITN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_WAITN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_WAITN]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_BANK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_BANK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_BANK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_BANK]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_BANK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_BANK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_BANK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_BANK]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_BANK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_BANK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_BANK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_BANK]

//>> CLEAR_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_BANK]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_BANK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_BANK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_BANK]

//>> GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_BANK]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_BANK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_BANK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_BANK]

//>> GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_BANK]
static inline bool GET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_BANK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_BANK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION1_ACTION_BANK]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_BANK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_BANK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_BANK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_BANK]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_BANK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_BANK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_BANK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_BANK]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_BANK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_BANK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_BANK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_BANK]

//>> CLEAR_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_BANK]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_BANK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_BANK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_BANK]

//>> GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_BANK]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_BANK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_BANK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_BANK]

//>> GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_BANK]
static inline bool GET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_BANK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_BANK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CONDITION2_ACTION_BANK]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_BANK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_BANK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_BANK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_BANK]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_BANK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_BANK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_BANK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_BANK]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_BANK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_BANK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_BANK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_BANK]

//>> CLEAR_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_BANK]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_BANK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_BANK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_BANK]

//>> GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_BANK]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_BANK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_BANK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_BANK]

//>> GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_BANK]
static inline bool GET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_BANK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_BANK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_C2_TIMEOUT_ACTION_BANK]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_BANK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_BANK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_BANK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_BANK]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_BANK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_BANK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_BANK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_BANK]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_BANK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_BANK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_BANK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_BANK]

//>> CLEAR_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_BANK]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_BANK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_BANK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_BANK]

//>> GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_BANK]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_BANK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_BANK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_BANK]

//>> GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_BANK]
static inline bool GET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_BANK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_BANK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION1_ACTION_BANK]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_BANK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_BANK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_BANK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_BANK]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_BANK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_BANK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_BANK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_BANK]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_BANK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_BANK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_BANK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_BANK]

//>> CLEAR_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_BANK]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_BANK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_BANK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_BANK]

//>> GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_BANK]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_BANK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_BANK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_BANK]

//>> GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_BANK]
static inline bool GET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_BANK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_BANK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CONDITION2_ACTION_BANK]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_BANK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_BANK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_BANK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_BANK]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_BANK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_BANK(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_BANK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_BANK]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_BANK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_BANK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_BANK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_BANK]

//>> CLEAR_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_BANK]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_BANK(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_BANK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_BANK]

//>> GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_BANK]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_BANK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_BANK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_BANK]

//>> GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_BANK]
static inline bool GET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_BANK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_BANK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_C2_TIMEOUT_ACTION_BANK]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_LT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_LT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_LT,
           TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_LT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_LT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_LT]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_LT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_LT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_LT,
           TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_LT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_LT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_LT]

//>> GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_LT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_LT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_LT,
           TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_LT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_LT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_LT]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_SELECTOR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_SELECTOR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_SELECTOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_SELECTOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_SELECTOR]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_SELECTOR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_SELECTOR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_SELECTOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_SELECTOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_SELECTOR]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_SELECTOR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_SELECTOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_SELECTOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_SELECTOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_SELECTOR]

//>> CLEAR_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_SELECTOR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_SELECTOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_SELECTOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_SELECTOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_SELECTOR]

//>> GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_SELECTOR]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_SELECTOR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_SELECTOR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_SELECTOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_SELECTOR]

//>> GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_SELECTOR]
static inline bool GET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_SELECTOR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_SELECTOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_SELECTOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_1_CHECKSTOP_MODE_SELECTOR]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_LT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_LT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_LT,
           TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_LT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_LT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_LT]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_LT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_LT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_LT,
           TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_LT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_LT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_LT]

//>> GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_LT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_LT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_LT,
           TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_LT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_LT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_LT]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_SELECTOR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_SELECTOR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_SELECTOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_SELECTOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_SELECTOR]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_SELECTOR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_SELECTOR(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_SELECTOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_SELECTOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_SELECTOR]

//>> SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_SELECTOR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_SELECTOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_SELECTOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_SELECTOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_SELECTOR]

//>> CLEAR_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_SELECTOR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_SELECTOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_SELECTOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_SELECTOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_SELECTOR]

//>> GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_SELECTOR]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_SELECTOR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_SELECTOR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_SELECTOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_SELECTOR]

//>> GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_SELECTOR]
static inline bool GET_TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_SELECTOR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_DBG_TRACE_REG_1));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_SELECTOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_SELECTOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_DBG_TRACE_REG_1_2_CHECKSTOP_MODE_SELECTOR]

//>> PREP_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2]

//>> PUT_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2]


//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_00]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_00(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_00,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_00 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_00]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_00]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_00(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_00,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_00 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_00]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_00]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_00(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_00>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_00 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_00]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_00]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_00(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_00>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_00 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_00]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_00]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_00(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_00,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_00 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_00]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_00]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_00(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_00>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_00 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_00]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_01]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_01(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_01,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_01 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_01]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_01]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_01(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_01,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_01 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_01]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_01]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_01(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_01 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_01]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_01]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_01(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_01 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_01]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_01]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_01(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_01,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_01 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_01]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_01]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_01(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_01 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_01]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_02]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_02(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_02,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_02 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_02]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_02]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_02(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_02,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_02 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_02]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_02]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_02(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_02 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_02]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_02]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_02(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_02 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_02]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_02]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_02(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_02,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_02 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_02]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_02]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_02(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_02 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_02]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_03]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_03(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_03,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_03 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_03]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_03]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_03(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_03,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_03 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_03]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_03]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_03(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_03 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_03]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_03]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_03(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_03 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_03]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_03]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_03(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_03,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_03 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_03]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_03]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_03(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_03 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_03]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_04]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_04(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_04,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_04 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_04]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_04]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_04(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_04,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_04 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_04]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_04]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_04(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_04>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_04 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_04]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_04]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_04(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_04>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_04 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_04]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_04]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_04(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_04,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_04 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_04]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_04]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_04(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_04>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_04 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_04]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_05]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_05(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_05,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_05 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_05]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_05]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_05(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_05,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_05 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_05]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_05]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_05(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_05 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_05]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_05]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_05(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_05 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_05]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_05]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_05(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_05,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_05 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_05]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_05]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_05(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_05 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_05]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_06]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_06(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_06,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_06 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_06]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_06]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_06(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_06,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_06 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_06]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_06]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_06(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_06 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_06]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_06]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_06(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_06 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_06]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_06]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_06(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_06,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_06 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_06]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_06]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_06(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_06 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_06]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_07]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_07(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_07,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_07 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_07]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_07]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_07(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_07,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_07 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_07]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_07]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_07(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_07 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_07]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_07]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_07(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_07 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_07]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_07]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_07(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_07,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_07 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_07]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_07]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_07(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_07 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_07]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_08]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_08(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_08,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_08 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_08]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_08]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_08(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_08,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_08 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_08]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_08]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_08(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_08 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_08]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_08]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_08(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_08 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_08]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_08]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_08(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_08,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_08 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_08]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_08]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_08(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_08 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_08]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_09]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_09(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_09,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_09 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_09]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_09]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_09(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_09,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_09 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_09]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_09]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_09(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_09 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_09]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_09]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_09(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_09 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_09]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_09]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_09(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_09,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_09 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_09]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_09]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_09(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_09 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_09]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_10]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_10]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_10]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_10]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_10]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_10]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_10]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_10]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_10]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_11]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_11]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_11]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_11]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_11]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_11]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_11]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_11]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_11]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_12]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_12]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_12]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_12]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_12]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_12]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_12]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_12]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_12]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_13]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_13]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_13]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_13]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_13]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_13]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_13]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_13]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_13]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_14]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_14]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_14]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_14]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_14]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_14]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_14]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_14]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_14]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_15]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_15 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_15]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_15]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_15 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_15]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_15]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_15 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_15]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_15]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_15 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_15]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_15]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_15 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_15]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_15]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_15 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_15]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_16]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_16 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_16]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_16]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_16 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_16]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_16]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_16 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_16]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_16]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_16 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_16]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_16]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_16 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_16]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_16]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_16 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_16]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_17]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_17 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_17]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_17]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_17 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_17]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_17]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_17 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_17]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_17]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_17 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_17]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_17]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_17 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_17]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_17]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_17 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_17]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_18]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_18]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_18]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_18]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_18]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_18]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_18]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_18]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_18]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_18]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_18]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_18 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_18]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_19]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_19 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_19]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_19]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_19 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_19]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_19]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_19 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_19]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_19]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_19 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_19]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_19]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_19 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_19]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_19]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_19 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_19]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_20]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_20 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_20]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_20]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_20 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_20]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_20]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_20 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_20]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_20]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_20 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_20]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_20]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_20,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_20 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_20]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_20]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_20(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_20 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_20]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_21]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_21 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_21]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_21]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_21 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_21]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_21]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_21 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_21]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_21]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_21 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_21]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_21]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_21,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_21 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_21]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_21]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_21(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_21 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_21]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_22]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_22 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_22]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_22]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_22 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_22]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_22]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_22 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_22]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_22]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_22 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_22]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_22]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_22,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_22 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_22]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_22]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_22(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_22 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_22]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_23]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_23]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_23]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_23]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_23]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_23]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_23]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_23]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_23]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_23]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_23]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_23 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_23]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_24]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_24(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_24 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_24]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_24]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_24(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_24 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_24]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_24]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_24 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_24]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_24]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_24 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_24]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_24]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_24(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_24,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_24 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_24]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_24]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_24(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_24 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_24]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_25]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_25(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_25 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_25]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_25]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_25(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_25 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_25]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_25]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_25 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_25]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_25]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_25 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_25]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_25]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_25(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_25,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_25 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_25]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_25]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_25(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_25 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_25]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_26]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_26(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_26 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_26]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_26]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_26(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_26 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_26]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_26]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_26 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_26]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_26]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_26 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_26]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_26]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_26(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_26,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_26 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_26]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_26]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_26(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_26 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_26]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_27]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_27(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_27 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_27]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_27]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_27(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_27 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_27]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_27]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_27 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_27]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_27]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_27 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_27]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_27]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_27(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_27,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_27 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_27]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_27]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_27(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_27 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_27]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_28]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_28(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_28 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_28]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_28]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_28(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_28 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_28]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_28]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_28 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_28]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_28]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_28 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_28]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_28]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_28(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_28,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_28 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_28]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_28]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_28(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_28 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_28]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_29]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_29(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_29 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_29]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_29]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_29(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_29 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_29]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_29]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_29 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_29]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_29]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_29 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_29]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_29]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_29(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_29,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_29 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_29]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_29]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_29(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_29 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_29]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_30]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_30(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_30 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_30]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_30]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_30(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_30 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_30]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_30]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_30 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_30]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_30]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_30 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_30]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_30]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_30(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_30,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_30 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_30]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_30]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_30(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_30 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_30]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_31]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_31(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_31 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_31]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_31]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_31(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_31 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_31]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_31]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_31 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_31]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_31]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_31 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_31]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_31]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_31(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_31,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_31 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_31]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_31]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_31(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_31 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_31]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_32]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_32(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_32 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_32]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_32]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_32(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_32 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_32]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_32]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_32 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_32]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_32]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_32 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_32]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_32]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_32(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_32,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_32 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_32]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_32]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_32(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_32 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_32]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_33]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_33(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_33 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_33]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_33]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_33(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_33 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_33]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_33]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_33 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_33]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_33]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_33 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_33]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_33]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_33(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_33,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_33 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_33]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_33]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_33(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_33 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_33]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_34]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_34(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_34 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_34]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_34]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_34(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_34 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_34]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_34]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_34 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_34]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_34]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_34 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_34]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_34]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_34(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_34,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_34 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_34]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_34]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_34(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_34 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_34]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_35]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_35(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_35 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_35]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_35]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_35(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_35 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_35]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_35]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_35 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_35]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_35]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_35 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_35]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_35]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_35(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_35,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_35 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_35]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_35]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_35(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_35 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_35]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_36]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_36(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_36 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_36]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_36]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_36(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_36 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_36]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_36]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_36 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_36]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_36]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_36 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_36]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_36]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_36(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_36,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_36 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_36]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_36]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_36(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_36 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_36]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_37]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_37(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_37 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_37]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_37]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_37(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_37 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_37]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_37]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_37 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_37]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_37]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_37 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_37]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_37]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_37(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_37,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_37 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_37]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_37]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_37(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_37 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_37]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_38]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_38(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_38 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_38]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_38]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_38(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_38 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_38]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_38]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_38 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_38]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_38]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_38 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_38]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_38]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_38(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_38,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_38 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_38]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_38]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_38(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_38 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_38]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_39]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_39(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_39 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_39]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_39]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_39(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_39 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_39]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_39]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_39 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_39]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_39]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_39 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_39]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_39]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_39(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_39,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_39 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_39]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_39]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_39(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_39 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_39]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_40]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_40(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_40 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_40]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_40]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_40(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_40 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_40]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_40]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_40 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_40]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_40]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_40 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_40]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_40]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_40(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_40,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_40 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_40]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_40]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_40(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_40 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_40]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_41]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_41(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_41 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_41]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_41]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_41(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_41 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_41]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_41]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_41 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_41]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_41]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_41 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_41]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_41]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_41(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_41,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_41 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_41]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_41]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_41(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_41 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_41]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_42]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_42(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_42 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_42]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_42]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_42(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_42 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_42]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_42]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_42 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_42]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_42]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_42 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_42]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_42]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_42(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_42,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_42 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_42]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_42]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_42(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_42 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_42]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_43]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_43(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_43 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_43]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_43]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_43(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_43 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_43]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_43]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_43 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_43]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_43]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_43 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_43]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_43]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_43(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_43,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_43 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_43]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_43]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_43(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_43 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_43]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_44]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_44(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_44 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_44]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_44]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_44(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_44 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_44]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_44]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_44 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_44]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_44]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_44 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_44]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_44]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_44(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_44,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_44 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_44]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_44]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_44(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_44 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_44]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_45]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_45(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_45 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_45]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_45]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_45(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_45 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_45]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_45]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_45 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_45]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_45]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_45 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_45]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_45]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_45(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_45,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_45 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_45]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_45]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_45(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_45 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_45]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_46]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_46(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_46 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_46]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_46]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_46(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_46 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_46]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_46]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_46 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_46]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_46]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_46 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_46]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_46]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_46(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_46,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_46 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_46]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_46]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_46(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_46 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_46]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_47]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_47(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_47 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_47]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_47]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_47(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_47 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_47]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_47]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_47 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_47]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_47]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_47 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_47]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_47]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_47(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_47,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_47 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_47]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_47]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_47(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_47 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_47]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_48]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_48(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_48 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_48]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_48]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_48(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_48 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_48]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_48]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_48 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_48]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_48]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_48 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_48]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_48]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_48(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_48,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_48 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_48]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_48]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_48(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_48 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_48]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_49]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_49(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_49 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_49]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_49]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_49(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_49 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_49]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_49]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_49 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_49]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_49]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_49 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_49]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_49]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_49(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_49,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_49 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_49]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_49]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_49(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_49 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_49]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_50]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_50(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_50 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_50]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_50]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_50(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_50 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_50]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_50]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_50 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_50]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_50]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_50 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_50]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_50]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_50(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_50,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_50 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_50]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_50]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_50(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_50 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_50]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_51]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_51(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_51 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_51]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_51]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_51(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_51 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_51]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_51]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_51 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_51]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_51]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_51 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_51]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_51]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_51(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_51,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_51 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_51]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_51]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_51(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_51 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_51]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_52]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_52(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_52 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_52]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_52]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_52(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_52 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_52]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_52]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_52 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_52]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_52]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_52 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_52]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_52]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_52(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_52,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_52 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_52]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_52]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_52(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_52 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_52]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_53]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_53(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_53 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_53]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_53]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_53(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_53 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_53]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_53]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_53 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_53]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_53]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_53 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_53]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_53]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_53(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_53,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_53 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_53]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_53]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_53(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_53 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_53]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_54]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_54(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_54,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_54 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_54]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_54]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_54(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_54,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_54 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_54]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_54]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_54(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_54 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_54]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_54]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_54(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_54 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_54]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_54]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_54(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_54,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_54 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_54]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_54]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_54(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_54>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_54 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_54]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_55]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_55(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_55,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_55 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_55]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_55]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_55(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_55,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_55 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_55]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_55]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_55(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_55 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_55]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_55]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_55(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_55 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_55]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_55]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_55(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_55,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_55 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_55]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_55]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_55(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_55>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_55 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_55]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_56]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_56(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_56,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_56 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_56]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_56]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_56(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_56,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_56 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_56]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_56]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_56(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_56 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_56]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_56]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_56(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_56 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_56]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_56]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_56(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_56,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_56 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_56]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_56]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_56(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_56>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_56 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_56]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_57]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_57(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_57,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_57 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_57]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_57]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_57(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_57,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_57 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_57]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_57]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_57(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_57 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_57]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_57]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_57(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_57 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_57]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_57]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_57(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_57,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_57 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_57]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_57]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_57(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_57>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_57 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_57]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_58]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_58(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_58,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_58 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_58]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_58]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_58(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_58,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_58 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_58]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_58]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_58(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_58 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_58]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_58]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_58(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_58 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_58]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_58]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_58(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_58,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_58 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_58]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_58]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_58(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_58>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_58 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_58]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_59]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_59(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_59,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_59 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_59]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_59]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_59(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_59,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_59 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_59]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_59]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_59(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_59 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_59]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_59]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_59(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_59 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_59]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_59]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_59(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_59,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_59 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_59]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_59]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_59(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_59>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_59 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_59]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_60]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_60(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_60,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_60 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_60]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_60]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_60(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_60,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_60 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_60]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_60]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_60(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_60 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_60]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_60]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_60(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_60 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_60]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_60]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_60(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_60,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_60 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_60]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_60]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_60(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_60>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_60 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_60]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_61]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_61(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_61,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_61 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_61]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_61]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_61(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_61,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_61 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_61]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_61]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_61(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_61 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_61]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_61]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_61(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_61 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_61]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_61]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_61(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_61,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_61 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_61]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_61]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_61(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_61>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_61 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_61]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_62]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_62(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_62,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_62 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_62]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_62]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_62(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_62,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_62 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_62]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_62]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_62(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_62 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_62]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_62]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_62(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_62 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_62]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_62]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_62(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_62,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_62 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_62]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_62]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_62(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_62>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_62 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_62]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_63]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_63(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_63,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_63 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_63]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_63]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_63(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_63,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_63 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_63]

//>> SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_63]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_63(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.setBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_63 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_63]

//>> CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_63]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_63(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return o_data.clearBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_63 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_63]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_63]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_63(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_63,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_63 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_63]

//>> GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_63]
static inline bool GET_TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_63(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2));
#endif
    return i_data.getBit<TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_63>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_63 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_FIR_LOCAL_ACTION2_63]

//>> PREP_[TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG]

//>> GET_[TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG]

//>> PUT_[TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG]


//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG_TRIP]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG_TRIP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG_TRIP,
           TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG_TRIP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG_TRIP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG_TRIP]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG_TRIP]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG_TRIP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG_TRIP,
           TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG_TRIP_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG_TRIP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG_TRIP]

//>> GET_[TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG_TRIP]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG_TRIP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG_TRIP,
           TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG_TRIP_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG_TRIP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG_TRIP]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG_MODE,
           TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG_MODE]

//>> SET_[TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG_MODE,
           TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG_MODE]

//>> GET_[TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG_MODE,
           TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_EPS_THERM_WSUB_INJECT_REG_MODE]

//>> PREP_[TP_TCN0_N0_HOSTATTN_MASK_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_HOSTATTN_MASK_RW(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_HOSTATTN_MASK_RW;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_HOSTATTN_MASK_RW]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_HOSTATTN_MASK_RW(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_HOSTATTN_MASK_RW;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_HOSTATTN_MASK_RW, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_RW]

//>> PUT_[TP_TCN0_N0_HOSTATTN_MASK_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_HOSTATTN_MASK_RW(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_HOSTATTN_MASK_RW, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_HOSTATTN_MASK_RW]

//>> PREP_[TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR]

//>> PUT_[TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR]

//>> PREP_[TP_TCN0_N0_HOSTATTN_MASK_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_HOSTATTN_MASK_WO_OR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_HOSTATTN_MASK_WO_OR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_HOSTATTN_MASK_WO_OR]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_HOSTATTN_MASK_WO_OR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_HOSTATTN_MASK_WO_OR;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_HOSTATTN_MASK_WO_OR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_WO_OR]

//>> PUT_[TP_TCN0_N0_HOSTATTN_MASK_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_HOSTATTN_MASK_WO_OR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_HOSTATTN_MASK_WO_OR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_HOSTATTN_MASK_WO_OR]


//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_01]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_01(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_01,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_01]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_01]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_01(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_01,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_01]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_01]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_01(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_01]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_01]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_01(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_01]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_01]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_01(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_01,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_01]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_01]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_01(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_01]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_02]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_02(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_02,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_02]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_02]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_02(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_02,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_02]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_02]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_02(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_02]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_02]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_02(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_02]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_02]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_02(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_02,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_02]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_02]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_02(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_02]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_03]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_03(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_03,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_03]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_03]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_03(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_03,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_03]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_03]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_03(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_03]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_03]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_03(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_03]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_03]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_03(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_03,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_03]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_03]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_03(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_03]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_04]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_04(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_04,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_04]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_04]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_04(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_04,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_04]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_04]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_04(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_04>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_04]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_04]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_04(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_04>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_04]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_04]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_04(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_04,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_04]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_04]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_04(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_04>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_04]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_05]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_05(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_05,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_05]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_05]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_05(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_05,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_05]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_05]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_05(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_05]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_05]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_05(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_05]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_05]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_05(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_05,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_05]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_05]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_05(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_05]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_06]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_06(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_06,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_06]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_06]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_06(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_06,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_06]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_06]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_06(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_06]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_06]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_06(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_06]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_06]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_06(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_06,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_06]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_06]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_06(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_06]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_07]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_07(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_07,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_07]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_07]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_07(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_07,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_07]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_07]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_07(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_07]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_07]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_07(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_07]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_07]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_07(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_07,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_07]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_07]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_07(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_07]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_08]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_08(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_08,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_08]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_08]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_08(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_08,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_08]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_08]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_08(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_08]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_08]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_08(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_08]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_08]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_08(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_08,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_08]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_08]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_08(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_08]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_09]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_09(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_09,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_09]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_09]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_09(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_09,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_09]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_09]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_09(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_09]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_09]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_09(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_09]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_09]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_09(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_09,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_09]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_09]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_09(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_09]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_10]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_10]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_10]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_10]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_10]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_10]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_10]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_10]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_10]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_11]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_11]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_11]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_11]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_11]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_11]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_11]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_11]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_11]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_12]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_12]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_12]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_12]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_12]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_12]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_12]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_12]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_12]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_13]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_13]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_13]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_13]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_13]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_13]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_13]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_13]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_13]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_14]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_14]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_14]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_14]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_14]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_14]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_14]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_14]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_14]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_15]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_15]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_15]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_15]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_15]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_15]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_15]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_15]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_15]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_15]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_15]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_15]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_16]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_16]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_16]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_16]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_16]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_16]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_16]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_16]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_16]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_16]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_16]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_16]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_17]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_17]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_17]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_17]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_17]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_17]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_17]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_17]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_17]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_17]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_17]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_17]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_18]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_18]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_18]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_18]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_18]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_18]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_18]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_18]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_18]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_18]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_18]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_18]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_19]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_19]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_19]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_19]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_19]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_19]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_19]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_19]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_19]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_19]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_19]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_19]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_20]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_20]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_20]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_20]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_20]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_20]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_20]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_20]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_20]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_20,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_20]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_20]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_20(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_20]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_21]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_21]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_21]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_21]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_21]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_21]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_21]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_21]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_21]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_21,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_21]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_21]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_21(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_21]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_22]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_22]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_22]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_22]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_22]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_22]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_22]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_22]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_22]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_22,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_22]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_22]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_22(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_22]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_23]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_23]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_23]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_23]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_23]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_23]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_23]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_23]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_23]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_23]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_23]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_23]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_24]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_24(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_24]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_24]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_24(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_24]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_24]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_24]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_24]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_24]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_24]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_24(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_24,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_24]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_24]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_24(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_24]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_25]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_25(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_25]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_25]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_25(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_25]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_25]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_25]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_25]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_25]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_25]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_25(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_25,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_25]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_25]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_25(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_25]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_26]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_26(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_26]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_26]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_26(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_26]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_26]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_26]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_26]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_26]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_26]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_26(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_26,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_26]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_26]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_26(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_26]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_27]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_27(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_27]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_27]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_27(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_27]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_27]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_27]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_27]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_27]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_27]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_27(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_27,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_27]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_27]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_27(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_27]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_28]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_28(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_28]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_28]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_28(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_28]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_28]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_28]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_28]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_28]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_28]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_28(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_28,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_28]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_28]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_28(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_28]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_29]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_29(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_29]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_29]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_29(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_29]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_29]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_29]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_29]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_29]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_29]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_29(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_29,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_29]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_29]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_29(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_29]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_30]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_30(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_30]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_30]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_30(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_30]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_30]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_30]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_30]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_30]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_30]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_30(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_30,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_30]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_30]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_30(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_30]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_31]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_31(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_31]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_31]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_31(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_31]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_31]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_31]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_31]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_31]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_31]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_31(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_31,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_31]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_31]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_31(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_31]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_32]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_32(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_32]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_32]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_32(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_32]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_32]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_32]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_32]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_32]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_32]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_32(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_32,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_32]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_32]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_32(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_32]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_33]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_33(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_33]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_33]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_33(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_33]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_33]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_33]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_33]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_33]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_33]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_33(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_33,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_33]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_33]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_33(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_33]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_34]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_34(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_34]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_34]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_34(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_34]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_34]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_34]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_34]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_34]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_34]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_34(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_34,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_34]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_34]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_34(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_34]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_35]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_35(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_35]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_35]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_35(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_35]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_35]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_35]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_35]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_35]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_35]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_35(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_35,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_35]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_35]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_35(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_35]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_36]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_36(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_36]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_36]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_36(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_36]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_36]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_36]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_36]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_36]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_36]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_36(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_36,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_36]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_36]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_36(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_36]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_37]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_37(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_37]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_37]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_37(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_37]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_37]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_37]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_37]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_37]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_37]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_37(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_37,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_37]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_37]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_37(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_37]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_38]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_38(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_38]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_38]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_38(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_38]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_38]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_38]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_38]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_38]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_38]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_38(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_38,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_38]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_38]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_38(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_38]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_39]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_39(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_39]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_39]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_39(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_39]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_39]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_39]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_39]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_39]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_39]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_39(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_39,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_39]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_39]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_39(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_39]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_40]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_40(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_40]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_40]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_40(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_40]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_40]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_40]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_40]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_40]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_40]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_40(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_40,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_40]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_40]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_40(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_40]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_41]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_41(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_41]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_41]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_41(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_41]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_41]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_41]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_41]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_41]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_41]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_41(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_41,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_41]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_41]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_41(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_41]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_42]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_42(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_42]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_42]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_42(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_42]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_42]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_42]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_42]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_42]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_42]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_42(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_42,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_42]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_42]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_42(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_42]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_43]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_43(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_43]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_43]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_43(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_43]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_43]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_43]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_43]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_43]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_43]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_43(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_43,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_43]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_43]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_43(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_43]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_44]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_44(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_44]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_44]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_44(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_44]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_44]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_44]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_44]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_44]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_44]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_44(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_44,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_44]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_44]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_44(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_44]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_45]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_45(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_45]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_45]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_45(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_45]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_45]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_45]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_45]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_45]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_45]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_45(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_45,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_45]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_45]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_45(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_45]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_46]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_46(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_46]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_46]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_46(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_46]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_46]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_46]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_46]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_46]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_46]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_46(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_46,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_46]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_46]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_46(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_46]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_47]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_47(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_47]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_47]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_47(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_47]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_47]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_47]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_47]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_47]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_47]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_47(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_47,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_47]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_47]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_47(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_47]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_48]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_48(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_48]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_48]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_48(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_48]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_48]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_48]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_48]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_48]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_48]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_48(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_48,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_48]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_48]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_48(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_48]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_49]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_49(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_49]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_49]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_49(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_49]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_49]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_49]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_49]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_49]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_49]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_49(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_49,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_49]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_49]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_49(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_49]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_50]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_50(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_50]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_50]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_50(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_50]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_50]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_50]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_50]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_50]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_50]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_50(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_50,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_50]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_50]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_50(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_50]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_51]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_51(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_51]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_51]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_51(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_51]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_51]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_51]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_51]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_51]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_51]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_51(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_51,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_51]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_51]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_51(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_51]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_52]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_52(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_52]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_52]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_52(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_52]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_52]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_52]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_52]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_52]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_52]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_52(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_52,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_52]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_52]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_52(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_52]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_53]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_53(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_53]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_53]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_53(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_HOSTATTN_MASK_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_53]

//>> SET_[TP_TCN0_N0_HOSTATTN_MASK_53]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_HOSTATTN_MASK_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_HOSTATTN_MASK_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_HOSTATTN_MASK_53]

//>> CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_53]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_HOSTATTN_MASK_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_HOSTATTN_MASK_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_HOSTATTN_MASK_53]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_53]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_HOSTATTN_MASK_53(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_HOSTATTN_MASK_53,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_53]

//>> GET_[TP_TCN0_N0_HOSTATTN_MASK_53]
static inline bool GET_TP_TCN0_N0_HOSTATTN_MASK_53(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_HOSTATTN_MASK_RW, TP_TCN0_N0_HOSTATTN_MASK_WO_CLEAR, TP_TCN0_N0_HOSTATTN_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_HOSTATTN_MASK_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_HOSTATTN_MASK_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_HOSTATTN_MASK_53]

//>> PREP_[TP_TCN0_N0_OPCG_ALIGN]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_OPCG_ALIGN(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_OPCG_ALIGN;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_OPCG_ALIGN]

//>> GET_[TP_TCN0_N0_OPCG_ALIGN]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_OPCG_ALIGN(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_OPCG_ALIGN;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_OPCG_ALIGN, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_ALIGN]

//>> PUT_[TP_TCN0_N0_OPCG_ALIGN]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_OPCG_ALIGN(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_OPCG_ALIGN, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_OPCG_ALIGN]


//>> SET_[TP_TCN0_N0_OPCG_ALIGN_INOP_ALIGN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_ALIGN_INOP_ALIGN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_ALIGN_INOP_ALIGN,
           TP_TCN0_N0_OPCG_ALIGN_INOP_ALIGN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_INOP_ALIGN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_ALIGN_INOP_ALIGN]

//>> SET_[TP_TCN0_N0_OPCG_ALIGN_INOP_ALIGN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_ALIGN_INOP_ALIGN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_ALIGN_INOP_ALIGN,
           TP_TCN0_N0_OPCG_ALIGN_INOP_ALIGN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_INOP_ALIGN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_ALIGN_INOP_ALIGN]

//>> GET_[TP_TCN0_N0_OPCG_ALIGN_INOP_ALIGN]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_OPCG_ALIGN_INOP_ALIGN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return i_data.extractToRight<TP_TCN0_N0_OPCG_ALIGN_INOP_ALIGN,
           TP_TCN0_N0_OPCG_ALIGN_INOP_ALIGN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_INOP_ALIGN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_ALIGN_INOP_ALIGN]

//>> SET_[TP_TCN0_N0_OPCG_ALIGN_SNOP_ALIGN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_ALIGN_SNOP_ALIGN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_ALIGN_SNOP_ALIGN,
           TP_TCN0_N0_OPCG_ALIGN_SNOP_ALIGN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_SNOP_ALIGN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_ALIGN_SNOP_ALIGN]

//>> SET_[TP_TCN0_N0_OPCG_ALIGN_SNOP_ALIGN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_ALIGN_SNOP_ALIGN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_ALIGN_SNOP_ALIGN,
           TP_TCN0_N0_OPCG_ALIGN_SNOP_ALIGN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_SNOP_ALIGN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_ALIGN_SNOP_ALIGN]

//>> GET_[TP_TCN0_N0_OPCG_ALIGN_SNOP_ALIGN]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_OPCG_ALIGN_SNOP_ALIGN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return i_data.extractToRight<TP_TCN0_N0_OPCG_ALIGN_SNOP_ALIGN,
           TP_TCN0_N0_OPCG_ALIGN_SNOP_ALIGN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_SNOP_ALIGN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_ALIGN_SNOP_ALIGN]

//>> SET_[TP_TCN0_N0_OPCG_ALIGN_ENOP_ALIGN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_ALIGN_ENOP_ALIGN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_ALIGN_ENOP_ALIGN,
           TP_TCN0_N0_OPCG_ALIGN_ENOP_ALIGN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_ENOP_ALIGN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_ALIGN_ENOP_ALIGN]

//>> SET_[TP_TCN0_N0_OPCG_ALIGN_ENOP_ALIGN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_ALIGN_ENOP_ALIGN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_ALIGN_ENOP_ALIGN,
           TP_TCN0_N0_OPCG_ALIGN_ENOP_ALIGN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_ENOP_ALIGN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_ALIGN_ENOP_ALIGN]

//>> GET_[TP_TCN0_N0_OPCG_ALIGN_ENOP_ALIGN]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_OPCG_ALIGN_ENOP_ALIGN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return i_data.extractToRight<TP_TCN0_N0_OPCG_ALIGN_ENOP_ALIGN,
           TP_TCN0_N0_OPCG_ALIGN_ENOP_ALIGN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_ENOP_ALIGN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_ALIGN_ENOP_ALIGN]

//>> SET_[TP_TCN0_N0_OPCG_ALIGN_INOP_WAIT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_ALIGN_INOP_WAIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_ALIGN_INOP_WAIT,
           TP_TCN0_N0_OPCG_ALIGN_INOP_WAIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_INOP_WAIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_ALIGN_INOP_WAIT]

//>> SET_[TP_TCN0_N0_OPCG_ALIGN_INOP_WAIT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_ALIGN_INOP_WAIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_ALIGN_INOP_WAIT,
           TP_TCN0_N0_OPCG_ALIGN_INOP_WAIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_INOP_WAIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_ALIGN_INOP_WAIT]

//>> GET_[TP_TCN0_N0_OPCG_ALIGN_INOP_WAIT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_OPCG_ALIGN_INOP_WAIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return i_data.extractToRight<TP_TCN0_N0_OPCG_ALIGN_INOP_WAIT,
           TP_TCN0_N0_OPCG_ALIGN_INOP_WAIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_INOP_WAIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_ALIGN_INOP_WAIT]

//>> SET_[TP_TCN0_N0_OPCG_ALIGN_SNOP_WAIT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_ALIGN_SNOP_WAIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_ALIGN_SNOP_WAIT,
           TP_TCN0_N0_OPCG_ALIGN_SNOP_WAIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_SNOP_WAIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_ALIGN_SNOP_WAIT]

//>> SET_[TP_TCN0_N0_OPCG_ALIGN_SNOP_WAIT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_ALIGN_SNOP_WAIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_ALIGN_SNOP_WAIT,
           TP_TCN0_N0_OPCG_ALIGN_SNOP_WAIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_SNOP_WAIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_ALIGN_SNOP_WAIT]

//>> GET_[TP_TCN0_N0_OPCG_ALIGN_SNOP_WAIT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_OPCG_ALIGN_SNOP_WAIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return i_data.extractToRight<TP_TCN0_N0_OPCG_ALIGN_SNOP_WAIT,
           TP_TCN0_N0_OPCG_ALIGN_SNOP_WAIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_SNOP_WAIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_ALIGN_SNOP_WAIT]

//>> SET_[TP_TCN0_N0_OPCG_ALIGN_ENOP_WAIT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_ALIGN_ENOP_WAIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_ALIGN_ENOP_WAIT,
           TP_TCN0_N0_OPCG_ALIGN_ENOP_WAIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_ENOP_WAIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_ALIGN_ENOP_WAIT]

//>> SET_[TP_TCN0_N0_OPCG_ALIGN_ENOP_WAIT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_ALIGN_ENOP_WAIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_ALIGN_ENOP_WAIT,
           TP_TCN0_N0_OPCG_ALIGN_ENOP_WAIT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_ENOP_WAIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_ALIGN_ENOP_WAIT]

//>> GET_[TP_TCN0_N0_OPCG_ALIGN_ENOP_WAIT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_OPCG_ALIGN_ENOP_WAIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return i_data.extractToRight<TP_TCN0_N0_OPCG_ALIGN_ENOP_WAIT,
           TP_TCN0_N0_OPCG_ALIGN_ENOP_WAIT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_ENOP_WAIT chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_ALIGN_ENOP_WAIT]

//>> SET_[TP_TCN0_N0_OPCG_ALIGN_INOP_FORCE_SG]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_ALIGN_INOP_FORCE_SG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_ALIGN_INOP_FORCE_SG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_INOP_FORCE_SG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_ALIGN_INOP_FORCE_SG]

//>> SET_[TP_TCN0_N0_OPCG_ALIGN_INOP_FORCE_SG]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_ALIGN_INOP_FORCE_SG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_ALIGN_INOP_FORCE_SG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_INOP_FORCE_SG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_ALIGN_INOP_FORCE_SG]

//>> SET_[TP_TCN0_N0_OPCG_ALIGN_INOP_FORCE_SG]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_ALIGN_INOP_FORCE_SG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return o_data.setBit<TP_TCN0_N0_OPCG_ALIGN_INOP_FORCE_SG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_INOP_FORCE_SG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_ALIGN_INOP_FORCE_SG]

//>> CLEAR_[TP_TCN0_N0_OPCG_ALIGN_INOP_FORCE_SG]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_OPCG_ALIGN_INOP_FORCE_SG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return o_data.clearBit<TP_TCN0_N0_OPCG_ALIGN_INOP_FORCE_SG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_INOP_FORCE_SG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_OPCG_ALIGN_INOP_FORCE_SG]

//>> GET_[TP_TCN0_N0_OPCG_ALIGN_INOP_FORCE_SG]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_OPCG_ALIGN_INOP_FORCE_SG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return i_data.extractToRight<TP_TCN0_N0_OPCG_ALIGN_INOP_FORCE_SG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_INOP_FORCE_SG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_ALIGN_INOP_FORCE_SG]

//>> GET_[TP_TCN0_N0_OPCG_ALIGN_INOP_FORCE_SG]
static inline bool GET_TP_TCN0_N0_OPCG_ALIGN_INOP_FORCE_SG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return i_data.getBit<TP_TCN0_N0_OPCG_ALIGN_INOP_FORCE_SG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_INOP_FORCE_SG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_ALIGN_INOP_FORCE_SG]

//>> SET_[TP_TCN0_N0_OPCG_ALIGN_SNOP_FORCE_SG]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_ALIGN_SNOP_FORCE_SG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_ALIGN_SNOP_FORCE_SG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_SNOP_FORCE_SG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_ALIGN_SNOP_FORCE_SG]

//>> SET_[TP_TCN0_N0_OPCG_ALIGN_SNOP_FORCE_SG]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_ALIGN_SNOP_FORCE_SG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_ALIGN_SNOP_FORCE_SG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_SNOP_FORCE_SG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_ALIGN_SNOP_FORCE_SG]

//>> SET_[TP_TCN0_N0_OPCG_ALIGN_SNOP_FORCE_SG]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_ALIGN_SNOP_FORCE_SG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return o_data.setBit<TP_TCN0_N0_OPCG_ALIGN_SNOP_FORCE_SG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_SNOP_FORCE_SG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_ALIGN_SNOP_FORCE_SG]

//>> CLEAR_[TP_TCN0_N0_OPCG_ALIGN_SNOP_FORCE_SG]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_OPCG_ALIGN_SNOP_FORCE_SG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return o_data.clearBit<TP_TCN0_N0_OPCG_ALIGN_SNOP_FORCE_SG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_SNOP_FORCE_SG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_OPCG_ALIGN_SNOP_FORCE_SG]

//>> GET_[TP_TCN0_N0_OPCG_ALIGN_SNOP_FORCE_SG]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_OPCG_ALIGN_SNOP_FORCE_SG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return i_data.extractToRight<TP_TCN0_N0_OPCG_ALIGN_SNOP_FORCE_SG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_SNOP_FORCE_SG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_ALIGN_SNOP_FORCE_SG]

//>> GET_[TP_TCN0_N0_OPCG_ALIGN_SNOP_FORCE_SG]
static inline bool GET_TP_TCN0_N0_OPCG_ALIGN_SNOP_FORCE_SG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return i_data.getBit<TP_TCN0_N0_OPCG_ALIGN_SNOP_FORCE_SG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_SNOP_FORCE_SG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_ALIGN_SNOP_FORCE_SG]

//>> SET_[TP_TCN0_N0_OPCG_ALIGN_ENOP_FORCE_SG]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_ALIGN_ENOP_FORCE_SG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_ALIGN_ENOP_FORCE_SG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_ENOP_FORCE_SG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_ALIGN_ENOP_FORCE_SG]

//>> SET_[TP_TCN0_N0_OPCG_ALIGN_ENOP_FORCE_SG]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_ALIGN_ENOP_FORCE_SG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_ALIGN_ENOP_FORCE_SG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_ENOP_FORCE_SG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_ALIGN_ENOP_FORCE_SG]

//>> SET_[TP_TCN0_N0_OPCG_ALIGN_ENOP_FORCE_SG]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_ALIGN_ENOP_FORCE_SG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return o_data.setBit<TP_TCN0_N0_OPCG_ALIGN_ENOP_FORCE_SG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_ENOP_FORCE_SG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_ALIGN_ENOP_FORCE_SG]

//>> CLEAR_[TP_TCN0_N0_OPCG_ALIGN_ENOP_FORCE_SG]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_OPCG_ALIGN_ENOP_FORCE_SG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return o_data.clearBit<TP_TCN0_N0_OPCG_ALIGN_ENOP_FORCE_SG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_ENOP_FORCE_SG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_OPCG_ALIGN_ENOP_FORCE_SG]

//>> GET_[TP_TCN0_N0_OPCG_ALIGN_ENOP_FORCE_SG]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_OPCG_ALIGN_ENOP_FORCE_SG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return i_data.extractToRight<TP_TCN0_N0_OPCG_ALIGN_ENOP_FORCE_SG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_ENOP_FORCE_SG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_ALIGN_ENOP_FORCE_SG]

//>> GET_[TP_TCN0_N0_OPCG_ALIGN_ENOP_FORCE_SG]
static inline bool GET_TP_TCN0_N0_OPCG_ALIGN_ENOP_FORCE_SG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return i_data.getBit<TP_TCN0_N0_OPCG_ALIGN_ENOP_FORCE_SG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_ENOP_FORCE_SG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_ALIGN_ENOP_FORCE_SG]

//>> SET_[TP_TCN0_N0_OPCG_ALIGN_NO_WAIT_ON_CLK_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_ALIGN_NO_WAIT_ON_CLK_CMD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_ALIGN_NO_WAIT_ON_CLK_CMD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_NO_WAIT_ON_CLK_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_ALIGN_NO_WAIT_ON_CLK_CMD]

//>> SET_[TP_TCN0_N0_OPCG_ALIGN_NO_WAIT_ON_CLK_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_ALIGN_NO_WAIT_ON_CLK_CMD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_ALIGN_NO_WAIT_ON_CLK_CMD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_NO_WAIT_ON_CLK_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_ALIGN_NO_WAIT_ON_CLK_CMD]

//>> SET_[TP_TCN0_N0_OPCG_ALIGN_NO_WAIT_ON_CLK_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_ALIGN_NO_WAIT_ON_CLK_CMD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return o_data.setBit<TP_TCN0_N0_OPCG_ALIGN_NO_WAIT_ON_CLK_CMD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_NO_WAIT_ON_CLK_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_ALIGN_NO_WAIT_ON_CLK_CMD]

//>> CLEAR_[TP_TCN0_N0_OPCG_ALIGN_NO_WAIT_ON_CLK_CMD]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_OPCG_ALIGN_NO_WAIT_ON_CLK_CMD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return o_data.clearBit<TP_TCN0_N0_OPCG_ALIGN_NO_WAIT_ON_CLK_CMD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_NO_WAIT_ON_CLK_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_OPCG_ALIGN_NO_WAIT_ON_CLK_CMD]

//>> GET_[TP_TCN0_N0_OPCG_ALIGN_NO_WAIT_ON_CLK_CMD]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_OPCG_ALIGN_NO_WAIT_ON_CLK_CMD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return i_data.extractToRight<TP_TCN0_N0_OPCG_ALIGN_NO_WAIT_ON_CLK_CMD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_NO_WAIT_ON_CLK_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_ALIGN_NO_WAIT_ON_CLK_CMD]

//>> GET_[TP_TCN0_N0_OPCG_ALIGN_NO_WAIT_ON_CLK_CMD]
static inline bool GET_TP_TCN0_N0_OPCG_ALIGN_NO_WAIT_ON_CLK_CMD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return i_data.getBit<TP_TCN0_N0_OPCG_ALIGN_NO_WAIT_ON_CLK_CMD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_NO_WAIT_ON_CLK_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_ALIGN_NO_WAIT_ON_CLK_CMD]

//>> SET_[TP_TCN0_N0_OPCG_ALIGN_ALIGN_SOURCE_SELECT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_ALIGN_ALIGN_SOURCE_SELECT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_ALIGN_ALIGN_SOURCE_SELECT,
           TP_TCN0_N0_OPCG_ALIGN_ALIGN_SOURCE_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_ALIGN_SOURCE_SELECT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_ALIGN_ALIGN_SOURCE_SELECT]

//>> SET_[TP_TCN0_N0_OPCG_ALIGN_ALIGN_SOURCE_SELECT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_ALIGN_ALIGN_SOURCE_SELECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_ALIGN_ALIGN_SOURCE_SELECT,
           TP_TCN0_N0_OPCG_ALIGN_ALIGN_SOURCE_SELECT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_ALIGN_SOURCE_SELECT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_ALIGN_ALIGN_SOURCE_SELECT]

//>> GET_[TP_TCN0_N0_OPCG_ALIGN_ALIGN_SOURCE_SELECT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_OPCG_ALIGN_ALIGN_SOURCE_SELECT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return i_data.extractToRight<TP_TCN0_N0_OPCG_ALIGN_ALIGN_SOURCE_SELECT,
           TP_TCN0_N0_OPCG_ALIGN_ALIGN_SOURCE_SELECT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_ALIGN_SOURCE_SELECT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_ALIGN_ALIGN_SOURCE_SELECT]

//>> SET_[TP_TCN0_N0_OPCG_ALIGN_SCAN_RATIO]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_ALIGN_SCAN_RATIO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_ALIGN_SCAN_RATIO,
           TP_TCN0_N0_OPCG_ALIGN_SCAN_RATIO_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_SCAN_RATIO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_ALIGN_SCAN_RATIO]

//>> SET_[TP_TCN0_N0_OPCG_ALIGN_SCAN_RATIO]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_ALIGN_SCAN_RATIO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_ALIGN_SCAN_RATIO,
           TP_TCN0_N0_OPCG_ALIGN_SCAN_RATIO_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_SCAN_RATIO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_ALIGN_SCAN_RATIO]

//>> GET_[TP_TCN0_N0_OPCG_ALIGN_SCAN_RATIO]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_OPCG_ALIGN_SCAN_RATIO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return i_data.extractToRight<TP_TCN0_N0_OPCG_ALIGN_SCAN_RATIO,
           TP_TCN0_N0_OPCG_ALIGN_SCAN_RATIO_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_SCAN_RATIO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_ALIGN_SCAN_RATIO]

//>> SET_[TP_TCN0_N0_OPCG_ALIGN_OPCG_WAIT_CYCLES]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_ALIGN_OPCG_WAIT_CYCLES(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_ALIGN_OPCG_WAIT_CYCLES,
           TP_TCN0_N0_OPCG_ALIGN_OPCG_WAIT_CYCLES_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_OPCG_WAIT_CYCLES chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_ALIGN_OPCG_WAIT_CYCLES]

//>> SET_[TP_TCN0_N0_OPCG_ALIGN_OPCG_WAIT_CYCLES]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_OPCG_ALIGN_OPCG_WAIT_CYCLES(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_OPCG_ALIGN_OPCG_WAIT_CYCLES,
           TP_TCN0_N0_OPCG_ALIGN_OPCG_WAIT_CYCLES_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_OPCG_WAIT_CYCLES chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_OPCG_ALIGN_OPCG_WAIT_CYCLES]

//>> GET_[TP_TCN0_N0_OPCG_ALIGN_OPCG_WAIT_CYCLES]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_OPCG_ALIGN_OPCG_WAIT_CYCLES(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_OPCG_ALIGN));
#endif
    return i_data.extractToRight<TP_TCN0_N0_OPCG_ALIGN_OPCG_WAIT_CYCLES,
           TP_TCN0_N0_OPCG_ALIGN_OPCG_WAIT_CYCLES_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_OPCG_ALIGN_OPCG_WAIT_CYCLES chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_OPCG_ALIGN_OPCG_WAIT_CYCLES]

//>> PREP_[TP_TCN0_N0_SCAN_REGION_TYPE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_SCAN_REGION_TYPE(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_SCAN_REGION_TYPE;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_SCAN_REGION_TYPE]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_SCAN_REGION_TYPE(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_SCAN_REGION_TYPE;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_SCAN_REGION_TYPE, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE]

//>> PUT_[TP_TCN0_N0_SCAN_REGION_TYPE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_SCAN_REGION_TYPE(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_SCAN_REGION_TYPE, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_SCAN_REGION_TYPE]


//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SYSTEM_FAST_INIT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SYSTEM_FAST_INIT(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SYSTEM_FAST_INIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SYSTEM_FAST_INIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SYSTEM_FAST_INIT]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SYSTEM_FAST_INIT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SYSTEM_FAST_INIT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SYSTEM_FAST_INIT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SYSTEM_FAST_INIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SYSTEM_FAST_INIT]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SYSTEM_FAST_INIT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SYSTEM_FAST_INIT(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.setBit<TP_TCN0_N0_SCAN_REGION_TYPE_SYSTEM_FAST_INIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SYSTEM_FAST_INIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SYSTEM_FAST_INIT]

//>> CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SYSTEM_FAST_INIT]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_SCAN_REGION_TYPE_SYSTEM_FAST_INIT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.clearBit<TP_TCN0_N0_SCAN_REGION_TYPE_SYSTEM_FAST_INIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SYSTEM_FAST_INIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SYSTEM_FAST_INIT]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SYSTEM_FAST_INIT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_SCAN_REGION_TYPE_SYSTEM_FAST_INIT(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.extractToRight<TP_TCN0_N0_SCAN_REGION_TYPE_SYSTEM_FAST_INIT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SYSTEM_FAST_INIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SYSTEM_FAST_INIT]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SYSTEM_FAST_INIT]
static inline bool GET_TP_TCN0_N0_SCAN_REGION_TYPE_SYSTEM_FAST_INIT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.getBit<TP_TCN0_N0_SCAN_REGION_TYPE_SYSTEM_FAST_INIT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SYSTEM_FAST_INIT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SYSTEM_FAST_INIT]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.setBit<TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN]

//>> CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.clearBit<TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.extractToRight<TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN]
static inline bool GET_TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.getBit<TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN_AND_NOTOR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN_AND_NOTOR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN_AND_NOTOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN_AND_NOTOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN_AND_NOTOR]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN_AND_NOTOR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN_AND_NOTOR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN_AND_NOTOR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN_AND_NOTOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN_AND_NOTOR]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN_AND_NOTOR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN_AND_NOTOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.setBit<TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN_AND_NOTOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN_AND_NOTOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN_AND_NOTOR]

//>> CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN_AND_NOTOR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN_AND_NOTOR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.clearBit<TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN_AND_NOTOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN_AND_NOTOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN_AND_NOTOR]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN_AND_NOTOR]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN_AND_NOTOR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.extractToRight<TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN_AND_NOTOR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN_AND_NOTOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN_AND_NOTOR]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN_AND_NOTOR]
static inline bool GET_TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN_AND_NOTOR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.getBit<TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN_AND_NOTOR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN_AND_NOTOR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_PARALLEL_SCAN_AND_NOTOR]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_VITL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_VITL(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_VITL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_VITL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_VITL]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_VITL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_VITL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_VITL,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_VITL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_VITL]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_VITL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_VITL(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.setBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_VITL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_VITL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_VITL]

//>> CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_VITL]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_VITL(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.clearBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_VITL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_VITL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_VITL]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_VITL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_VITL(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.extractToRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_VITL,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_VITL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_VITL]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_VITL]
static inline bool GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_VITL(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.getBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_VITL>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_VITL chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_VITL]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_PERV]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_PERV(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_PERV,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_PERV chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_PERV]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_PERV]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_PERV(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_PERV,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_PERV chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_PERV]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_PERV]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_PERV(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.setBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_PERV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_PERV chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_PERV]

//>> CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_PERV]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_PERV(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.clearBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_PERV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_PERV chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_PERV]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_PERV]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_PERV(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.extractToRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_PERV,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_PERV chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_PERV]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_PERV]
static inline bool GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_PERV(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.getBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_PERV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_PERV chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_PERV]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT1(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT1]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT1]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.setBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT1]

//>> CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT1]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.clearBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT1]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT1]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT1(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.extractToRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT1]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT1]
static inline bool GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.getBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT1]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT2]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT2(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT2]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT2]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT2]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT2]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.setBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT2]

//>> CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT2]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT2(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.clearBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT2]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT2]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT2(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.extractToRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT2]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT2]
static inline bool GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.getBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT2 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT2]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT3]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT3(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT3]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT3]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT3]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT3]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.setBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT3]

//>> CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT3]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT3(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.clearBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT3]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT3]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT3(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.extractToRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT3]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT3]
static inline bool GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.getBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT3 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT3]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT4]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT4(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT4]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT4]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT4]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT4]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.setBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT4]

//>> CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT4]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT4(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.clearBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT4]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT4]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT4(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.extractToRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT4]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT4]
static inline bool GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.getBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT4 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT4]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT5]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT5(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT5]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT5]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT5]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT5]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.setBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT5]

//>> CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT5]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT5(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.clearBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT5]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT5]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT5(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.extractToRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT5]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT5]
static inline bool GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.getBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT5 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT5]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT6]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT6(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT6]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT6]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT6]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT6]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.setBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT6]

//>> CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT6]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT6(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.clearBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT6]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT6]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT6(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.extractToRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT6]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT6]
static inline bool GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.getBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT6 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT6]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT7]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT7(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT7]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT7]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT7]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT7]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.setBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT7]

//>> CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT7]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT7(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.clearBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT7]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT7]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT7(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.extractToRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT7]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT7]
static inline bool GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.getBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT7 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT7]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT8]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT8(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT8]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT8]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT8]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT8]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT8(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.setBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT8]

//>> CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT8]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT8(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.clearBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT8]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT8]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT8(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.extractToRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT8]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT8]
static inline bool GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.getBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT8 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT8]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT9]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT9(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT9 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT9]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT9]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT9 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT9]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT9]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT9(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.setBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT9 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT9]

//>> CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT9]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT9(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.clearBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT9 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT9]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT9]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT9(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.extractToRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT9 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT9]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT9]
static inline bool GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.getBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT9 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT9]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT10(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT10]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT10]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT10(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.setBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT10]

//>> CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT10]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT10(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.clearBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT10]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT10]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT10(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.extractToRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT10]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT10]
static inline bool GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.getBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT10 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT10]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT11(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT11]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT11]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT11(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.setBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT11]

//>> CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT11]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT11(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.clearBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT11]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT11]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT11(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.extractToRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT11]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT11]
static inline bool GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.getBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT11 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT11]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT12(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT12]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT12]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.setBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT12]

//>> CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT12]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT12(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.clearBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT12]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT12]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT12(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.extractToRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT12]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT12]
static inline bool GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.getBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT12 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT12]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT13(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT13]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT13]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT13(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.setBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT13]

//>> CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT13]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT13(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.clearBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT13]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT13]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT13(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.extractToRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT13]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT13]
static inline bool GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.getBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT13 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT13]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT14(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT14]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT14]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT14(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.setBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT14]

//>> CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT14]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT14(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.clearBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT14]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT14]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT14(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.extractToRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT14]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT14]
static inline bool GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.getBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT14 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_REGION_UNIT14]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FUNC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FUNC(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FUNC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FUNC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FUNC]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FUNC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FUNC(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FUNC,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FUNC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FUNC]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FUNC]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FUNC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.setBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FUNC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FUNC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FUNC]

//>> CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FUNC]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FUNC(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.clearBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FUNC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FUNC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FUNC]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FUNC]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FUNC(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.extractToRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FUNC,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FUNC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FUNC]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FUNC]
static inline bool GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FUNC(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.getBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FUNC>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FUNC chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FUNC]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CFG]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CFG(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CFG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CFG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CFG]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CFG]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CFG(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CFG,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CFG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CFG]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CFG]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CFG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.setBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CFG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CFG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CFG]

//>> CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CFG]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CFG(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.clearBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CFG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CFG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CFG]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CFG]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CFG(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.extractToRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CFG,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CFG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CFG]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CFG]
static inline bool GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CFG(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.getBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CFG>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CFG chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CFG]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CCFG_GPTR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CCFG_GPTR(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CCFG_GPTR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CCFG_GPTR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CCFG_GPTR]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CCFG_GPTR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CCFG_GPTR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CCFG_GPTR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CCFG_GPTR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CCFG_GPTR]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CCFG_GPTR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CCFG_GPTR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.setBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CCFG_GPTR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CCFG_GPTR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CCFG_GPTR]

//>> CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CCFG_GPTR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CCFG_GPTR(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.clearBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CCFG_GPTR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CCFG_GPTR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CCFG_GPTR]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CCFG_GPTR]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CCFG_GPTR(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.extractToRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CCFG_GPTR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CCFG_GPTR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CCFG_GPTR]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CCFG_GPTR]
static inline bool GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CCFG_GPTR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.getBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CCFG_GPTR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CCFG_GPTR chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CCFG_GPTR]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REGF]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REGF(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REGF,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REGF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REGF]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REGF]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REGF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REGF,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REGF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REGF]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REGF]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REGF(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.setBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REGF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REGF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REGF]

//>> CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REGF]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REGF(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.clearBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REGF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REGF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REGF]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REGF]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REGF(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.extractToRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REGF,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REGF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REGF]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REGF]
static inline bool GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REGF(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.getBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REGF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REGF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REGF]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_LBIST]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_LBIST(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_LBIST,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_LBIST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_LBIST]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_LBIST]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_LBIST(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_LBIST,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_LBIST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_LBIST]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_LBIST]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_LBIST(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.setBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_LBIST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_LBIST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_LBIST]

//>> CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_LBIST]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_LBIST(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.clearBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_LBIST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_LBIST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_LBIST]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_LBIST]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_LBIST(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.extractToRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_LBIST,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_LBIST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_LBIST]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_LBIST]
static inline bool GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_LBIST(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.getBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_LBIST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_LBIST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_LBIST]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_ABIST]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_ABIST(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_ABIST,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_ABIST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_ABIST]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_ABIST]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_ABIST(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_ABIST,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_ABIST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_ABIST]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_ABIST]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_ABIST(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.setBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_ABIST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_ABIST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_ABIST]

//>> CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_ABIST]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_ABIST(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.clearBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_ABIST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_ABIST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_ABIST]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_ABIST]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_ABIST(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.extractToRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_ABIST,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_ABIST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_ABIST]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_ABIST]
static inline bool GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_ABIST(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.getBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_ABIST>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_ABIST chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_ABIST]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REPR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REPR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REPR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REPR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REPR]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REPR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REPR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REPR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REPR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REPR]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REPR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REPR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.setBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REPR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REPR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REPR]

//>> CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REPR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REPR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.clearBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REPR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REPR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REPR]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REPR]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REPR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.extractToRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REPR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REPR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REPR]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REPR]
static inline bool GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REPR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.getBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REPR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REPR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_REPR]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_TIME]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_TIME(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_TIME,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_TIME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_TIME]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_TIME]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_TIME(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_TIME,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_TIME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_TIME]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_TIME]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_TIME(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.setBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_TIME>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_TIME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_TIME]

//>> CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_TIME]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_TIME(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.clearBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_TIME>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_TIME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_TIME]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_TIME]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_TIME(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.extractToRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_TIME,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_TIME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_TIME]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_TIME]
static inline bool GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_TIME(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.getBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_TIME>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_TIME chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_TIME]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_BNDY]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_BNDY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_BNDY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_BNDY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_BNDY]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_BNDY]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_BNDY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_BNDY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_BNDY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_BNDY]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_BNDY]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_BNDY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.setBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_BNDY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_BNDY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_BNDY]

//>> CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_BNDY]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_BNDY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.clearBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_BNDY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_BNDY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_BNDY]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_BNDY]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_BNDY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.extractToRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_BNDY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_BNDY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_BNDY]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_BNDY]
static inline bool GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_BNDY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.getBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_BNDY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_BNDY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_BNDY]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FARR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FARR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FARR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FARR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FARR]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FARR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FARR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FARR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FARR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FARR]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FARR]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FARR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.setBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FARR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FARR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FARR]

//>> CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FARR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FARR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.clearBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FARR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FARR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FARR]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FARR]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FARR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.extractToRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FARR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FARR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FARR]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FARR]
static inline bool GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FARR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.getBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FARR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FARR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_FARR]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CMSK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CMSK(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CMSK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CMSK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CMSK]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CMSK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CMSK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CMSK,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CMSK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CMSK]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CMSK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CMSK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.setBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CMSK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CMSK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CMSK]

//>> CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CMSK]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CMSK(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.clearBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CMSK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CMSK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CMSK]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CMSK]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CMSK(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.extractToRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CMSK,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CMSK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CMSK]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CMSK]
static inline bool GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CMSK(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.getBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CMSK>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CMSK chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_CMSK]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_INEX]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_INEX(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_INEX,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_INEX chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_INEX]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_INEX]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_INEX(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_INEX,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_INEX chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_INEX]

//>> SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_INEX]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_INEX(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.setBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_INEX>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_INEX chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_INEX]

//>> CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_INEX]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_INEX(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return o_data.clearBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_INEX>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_INEX chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_INEX]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_INEX]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_INEX(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.extractToRight<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_INEX,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_INEX chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_INEX]

//>> GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_INEX]
static inline bool GET_TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_INEX(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_SCAN_REGION_TYPE));
#endif
    return i_data.getBit<TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_INEX>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_INEX chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_SCAN_REGION_TYPE_SCAN_TYPE_INEX]

//>> PREP_[TP_TCN0_N0_TRA0_TR1_CONFIG_2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_TRA0_TR1_CONFIG_2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_TRA0_TR1_CONFIG_2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_TRA0_TR1_CONFIG_2]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_TRA0_TR1_CONFIG_2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_TRA0_TR1_CONFIG_2;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_TRA0_TR1_CONFIG_2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_2]

//>> PUT_[TP_TCN0_N0_TRA0_TR1_CONFIG_2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_TRA0_TR1_CONFIG_2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_2));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_TRA0_TR1_CONFIG_2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_TRA0_TR1_CONFIG_2]


//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_2_A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_2_A(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_2_A,
           TP_TCN0_N0_TRA0_TR1_CONFIG_2_A_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_2_A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_2_A]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_2_A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_2_A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_2_A,
           TP_TCN0_N0_TRA0_TR1_CONFIG_2_A_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_2_A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_2_A]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_2_A]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR1_CONFIG_2_A(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR1_CONFIG_2_A,
           TP_TCN0_N0_TRA0_TR1_CONFIG_2_A_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_2_A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_2_A]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_2_B]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_2_B(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_2_B,
           TP_TCN0_N0_TRA0_TR1_CONFIG_2_B_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_2_B chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_2_B]

//>> SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_2_B]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA0_TR1_CONFIG_2_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA0_TR1_CONFIG_2_B,
           TP_TCN0_N0_TRA0_TR1_CONFIG_2_B_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_2_B chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA0_TR1_CONFIG_2_B]

//>> GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_2_B]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA0_TR1_CONFIG_2_B(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA0_TR1_CONFIG_2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA0_TR1_CONFIG_2_B,
           TP_TCN0_N0_TRA0_TR1_CONFIG_2_B_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA0_TR1_CONFIG_2_B chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA0_TR1_CONFIG_2_B]

//>> PREP_[TP_TCN0_N0_TRA1_TR0_TRACE_HI_DATA_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_TRA1_TR0_TRACE_HI_DATA_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_TRA1_TR0_TRACE_HI_DATA_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_TRA1_TR0_TRACE_HI_DATA_REG]

//>> GET_[TP_TCN0_N0_TRA1_TR0_TRACE_HI_DATA_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_TRA1_TR0_TRACE_HI_DATA_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_TRA1_TR0_TRACE_HI_DATA_REG;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_TRA1_TR0_TRACE_HI_DATA_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_TRA1_TR0_TRACE_HI_DATA_REG]

//>> PUT_[TP_TCN0_N0_TRA1_TR0_TRACE_HI_DATA_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_TRA1_TR0_TRACE_HI_DATA_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_TRACE_HI_DATA_REG));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_TRA1_TR0_TRACE_HI_DATA_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_TRA1_TR0_TRACE_HI_DATA_REG]


//>> SET_[TP_TCN0_N0_TRA1_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA1_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_TRACE_HI_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA1_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA,
           TP_TCN0_N0_TRA1_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA1_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA]

//>> SET_[TP_TCN0_N0_TRA1_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA1_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_TRACE_HI_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA1_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA,
           TP_TCN0_N0_TRA1_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA1_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA]

//>> GET_[TP_TCN0_N0_TRA1_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA1_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_TRACE_HI_DATA_REG));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA1_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA,
           TP_TCN0_N0_TRA1_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA1_TR0_TRACE_HI_DATA_REG_TRACE_HI_DATA]

//>> PREP_[TP_TCN0_N0_TRA1_TR0_CONFIG_4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_TRA1_TR0_CONFIG_4(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_TRA1_TR0_CONFIG_4;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_TRA1_TR0_CONFIG_4]

//>> GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_TRA1_TR0_CONFIG_4(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_TRA1_TR0_CONFIG_4;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_TRA1_TR0_CONFIG_4, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_4]

//>> PUT_[TP_TCN0_N0_TRA1_TR0_CONFIG_4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_TRA1_TR0_CONFIG_4(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG_4));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_TRA1_TR0_CONFIG_4, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_TRA1_TR0_CONFIG_4]


//>> SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_4_A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA1_TR0_CONFIG_4_A(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG_4));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA1_TR0_CONFIG_4_A,
           TP_TCN0_N0_TRA1_TR0_CONFIG_4_A_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_4_A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_4_A]

//>> SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_4_A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA1_TR0_CONFIG_4_A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG_4));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA1_TR0_CONFIG_4_A,
           TP_TCN0_N0_TRA1_TR0_CONFIG_4_A_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_4_A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_4_A]

//>> GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_4_A]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA1_TR0_CONFIG_4_A(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG_4));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA1_TR0_CONFIG_4_A,
           TP_TCN0_N0_TRA1_TR0_CONFIG_4_A_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_4_A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_4_A]

//>> SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_4_B]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA1_TR0_CONFIG_4_B(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG_4));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA1_TR0_CONFIG_4_B,
           TP_TCN0_N0_TRA1_TR0_CONFIG_4_B_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_4_B chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_4_B]

//>> SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_4_B]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_TRA1_TR0_CONFIG_4_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG_4));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_TRA1_TR0_CONFIG_4_B,
           TP_TCN0_N0_TRA1_TR0_CONFIG_4_B_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_4_B chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_TRA1_TR0_CONFIG_4_B]

//>> GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_4_B]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_TRA1_TR0_CONFIG_4_B(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_TRA1_TR0_CONFIG_4));
#endif
    return i_data.extractToRight<TP_TCN0_N0_TRA1_TR0_CONFIG_4_B,
           TP_TCN0_N0_TRA1_TR0_CONFIG_4_B_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_TRA1_TR0_CONFIG_4_B chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_TRA1_TR0_CONFIG_4_B]

//>> PREP_[TP_TCN0_N0_XSTOP2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_XSTOP2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_XSTOP2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_XSTOP2]

//>> GET_[TP_TCN0_N0_XSTOP2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_XSTOP2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_XSTOP2;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_XSTOP2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP2]

//>> PUT_[TP_TCN0_N0_XSTOP2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_XSTOP2(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_XSTOP2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_XSTOP2]


//>> SET_[TP_TCN0_N0_XSTOP2_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_ENABLE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP2_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_ENABLE]

//>> SET_[TP_TCN0_N0_XSTOP2_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_ENABLE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP2_ENABLE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_ENABLE]

//>> SET_[TP_TCN0_N0_XSTOP2_ENABLE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP2_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_ENABLE]

//>> CLEAR_[TP_TCN0_N0_XSTOP2_ENABLE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP2_ENABLE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP2_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP2_ENABLE]

//>> GET_[TP_TCN0_N0_XSTOP2_ENABLE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP2_ENABLE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP2_ENABLE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP2_ENABLE]

//>> GET_[TP_TCN0_N0_XSTOP2_ENABLE]
static inline bool GET_TP_TCN0_N0_XSTOP2_ENABLE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP2_ENABLE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_ENABLE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP2_ENABLE]

//>> SET_[TP_TCN0_N0_XSTOP2_WAIT_SNOPA]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_WAIT_SNOPA(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP2_WAIT_SNOPA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_WAIT_SNOPA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_WAIT_SNOPA]

//>> SET_[TP_TCN0_N0_XSTOP2_WAIT_SNOPA]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_WAIT_SNOPA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP2_WAIT_SNOPA,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_WAIT_SNOPA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_WAIT_SNOPA]

//>> SET_[TP_TCN0_N0_XSTOP2_WAIT_SNOPA]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_WAIT_SNOPA(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP2_WAIT_SNOPA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_WAIT_SNOPA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_WAIT_SNOPA]

//>> CLEAR_[TP_TCN0_N0_XSTOP2_WAIT_SNOPA]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP2_WAIT_SNOPA(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP2_WAIT_SNOPA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_WAIT_SNOPA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP2_WAIT_SNOPA]

//>> GET_[TP_TCN0_N0_XSTOP2_WAIT_SNOPA]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP2_WAIT_SNOPA(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP2_WAIT_SNOPA,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_WAIT_SNOPA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP2_WAIT_SNOPA]

//>> GET_[TP_TCN0_N0_XSTOP2_WAIT_SNOPA]
static inline bool GET_TP_TCN0_N0_XSTOP2_WAIT_SNOPA(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP2_WAIT_SNOPA>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_WAIT_SNOPA chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP2_WAIT_SNOPA]

//>> SET_[TP_TCN0_N0_XSTOP2_TRIGGER_OPCG_GO]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_TRIGGER_OPCG_GO(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP2_TRIGGER_OPCG_GO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_TRIGGER_OPCG_GO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_TRIGGER_OPCG_GO]

//>> SET_[TP_TCN0_N0_XSTOP2_TRIGGER_OPCG_GO]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_TRIGGER_OPCG_GO(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP2_TRIGGER_OPCG_GO,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_TRIGGER_OPCG_GO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_TRIGGER_OPCG_GO]

//>> SET_[TP_TCN0_N0_XSTOP2_TRIGGER_OPCG_GO]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_TRIGGER_OPCG_GO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP2_TRIGGER_OPCG_GO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_TRIGGER_OPCG_GO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_TRIGGER_OPCG_GO]

//>> CLEAR_[TP_TCN0_N0_XSTOP2_TRIGGER_OPCG_GO]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP2_TRIGGER_OPCG_GO(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP2_TRIGGER_OPCG_GO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_TRIGGER_OPCG_GO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP2_TRIGGER_OPCG_GO]

//>> GET_[TP_TCN0_N0_XSTOP2_TRIGGER_OPCG_GO]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP2_TRIGGER_OPCG_GO(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP2_TRIGGER_OPCG_GO,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_TRIGGER_OPCG_GO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP2_TRIGGER_OPCG_GO]

//>> GET_[TP_TCN0_N0_XSTOP2_TRIGGER_OPCG_GO]
static inline bool GET_TP_TCN0_N0_XSTOP2_TRIGGER_OPCG_GO(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP2_TRIGGER_OPCG_GO>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_TRIGGER_OPCG_GO chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP2_TRIGGER_OPCG_GO]

//>> SET_[TP_TCN0_N0_XSTOP2_WAIT_ALWAYS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_WAIT_ALWAYS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP2_WAIT_ALWAYS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_WAIT_ALWAYS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_WAIT_ALWAYS]

//>> SET_[TP_TCN0_N0_XSTOP2_WAIT_ALWAYS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_WAIT_ALWAYS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP2_WAIT_ALWAYS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_WAIT_ALWAYS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_WAIT_ALWAYS]

//>> SET_[TP_TCN0_N0_XSTOP2_WAIT_ALWAYS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_WAIT_ALWAYS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP2_WAIT_ALWAYS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_WAIT_ALWAYS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_WAIT_ALWAYS]

//>> CLEAR_[TP_TCN0_N0_XSTOP2_WAIT_ALWAYS]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP2_WAIT_ALWAYS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP2_WAIT_ALWAYS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_WAIT_ALWAYS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP2_WAIT_ALWAYS]

//>> GET_[TP_TCN0_N0_XSTOP2_WAIT_ALWAYS]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP2_WAIT_ALWAYS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP2_WAIT_ALWAYS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_WAIT_ALWAYS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP2_WAIT_ALWAYS]

//>> GET_[TP_TCN0_N0_XSTOP2_WAIT_ALWAYS]
static inline bool GET_TP_TCN0_N0_XSTOP2_WAIT_ALWAYS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP2_WAIT_ALWAYS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_WAIT_ALWAYS chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP2_WAIT_ALWAYS]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_PERV]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_PERV(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP2_REGION_PERV,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_PERV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_PERV]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_PERV]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_PERV(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP2_REGION_PERV,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_PERV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_PERV]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_PERV]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_PERV(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP2_REGION_PERV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_PERV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_PERV]

//>> CLEAR_[TP_TCN0_N0_XSTOP2_REGION_PERV]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP2_REGION_PERV(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP2_REGION_PERV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_PERV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP2_REGION_PERV]

//>> GET_[TP_TCN0_N0_XSTOP2_REGION_PERV]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP2_REGION_PERV(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP2_REGION_PERV,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_PERV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP2_REGION_PERV]

//>> GET_[TP_TCN0_N0_XSTOP2_REGION_PERV]
static inline bool GET_TP_TCN0_N0_XSTOP2_REGION_PERV(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP2_REGION_PERV>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_PERV chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP2_REGION_PERV]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_UNIT1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP2_REGION_UNIT1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT1]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_UNIT1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP2_REGION_UNIT1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT1]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT1]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_UNIT1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP2_REGION_UNIT1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT1]

//>> CLEAR_[TP_TCN0_N0_XSTOP2_REGION_UNIT1]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP2_REGION_UNIT1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP2_REGION_UNIT1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP2_REGION_UNIT1]

//>> GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT1]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP2_REGION_UNIT1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP2_REGION_UNIT1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT1]

//>> GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT1]
static inline bool GET_TP_TCN0_N0_XSTOP2_REGION_UNIT1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP2_REGION_UNIT1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT1]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT2]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_UNIT2(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP2_REGION_UNIT2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT2]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT2]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_UNIT2(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP2_REGION_UNIT2,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT2]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT2]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_UNIT2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP2_REGION_UNIT2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT2]

//>> CLEAR_[TP_TCN0_N0_XSTOP2_REGION_UNIT2]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP2_REGION_UNIT2(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP2_REGION_UNIT2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP2_REGION_UNIT2]

//>> GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT2]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP2_REGION_UNIT2(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP2_REGION_UNIT2,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT2]

//>> GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT2]
static inline bool GET_TP_TCN0_N0_XSTOP2_REGION_UNIT2(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP2_REGION_UNIT2>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT2 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT2]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT3]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_UNIT3(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP2_REGION_UNIT3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT3]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT3]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_UNIT3(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP2_REGION_UNIT3,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT3]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT3]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_UNIT3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP2_REGION_UNIT3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT3]

//>> CLEAR_[TP_TCN0_N0_XSTOP2_REGION_UNIT3]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP2_REGION_UNIT3(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP2_REGION_UNIT3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP2_REGION_UNIT3]

//>> GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT3]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP2_REGION_UNIT3(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP2_REGION_UNIT3,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT3]

//>> GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT3]
static inline bool GET_TP_TCN0_N0_XSTOP2_REGION_UNIT3(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP2_REGION_UNIT3>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT3 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT3]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT4]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_UNIT4(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP2_REGION_UNIT4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT4]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT4]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_UNIT4(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP2_REGION_UNIT4,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT4]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT4]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_UNIT4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP2_REGION_UNIT4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT4]

//>> CLEAR_[TP_TCN0_N0_XSTOP2_REGION_UNIT4]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP2_REGION_UNIT4(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP2_REGION_UNIT4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP2_REGION_UNIT4]

//>> GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT4]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP2_REGION_UNIT4(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP2_REGION_UNIT4,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT4]

//>> GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT4]
static inline bool GET_TP_TCN0_N0_XSTOP2_REGION_UNIT4(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP2_REGION_UNIT4>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT4 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT4]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT5]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_UNIT5(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP2_REGION_UNIT5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT5]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT5]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_UNIT5(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP2_REGION_UNIT5,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT5]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT5]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_UNIT5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP2_REGION_UNIT5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT5]

//>> CLEAR_[TP_TCN0_N0_XSTOP2_REGION_UNIT5]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP2_REGION_UNIT5(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP2_REGION_UNIT5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP2_REGION_UNIT5]

//>> GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT5]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP2_REGION_UNIT5(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP2_REGION_UNIT5,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT5]

//>> GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT5]
static inline bool GET_TP_TCN0_N0_XSTOP2_REGION_UNIT5(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP2_REGION_UNIT5>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT5 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT5]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT6]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_UNIT6(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP2_REGION_UNIT6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT6]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT6]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_UNIT6(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP2_REGION_UNIT6,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT6]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT6]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_UNIT6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP2_REGION_UNIT6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT6]

//>> CLEAR_[TP_TCN0_N0_XSTOP2_REGION_UNIT6]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP2_REGION_UNIT6(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP2_REGION_UNIT6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP2_REGION_UNIT6]

//>> GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT6]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP2_REGION_UNIT6(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP2_REGION_UNIT6,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT6]

//>> GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT6]
static inline bool GET_TP_TCN0_N0_XSTOP2_REGION_UNIT6(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP2_REGION_UNIT6>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT6 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT6]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT7]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_UNIT7(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP2_REGION_UNIT7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT7]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT7]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_UNIT7(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP2_REGION_UNIT7,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT7]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT7]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_UNIT7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP2_REGION_UNIT7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT7]

//>> CLEAR_[TP_TCN0_N0_XSTOP2_REGION_UNIT7]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP2_REGION_UNIT7(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP2_REGION_UNIT7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP2_REGION_UNIT7]

//>> GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT7]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP2_REGION_UNIT7(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP2_REGION_UNIT7,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT7]

//>> GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT7]
static inline bool GET_TP_TCN0_N0_XSTOP2_REGION_UNIT7(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP2_REGION_UNIT7>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT7 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT7]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT8]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_UNIT8(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP2_REGION_UNIT8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT8]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT8]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_UNIT8(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP2_REGION_UNIT8,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT8]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT8]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_UNIT8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP2_REGION_UNIT8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT8]

//>> CLEAR_[TP_TCN0_N0_XSTOP2_REGION_UNIT8]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP2_REGION_UNIT8(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP2_REGION_UNIT8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP2_REGION_UNIT8]

//>> GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT8]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP2_REGION_UNIT8(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP2_REGION_UNIT8,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT8]

//>> GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT8]
static inline bool GET_TP_TCN0_N0_XSTOP2_REGION_UNIT8(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP2_REGION_UNIT8>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT8 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT8]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT9]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_UNIT9(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP2_REGION_UNIT9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT9]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT9]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_UNIT9(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP2_REGION_UNIT9,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT9]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT9]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_UNIT9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP2_REGION_UNIT9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT9]

//>> CLEAR_[TP_TCN0_N0_XSTOP2_REGION_UNIT9]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP2_REGION_UNIT9(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP2_REGION_UNIT9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP2_REGION_UNIT9]

//>> GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT9]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP2_REGION_UNIT9(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP2_REGION_UNIT9,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT9]

//>> GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT9]
static inline bool GET_TP_TCN0_N0_XSTOP2_REGION_UNIT9(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP2_REGION_UNIT9>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT9 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT9]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_UNIT10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP2_REGION_UNIT10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT10]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_UNIT10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP2_REGION_UNIT10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT10]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_UNIT10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP2_REGION_UNIT10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT10]

//>> CLEAR_[TP_TCN0_N0_XSTOP2_REGION_UNIT10]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP2_REGION_UNIT10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP2_REGION_UNIT10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP2_REGION_UNIT10]

//>> GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT10]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP2_REGION_UNIT10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP2_REGION_UNIT10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT10]

//>> GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT10]
static inline bool GET_TP_TCN0_N0_XSTOP2_REGION_UNIT10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP2_REGION_UNIT10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT10]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_UNIT11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP2_REGION_UNIT11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT11]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_UNIT11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP2_REGION_UNIT11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT11]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_UNIT11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP2_REGION_UNIT11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT11]

//>> CLEAR_[TP_TCN0_N0_XSTOP2_REGION_UNIT11]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP2_REGION_UNIT11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP2_REGION_UNIT11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP2_REGION_UNIT11]

//>> GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT11]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP2_REGION_UNIT11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP2_REGION_UNIT11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT11]

//>> GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT11]
static inline bool GET_TP_TCN0_N0_XSTOP2_REGION_UNIT11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP2_REGION_UNIT11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT11]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_UNIT12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP2_REGION_UNIT12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT12]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_UNIT12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP2_REGION_UNIT12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT12]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_UNIT12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP2_REGION_UNIT12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT12]

//>> CLEAR_[TP_TCN0_N0_XSTOP2_REGION_UNIT12]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP2_REGION_UNIT12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP2_REGION_UNIT12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP2_REGION_UNIT12]

//>> GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT12]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP2_REGION_UNIT12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP2_REGION_UNIT12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT12]

//>> GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT12]
static inline bool GET_TP_TCN0_N0_XSTOP2_REGION_UNIT12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP2_REGION_UNIT12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT12]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_UNIT13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP2_REGION_UNIT13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT13]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_UNIT13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP2_REGION_UNIT13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT13]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_UNIT13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP2_REGION_UNIT13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT13]

//>> CLEAR_[TP_TCN0_N0_XSTOP2_REGION_UNIT13]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP2_REGION_UNIT13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP2_REGION_UNIT13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP2_REGION_UNIT13]

//>> GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT13]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP2_REGION_UNIT13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP2_REGION_UNIT13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT13]

//>> GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT13]
static inline bool GET_TP_TCN0_N0_XSTOP2_REGION_UNIT13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP2_REGION_UNIT13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT13]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_UNIT14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP2_REGION_UNIT14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT14]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_UNIT14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP2_REGION_UNIT14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT14]

//>> SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_REGION_UNIT14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP2_REGION_UNIT14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_REGION_UNIT14]

//>> CLEAR_[TP_TCN0_N0_XSTOP2_REGION_UNIT14]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP2_REGION_UNIT14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP2_REGION_UNIT14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP2_REGION_UNIT14]

//>> GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT14]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP2_REGION_UNIT14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP2_REGION_UNIT14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT14]

//>> GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT14]
static inline bool GET_TP_TCN0_N0_XSTOP2_REGION_UNIT14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP2_REGION_UNIT14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_REGION_UNIT14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP2_REGION_UNIT14]

//>> SET_[TP_TCN0_N0_XSTOP2_WAIT_CYCLES]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_WAIT_CYCLES(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP2_WAIT_CYCLES,
           TP_TCN0_N0_XSTOP2_WAIT_CYCLES_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_WAIT_CYCLES chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_WAIT_CYCLES]

//>> SET_[TP_TCN0_N0_XSTOP2_WAIT_CYCLES]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP2_WAIT_CYCLES(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP2_WAIT_CYCLES,
           TP_TCN0_N0_XSTOP2_WAIT_CYCLES_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_WAIT_CYCLES chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP2_WAIT_CYCLES]

//>> GET_[TP_TCN0_N0_XSTOP2_WAIT_CYCLES]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP2_WAIT_CYCLES(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP2));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP2_WAIT_CYCLES,
           TP_TCN0_N0_XSTOP2_WAIT_CYCLES_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP2_WAIT_CYCLES chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP2_WAIT_CYCLES]

//>> PREP_[TP_TCN0_N0_XSTOP_MASK_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_XSTOP_MASK_RW(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_XSTOP_MASK_RW;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_XSTOP_MASK_RW]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_XSTOP_MASK_RW(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_XSTOP_MASK_RW;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_XSTOP_MASK_RW, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_RW]

//>> PUT_[TP_TCN0_N0_XSTOP_MASK_RW]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_XSTOP_MASK_RW(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_XSTOP_MASK_RW, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_XSTOP_MASK_RW]

//>> PREP_[TP_TCN0_N0_XSTOP_MASK_WO_CLEAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_XSTOP_MASK_WO_CLEAR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_XSTOP_MASK_WO_CLEAR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_XSTOP_MASK_WO_CLEAR]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_WO_CLEAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_XSTOP_MASK_WO_CLEAR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_XSTOP_MASK_WO_CLEAR;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_WO_CLEAR]

//>> PUT_[TP_TCN0_N0_XSTOP_MASK_WO_CLEAR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_XSTOP_MASK_WO_CLEAR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_XSTOP_MASK_WO_CLEAR]

//>> PREP_[TP_TCN0_N0_XSTOP_MASK_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN0_N0_XSTOP_MASK_WO_OR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_XSTOP_MASK_WO_OR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN0_N0_XSTOP_MASK_WO_OR]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN0_N0_XSTOP_MASK_WO_OR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN0_N0_XSTOP_MASK_WO_OR;
#endif
    return fapi2::getScom(i_target, TP_TCN0_N0_XSTOP_MASK_WO_OR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_WO_OR]

//>> PUT_[TP_TCN0_N0_XSTOP_MASK_WO_OR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN0_N0_XSTOP_MASK_WO_OR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return fapi2::putScom(i_target, TP_TCN0_N0_XSTOP_MASK_WO_OR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN0_N0_XSTOP_MASK_WO_OR]


//>> SET_[TP_TCN0_N0_XSTOP_MASK_01]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_01(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_01,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_01]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_01]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_01(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_01,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_01]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_01]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_01(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_01]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_01]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_01(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_01]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_01]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_01(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_01,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_01]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_01]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_01(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_01>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_01 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_01]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_02]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_02(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_02,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_02]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_02]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_02(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_02,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_02]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_02]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_02(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_02]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_02]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_02(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_02]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_02]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_02(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_02,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_02]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_02]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_02(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_02>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_02 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_02]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_03]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_03(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_03,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_03]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_03]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_03(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_03,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_03]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_03]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_03(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_03]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_03]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_03(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_03]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_03]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_03(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_03,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_03]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_03]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_03(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_03>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_03 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_03]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_04]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_04(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_04,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_04]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_04]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_04(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_04,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_04]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_04]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_04(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_04>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_04]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_04]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_04(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_04>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_04]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_04]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_04(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_04,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_04]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_04]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_04(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_04>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_04 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_04]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_05]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_05(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_05,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_05]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_05]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_05(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_05,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_05]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_05]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_05(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_05]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_05]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_05(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_05]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_05]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_05(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_05,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_05]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_05]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_05(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_05>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_05 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_05]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_06]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_06(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_06,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_06]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_06]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_06(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_06,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_06]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_06]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_06(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_06]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_06]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_06(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_06]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_06]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_06(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_06,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_06]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_06]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_06(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_06>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_06 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_06]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_07]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_07(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_07,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_07]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_07]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_07(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_07,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_07]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_07]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_07(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_07]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_07]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_07(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_07]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_07]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_07(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_07,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_07]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_07]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_07(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_07>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_07 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_07]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_08]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_08(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_08,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_08]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_08]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_08(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_08,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_08]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_08]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_08(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_08]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_08]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_08(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_08]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_08]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_08(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_08,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_08]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_08]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_08(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_08>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_08 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_08]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_09]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_09(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_09,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_09]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_09]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_09(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_09,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_09]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_09]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_09(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_09]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_09]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_09(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_09]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_09]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_09(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_09,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_09]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_09]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_09(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_09>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_09 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_09]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_10(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_10]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_10(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_10,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_10]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_10]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_10]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_10]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_10(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_10]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_10]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_10(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_10,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_10]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_10]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_10(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_10>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_10 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_10]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_11(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_11]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_11(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_11,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_11]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_11]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_11]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_11]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_11(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_11]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_11]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_11(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_11,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_11]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_11]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_11(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_11>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_11 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_11]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_12(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_12]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_12(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_12,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_12]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_12]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_12]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_12]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_12(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_12]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_12]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_12(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_12,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_12]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_12]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_12(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_12>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_12 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_12]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_13(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_13]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_13(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_13,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_13]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_13]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_13]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_13]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_13(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_13]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_13]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_13(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_13,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_13]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_13]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_13(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_13>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_13 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_13]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_14(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_14]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_14(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_14,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_14]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_14]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_14]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_14]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_14(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_14]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_14]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_14(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_14,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_14]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_14]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_14(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_14>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_14 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_14]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_15]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_15(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_15]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_15]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_15(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_15,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_15]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_15]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_15]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_15]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_15(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_15]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_15]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_15(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_15,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_15]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_15]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_15(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_15>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_15 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_15]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_16]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_16(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_16]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_16]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_16(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_16,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_16]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_16]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_16]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_16]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_16(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_16]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_16]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_16(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_16,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_16]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_16]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_16(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_16>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_16 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_16]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_17]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_17(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_17]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_17]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_17(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_17,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_17]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_17]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_17]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_17]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_17(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_17]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_17]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_17(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_17,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_17]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_17]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_17(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_17>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_17 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_17]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_18]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_18(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_18]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_18]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_18(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_18,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_18]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_18]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_18]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_18]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_18(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_18]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_18]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_18(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_18,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_18]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_18]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_18(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_18>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_18 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_18]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_19]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_19(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_19]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_19]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_19(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_19,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_19]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_19]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_19]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_19]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_19(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_19]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_19]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_19(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_19,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_19]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_19]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_19(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_19>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_19 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_19]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_20]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_20(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_20]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_20]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_20(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_20,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_20]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_20]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_20]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_20]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_20(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_20]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_20]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_20(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_20,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_20]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_20]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_20(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_20>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_20 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_20]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_21]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_21(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_21]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_21]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_21(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_21,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_21]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_21]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_21]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_21]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_21(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_21]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_21]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_21(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_21,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_21]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_21]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_21(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_21>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_21 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_21]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_22]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_22(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_22]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_22]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_22(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_22,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_22]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_22]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_22]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_22]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_22(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_22]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_22]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_22(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_22,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_22]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_22]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_22(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_22>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_22 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_22]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_23]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_23(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_23]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_23]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_23(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_23,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_23]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_23]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_23]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_23]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_23(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_23]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_23]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_23(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_23,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_23]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_23]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_23(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_23>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_23 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_23]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_24]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_24(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_24]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_24]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_24(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_24,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_24]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_24]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_24]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_24]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_24(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_24]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_24]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_24(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_24,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_24]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_24]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_24(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_24>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_24 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_24]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_25]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_25(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_25]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_25]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_25(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_25,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_25]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_25]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_25]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_25]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_25(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_25]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_25]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_25(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_25,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_25]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_25]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_25(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_25>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_25 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_25]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_26]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_26(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_26]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_26]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_26(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_26,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_26]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_26]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_26]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_26]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_26(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_26]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_26]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_26(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_26,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_26]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_26]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_26(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_26>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_26 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_26]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_27]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_27(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_27]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_27]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_27(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_27,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_27]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_27]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_27]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_27]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_27(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_27]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_27]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_27(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_27,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_27]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_27]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_27(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_27>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_27 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_27]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_28]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_28(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_28]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_28]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_28(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_28,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_28]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_28]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_28]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_28]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_28(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_28]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_28]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_28(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_28,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_28]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_28]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_28(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_28>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_28 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_28]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_29]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_29(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_29]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_29]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_29(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_29,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_29]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_29]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_29]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_29]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_29(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_29]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_29]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_29(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_29,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_29]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_29]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_29(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_29>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_29 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_29]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_30]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_30(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_30]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_30]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_30(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_30,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_30]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_30]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_30]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_30]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_30(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_30]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_30]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_30(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_30,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_30]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_30]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_30(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_30>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_30 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_30]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_31]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_31(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_31]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_31]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_31(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_31,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_31]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_31]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_31]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_31]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_31(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_31]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_31]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_31(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_31,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_31]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_31]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_31(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_31>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_31 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_31]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_32]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_32(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_32]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_32]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_32(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_32,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_32]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_32]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_32]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_32]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_32(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_32]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_32]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_32(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_32,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_32]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_32]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_32(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_32>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_32 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_32]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_33]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_33(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_33]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_33]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_33(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_33,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_33]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_33]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_33]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_33]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_33(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_33]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_33]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_33(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_33,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_33]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_33]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_33(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_33>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_33 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_33]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_34]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_34(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_34]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_34]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_34(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_34,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_34]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_34]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_34]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_34]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_34(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_34]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_34]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_34(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_34,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_34]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_34]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_34(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_34>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_34 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_34]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_35]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_35(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_35]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_35]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_35(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_35,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_35]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_35]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_35]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_35]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_35(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_35]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_35]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_35(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_35,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_35]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_35]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_35(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_35>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_35 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_35]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_36]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_36(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_36]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_36]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_36(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_36,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_36]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_36]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_36]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_36]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_36(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_36]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_36]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_36(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_36,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_36]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_36]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_36(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_36>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_36 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_36]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_37]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_37(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_37]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_37]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_37(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_37,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_37]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_37]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_37]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_37]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_37(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_37]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_37]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_37(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_37,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_37]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_37]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_37(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_37>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_37 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_37]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_38]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_38(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_38]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_38]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_38(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_38,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_38]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_38]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_38]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_38]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_38(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_38]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_38]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_38(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_38,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_38]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_38]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_38(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_38>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_38 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_38]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_39]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_39(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_39]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_39]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_39(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_39,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_39]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_39]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_39]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_39]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_39(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_39]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_39]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_39(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_39,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_39]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_39]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_39(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_39>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_39 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_39]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_40]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_40(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_40]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_40]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_40(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_40,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_40]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_40]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_40]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_40]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_40(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_40]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_40]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_40(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_40,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_40]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_40]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_40(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_40>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_40 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_40]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_41]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_41(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_41]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_41]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_41(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_41,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_41]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_41]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_41]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_41]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_41(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_41]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_41]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_41(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_41,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_41]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_41]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_41(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_41>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_41 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_41]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_42]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_42(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_42]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_42]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_42(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_42,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_42]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_42]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_42]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_42]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_42(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_42]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_42]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_42(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_42,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_42]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_42]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_42(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_42>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_42 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_42]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_43]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_43(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_43]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_43]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_43(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_43,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_43]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_43]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_43]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_43]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_43(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_43]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_43]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_43(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_43,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_43]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_43]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_43(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_43>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_43 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_43]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_44]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_44(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_44]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_44]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_44(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_44,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_44]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_44]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_44]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_44]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_44(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_44]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_44]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_44(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_44,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_44]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_44]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_44(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_44>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_44 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_44]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_45]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_45(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_45]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_45]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_45(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_45,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_45]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_45]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_45]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_45]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_45(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_45]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_45]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_45(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_45,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_45]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_45]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_45(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_45>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_45 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_45]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_46]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_46(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_46]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_46]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_46(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_46,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_46]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_46]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_46]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_46]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_46(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_46]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_46]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_46(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_46,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_46]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_46]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_46(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_46>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_46 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_46]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_47]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_47(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_47]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_47]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_47(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_47,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_47]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_47]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_47]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_47]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_47(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_47]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_47]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_47(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_47,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_47]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_47]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_47(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_47>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_47 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_47]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_48]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_48(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_48]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_48]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_48(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_48,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_48]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_48]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_48]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_48]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_48(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_48]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_48]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_48(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_48,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_48]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_48]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_48(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_48>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_48 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_48]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_49]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_49(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_49]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_49]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_49(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_49,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_49]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_49]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_49]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_49]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_49(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_49]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_49]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_49(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_49,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_49]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_49]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_49(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_49>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_49 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_49]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_50]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_50(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_50]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_50]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_50(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_50,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_50]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_50]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_50]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_50]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_50(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_50]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_50]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_50(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_50,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_50]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_50]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_50(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_50>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_50 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_50]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_51]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_51(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_51]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_51]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_51(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_51,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_51]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_51]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_51]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_51]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_51(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_51]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_51]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_51(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_51,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_51]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_51]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_51(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_51>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_51 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_51]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_52]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_52(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_52]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_52]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_52(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_52,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_52]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_52]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_52]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_52]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_52(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_52]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_52]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_52(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_52,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_52]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_52]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_52(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_52>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_52 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_52]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_53]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_53(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_53]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_53]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_53(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.insertFromRight<TP_TCN0_N0_XSTOP_MASK_53,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_53]

//>> SET_[TP_TCN0_N0_XSTOP_MASK_53]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN0_N0_XSTOP_MASK_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.setBit<TP_TCN0_N0_XSTOP_MASK_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN0_N0_XSTOP_MASK_53]

//>> CLEAR_[TP_TCN0_N0_XSTOP_MASK_53]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN0_N0_XSTOP_MASK_53(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return o_data.clearBit<TP_TCN0_N0_XSTOP_MASK_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN0_N0_XSTOP_MASK_53]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_53]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN0_N0_XSTOP_MASK_53(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.extractToRight<TP_TCN0_N0_XSTOP_MASK_53,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_53]

//>> GET_[TP_TCN0_N0_XSTOP_MASK_53]
static inline bool GET_TP_TCN0_N0_XSTOP_MASK_53(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN0_N0_XSTOP_MASK_RW, TP_TCN0_N0_XSTOP_MASK_WO_CLEAR, TP_TCN0_N0_XSTOP_MASK_WO_OR));
#endif
    return i_data.getBit<TP_TCN0_N0_XSTOP_MASK_53>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN0_N0_XSTOP_MASK_53 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN0_N0_XSTOP_MASK_53]

//>> PREP_[TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1]

//>> GET_[TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1]

//>> PUT_[TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1]


//>> SET_[TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_4_RESULT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_4_RESULT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_4_RESULT,
           TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_4_RESULT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_4_RESULT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_4_RESULT]

//>> SET_[TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_4_RESULT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_4_RESULT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_4_RESULT,
           TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_4_RESULT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_4_RESULT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_4_RESULT]

//>> GET_[TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_4_RESULT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_4_RESULT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_4_RESULT,
           TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_4_RESULT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_4_RESULT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_4_RESULT]

//>> SET_[TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_5_RESULT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_5_RESULT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_5_RESULT,
           TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_5_RESULT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_5_RESULT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_5_RESULT]

//>> SET_[TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_5_RESULT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_5_RESULT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_5_RESULT,
           TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_5_RESULT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_5_RESULT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_5_RESULT]

//>> GET_[TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_5_RESULT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_5_RESULT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_5_RESULT,
           TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_5_RESULT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_5_RESULT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_5_RESULT]

//>> SET_[TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_6_RESULT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_6_RESULT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_6_RESULT,
           TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_6_RESULT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_6_RESULT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_6_RESULT]

//>> SET_[TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_6_RESULT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_6_RESULT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_6_RESULT,
           TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_6_RESULT_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_6_RESULT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_6_RESULT]

//>> GET_[TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_6_RESULT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_6_RESULT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1));
#endif
    return i_data.extractToRight<TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_6_RESULT,
           TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_6_RESULT_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_6_RESULT chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_THERM_WSUB_DTS_RESULT1_6_RESULT]

//>> PREP_[TP_TCN1_N1_EPS_THERM_WSUB_SKITTER_DATA0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_EPS_THERM_WSUB_SKITTER_DATA0(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_EPS_THERM_WSUB_SKITTER_DATA0;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_EPS_THERM_WSUB_SKITTER_DATA0]

//>> GET_[TP_TCN1_N1_EPS_THERM_WSUB_SKITTER_DATA0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_EPS_THERM_WSUB_SKITTER_DATA0(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_EPS_THERM_WSUB_SKITTER_DATA0;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_EPS_THERM_WSUB_SKITTER_DATA0, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_EPS_THERM_WSUB_SKITTER_DATA0]

//>> PUT_[TP_TCN1_N1_EPS_THERM_WSUB_SKITTER_DATA0]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_EPS_THERM_WSUB_SKITTER_DATA0(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_EPS_THERM_WSUB_SKITTER_DATA0));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_EPS_THERM_WSUB_SKITTER_DATA0, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_EPS_THERM_WSUB_SKITTER_DATA0]


//>> PREP_[TP_TCN1_N1_OPCG_CAPT2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_OPCG_CAPT2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_OPCG_CAPT2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_OPCG_CAPT2]

//>> GET_[TP_TCN1_N1_OPCG_CAPT2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_OPCG_CAPT2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_OPCG_CAPT2;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_OPCG_CAPT2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_CAPT2]

//>> PUT_[TP_TCN1_N1_OPCG_CAPT2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_OPCG_CAPT2(const fapi2::Target<K, M, V>& i_target, const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_CAPT2));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_OPCG_CAPT2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_OPCG_CAPT2]


//>> SET_[TP_TCN1_N1_OPCG_CAPT2_13_01EVEN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_CAPT2_13_01EVEN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_CAPT2_13_01EVEN,
           TP_TCN1_N1_OPCG_CAPT2_13_01EVEN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_OPCG_CAPT2_13_01EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_CAPT2_13_01EVEN]

//>> SET_[TP_TCN1_N1_OPCG_CAPT2_13_01EVEN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_CAPT2_13_01EVEN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_CAPT2_13_01EVEN,
           TP_TCN1_N1_OPCG_CAPT2_13_01EVEN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_OPCG_CAPT2_13_01EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_CAPT2_13_01EVEN]

//>> GET_[TP_TCN1_N1_OPCG_CAPT2_13_01EVEN]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_OPCG_CAPT2_13_01EVEN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_CAPT2));
#endif
    return i_data.extractToRight<TP_TCN1_N1_OPCG_CAPT2_13_01EVEN,
           TP_TCN1_N1_OPCG_CAPT2_13_01EVEN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_OPCG_CAPT2_13_01EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_CAPT2_13_01EVEN]

//>> SET_[TP_TCN1_N1_OPCG_CAPT2_14_01ODD]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_CAPT2_14_01ODD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_CAPT2_14_01ODD,
           TP_TCN1_N1_OPCG_CAPT2_14_01ODD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_OPCG_CAPT2_14_01ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_CAPT2_14_01ODD]

//>> SET_[TP_TCN1_N1_OPCG_CAPT2_14_01ODD]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_CAPT2_14_01ODD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_CAPT2_14_01ODD,
           TP_TCN1_N1_OPCG_CAPT2_14_01ODD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_OPCG_CAPT2_14_01ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_CAPT2_14_01ODD]

//>> GET_[TP_TCN1_N1_OPCG_CAPT2_14_01ODD]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_OPCG_CAPT2_14_01ODD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_CAPT2));
#endif
    return i_data.extractToRight<TP_TCN1_N1_OPCG_CAPT2_14_01ODD,
           TP_TCN1_N1_OPCG_CAPT2_14_01ODD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_OPCG_CAPT2_14_01ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_CAPT2_14_01ODD]

//>> SET_[TP_TCN1_N1_OPCG_CAPT2_15_02EVEN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_CAPT2_15_02EVEN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_CAPT2_15_02EVEN,
           TP_TCN1_N1_OPCG_CAPT2_15_02EVEN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_OPCG_CAPT2_15_02EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_CAPT2_15_02EVEN]

//>> SET_[TP_TCN1_N1_OPCG_CAPT2_15_02EVEN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_CAPT2_15_02EVEN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_CAPT2_15_02EVEN,
           TP_TCN1_N1_OPCG_CAPT2_15_02EVEN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_OPCG_CAPT2_15_02EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_CAPT2_15_02EVEN]

//>> GET_[TP_TCN1_N1_OPCG_CAPT2_15_02EVEN]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_OPCG_CAPT2_15_02EVEN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_CAPT2));
#endif
    return i_data.extractToRight<TP_TCN1_N1_OPCG_CAPT2_15_02EVEN,
           TP_TCN1_N1_OPCG_CAPT2_15_02EVEN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_OPCG_CAPT2_15_02EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_CAPT2_15_02EVEN]

//>> SET_[TP_TCN1_N1_OPCG_CAPT2_16_02ODD]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_CAPT2_16_02ODD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_CAPT2_16_02ODD,
           TP_TCN1_N1_OPCG_CAPT2_16_02ODD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_OPCG_CAPT2_16_02ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_CAPT2_16_02ODD]

//>> SET_[TP_TCN1_N1_OPCG_CAPT2_16_02ODD]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_CAPT2_16_02ODD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_CAPT2_16_02ODD,
           TP_TCN1_N1_OPCG_CAPT2_16_02ODD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_OPCG_CAPT2_16_02ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_CAPT2_16_02ODD]

//>> GET_[TP_TCN1_N1_OPCG_CAPT2_16_02ODD]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_OPCG_CAPT2_16_02ODD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_CAPT2));
#endif
    return i_data.extractToRight<TP_TCN1_N1_OPCG_CAPT2_16_02ODD,
           TP_TCN1_N1_OPCG_CAPT2_16_02ODD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_OPCG_CAPT2_16_02ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_CAPT2_16_02ODD]

//>> SET_[TP_TCN1_N1_OPCG_CAPT2_17_03EVEN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_CAPT2_17_03EVEN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_CAPT2_17_03EVEN,
           TP_TCN1_N1_OPCG_CAPT2_17_03EVEN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_OPCG_CAPT2_17_03EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_CAPT2_17_03EVEN]

//>> SET_[TP_TCN1_N1_OPCG_CAPT2_17_03EVEN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_CAPT2_17_03EVEN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_CAPT2_17_03EVEN,
           TP_TCN1_N1_OPCG_CAPT2_17_03EVEN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_OPCG_CAPT2_17_03EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_CAPT2_17_03EVEN]

//>> GET_[TP_TCN1_N1_OPCG_CAPT2_17_03EVEN]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_OPCG_CAPT2_17_03EVEN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_CAPT2));
#endif
    return i_data.extractToRight<TP_TCN1_N1_OPCG_CAPT2_17_03EVEN,
           TP_TCN1_N1_OPCG_CAPT2_17_03EVEN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_OPCG_CAPT2_17_03EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_CAPT2_17_03EVEN]

//>> SET_[TP_TCN1_N1_OPCG_CAPT2_18_03ODD]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_CAPT2_18_03ODD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_CAPT2_18_03ODD,
           TP_TCN1_N1_OPCG_CAPT2_18_03ODD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_OPCG_CAPT2_18_03ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_CAPT2_18_03ODD]

//>> SET_[TP_TCN1_N1_OPCG_CAPT2_18_03ODD]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_CAPT2_18_03ODD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_CAPT2_18_03ODD,
           TP_TCN1_N1_OPCG_CAPT2_18_03ODD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_OPCG_CAPT2_18_03ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_CAPT2_18_03ODD]

//>> GET_[TP_TCN1_N1_OPCG_CAPT2_18_03ODD]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_OPCG_CAPT2_18_03ODD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_CAPT2));
#endif
    return i_data.extractToRight<TP_TCN1_N1_OPCG_CAPT2_18_03ODD,
           TP_TCN1_N1_OPCG_CAPT2_18_03ODD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_OPCG_CAPT2_18_03ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_CAPT2_18_03ODD]

//>> SET_[TP_TCN1_N1_OPCG_CAPT2_19_04EVEN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_CAPT2_19_04EVEN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_CAPT2_19_04EVEN,
           TP_TCN1_N1_OPCG_CAPT2_19_04EVEN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_OPCG_CAPT2_19_04EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_CAPT2_19_04EVEN]

//>> SET_[TP_TCN1_N1_OPCG_CAPT2_19_04EVEN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_CAPT2_19_04EVEN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_CAPT2_19_04EVEN,
           TP_TCN1_N1_OPCG_CAPT2_19_04EVEN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_OPCG_CAPT2_19_04EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_CAPT2_19_04EVEN]

//>> GET_[TP_TCN1_N1_OPCG_CAPT2_19_04EVEN]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_OPCG_CAPT2_19_04EVEN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_CAPT2));
#endif
    return i_data.extractToRight<TP_TCN1_N1_OPCG_CAPT2_19_04EVEN,
           TP_TCN1_N1_OPCG_CAPT2_19_04EVEN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_OPCG_CAPT2_19_04EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_CAPT2_19_04EVEN]

//>> SET_[TP_TCN1_N1_OPCG_CAPT2_20_04ODD]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_CAPT2_20_04ODD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_CAPT2_20_04ODD,
           TP_TCN1_N1_OPCG_CAPT2_20_04ODD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_OPCG_CAPT2_20_04ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_CAPT2_20_04ODD]

//>> SET_[TP_TCN1_N1_OPCG_CAPT2_20_04ODD]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_CAPT2_20_04ODD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_CAPT2_20_04ODD,
           TP_TCN1_N1_OPCG_CAPT2_20_04ODD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_OPCG_CAPT2_20_04ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_CAPT2_20_04ODD]

//>> GET_[TP_TCN1_N1_OPCG_CAPT2_20_04ODD]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_OPCG_CAPT2_20_04ODD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_CAPT2));
#endif
    return i_data.extractToRight<TP_TCN1_N1_OPCG_CAPT2_20_04ODD,
           TP_TCN1_N1_OPCG_CAPT2_20_04ODD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_OPCG_CAPT2_20_04ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_CAPT2_20_04ODD]

//>> SET_[TP_TCN1_N1_OPCG_CAPT2_21_05EVEN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_CAPT2_21_05EVEN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_CAPT2_21_05EVEN,
           TP_TCN1_N1_OPCG_CAPT2_21_05EVEN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_OPCG_CAPT2_21_05EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_CAPT2_21_05EVEN]

//>> SET_[TP_TCN1_N1_OPCG_CAPT2_21_05EVEN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_CAPT2_21_05EVEN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_CAPT2_21_05EVEN,
           TP_TCN1_N1_OPCG_CAPT2_21_05EVEN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_OPCG_CAPT2_21_05EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_CAPT2_21_05EVEN]

//>> GET_[TP_TCN1_N1_OPCG_CAPT2_21_05EVEN]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_OPCG_CAPT2_21_05EVEN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_CAPT2));
#endif
    return i_data.extractToRight<TP_TCN1_N1_OPCG_CAPT2_21_05EVEN,
           TP_TCN1_N1_OPCG_CAPT2_21_05EVEN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_OPCG_CAPT2_21_05EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_CAPT2_21_05EVEN]

//>> SET_[TP_TCN1_N1_OPCG_CAPT2_22_05ODD]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_CAPT2_22_05ODD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_CAPT2_22_05ODD,
           TP_TCN1_N1_OPCG_CAPT2_22_05ODD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_OPCG_CAPT2_22_05ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_CAPT2_22_05ODD]

//>> SET_[TP_TCN1_N1_OPCG_CAPT2_22_05ODD]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_CAPT2_22_05ODD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_CAPT2_22_05ODD,
           TP_TCN1_N1_OPCG_CAPT2_22_05ODD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_OPCG_CAPT2_22_05ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_CAPT2_22_05ODD]

//>> GET_[TP_TCN1_N1_OPCG_CAPT2_22_05ODD]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_OPCG_CAPT2_22_05ODD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_CAPT2));
#endif
    return i_data.extractToRight<TP_TCN1_N1_OPCG_CAPT2_22_05ODD,
           TP_TCN1_N1_OPCG_CAPT2_22_05ODD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_OPCG_CAPT2_22_05ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_CAPT2_22_05ODD]

//>> SET_[TP_TCN1_N1_OPCG_CAPT2_23_06EVEN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_CAPT2_23_06EVEN(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_CAPT2_23_06EVEN,
           TP_TCN1_N1_OPCG_CAPT2_23_06EVEN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_OPCG_CAPT2_23_06EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_CAPT2_23_06EVEN]

//>> SET_[TP_TCN1_N1_OPCG_CAPT2_23_06EVEN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_CAPT2_23_06EVEN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_CAPT2_23_06EVEN,
           TP_TCN1_N1_OPCG_CAPT2_23_06EVEN_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_OPCG_CAPT2_23_06EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_CAPT2_23_06EVEN]

//>> GET_[TP_TCN1_N1_OPCG_CAPT2_23_06EVEN]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_OPCG_CAPT2_23_06EVEN(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_CAPT2));
#endif
    return i_data.extractToRight<TP_TCN1_N1_OPCG_CAPT2_23_06EVEN,
           TP_TCN1_N1_OPCG_CAPT2_23_06EVEN_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_OPCG_CAPT2_23_06EVEN chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_CAPT2_23_06EVEN]

//>> SET_[TP_TCN1_N1_OPCG_CAPT2_24_06ODD]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_CAPT2_24_06ODD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_CAPT2_24_06ODD,
           TP_TCN1_N1_OPCG_CAPT2_24_06ODD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_OPCG_CAPT2_24_06ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_CAPT2_24_06ODD]

//>> SET_[TP_TCN1_N1_OPCG_CAPT2_24_06ODD]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_OPCG_CAPT2_24_06ODD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_CAPT2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_OPCG_CAPT2_24_06ODD,
           TP_TCN1_N1_OPCG_CAPT2_24_06ODD_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_OPCG_CAPT2_24_06ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_OPCG_CAPT2_24_06ODD]

//>> GET_[TP_TCN1_N1_OPCG_CAPT2_24_06ODD]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_OPCG_CAPT2_24_06ODD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_OPCG_CAPT2));
#endif
    return i_data.extractToRight<TP_TCN1_N1_OPCG_CAPT2_24_06ODD,
           TP_TCN1_N1_OPCG_CAPT2_24_06ODD_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_OPCG_CAPT2_24_06ODD chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_OPCG_CAPT2_24_06ODD]

//>> PREP_[TP_TCN1_N1_TRA0_TR0_CONFIG_3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_TRA0_TR0_CONFIG_3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA0_TR0_CONFIG_3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_TRA0_TR0_CONFIG_3]

//>> GET_[TP_TCN1_N1_TRA0_TR0_CONFIG_3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_TRA0_TR0_CONFIG_3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA0_TR0_CONFIG_3;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_TRA0_TR0_CONFIG_3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_TRA0_TR0_CONFIG_3]

//>> PUT_[TP_TCN1_N1_TRA0_TR0_CONFIG_3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_TRA0_TR0_CONFIG_3(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA0_TR0_CONFIG_3));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_TRA0_TR0_CONFIG_3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_TRA0_TR0_CONFIG_3]


//>> SET_[TP_TCN1_N1_TRA0_TR0_CONFIG_3_C]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA0_TR0_CONFIG_3_C(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA0_TR0_CONFIG_3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA0_TR0_CONFIG_3_C,
           TP_TCN1_N1_TRA0_TR0_CONFIG_3_C_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA0_TR0_CONFIG_3_C chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA0_TR0_CONFIG_3_C]

//>> SET_[TP_TCN1_N1_TRA0_TR0_CONFIG_3_C]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA0_TR0_CONFIG_3_C(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA0_TR0_CONFIG_3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA0_TR0_CONFIG_3_C,
           TP_TCN1_N1_TRA0_TR0_CONFIG_3_C_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA0_TR0_CONFIG_3_C chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA0_TR0_CONFIG_3_C]

//>> GET_[TP_TCN1_N1_TRA0_TR0_CONFIG_3_C]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA0_TR0_CONFIG_3_C(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA0_TR0_CONFIG_3));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA0_TR0_CONFIG_3_C,
           TP_TCN1_N1_TRA0_TR0_CONFIG_3_C_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA0_TR0_CONFIG_3_C chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA0_TR0_CONFIG_3_C]

//>> SET_[TP_TCN1_N1_TRA0_TR0_CONFIG_3_D]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA0_TR0_CONFIG_3_D(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA0_TR0_CONFIG_3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA0_TR0_CONFIG_3_D,
           TP_TCN1_N1_TRA0_TR0_CONFIG_3_D_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA0_TR0_CONFIG_3_D chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA0_TR0_CONFIG_3_D]

//>> SET_[TP_TCN1_N1_TRA0_TR0_CONFIG_3_D]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA0_TR0_CONFIG_3_D(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA0_TR0_CONFIG_3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA0_TR0_CONFIG_3_D,
           TP_TCN1_N1_TRA0_TR0_CONFIG_3_D_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA0_TR0_CONFIG_3_D chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA0_TR0_CONFIG_3_D]

//>> GET_[TP_TCN1_N1_TRA0_TR0_CONFIG_3_D]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA0_TR0_CONFIG_3_D(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA0_TR0_CONFIG_3));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA0_TR0_CONFIG_3_D,
           TP_TCN1_N1_TRA0_TR0_CONFIG_3_D_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA0_TR0_CONFIG_3_D chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA0_TR0_CONFIG_3_D]

//>> PREP_[TP_TCN1_N1_TRA0_TR1_TRACE_HI_DATA_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_TRA0_TR1_TRACE_HI_DATA_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA0_TR1_TRACE_HI_DATA_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_TRA0_TR1_TRACE_HI_DATA_REG]

//>> GET_[TP_TCN1_N1_TRA0_TR1_TRACE_HI_DATA_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_TRA0_TR1_TRACE_HI_DATA_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA0_TR1_TRACE_HI_DATA_REG;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_TRA0_TR1_TRACE_HI_DATA_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_TRA0_TR1_TRACE_HI_DATA_REG]

//>> PUT_[TP_TCN1_N1_TRA0_TR1_TRACE_HI_DATA_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_TRA0_TR1_TRACE_HI_DATA_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA0_TR1_TRACE_HI_DATA_REG));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_TRA0_TR1_TRACE_HI_DATA_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_TRA0_TR1_TRACE_HI_DATA_REG]


//>> SET_[TP_TCN1_N1_TRA0_TR1_TRACE_HI_DATA_REG_TRACE_HI_DATA]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA0_TR1_TRACE_HI_DATA_REG_TRACE_HI_DATA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA0_TR1_TRACE_HI_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA0_TR1_TRACE_HI_DATA_REG_TRACE_HI_DATA,
           TP_TCN1_N1_TRA0_TR1_TRACE_HI_DATA_REG_TRACE_HI_DATA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA0_TR1_TRACE_HI_DATA_REG_TRACE_HI_DATA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA0_TR1_TRACE_HI_DATA_REG_TRACE_HI_DATA]

//>> SET_[TP_TCN1_N1_TRA0_TR1_TRACE_HI_DATA_REG_TRACE_HI_DATA]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA0_TR1_TRACE_HI_DATA_REG_TRACE_HI_DATA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA0_TR1_TRACE_HI_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA0_TR1_TRACE_HI_DATA_REG_TRACE_HI_DATA,
           TP_TCN1_N1_TRA0_TR1_TRACE_HI_DATA_REG_TRACE_HI_DATA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA0_TR1_TRACE_HI_DATA_REG_TRACE_HI_DATA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA0_TR1_TRACE_HI_DATA_REG_TRACE_HI_DATA]

//>> GET_[TP_TCN1_N1_TRA0_TR1_TRACE_HI_DATA_REG_TRACE_HI_DATA]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA0_TR1_TRACE_HI_DATA_REG_TRACE_HI_DATA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA0_TR1_TRACE_HI_DATA_REG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA0_TR1_TRACE_HI_DATA_REG_TRACE_HI_DATA,
           TP_TCN1_N1_TRA0_TR1_TRACE_HI_DATA_REG_TRACE_HI_DATA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA0_TR1_TRACE_HI_DATA_REG_TRACE_HI_DATA chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA0_TR1_TRACE_HI_DATA_REG_TRACE_HI_DATA]

//>> PREP_[TP_TCN1_N1_TRA1_TR1_CONFIG_5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_TRA1_TR1_CONFIG_5(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA1_TR1_CONFIG_5;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_TRA1_TR1_CONFIG_5]

//>> GET_[TP_TCN1_N1_TRA1_TR1_CONFIG_5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_TRA1_TR1_CONFIG_5(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA1_TR1_CONFIG_5;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_TRA1_TR1_CONFIG_5, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_TRA1_TR1_CONFIG_5]

//>> PUT_[TP_TCN1_N1_TRA1_TR1_CONFIG_5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_TRA1_TR1_CONFIG_5(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA1_TR1_CONFIG_5));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_TRA1_TR1_CONFIG_5, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_TRA1_TR1_CONFIG_5]


//>> SET_[TP_TCN1_N1_TRA1_TR1_CONFIG_5_C]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA1_TR1_CONFIG_5_C(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA1_TR1_CONFIG_5));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA1_TR1_CONFIG_5_C,
           TP_TCN1_N1_TRA1_TR1_CONFIG_5_C_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA1_TR1_CONFIG_5_C chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA1_TR1_CONFIG_5_C]

//>> SET_[TP_TCN1_N1_TRA1_TR1_CONFIG_5_C]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA1_TR1_CONFIG_5_C(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA1_TR1_CONFIG_5));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA1_TR1_CONFIG_5_C,
           TP_TCN1_N1_TRA1_TR1_CONFIG_5_C_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA1_TR1_CONFIG_5_C chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA1_TR1_CONFIG_5_C]

//>> GET_[TP_TCN1_N1_TRA1_TR1_CONFIG_5_C]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA1_TR1_CONFIG_5_C(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA1_TR1_CONFIG_5));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA1_TR1_CONFIG_5_C,
           TP_TCN1_N1_TRA1_TR1_CONFIG_5_C_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA1_TR1_CONFIG_5_C chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA1_TR1_CONFIG_5_C]

//>> SET_[TP_TCN1_N1_TRA1_TR1_CONFIG_5_D]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA1_TR1_CONFIG_5_D(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA1_TR1_CONFIG_5));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA1_TR1_CONFIG_5_D,
           TP_TCN1_N1_TRA1_TR1_CONFIG_5_D_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA1_TR1_CONFIG_5_D chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA1_TR1_CONFIG_5_D]

//>> SET_[TP_TCN1_N1_TRA1_TR1_CONFIG_5_D]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA1_TR1_CONFIG_5_D(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA1_TR1_CONFIG_5));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA1_TR1_CONFIG_5_D,
           TP_TCN1_N1_TRA1_TR1_CONFIG_5_D_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA1_TR1_CONFIG_5_D chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA1_TR1_CONFIG_5_D]

//>> GET_[TP_TCN1_N1_TRA1_TR1_CONFIG_5_D]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA1_TR1_CONFIG_5_D(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA1_TR1_CONFIG_5));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA1_TR1_CONFIG_5_D,
           TP_TCN1_N1_TRA1_TR1_CONFIG_5_D_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA1_TR1_CONFIG_5_D chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA1_TR1_CONFIG_5_D]

//>> PREP_[TP_TCN1_N1_TRA2_TR0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_TRA2_TR0_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA2_TR0_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_TRA2_TR0_CONFIG]

//>> GET_[TP_TCN1_N1_TRA2_TR0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_TRA2_TR0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA2_TR0_CONFIG;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_TRA2_TR0_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR0_CONFIG]

//>> PUT_[TP_TCN1_N1_TRA2_TR0_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_TRA2_TR0_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_TRA2_TR0_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_TRA2_TR0_CONFIG]


//>> SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_STORE_ON_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_CONFIG_STORE_ON_TRIG_MODE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_CONFIG_STORE_ON_TRIG_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_STORE_ON_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_STORE_ON_TRIG_MODE]

//>> SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_STORE_ON_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_CONFIG_STORE_ON_TRIG_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_CONFIG_STORE_ON_TRIG_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_STORE_ON_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_STORE_ON_TRIG_MODE]

//>> SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_STORE_ON_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_CONFIG_STORE_ON_TRIG_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA2_TR0_CONFIG_STORE_ON_TRIG_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_STORE_ON_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_STORE_ON_TRIG_MODE]

//>> CLEAR_[TP_TCN1_N1_TRA2_TR0_CONFIG_STORE_ON_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA2_TR0_CONFIG_STORE_ON_TRIG_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA2_TR0_CONFIG_STORE_ON_TRIG_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_STORE_ON_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA2_TR0_CONFIG_STORE_ON_TRIG_MODE]

//>> GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_STORE_ON_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR0_CONFIG_STORE_ON_TRIG_MODE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR0_CONFIG_STORE_ON_TRIG_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_STORE_ON_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_STORE_ON_TRIG_MODE]

//>> GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_STORE_ON_TRIG_MODE]
static inline bool GET_TP_TCN1_N1_TRA2_TR0_CONFIG_STORE_ON_TRIG_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA2_TR0_CONFIG_STORE_ON_TRIG_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_STORE_ON_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_STORE_ON_TRIG_MODE]

//>> SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_WRITE_ON_RUN_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_CONFIG_WRITE_ON_RUN_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_CONFIG_WRITE_ON_RUN_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_WRITE_ON_RUN_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_WRITE_ON_RUN_MODE]

//>> SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_WRITE_ON_RUN_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_CONFIG_WRITE_ON_RUN_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_CONFIG_WRITE_ON_RUN_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_WRITE_ON_RUN_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_WRITE_ON_RUN_MODE]

//>> SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_WRITE_ON_RUN_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_CONFIG_WRITE_ON_RUN_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA2_TR0_CONFIG_WRITE_ON_RUN_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_WRITE_ON_RUN_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_WRITE_ON_RUN_MODE]

//>> CLEAR_[TP_TCN1_N1_TRA2_TR0_CONFIG_WRITE_ON_RUN_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA2_TR0_CONFIG_WRITE_ON_RUN_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA2_TR0_CONFIG_WRITE_ON_RUN_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_WRITE_ON_RUN_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA2_TR0_CONFIG_WRITE_ON_RUN_MODE]

//>> GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_WRITE_ON_RUN_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR0_CONFIG_WRITE_ON_RUN_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR0_CONFIG_WRITE_ON_RUN_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_WRITE_ON_RUN_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_WRITE_ON_RUN_MODE]

//>> GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_WRITE_ON_RUN_MODE]
static inline bool GET_TP_TCN1_N1_TRA2_TR0_CONFIG_WRITE_ON_RUN_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA2_TR0_CONFIG_WRITE_ON_RUN_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_WRITE_ON_RUN_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_WRITE_ON_RUN_MODE]

//>> SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_EXTEND_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_CONFIG_EXTEND_TRIG_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_CONFIG_EXTEND_TRIG_MODE,
           TP_TCN1_N1_TRA2_TR0_CONFIG_EXTEND_TRIG_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_EXTEND_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_EXTEND_TRIG_MODE]

//>> SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_EXTEND_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_CONFIG_EXTEND_TRIG_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_CONFIG_EXTEND_TRIG_MODE,
           TP_TCN1_N1_TRA2_TR0_CONFIG_EXTEND_TRIG_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_EXTEND_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_EXTEND_TRIG_MODE]

//>> GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_EXTEND_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR0_CONFIG_EXTEND_TRIG_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR0_CONFIG_EXTEND_TRIG_MODE,
           TP_TCN1_N1_TRA2_TR0_CONFIG_EXTEND_TRIG_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_EXTEND_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_EXTEND_TRIG_MODE]

//>> SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_BANK_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_CONFIG_BANK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_CONFIG_BANK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_BANK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_BANK_MODE]

//>> SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_BANK_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_CONFIG_BANK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_CONFIG_BANK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_BANK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_BANK_MODE]

//>> SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_BANK_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_CONFIG_BANK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA2_TR0_CONFIG_BANK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_BANK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_BANK_MODE]

//>> CLEAR_[TP_TCN1_N1_TRA2_TR0_CONFIG_BANK_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA2_TR0_CONFIG_BANK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA2_TR0_CONFIG_BANK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_BANK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA2_TR0_CONFIG_BANK_MODE]

//>> GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_BANK_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR0_CONFIG_BANK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR0_CONFIG_BANK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_BANK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_BANK_MODE]

//>> GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_BANK_MODE]
static inline bool GET_TP_TCN1_N1_TRA2_TR0_CONFIG_BANK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA2_TR0_CONFIG_BANK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_BANK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_BANK_MODE]

//>> SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_ENH_TRACE_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_CONFIG_ENH_TRACE_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_CONFIG_ENH_TRACE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_ENH_TRACE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_ENH_TRACE_MODE]

//>> SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_ENH_TRACE_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_CONFIG_ENH_TRACE_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_CONFIG_ENH_TRACE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_ENH_TRACE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_ENH_TRACE_MODE]

//>> SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_ENH_TRACE_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_CONFIG_ENH_TRACE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA2_TR0_CONFIG_ENH_TRACE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_ENH_TRACE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_ENH_TRACE_MODE]

//>> CLEAR_[TP_TCN1_N1_TRA2_TR0_CONFIG_ENH_TRACE_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA2_TR0_CONFIG_ENH_TRACE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA2_TR0_CONFIG_ENH_TRACE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_ENH_TRACE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA2_TR0_CONFIG_ENH_TRACE_MODE]

//>> GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_ENH_TRACE_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR0_CONFIG_ENH_TRACE_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR0_CONFIG_ENH_TRACE_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_ENH_TRACE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_ENH_TRACE_MODE]

//>> GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_ENH_TRACE_MODE]
static inline bool GET_TP_TCN1_N1_TRA2_TR0_CONFIG_ENH_TRACE_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA2_TR0_CONFIG_ENH_TRACE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_ENH_TRACE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_ENH_TRACE_MODE]

//>> SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL,
           TP_TCN1_N1_TRA2_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL]

//>> SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL,
           TP_TCN1_N1_TRA2_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL]

//>> GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL,
           TP_TCN1_N1_TRA2_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_LOCAL_CLOCK_GATE_CONTROL]

//>> SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_SELECT_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_SELECT_CONTROL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_SELECT_CONTROL,
           TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_SELECT_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_SELECT_CONTROL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_SELECT_CONTROL]

//>> SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_SELECT_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_SELECT_CONTROL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_SELECT_CONTROL,
           TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_SELECT_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_SELECT_CONTROL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_SELECT_CONTROL]

//>> GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_SELECT_CONTROL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_SELECT_CONTROL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_SELECT_CONTROL,
           TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_SELECT_CONTROL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_SELECT_CONTROL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_SELECT_CONTROL]

//>> SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_HOLD_OFF]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_HOLD_OFF(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_HOLD_OFF,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_HOLD_OFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_HOLD_OFF]

//>> SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_HOLD_OFF]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_HOLD_OFF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_HOLD_OFF,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_HOLD_OFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_HOLD_OFF]

//>> SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_HOLD_OFF]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_HOLD_OFF(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_HOLD_OFF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_HOLD_OFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_HOLD_OFF]

//>> CLEAR_[TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_HOLD_OFF]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_HOLD_OFF(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_HOLD_OFF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_HOLD_OFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_HOLD_OFF]

//>> GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_HOLD_OFF]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_HOLD_OFF(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_HOLD_OFF,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_HOLD_OFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_HOLD_OFF]

//>> GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_HOLD_OFF]
static inline bool GET_TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_HOLD_OFF(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_HOLD_OFF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_HOLD_OFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_HOLD_OFF]

//>> SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STATUS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STATUS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STATUS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STATUS]

//>> SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STATUS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STATUS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STATUS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STATUS]

//>> SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STATUS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STATUS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STATUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STATUS]

//>> CLEAR_[TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STATUS]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STATUS(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STATUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STATUS]

//>> GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STATUS]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STATUS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STATUS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STATUS]

//>> GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STATUS]
static inline bool GET_TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STATUS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STATUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STATUS]

//>> SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STICKY]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STICKY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STICKY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STICKY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STICKY]

//>> SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STICKY]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STICKY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STICKY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STICKY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STICKY]

//>> SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STICKY]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STICKY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STICKY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STICKY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STICKY]

//>> CLEAR_[TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STICKY]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STICKY(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STICKY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STICKY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STICKY]

//>> GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STICKY]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STICKY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STICKY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STICKY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STICKY]

//>> GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STICKY]
static inline bool GET_TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STICKY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STICKY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STICKY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_TRACE_RUN_STICKY]

//>> SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]

//>> SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]

//>> SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]

//>> CLEAR_[TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]

//>> GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]

//>> GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]
static inline bool GET_TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_BANK_EDGE_DETECT]

//>> SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]

//>> SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]

//>> SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]

//>> CLEAR_[TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]

//>> GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]

//>> GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]
static inline bool GET_TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]

//>> SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]

//>> SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]

//>> SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA2_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]

//>> CLEAR_[TP_TCN1_N1_TRA2_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA2_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA2_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA2_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]

//>> GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]

//>> GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]
static inline bool GET_TP_TCN1_N1_TRA2_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR0_CONFIG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA2_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR0_CONFIG_MASTER_CLOCK_ENABLE_INT]

//>> PREP_[TP_TCN1_N1_TRA2_TR1_CONFIG_2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_TRA2_TR1_CONFIG_2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA2_TR1_CONFIG_2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_TRA2_TR1_CONFIG_2]

//>> GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_TRA2_TR1_CONFIG_2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA2_TR1_CONFIG_2;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_TRA2_TR1_CONFIG_2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_2]

//>> PUT_[TP_TCN1_N1_TRA2_TR1_CONFIG_2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_TRA2_TR1_CONFIG_2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_2));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_TRA2_TR1_CONFIG_2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_TRA2_TR1_CONFIG_2]


//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_2_A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_2_A(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR1_CONFIG_2_A,
           TP_TCN1_N1_TRA2_TR1_CONFIG_2_A_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_2_A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_2_A]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_2_A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_2_A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR1_CONFIG_2_A,
           TP_TCN1_N1_TRA2_TR1_CONFIG_2_A_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_2_A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_2_A]

//>> GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_2_A]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR1_CONFIG_2_A(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_2));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR1_CONFIG_2_A,
           TP_TCN1_N1_TRA2_TR1_CONFIG_2_A_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_2_A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_2_A]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_2_B]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_2_B(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR1_CONFIG_2_B,
           TP_TCN1_N1_TRA2_TR1_CONFIG_2_B_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_2_B chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_2_B]

//>> SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_2_B]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA2_TR1_CONFIG_2_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA2_TR1_CONFIG_2_B,
           TP_TCN1_N1_TRA2_TR1_CONFIG_2_B_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_2_B chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA2_TR1_CONFIG_2_B]

//>> GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_2_B]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA2_TR1_CONFIG_2_B(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA2_TR1_CONFIG_2));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA2_TR1_CONFIG_2_B,
           TP_TCN1_N1_TRA2_TR1_CONFIG_2_B_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA2_TR1_CONFIG_2_B chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA2_TR1_CONFIG_2_B]

//>> PREP_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG]

//>> GET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG]

//>> PUT_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG]


//>> SET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LO_DATA]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LO_DATA(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LO_DATA,
           TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LO_DATA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LO_DATA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LO_DATA]

//>> SET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LO_DATA]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LO_DATA(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LO_DATA,
           TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LO_DATA_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LO_DATA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LO_DATA]

//>> GET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LO_DATA]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LO_DATA(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LO_DATA,
           TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LO_DATA_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LO_DATA chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LO_DATA]

//>> SET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_ADDRESS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_ADDRESS(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_ADDRESS,
           TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_ADDRESS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_ADDRESS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_ADDRESS]

//>> SET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_ADDRESS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_ADDRESS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_ADDRESS,
           TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_ADDRESS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_ADDRESS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_ADDRESS]

//>> GET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_ADDRESS]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_ADDRESS(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_ADDRESS,
           TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_ADDRESS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_ADDRESS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_ADDRESS]

//>> SET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK,
           TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK]

//>> SET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK,
           TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK]

//>> GET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK,
           TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK]

//>> SET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID]

//>> SET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID]

//>> SET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID]

//>> CLEAR_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID]

//>> GET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID]

//>> GET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID]
static inline bool GET_TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_LAST_BANK_VALID]

//>> SET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN]

//>> SET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN]

//>> SET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN]

//>> CLEAR_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN]

//>> GET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN]

//>> GET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN]
static inline bool GET_TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_WRITE_ON_RUN]

//>> SET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_RUNNING]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_RUNNING(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_RUNNING,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_RUNNING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_RUNNING]

//>> SET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_RUNNING]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_RUNNING(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_RUNNING,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_RUNNING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_RUNNING]

//>> SET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_RUNNING]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_RUNNING(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_RUNNING>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_RUNNING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_RUNNING]

//>> CLEAR_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_RUNNING]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_RUNNING(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_RUNNING>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_RUNNING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_RUNNING]

//>> GET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_RUNNING]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_RUNNING(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_RUNNING,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_RUNNING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_RUNNING]

//>> GET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_RUNNING]
static inline bool GET_TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_RUNNING(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_RUNNING>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_RUNNING chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_RUNNING]

//>> SET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS,
           TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS]

//>> SET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS,
           TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS]

//>> GET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS,
           TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR0_TRACE_LO_DATA_REG_HOLD_ADDRESS]

//>> PREP_[TP_TCN1_N1_TRA3_TR0_CONFIG_4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_TRA3_TR0_CONFIG_4(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA3_TR0_CONFIG_4;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_TRA3_TR0_CONFIG_4]

//>> GET_[TP_TCN1_N1_TRA3_TR0_CONFIG_4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_TRA3_TR0_CONFIG_4(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA3_TR0_CONFIG_4;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_TRA3_TR0_CONFIG_4, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR0_CONFIG_4]

//>> PUT_[TP_TCN1_N1_TRA3_TR0_CONFIG_4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_TRA3_TR0_CONFIG_4(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR0_CONFIG_4));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_TRA3_TR0_CONFIG_4, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_TRA3_TR0_CONFIG_4]


//>> SET_[TP_TCN1_N1_TRA3_TR0_CONFIG_4_A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR0_CONFIG_4_A(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR0_CONFIG_4));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR0_CONFIG_4_A,
           TP_TCN1_N1_TRA3_TR0_CONFIG_4_A_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR0_CONFIG_4_A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR0_CONFIG_4_A]

//>> SET_[TP_TCN1_N1_TRA3_TR0_CONFIG_4_A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR0_CONFIG_4_A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR0_CONFIG_4));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR0_CONFIG_4_A,
           TP_TCN1_N1_TRA3_TR0_CONFIG_4_A_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR0_CONFIG_4_A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR0_CONFIG_4_A]

//>> GET_[TP_TCN1_N1_TRA3_TR0_CONFIG_4_A]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA3_TR0_CONFIG_4_A(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR0_CONFIG_4));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA3_TR0_CONFIG_4_A,
           TP_TCN1_N1_TRA3_TR0_CONFIG_4_A_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR0_CONFIG_4_A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR0_CONFIG_4_A]

//>> SET_[TP_TCN1_N1_TRA3_TR0_CONFIG_4_B]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR0_CONFIG_4_B(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR0_CONFIG_4));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR0_CONFIG_4_B,
           TP_TCN1_N1_TRA3_TR0_CONFIG_4_B_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR0_CONFIG_4_B chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR0_CONFIG_4_B]

//>> SET_[TP_TCN1_N1_TRA3_TR0_CONFIG_4_B]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR0_CONFIG_4_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR0_CONFIG_4));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR0_CONFIG_4_B,
           TP_TCN1_N1_TRA3_TR0_CONFIG_4_B_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR0_CONFIG_4_B chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR0_CONFIG_4_B]

//>> GET_[TP_TCN1_N1_TRA3_TR0_CONFIG_4_B]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA3_TR0_CONFIG_4_B(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR0_CONFIG_4));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA3_TR0_CONFIG_4_B,
           TP_TCN1_N1_TRA3_TR0_CONFIG_4_B_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR0_CONFIG_4_B chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR0_CONFIG_4_B]

//>> PREP_[TP_TCN1_N1_TRA3_TR1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_TRA3_TR1_CONFIG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA3_TR1_CONFIG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_TRA3_TR1_CONFIG]

//>> GET_[TP_TCN1_N1_TRA3_TR1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_TRA3_TR1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA3_TR1_CONFIG;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_TRA3_TR1_CONFIG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR1_CONFIG]

//>> PUT_[TP_TCN1_N1_TRA3_TR1_CONFIG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_TRA3_TR1_CONFIG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_TRA3_TR1_CONFIG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_TRA3_TR1_CONFIG]


//>> SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_STORE_ON_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_CONFIG_STORE_ON_TRIG_MODE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_CONFIG_STORE_ON_TRIG_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_STORE_ON_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_STORE_ON_TRIG_MODE]

//>> SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_STORE_ON_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_CONFIG_STORE_ON_TRIG_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_CONFIG_STORE_ON_TRIG_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_STORE_ON_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_STORE_ON_TRIG_MODE]

//>> SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_STORE_ON_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_CONFIG_STORE_ON_TRIG_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA3_TR1_CONFIG_STORE_ON_TRIG_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_STORE_ON_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_STORE_ON_TRIG_MODE]

//>> CLEAR_[TP_TCN1_N1_TRA3_TR1_CONFIG_STORE_ON_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA3_TR1_CONFIG_STORE_ON_TRIG_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA3_TR1_CONFIG_STORE_ON_TRIG_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_STORE_ON_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA3_TR1_CONFIG_STORE_ON_TRIG_MODE]

//>> GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_STORE_ON_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA3_TR1_CONFIG_STORE_ON_TRIG_MODE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA3_TR1_CONFIG_STORE_ON_TRIG_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_STORE_ON_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_STORE_ON_TRIG_MODE]

//>> GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_STORE_ON_TRIG_MODE]
static inline bool GET_TP_TCN1_N1_TRA3_TR1_CONFIG_STORE_ON_TRIG_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA3_TR1_CONFIG_STORE_ON_TRIG_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_STORE_ON_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_STORE_ON_TRIG_MODE]

//>> SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_WRITE_ON_RUN_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_CONFIG_WRITE_ON_RUN_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_CONFIG_WRITE_ON_RUN_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_WRITE_ON_RUN_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_WRITE_ON_RUN_MODE]

//>> SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_WRITE_ON_RUN_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_CONFIG_WRITE_ON_RUN_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_CONFIG_WRITE_ON_RUN_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_WRITE_ON_RUN_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_WRITE_ON_RUN_MODE]

//>> SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_WRITE_ON_RUN_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_CONFIG_WRITE_ON_RUN_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA3_TR1_CONFIG_WRITE_ON_RUN_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_WRITE_ON_RUN_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_WRITE_ON_RUN_MODE]

//>> CLEAR_[TP_TCN1_N1_TRA3_TR1_CONFIG_WRITE_ON_RUN_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA3_TR1_CONFIG_WRITE_ON_RUN_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA3_TR1_CONFIG_WRITE_ON_RUN_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_WRITE_ON_RUN_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA3_TR1_CONFIG_WRITE_ON_RUN_MODE]

//>> GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_WRITE_ON_RUN_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA3_TR1_CONFIG_WRITE_ON_RUN_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA3_TR1_CONFIG_WRITE_ON_RUN_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_WRITE_ON_RUN_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_WRITE_ON_RUN_MODE]

//>> GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_WRITE_ON_RUN_MODE]
static inline bool GET_TP_TCN1_N1_TRA3_TR1_CONFIG_WRITE_ON_RUN_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA3_TR1_CONFIG_WRITE_ON_RUN_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_WRITE_ON_RUN_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_WRITE_ON_RUN_MODE]

//>> SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_EXTEND_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_CONFIG_EXTEND_TRIG_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_CONFIG_EXTEND_TRIG_MODE,
           TP_TCN1_N1_TRA3_TR1_CONFIG_EXTEND_TRIG_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_EXTEND_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_EXTEND_TRIG_MODE]

//>> SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_EXTEND_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_CONFIG_EXTEND_TRIG_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_CONFIG_EXTEND_TRIG_MODE,
           TP_TCN1_N1_TRA3_TR1_CONFIG_EXTEND_TRIG_MODE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_EXTEND_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_EXTEND_TRIG_MODE]

//>> GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_EXTEND_TRIG_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA3_TR1_CONFIG_EXTEND_TRIG_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA3_TR1_CONFIG_EXTEND_TRIG_MODE,
           TP_TCN1_N1_TRA3_TR1_CONFIG_EXTEND_TRIG_MODE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_EXTEND_TRIG_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_EXTEND_TRIG_MODE]

//>> SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_BANK_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_CONFIG_BANK_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_CONFIG_BANK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_BANK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_BANK_MODE]

//>> SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_BANK_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_CONFIG_BANK_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_CONFIG_BANK_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_BANK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_BANK_MODE]

//>> SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_BANK_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_CONFIG_BANK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA3_TR1_CONFIG_BANK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_BANK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_BANK_MODE]

//>> CLEAR_[TP_TCN1_N1_TRA3_TR1_CONFIG_BANK_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA3_TR1_CONFIG_BANK_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA3_TR1_CONFIG_BANK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_BANK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA3_TR1_CONFIG_BANK_MODE]

//>> GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_BANK_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA3_TR1_CONFIG_BANK_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA3_TR1_CONFIG_BANK_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_BANK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_BANK_MODE]

//>> GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_BANK_MODE]
static inline bool GET_TP_TCN1_N1_TRA3_TR1_CONFIG_BANK_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA3_TR1_CONFIG_BANK_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_BANK_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_BANK_MODE]

//>> SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_ENH_TRACE_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_CONFIG_ENH_TRACE_MODE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_CONFIG_ENH_TRACE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_ENH_TRACE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_ENH_TRACE_MODE]

//>> SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_ENH_TRACE_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_CONFIG_ENH_TRACE_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_CONFIG_ENH_TRACE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_ENH_TRACE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_ENH_TRACE_MODE]

//>> SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_ENH_TRACE_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_CONFIG_ENH_TRACE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA3_TR1_CONFIG_ENH_TRACE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_ENH_TRACE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_ENH_TRACE_MODE]

//>> CLEAR_[TP_TCN1_N1_TRA3_TR1_CONFIG_ENH_TRACE_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA3_TR1_CONFIG_ENH_TRACE_MODE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA3_TR1_CONFIG_ENH_TRACE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_ENH_TRACE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA3_TR1_CONFIG_ENH_TRACE_MODE]

//>> GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_ENH_TRACE_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA3_TR1_CONFIG_ENH_TRACE_MODE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA3_TR1_CONFIG_ENH_TRACE_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_ENH_TRACE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_ENH_TRACE_MODE]

//>> GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_ENH_TRACE_MODE]
static inline bool GET_TP_TCN1_N1_TRA3_TR1_CONFIG_ENH_TRACE_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA3_TR1_CONFIG_ENH_TRACE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_ENH_TRACE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_ENH_TRACE_MODE]

//>> SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL,
           TP_TCN1_N1_TRA3_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL]

//>> SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL,
           TP_TCN1_N1_TRA3_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL]

//>> GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA3_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA3_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL,
           TP_TCN1_N1_TRA3_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_LOCAL_CLOCK_GATE_CONTROL]

//>> SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_SELECT_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_SELECT_CONTROL(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_SELECT_CONTROL,
           TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_SELECT_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_SELECT_CONTROL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_SELECT_CONTROL]

//>> SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_SELECT_CONTROL]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_SELECT_CONTROL(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_SELECT_CONTROL,
           TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_SELECT_CONTROL_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_SELECT_CONTROL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_SELECT_CONTROL]

//>> GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_SELECT_CONTROL]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_SELECT_CONTROL(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_SELECT_CONTROL,
           TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_SELECT_CONTROL_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_SELECT_CONTROL chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_SELECT_CONTROL]

//>> SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_HOLD_OFF]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_HOLD_OFF(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_HOLD_OFF,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_HOLD_OFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_HOLD_OFF]

//>> SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_HOLD_OFF]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_HOLD_OFF(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_HOLD_OFF,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_HOLD_OFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_HOLD_OFF]

//>> SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_HOLD_OFF]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_HOLD_OFF(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_HOLD_OFF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_HOLD_OFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_HOLD_OFF]

//>> CLEAR_[TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_HOLD_OFF]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_HOLD_OFF(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_HOLD_OFF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_HOLD_OFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_HOLD_OFF]

//>> GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_HOLD_OFF]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_HOLD_OFF(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_HOLD_OFF,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_HOLD_OFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_HOLD_OFF]

//>> GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_HOLD_OFF]
static inline bool GET_TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_HOLD_OFF(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_HOLD_OFF>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_HOLD_OFF chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_HOLD_OFF]

//>> SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STATUS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STATUS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STATUS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STATUS]

//>> SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STATUS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STATUS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STATUS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STATUS]

//>> SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STATUS]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STATUS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STATUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STATUS]

//>> CLEAR_[TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STATUS]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STATUS(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STATUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STATUS]

//>> GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STATUS]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STATUS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STATUS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STATUS]

//>> GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STATUS]
static inline bool GET_TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STATUS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STATUS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STATUS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STATUS]

//>> SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STICKY]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STICKY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STICKY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STICKY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STICKY]

//>> SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STICKY]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STICKY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STICKY,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STICKY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STICKY]

//>> SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STICKY]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STICKY(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STICKY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STICKY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STICKY]

//>> CLEAR_[TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STICKY]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STICKY(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STICKY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STICKY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STICKY]

//>> GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STICKY]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STICKY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STICKY,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STICKY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STICKY]

//>> GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STICKY]
static inline bool GET_TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STICKY(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STICKY>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STICKY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_TRACE_RUN_STICKY]

//>> SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT]

//>> SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT]

//>> SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT]

//>> CLEAR_[TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT]

//>> GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT]

//>> GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT]
static inline bool GET_TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_BANK_EDGE_DETECT]

//>> SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]

//>> SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]

//>> SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]

//>> CLEAR_[TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]

//>> GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]

//>> GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]
static inline bool GET_TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_DISABLE_SCOM_TRCTRL_TRARR_RD_ACT]

//>> SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT]

//>> SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA3_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT]

//>> SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA3_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.setBit<TP_TCN1_N1_TRA3_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA3_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT]

//>> CLEAR_[TP_TCN1_N1_TRA3_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TCN1_N1_TRA3_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return o_data.clearBit<TP_TCN1_N1_TRA3_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TCN1_N1_TRA3_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT]

//>> GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA3_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA3_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT]

//>> GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT]
static inline bool GET_TP_TCN1_N1_TRA3_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA3_TR1_CONFIG));
#endif
    return i_data.getBit<TP_TCN1_N1_TRA3_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TCN1_N1_TRA3_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA3_TR1_CONFIG_MASTER_CLOCK_ENABLE_INT]

//>> PREP_[TP_TCN1_N1_TRA4_TR0_CONFIG_5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_TRA4_TR0_CONFIG_5(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA4_TR0_CONFIG_5;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_TRA4_TR0_CONFIG_5]

//>> GET_[TP_TCN1_N1_TRA4_TR0_CONFIG_5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_TRA4_TR0_CONFIG_5(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA4_TR0_CONFIG_5;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_TRA4_TR0_CONFIG_5, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_TRA4_TR0_CONFIG_5]

//>> PUT_[TP_TCN1_N1_TRA4_TR0_CONFIG_5]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_TRA4_TR0_CONFIG_5(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR0_CONFIG_5));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_TRA4_TR0_CONFIG_5, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_TRA4_TR0_CONFIG_5]


//>> SET_[TP_TCN1_N1_TRA4_TR0_CONFIG_5_C]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR0_CONFIG_5_C(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR0_CONFIG_5));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA4_TR0_CONFIG_5_C,
           TP_TCN1_N1_TRA4_TR0_CONFIG_5_C_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR0_CONFIG_5_C chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR0_CONFIG_5_C]

//>> SET_[TP_TCN1_N1_TRA4_TR0_CONFIG_5_C]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR0_CONFIG_5_C(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR0_CONFIG_5));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA4_TR0_CONFIG_5_C,
           TP_TCN1_N1_TRA4_TR0_CONFIG_5_C_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR0_CONFIG_5_C chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR0_CONFIG_5_C]

//>> GET_[TP_TCN1_N1_TRA4_TR0_CONFIG_5_C]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA4_TR0_CONFIG_5_C(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR0_CONFIG_5));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA4_TR0_CONFIG_5_C,
           TP_TCN1_N1_TRA4_TR0_CONFIG_5_C_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR0_CONFIG_5_C chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA4_TR0_CONFIG_5_C]

//>> SET_[TP_TCN1_N1_TRA4_TR0_CONFIG_5_D]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR0_CONFIG_5_D(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR0_CONFIG_5));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA4_TR0_CONFIG_5_D,
           TP_TCN1_N1_TRA4_TR0_CONFIG_5_D_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR0_CONFIG_5_D chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR0_CONFIG_5_D]

//>> SET_[TP_TCN1_N1_TRA4_TR0_CONFIG_5_D]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA4_TR0_CONFIG_5_D(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR0_CONFIG_5));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA4_TR0_CONFIG_5_D,
           TP_TCN1_N1_TRA4_TR0_CONFIG_5_D_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR0_CONFIG_5_D chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA4_TR0_CONFIG_5_D]

//>> GET_[TP_TCN1_N1_TRA4_TR0_CONFIG_5_D]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA4_TR0_CONFIG_5_D(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA4_TR0_CONFIG_5));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA4_TR0_CONFIG_5_D,
           TP_TCN1_N1_TRA4_TR0_CONFIG_5_D_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA4_TR0_CONFIG_5_D chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA4_TR0_CONFIG_5_D]

//>> PREP_[TP_TCN1_N1_TRA5_TR1_CONFIG_3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_TRA5_TR1_CONFIG_3(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA5_TR1_CONFIG_3;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_TRA5_TR1_CONFIG_3]

//>> GET_[TP_TCN1_N1_TRA5_TR1_CONFIG_3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_TRA5_TR1_CONFIG_3(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA5_TR1_CONFIG_3;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_TRA5_TR1_CONFIG_3, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_TRA5_TR1_CONFIG_3]

//>> PUT_[TP_TCN1_N1_TRA5_TR1_CONFIG_3]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_TRA5_TR1_CONFIG_3(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR1_CONFIG_3));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_TRA5_TR1_CONFIG_3, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_TRA5_TR1_CONFIG_3]


//>> SET_[TP_TCN1_N1_TRA5_TR1_CONFIG_3_C]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR1_CONFIG_3_C(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR1_CONFIG_3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA5_TR1_CONFIG_3_C,
           TP_TCN1_N1_TRA5_TR1_CONFIG_3_C_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR1_CONFIG_3_C chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR1_CONFIG_3_C]

//>> SET_[TP_TCN1_N1_TRA5_TR1_CONFIG_3_C]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR1_CONFIG_3_C(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR1_CONFIG_3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA5_TR1_CONFIG_3_C,
           TP_TCN1_N1_TRA5_TR1_CONFIG_3_C_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR1_CONFIG_3_C chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR1_CONFIG_3_C]

//>> GET_[TP_TCN1_N1_TRA5_TR1_CONFIG_3_C]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA5_TR1_CONFIG_3_C(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR1_CONFIG_3));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA5_TR1_CONFIG_3_C,
           TP_TCN1_N1_TRA5_TR1_CONFIG_3_C_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR1_CONFIG_3_C chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA5_TR1_CONFIG_3_C]

//>> SET_[TP_TCN1_N1_TRA5_TR1_CONFIG_3_D]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR1_CONFIG_3_D(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR1_CONFIG_3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA5_TR1_CONFIG_3_D,
           TP_TCN1_N1_TRA5_TR1_CONFIG_3_D_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR1_CONFIG_3_D chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR1_CONFIG_3_D]

//>> SET_[TP_TCN1_N1_TRA5_TR1_CONFIG_3_D]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA5_TR1_CONFIG_3_D(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR1_CONFIG_3));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA5_TR1_CONFIG_3_D,
           TP_TCN1_N1_TRA5_TR1_CONFIG_3_D_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR1_CONFIG_3_D chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA5_TR1_CONFIG_3_D]

//>> GET_[TP_TCN1_N1_TRA5_TR1_CONFIG_3_D]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA5_TR1_CONFIG_3_D(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA5_TR1_CONFIG_3));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA5_TR1_CONFIG_3_D,
           TP_TCN1_N1_TRA5_TR1_CONFIG_3_D_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA5_TR1_CONFIG_3_D chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA5_TR1_CONFIG_3_D]

//>> PREP_[TP_TCN1_N1_TRA6_TR1_CONFIG_4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_TRA6_TR1_CONFIG_4(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA6_TR1_CONFIG_4;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_TRA6_TR1_CONFIG_4]

//>> GET_[TP_TCN1_N1_TRA6_TR1_CONFIG_4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_TRA6_TR1_CONFIG_4(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA6_TR1_CONFIG_4;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_TRA6_TR1_CONFIG_4, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_TRA6_TR1_CONFIG_4]

//>> PUT_[TP_TCN1_N1_TRA6_TR1_CONFIG_4]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_TRA6_TR1_CONFIG_4(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA6_TR1_CONFIG_4));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_TRA6_TR1_CONFIG_4, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_TRA6_TR1_CONFIG_4]


//>> SET_[TP_TCN1_N1_TRA6_TR1_CONFIG_4_A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA6_TR1_CONFIG_4_A(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA6_TR1_CONFIG_4));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA6_TR1_CONFIG_4_A,
           TP_TCN1_N1_TRA6_TR1_CONFIG_4_A_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA6_TR1_CONFIG_4_A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA6_TR1_CONFIG_4_A]

//>> SET_[TP_TCN1_N1_TRA6_TR1_CONFIG_4_A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA6_TR1_CONFIG_4_A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA6_TR1_CONFIG_4));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA6_TR1_CONFIG_4_A,
           TP_TCN1_N1_TRA6_TR1_CONFIG_4_A_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA6_TR1_CONFIG_4_A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA6_TR1_CONFIG_4_A]

//>> GET_[TP_TCN1_N1_TRA6_TR1_CONFIG_4_A]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA6_TR1_CONFIG_4_A(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA6_TR1_CONFIG_4));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA6_TR1_CONFIG_4_A,
           TP_TCN1_N1_TRA6_TR1_CONFIG_4_A_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA6_TR1_CONFIG_4_A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA6_TR1_CONFIG_4_A]

//>> SET_[TP_TCN1_N1_TRA6_TR1_CONFIG_4_B]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA6_TR1_CONFIG_4_B(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA6_TR1_CONFIG_4));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA6_TR1_CONFIG_4_B,
           TP_TCN1_N1_TRA6_TR1_CONFIG_4_B_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA6_TR1_CONFIG_4_B chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA6_TR1_CONFIG_4_B]

//>> SET_[TP_TCN1_N1_TRA6_TR1_CONFIG_4_B]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA6_TR1_CONFIG_4_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA6_TR1_CONFIG_4));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA6_TR1_CONFIG_4_B,
           TP_TCN1_N1_TRA6_TR1_CONFIG_4_B_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA6_TR1_CONFIG_4_B chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA6_TR1_CONFIG_4_B]

//>> GET_[TP_TCN1_N1_TRA6_TR1_CONFIG_4_B]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA6_TR1_CONFIG_4_B(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA6_TR1_CONFIG_4));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA6_TR1_CONFIG_4_B,
           TP_TCN1_N1_TRA6_TR1_CONFIG_4_B_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA6_TR1_CONFIG_4_B chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA6_TR1_CONFIG_4_B]

//>> PREP_[TP_TCN1_N1_TRA7_TR0_CONFIG_2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TCN1_N1_TRA7_TR0_CONFIG_2(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA7_TR0_CONFIG_2;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TCN1_N1_TRA7_TR0_CONFIG_2]

//>> GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TCN1_N1_TRA7_TR0_CONFIG_2(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TCN1_N1_TRA7_TR0_CONFIG_2;
#endif
    return fapi2::getScom(i_target, TP_TCN1_N1_TRA7_TR0_CONFIG_2, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_2]

//>> PUT_[TP_TCN1_N1_TRA7_TR0_CONFIG_2]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TCN1_N1_TRA7_TR0_CONFIG_2(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_2));
#endif
    return fapi2::putScom(i_target, TP_TCN1_N1_TRA7_TR0_CONFIG_2, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TCN1_N1_TRA7_TR0_CONFIG_2]


//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_2_A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_2_A(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA7_TR0_CONFIG_2_A,
           TP_TCN1_N1_TRA7_TR0_CONFIG_2_A_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_2_A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_2_A]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_2_A]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_2_A(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA7_TR0_CONFIG_2_A,
           TP_TCN1_N1_TRA7_TR0_CONFIG_2_A_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_2_A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_2_A]

//>> GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_2_A]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA7_TR0_CONFIG_2_A(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_2));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA7_TR0_CONFIG_2_A,
           TP_TCN1_N1_TRA7_TR0_CONFIG_2_A_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_2_A chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_2_A]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_2_B]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_2_B(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA7_TR0_CONFIG_2_B,
           TP_TCN1_N1_TRA7_TR0_CONFIG_2_B_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_2_B chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_2_B]

//>> SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_2_B]
static inline fapi2::buffer<uint64_t>& SET_TP_TCN1_N1_TRA7_TR0_CONFIG_2_B(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_2));
#endif
    return o_data.insertFromRight<TP_TCN1_N1_TRA7_TR0_CONFIG_2_B,
           TP_TCN1_N1_TRA7_TR0_CONFIG_2_B_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_2_B chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TCN1_N1_TRA7_TR0_CONFIG_2_B]

//>> GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_2_B]
static inline fapi2::buffer<uint64_t>& GET_TP_TCN1_N1_TRA7_TR0_CONFIG_2_B(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TCN1_N1_TRA7_TR0_CONFIG_2));
#endif
    return i_data.extractToRight<TP_TCN1_N1_TRA7_TR0_CONFIG_2_B,
           TP_TCN1_N1_TRA7_TR0_CONFIG_2_B_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TCN1_N1_TRA7_TR0_CONFIG_2_B chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TCN1_N1_TRA7_TR0_CONFIG_2_B]

//>> PREP_[TP_TPBR_AD_LPC_CMD_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TPBR_AD_LPC_CMD_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_AD_LPC_CMD_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TPBR_AD_LPC_CMD_REG]

//>> GET_[TP_TPBR_AD_LPC_CMD_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TPBR_AD_LPC_CMD_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_AD_LPC_CMD_REG;
#endif
    return fapi2::getScom(i_target, TP_TPBR_AD_LPC_CMD_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TPBR_AD_LPC_CMD_REG]

//>> PUT_[TP_TPBR_AD_LPC_CMD_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TPBR_AD_LPC_CMD_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_LPC_CMD_REG));
#endif
    return fapi2::putScom(i_target, TP_TPBR_AD_LPC_CMD_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TPBR_AD_LPC_CMD_REG]


//>> SET_[TP_TPBR_AD_LPC_CMD_REG_RNW]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_LPC_CMD_REG_RNW(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_LPC_CMD_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_LPC_CMD_REG_RNW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_LPC_CMD_REG_RNW chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_LPC_CMD_REG_RNW]

//>> SET_[TP_TPBR_AD_LPC_CMD_REG_RNW]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_LPC_CMD_REG_RNW(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_LPC_CMD_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_LPC_CMD_REG_RNW,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_LPC_CMD_REG_RNW chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_LPC_CMD_REG_RNW]

//>> SET_[TP_TPBR_AD_LPC_CMD_REG_RNW]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_LPC_CMD_REG_RNW(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_LPC_CMD_REG));
#endif
    return o_data.setBit<TP_TPBR_AD_LPC_CMD_REG_RNW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_AD_LPC_CMD_REG_RNW chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_LPC_CMD_REG_RNW]

//>> CLEAR_[TP_TPBR_AD_LPC_CMD_REG_RNW]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_AD_LPC_CMD_REG_RNW(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_LPC_CMD_REG));
#endif
    return o_data.clearBit<TP_TPBR_AD_LPC_CMD_REG_RNW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_AD_LPC_CMD_REG_RNW chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_AD_LPC_CMD_REG_RNW]

//>> GET_[TP_TPBR_AD_LPC_CMD_REG_RNW]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_LPC_CMD_REG_RNW(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_LPC_CMD_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_LPC_CMD_REG_RNW,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_LPC_CMD_REG_RNW chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_LPC_CMD_REG_RNW]

//>> GET_[TP_TPBR_AD_LPC_CMD_REG_RNW]
static inline bool GET_TP_TPBR_AD_LPC_CMD_REG_RNW(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_LPC_CMD_REG));
#endif
    return i_data.getBit<TP_TPBR_AD_LPC_CMD_REG_RNW>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_AD_LPC_CMD_REG_RNW chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_LPC_CMD_REG_RNW]

//>> SET_[TP_TPBR_AD_LPC_CMD_REG_SIZE]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_LPC_CMD_REG_SIZE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_LPC_CMD_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_LPC_CMD_REG_SIZE,
           TP_TPBR_AD_LPC_CMD_REG_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_LPC_CMD_REG_SIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_LPC_CMD_REG_SIZE]

//>> SET_[TP_TPBR_AD_LPC_CMD_REG_SIZE]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_LPC_CMD_REG_SIZE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_LPC_CMD_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_LPC_CMD_REG_SIZE,
           TP_TPBR_AD_LPC_CMD_REG_SIZE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_LPC_CMD_REG_SIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_LPC_CMD_REG_SIZE]

//>> GET_[TP_TPBR_AD_LPC_CMD_REG_SIZE]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_LPC_CMD_REG_SIZE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_LPC_CMD_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_LPC_CMD_REG_SIZE,
           TP_TPBR_AD_LPC_CMD_REG_SIZE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_LPC_CMD_REG_SIZE chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_LPC_CMD_REG_SIZE]

//>> SET_[TP_TPBR_AD_LPC_CMD_REG_ADR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_LPC_CMD_REG_ADR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_LPC_CMD_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_LPC_CMD_REG_ADR,
           TP_TPBR_AD_LPC_CMD_REG_ADR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_LPC_CMD_REG_ADR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_LPC_CMD_REG_ADR]

//>> SET_[TP_TPBR_AD_LPC_CMD_REG_ADR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_LPC_CMD_REG_ADR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_LPC_CMD_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_LPC_CMD_REG_ADR,
           TP_TPBR_AD_LPC_CMD_REG_ADR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_LPC_CMD_REG_ADR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_LPC_CMD_REG_ADR]

//>> GET_[TP_TPBR_AD_LPC_CMD_REG_ADR]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_LPC_CMD_REG_ADR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_LPC_CMD_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_LPC_CMD_REG_ADR,
           TP_TPBR_AD_LPC_CMD_REG_ADR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_LPC_CMD_REG_ADR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_LPC_CMD_REG_ADR]

//>> PREP_[TP_TPBR_AD_SND_MODE_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TPBR_AD_SND_MODE_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_AD_SND_MODE_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TPBR_AD_SND_MODE_REG]

//>> GET_[TP_TPBR_AD_SND_MODE_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TPBR_AD_SND_MODE_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_AD_SND_MODE_REG;
#endif
    return fapi2::getScom(i_target, TP_TPBR_AD_SND_MODE_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG]

//>> PUT_[TP_TPBR_AD_SND_MODE_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TPBR_AD_SND_MODE_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return fapi2::putScom(i_target, TP_TPBR_AD_SND_MODE_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TPBR_AD_SND_MODE_REG]


//>> SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG0]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG0]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.setBit<TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG0]

//>> CLEAR_[TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG0]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.clearBit<TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG0]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG0]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG0]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG0]
static inline bool GET_TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.getBit<TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG0 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG0]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG1]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG1]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG1]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG1]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG1]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.setBit<TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG1]

//>> CLEAR_[TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG1]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG1(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.clearBit<TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG1]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG1]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG1]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG1]
static inline bool GET_TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.getBit<TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_TRC_GLB_TRIG1]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_GLB_PULSE_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_ENABLE_GLB_PULSE_MODE(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_ENABLE_GLB_PULSE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_GLB_PULSE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_GLB_PULSE_MODE]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_GLB_PULSE_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_ENABLE_GLB_PULSE_MODE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_ENABLE_GLB_PULSE_MODE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_GLB_PULSE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_GLB_PULSE_MODE]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_GLB_PULSE_MODE]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_ENABLE_GLB_PULSE_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.setBit<TP_TPBR_AD_SND_MODE_REG_ENABLE_GLB_PULSE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_GLB_PULSE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_GLB_PULSE_MODE]

//>> CLEAR_[TP_TPBR_AD_SND_MODE_REG_ENABLE_GLB_PULSE_MODE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_AD_SND_MODE_REG_ENABLE_GLB_PULSE_MODE(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.clearBit<TP_TPBR_AD_SND_MODE_REG_ENABLE_GLB_PULSE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_GLB_PULSE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_AD_SND_MODE_REG_ENABLE_GLB_PULSE_MODE]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_GLB_PULSE_MODE]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_SND_MODE_REG_ENABLE_GLB_PULSE_MODE(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_SND_MODE_REG_ENABLE_GLB_PULSE_MODE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_GLB_PULSE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_GLB_PULSE_MODE]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_GLB_PULSE_MODE]
static inline bool GET_TP_TPBR_AD_SND_MODE_REG_ENABLE_GLB_PULSE_MODE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.getBit<TP_TPBR_AD_SND_MODE_REG_ENABLE_GLB_PULSE_MODE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_GLB_PULSE_MODE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_GLB_PULSE_MODE]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_SINGLE_OUTSTANDING_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_SINGLE_OUTSTANDING_CMD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_SINGLE_OUTSTANDING_CMD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_SINGLE_OUTSTANDING_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_SINGLE_OUTSTANDING_CMD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_SINGLE_OUTSTANDING_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_SINGLE_OUTSTANDING_CMD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_SINGLE_OUTSTANDING_CMD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_SINGLE_OUTSTANDING_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_SINGLE_OUTSTANDING_CMD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_SINGLE_OUTSTANDING_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_SINGLE_OUTSTANDING_CMD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.setBit<TP_TPBR_AD_SND_MODE_REG_SINGLE_OUTSTANDING_CMD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_SINGLE_OUTSTANDING_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_SINGLE_OUTSTANDING_CMD]

//>> CLEAR_[TP_TPBR_AD_SND_MODE_REG_SINGLE_OUTSTANDING_CMD]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_AD_SND_MODE_REG_SINGLE_OUTSTANDING_CMD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.clearBit<TP_TPBR_AD_SND_MODE_REG_SINGLE_OUTSTANDING_CMD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_SINGLE_OUTSTANDING_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_AD_SND_MODE_REG_SINGLE_OUTSTANDING_CMD]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_SINGLE_OUTSTANDING_CMD]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_SND_MODE_REG_SINGLE_OUTSTANDING_CMD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_SND_MODE_REG_SINGLE_OUTSTANDING_CMD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_SINGLE_OUTSTANDING_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_SINGLE_OUTSTANDING_CMD]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_SINGLE_OUTSTANDING_CMD]
static inline bool GET_TP_TPBR_AD_SND_MODE_REG_SINGLE_OUTSTANDING_CMD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.getBit<TP_TPBR_AD_SND_MODE_REG_SINGLE_OUTSTANDING_CMD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_SINGLE_OUTSTANDING_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_SINGLE_OUTSTANDING_CMD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_PROG_REQ_DELAY]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_PROG_REQ_DELAY(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_PROG_REQ_DELAY,
           TP_TPBR_AD_SND_MODE_REG_PROG_REQ_DELAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_PROG_REQ_DELAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_PROG_REQ_DELAY]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_PROG_REQ_DELAY]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_PROG_REQ_DELAY(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_PROG_REQ_DELAY,
           TP_TPBR_AD_SND_MODE_REG_PROG_REQ_DELAY_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_PROG_REQ_DELAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_PROG_REQ_DELAY]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_PROG_REQ_DELAY]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_SND_MODE_REG_PROG_REQ_DELAY(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_SND_MODE_REG_PROG_REQ_DELAY,
           TP_TPBR_AD_SND_MODE_REG_PROG_REQ_DELAY_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_PROG_REQ_DELAY chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_PROG_REQ_DELAY]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_ERR_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_DISABLE_ERR_CMD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_DISABLE_ERR_CMD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_DISABLE_ERR_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_ERR_CMD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_ERR_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_DISABLE_ERR_CMD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_DISABLE_ERR_CMD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_DISABLE_ERR_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_ERR_CMD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_ERR_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_DISABLE_ERR_CMD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.setBit<TP_TPBR_AD_SND_MODE_REG_DISABLE_ERR_CMD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_DISABLE_ERR_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_ERR_CMD]

//>> CLEAR_[TP_TPBR_AD_SND_MODE_REG_DISABLE_ERR_CMD]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_AD_SND_MODE_REG_DISABLE_ERR_CMD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.clearBit<TP_TPBR_AD_SND_MODE_REG_DISABLE_ERR_CMD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_DISABLE_ERR_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_AD_SND_MODE_REG_DISABLE_ERR_CMD]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_ERR_CMD]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_SND_MODE_REG_DISABLE_ERR_CMD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_SND_MODE_REG_DISABLE_ERR_CMD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_DISABLE_ERR_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_ERR_CMD]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_ERR_CMD]
static inline bool GET_TP_TPBR_AD_SND_MODE_REG_DISABLE_ERR_CMD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.getBit<TP_TPBR_AD_SND_MODE_REG_DISABLE_ERR_CMD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_DISABLE_ERR_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_ERR_CMD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_HTM_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_DISABLE_HTM_CMD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_DISABLE_HTM_CMD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_DISABLE_HTM_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_HTM_CMD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_HTM_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_DISABLE_HTM_CMD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_DISABLE_HTM_CMD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_DISABLE_HTM_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_HTM_CMD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_HTM_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_DISABLE_HTM_CMD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.setBit<TP_TPBR_AD_SND_MODE_REG_DISABLE_HTM_CMD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_DISABLE_HTM_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_HTM_CMD]

//>> CLEAR_[TP_TPBR_AD_SND_MODE_REG_DISABLE_HTM_CMD]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_AD_SND_MODE_REG_DISABLE_HTM_CMD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.clearBit<TP_TPBR_AD_SND_MODE_REG_DISABLE_HTM_CMD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_DISABLE_HTM_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_AD_SND_MODE_REG_DISABLE_HTM_CMD]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_HTM_CMD]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_SND_MODE_REG_DISABLE_HTM_CMD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_SND_MODE_REG_DISABLE_HTM_CMD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_DISABLE_HTM_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_HTM_CMD]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_HTM_CMD]
static inline bool GET_TP_TPBR_AD_SND_MODE_REG_DISABLE_HTM_CMD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.getBit<TP_TPBR_AD_SND_MODE_REG_DISABLE_HTM_CMD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_DISABLE_HTM_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_HTM_CMD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_TRACE_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_DISABLE_TRACE_CMD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_DISABLE_TRACE_CMD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_DISABLE_TRACE_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_TRACE_CMD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_TRACE_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_DISABLE_TRACE_CMD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_DISABLE_TRACE_CMD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_DISABLE_TRACE_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_TRACE_CMD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_TRACE_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_DISABLE_TRACE_CMD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.setBit<TP_TPBR_AD_SND_MODE_REG_DISABLE_TRACE_CMD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_DISABLE_TRACE_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_TRACE_CMD]

//>> CLEAR_[TP_TPBR_AD_SND_MODE_REG_DISABLE_TRACE_CMD]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_AD_SND_MODE_REG_DISABLE_TRACE_CMD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.clearBit<TP_TPBR_AD_SND_MODE_REG_DISABLE_TRACE_CMD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_DISABLE_TRACE_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_AD_SND_MODE_REG_DISABLE_TRACE_CMD]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_TRACE_CMD]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_SND_MODE_REG_DISABLE_TRACE_CMD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_SND_MODE_REG_DISABLE_TRACE_CMD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_DISABLE_TRACE_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_TRACE_CMD]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_TRACE_CMD]
static inline bool GET_TP_TPBR_AD_SND_MODE_REG_DISABLE_TRACE_CMD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.getBit<TP_TPBR_AD_SND_MODE_REG_DISABLE_TRACE_CMD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_DISABLE_TRACE_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_TRACE_CMD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_TOD_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_DISABLE_TOD_CMD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_DISABLE_TOD_CMD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_DISABLE_TOD_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_TOD_CMD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_TOD_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_DISABLE_TOD_CMD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_DISABLE_TOD_CMD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_DISABLE_TOD_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_TOD_CMD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_TOD_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_DISABLE_TOD_CMD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.setBit<TP_TPBR_AD_SND_MODE_REG_DISABLE_TOD_CMD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_DISABLE_TOD_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_TOD_CMD]

//>> CLEAR_[TP_TPBR_AD_SND_MODE_REG_DISABLE_TOD_CMD]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_AD_SND_MODE_REG_DISABLE_TOD_CMD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.clearBit<TP_TPBR_AD_SND_MODE_REG_DISABLE_TOD_CMD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_DISABLE_TOD_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_AD_SND_MODE_REG_DISABLE_TOD_CMD]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_TOD_CMD]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_SND_MODE_REG_DISABLE_TOD_CMD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_SND_MODE_REG_DISABLE_TOD_CMD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_DISABLE_TOD_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_TOD_CMD]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_TOD_CMD]
static inline bool GET_TP_TPBR_AD_SND_MODE_REG_DISABLE_TOD_CMD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.getBit<TP_TPBR_AD_SND_MODE_REG_DISABLE_TOD_CMD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_DISABLE_TOD_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_TOD_CMD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_XSCOM_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_DISABLE_XSCOM_CMD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_DISABLE_XSCOM_CMD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_DISABLE_XSCOM_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_XSCOM_CMD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_XSCOM_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_DISABLE_XSCOM_CMD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_DISABLE_XSCOM_CMD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_DISABLE_XSCOM_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_XSCOM_CMD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_XSCOM_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_DISABLE_XSCOM_CMD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.setBit<TP_TPBR_AD_SND_MODE_REG_DISABLE_XSCOM_CMD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_DISABLE_XSCOM_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_XSCOM_CMD]

//>> CLEAR_[TP_TPBR_AD_SND_MODE_REG_DISABLE_XSCOM_CMD]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_AD_SND_MODE_REG_DISABLE_XSCOM_CMD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.clearBit<TP_TPBR_AD_SND_MODE_REG_DISABLE_XSCOM_CMD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_DISABLE_XSCOM_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_AD_SND_MODE_REG_DISABLE_XSCOM_CMD]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_XSCOM_CMD]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_SND_MODE_REG_DISABLE_XSCOM_CMD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_SND_MODE_REG_DISABLE_XSCOM_CMD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_DISABLE_XSCOM_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_XSCOM_CMD]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_XSCOM_CMD]
static inline bool GET_TP_TPBR_AD_SND_MODE_REG_DISABLE_XSCOM_CMD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.getBit<TP_TPBR_AD_SND_MODE_REG_DISABLE_XSCOM_CMD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_DISABLE_XSCOM_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_XSCOM_CMD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_CLR_ERR_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_ENABLE_CLR_ERR_CMD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_ENABLE_CLR_ERR_CMD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_CLR_ERR_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_CLR_ERR_CMD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_CLR_ERR_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_ENABLE_CLR_ERR_CMD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_ENABLE_CLR_ERR_CMD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_CLR_ERR_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_CLR_ERR_CMD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_CLR_ERR_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_ENABLE_CLR_ERR_CMD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.setBit<TP_TPBR_AD_SND_MODE_REG_ENABLE_CLR_ERR_CMD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_CLR_ERR_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_CLR_ERR_CMD]

//>> CLEAR_[TP_TPBR_AD_SND_MODE_REG_ENABLE_CLR_ERR_CMD]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_AD_SND_MODE_REG_ENABLE_CLR_ERR_CMD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.clearBit<TP_TPBR_AD_SND_MODE_REG_ENABLE_CLR_ERR_CMD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_CLR_ERR_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_AD_SND_MODE_REG_ENABLE_CLR_ERR_CMD]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_CLR_ERR_CMD]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_SND_MODE_REG_ENABLE_CLR_ERR_CMD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_SND_MODE_REG_ENABLE_CLR_ERR_CMD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_CLR_ERR_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_CLR_ERR_CMD]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_CLR_ERR_CMD]
static inline bool GET_TP_TPBR_AD_SND_MODE_REG_ENABLE_CLR_ERR_CMD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.getBit<TP_TPBR_AD_SND_MODE_REG_ENABLE_CLR_ERR_CMD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_CLR_ERR_CMD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_CLR_ERR_CMD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_ERR_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_ERR_CMD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_ERR_CMD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_ERR_CMD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_ERR_CMD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_ERR_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_ERR_CMD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_ERR_CMD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_ERR_CMD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_ERR_CMD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_ERR_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_ERR_CMD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.setBit<TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_ERR_CMD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_ERR_CMD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_ERR_CMD]

//>> CLEAR_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_ERR_CMD]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_ERR_CMD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.clearBit<TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_ERR_CMD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_ERR_CMD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_ERR_CMD]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_ERR_CMD]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_ERR_CMD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_ERR_CMD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_ERR_CMD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_ERR_CMD]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_ERR_CMD]
static inline bool GET_TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_ERR_CMD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.getBit<TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_ERR_CMD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_ERR_CMD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_ERR_CMD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_HTM_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_HTM_CMD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_HTM_CMD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_HTM_CMD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_HTM_CMD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_HTM_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_HTM_CMD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_HTM_CMD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_HTM_CMD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_HTM_CMD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_HTM_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_HTM_CMD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.setBit<TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_HTM_CMD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_HTM_CMD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_HTM_CMD]

//>> CLEAR_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_HTM_CMD]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_HTM_CMD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.clearBit<TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_HTM_CMD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_HTM_CMD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_HTM_CMD]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_HTM_CMD]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_HTM_CMD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_HTM_CMD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_HTM_CMD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_HTM_CMD]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_HTM_CMD]
static inline bool GET_TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_HTM_CMD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.getBit<TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_HTM_CMD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_HTM_CMD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_HTM_CMD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TRACE_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TRACE_CMD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TRACE_CMD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TRACE_CMD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TRACE_CMD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TRACE_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TRACE_CMD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TRACE_CMD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TRACE_CMD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TRACE_CMD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TRACE_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TRACE_CMD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.setBit<TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TRACE_CMD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TRACE_CMD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TRACE_CMD]

//>> CLEAR_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TRACE_CMD]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TRACE_CMD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.clearBit<TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TRACE_CMD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TRACE_CMD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TRACE_CMD]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TRACE_CMD]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TRACE_CMD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TRACE_CMD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TRACE_CMD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TRACE_CMD]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TRACE_CMD]
static inline bool GET_TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TRACE_CMD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.getBit<TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TRACE_CMD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TRACE_CMD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TRACE_CMD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TOD_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TOD_CMD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TOD_CMD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TOD_CMD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TOD_CMD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TOD_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TOD_CMD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TOD_CMD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TOD_CMD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TOD_CMD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TOD_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TOD_CMD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.setBit<TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TOD_CMD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TOD_CMD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TOD_CMD]

//>> CLEAR_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TOD_CMD]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TOD_CMD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.clearBit<TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TOD_CMD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TOD_CMD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TOD_CMD]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TOD_CMD]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TOD_CMD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TOD_CMD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TOD_CMD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TOD_CMD]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TOD_CMD]
static inline bool GET_TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TOD_CMD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.getBit<TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TOD_CMD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TOD_CMD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_TOD_CMD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_XSCOM_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_XSCOM_CMD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_XSCOM_CMD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_XSCOM_CMD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_XSCOM_CMD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_XSCOM_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_XSCOM_CMD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_XSCOM_CMD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_XSCOM_CMD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_XSCOM_CMD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_XSCOM_CMD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_XSCOM_CMD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.setBit<TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_XSCOM_CMD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_XSCOM_CMD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_XSCOM_CMD]

//>> CLEAR_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_XSCOM_CMD]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_XSCOM_CMD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.clearBit<TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_XSCOM_CMD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_XSCOM_CMD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_XSCOM_CMD]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_XSCOM_CMD]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_XSCOM_CMD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_XSCOM_CMD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_XSCOM_CMD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_XSCOM_CMD]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_XSCOM_CMD]
static inline bool GET_TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_XSCOM_CMD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.getBit<TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_XSCOM_CMD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_XSCOM_CMD chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_OVERRIDE_PBINIT_XSCOM_CMD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_CHECKSTOP]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_DISABLE_CHECKSTOP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_DISABLE_CHECKSTOP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_DISABLE_CHECKSTOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_CHECKSTOP]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_CHECKSTOP]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_DISABLE_CHECKSTOP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_DISABLE_CHECKSTOP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_DISABLE_CHECKSTOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_CHECKSTOP]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_CHECKSTOP]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_DISABLE_CHECKSTOP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.setBit<TP_TPBR_AD_SND_MODE_REG_DISABLE_CHECKSTOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_DISABLE_CHECKSTOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_CHECKSTOP]

//>> CLEAR_[TP_TPBR_AD_SND_MODE_REG_DISABLE_CHECKSTOP]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_AD_SND_MODE_REG_DISABLE_CHECKSTOP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.clearBit<TP_TPBR_AD_SND_MODE_REG_DISABLE_CHECKSTOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_DISABLE_CHECKSTOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_AD_SND_MODE_REG_DISABLE_CHECKSTOP]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_CHECKSTOP]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_SND_MODE_REG_DISABLE_CHECKSTOP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_SND_MODE_REG_DISABLE_CHECKSTOP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_DISABLE_CHECKSTOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_CHECKSTOP]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_CHECKSTOP]
static inline bool GET_TP_TPBR_AD_SND_MODE_REG_DISABLE_CHECKSTOP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.getBit<TP_TPBR_AD_SND_MODE_REG_DISABLE_CHECKSTOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_DISABLE_CHECKSTOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_DISABLE_CHECKSTOP]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_MANUAL_SET_PB_STOP]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_MANUAL_SET_PB_STOP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_MANUAL_SET_PB_STOP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_MANUAL_SET_PB_STOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_MANUAL_SET_PB_STOP]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_MANUAL_SET_PB_STOP]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_MANUAL_SET_PB_STOP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_MANUAL_SET_PB_STOP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_MANUAL_SET_PB_STOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_MANUAL_SET_PB_STOP]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_MANUAL_SET_PB_STOP]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_MANUAL_SET_PB_STOP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.setBit<TP_TPBR_AD_SND_MODE_REG_MANUAL_SET_PB_STOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_MANUAL_SET_PB_STOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_MANUAL_SET_PB_STOP]

//>> CLEAR_[TP_TPBR_AD_SND_MODE_REG_MANUAL_SET_PB_STOP]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_AD_SND_MODE_REG_MANUAL_SET_PB_STOP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.clearBit<TP_TPBR_AD_SND_MODE_REG_MANUAL_SET_PB_STOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_MANUAL_SET_PB_STOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_AD_SND_MODE_REG_MANUAL_SET_PB_STOP]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_MANUAL_SET_PB_STOP]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_SND_MODE_REG_MANUAL_SET_PB_STOP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_SND_MODE_REG_MANUAL_SET_PB_STOP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_MANUAL_SET_PB_STOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_MANUAL_SET_PB_STOP]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_MANUAL_SET_PB_STOP]
static inline bool GET_TP_TPBR_AD_SND_MODE_REG_MANUAL_SET_PB_STOP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.getBit<TP_TPBR_AD_SND_MODE_REG_MANUAL_SET_PB_STOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_MANUAL_SET_PB_STOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_MANUAL_SET_PB_STOP]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_MANUAL_CLR_PB_STOP]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_MANUAL_CLR_PB_STOP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_MANUAL_CLR_PB_STOP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_MANUAL_CLR_PB_STOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_MANUAL_CLR_PB_STOP]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_MANUAL_CLR_PB_STOP]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_MANUAL_CLR_PB_STOP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_MANUAL_CLR_PB_STOP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_MANUAL_CLR_PB_STOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_MANUAL_CLR_PB_STOP]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_MANUAL_CLR_PB_STOP]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_MANUAL_CLR_PB_STOP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.setBit<TP_TPBR_AD_SND_MODE_REG_MANUAL_CLR_PB_STOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_MANUAL_CLR_PB_STOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_MANUAL_CLR_PB_STOP]

//>> CLEAR_[TP_TPBR_AD_SND_MODE_REG_MANUAL_CLR_PB_STOP]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_AD_SND_MODE_REG_MANUAL_CLR_PB_STOP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.clearBit<TP_TPBR_AD_SND_MODE_REG_MANUAL_CLR_PB_STOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_MANUAL_CLR_PB_STOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_AD_SND_MODE_REG_MANUAL_CLR_PB_STOP]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_MANUAL_CLR_PB_STOP]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_SND_MODE_REG_MANUAL_CLR_PB_STOP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_SND_MODE_REG_MANUAL_CLR_PB_STOP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_MANUAL_CLR_PB_STOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_MANUAL_CLR_PB_STOP]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_MANUAL_CLR_PB_STOP]
static inline bool GET_TP_TPBR_AD_SND_MODE_REG_MANUAL_CLR_PB_STOP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.getBit<TP_TPBR_AD_SND_MODE_REG_MANUAL_CLR_PB_STOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_MANUAL_CLR_PB_STOP chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_MANUAL_CLR_PB_STOP]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_PB_STOP]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_PB_STOP(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_PB_STOP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_PB_STOP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_PB_STOP]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_PB_STOP]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_PB_STOP(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_PB_STOP,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_PB_STOP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_PB_STOP]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_PB_STOP]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_PB_STOP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.setBit<TP_TPBR_AD_SND_MODE_REG_PB_STOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_PB_STOP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_PB_STOP]

//>> CLEAR_[TP_TPBR_AD_SND_MODE_REG_PB_STOP]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_AD_SND_MODE_REG_PB_STOP(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.clearBit<TP_TPBR_AD_SND_MODE_REG_PB_STOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_PB_STOP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_AD_SND_MODE_REG_PB_STOP]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_PB_STOP]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_SND_MODE_REG_PB_STOP(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_SND_MODE_REG_PB_STOP,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_PB_STOP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_PB_STOP]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_PB_STOP]
static inline bool GET_TP_TPBR_AD_SND_MODE_REG_PB_STOP(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.getBit<TP_TPBR_AD_SND_MODE_REG_PB_STOP>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_PB_STOP chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_PB_STOP]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_MANUAL_PB_SWITCH_ABCD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_MANUAL_PB_SWITCH_ABCD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_MANUAL_PB_SWITCH_ABCD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_MANUAL_PB_SWITCH_ABCD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_MANUAL_PB_SWITCH_ABCD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_MANUAL_PB_SWITCH_ABCD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_MANUAL_PB_SWITCH_ABCD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_MANUAL_PB_SWITCH_ABCD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_MANUAL_PB_SWITCH_ABCD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_MANUAL_PB_SWITCH_ABCD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_MANUAL_PB_SWITCH_ABCD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_MANUAL_PB_SWITCH_ABCD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.setBit<TP_TPBR_AD_SND_MODE_REG_MANUAL_PB_SWITCH_ABCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_MANUAL_PB_SWITCH_ABCD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_MANUAL_PB_SWITCH_ABCD]

//>> CLEAR_[TP_TPBR_AD_SND_MODE_REG_MANUAL_PB_SWITCH_ABCD]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_AD_SND_MODE_REG_MANUAL_PB_SWITCH_ABCD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.clearBit<TP_TPBR_AD_SND_MODE_REG_MANUAL_PB_SWITCH_ABCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_MANUAL_PB_SWITCH_ABCD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_AD_SND_MODE_REG_MANUAL_PB_SWITCH_ABCD]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_MANUAL_PB_SWITCH_ABCD]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_SND_MODE_REG_MANUAL_PB_SWITCH_ABCD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_SND_MODE_REG_MANUAL_PB_SWITCH_ABCD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_MANUAL_PB_SWITCH_ABCD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_MANUAL_PB_SWITCH_ABCD]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_MANUAL_PB_SWITCH_ABCD]
static inline bool GET_TP_TPBR_AD_SND_MODE_REG_MANUAL_PB_SWITCH_ABCD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.getBit<TP_TPBR_AD_SND_MODE_REG_MANUAL_PB_SWITCH_ABCD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_MANUAL_PB_SWITCH_ABCD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_MANUAL_PB_SWITCH_ABCD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TRIGGER]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TRIGGER(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TRIGGER,
           TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TRIGGER_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TRIGGER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TRIGGER]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TRIGGER]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TRIGGER(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TRIGGER,
           TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TRIGGER_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TRIGGER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TRIGGER]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TRIGGER]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TRIGGER(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TRIGGER,
           TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TRIGGER_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TRIGGER chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TRIGGER]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TOD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TOD(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TOD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TOD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TOD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TOD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TOD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TOD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TOD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TOD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TOD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TOD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.setBit<TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TOD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TOD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TOD]

//>> CLEAR_[TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TOD]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TOD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.clearBit<TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TOD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TOD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TOD]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TOD]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TOD(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TOD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TOD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TOD]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TOD]
static inline bool GET_TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TOD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.getBit<TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TOD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TOD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_RECEIVE_OWN_TOD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_RESET_TOD_STATE]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_RESET_TOD_STATE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_RESET_TOD_STATE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_RESET_TOD_STATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_RESET_TOD_STATE]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_RESET_TOD_STATE]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_RESET_TOD_STATE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_RESET_TOD_STATE,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_RESET_TOD_STATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_RESET_TOD_STATE]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_RESET_TOD_STATE]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_RESET_TOD_STATE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.setBit<TP_TPBR_AD_SND_MODE_REG_RESET_TOD_STATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_RESET_TOD_STATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_RESET_TOD_STATE]

//>> CLEAR_[TP_TPBR_AD_SND_MODE_REG_RESET_TOD_STATE]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_AD_SND_MODE_REG_RESET_TOD_STATE(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.clearBit<TP_TPBR_AD_SND_MODE_REG_RESET_TOD_STATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_RESET_TOD_STATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_AD_SND_MODE_REG_RESET_TOD_STATE]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_RESET_TOD_STATE]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_SND_MODE_REG_RESET_TOD_STATE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_SND_MODE_REG_RESET_TOD_STATE,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_RESET_TOD_STATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_RESET_TOD_STATE]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_RESET_TOD_STATE]
static inline bool GET_TP_TPBR_AD_SND_MODE_REG_RESET_TOD_STATE(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.getBit<TP_TPBR_AD_SND_MODE_REG_RESET_TOD_STATE>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_RESET_TOD_STATE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_RESET_TOD_STATE]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_AB]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_AB(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_AB,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_AB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_AB]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_AB]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_AB(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_AB,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_AB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_AB]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_AB]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_AB(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.setBit<TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_AB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_AB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_AB]

//>> CLEAR_[TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_AB]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_AB(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.clearBit<TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_AB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_AB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_AB]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_AB]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_AB(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_AB,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_AB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_AB]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_AB]
static inline bool GET_TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_AB(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.getBit<TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_AB>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_AB chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_AB]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_CD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_CD(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_CD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_CD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_CD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_CD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_CD(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_CD,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_CD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_CD]

//>> SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_CD]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_CD(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.setBit<TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_CD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_CD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_CD]

//>> CLEAR_[TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_CD]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_CD(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return o_data.clearBit<TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_CD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_CD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_CD]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_CD]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_CD(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.extractToRight<TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_CD,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_CD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_CD]

//>> GET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_CD]
static inline bool GET_TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_CD(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_AD_SND_MODE_REG));
#endif
    return i_data.getBit<TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_CD>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_CD chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_AD_SND_MODE_REG_ENABLE_PB_SWITCH_CD]

//>> PREP_[TP_TPBR_PBA_PBAO_BCUE_PBADR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TPBR_PBA_PBAO_BCUE_PBADR(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_PBA_PBAO_BCUE_PBADR;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TPBR_PBA_PBAO_BCUE_PBADR]

//>> GET_[TP_TPBR_PBA_PBAO_BCUE_PBADR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TPBR_PBA_PBAO_BCUE_PBADR(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_PBA_PBAO_BCUE_PBADR;
#endif
    return fapi2::getScom(i_target, TP_TPBR_PBA_PBAO_BCUE_PBADR, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_BCUE_PBADR]

//>> PUT_[TP_TPBR_PBA_PBAO_BCUE_PBADR]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TPBR_PBA_PBAO_BCUE_PBADR(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_BCUE_PBADR));
#endif
    return fapi2::putScom(i_target, TP_TPBR_PBA_PBAO_BCUE_PBADR, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TPBR_PBA_PBAO_BCUE_PBADR]


//>> SET_[TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_0_1]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_0_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_BCUE_PBADR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_0_1,
           TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_0_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_0_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_0_1]

//>> SET_[TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_0_1]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_0_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_BCUE_PBADR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_0_1,
           TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_0_1_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_0_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_0_1]

//>> GET_[TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_0_1]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_0_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_BCUE_PBADR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_0_1,
           TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_0_1_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_0_1 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_0_1]

//>> SET_[TP_TPBR_PBA_PBAO_BCUE_PBADR_PB_OFFSET]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_BCUE_PBADR_PB_OFFSET(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_BCUE_PBADR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_BCUE_PBADR_PB_OFFSET,
           TP_TPBR_PBA_PBAO_BCUE_PBADR_PB_OFFSET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_BCUE_PBADR_PB_OFFSET chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_BCUE_PBADR_PB_OFFSET]

//>> SET_[TP_TPBR_PBA_PBAO_BCUE_PBADR_PB_OFFSET]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_BCUE_PBADR_PB_OFFSET(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_BCUE_PBADR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_BCUE_PBADR_PB_OFFSET,
           TP_TPBR_PBA_PBAO_BCUE_PBADR_PB_OFFSET_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_BCUE_PBADR_PB_OFFSET chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_BCUE_PBADR_PB_OFFSET]

//>> GET_[TP_TPBR_PBA_PBAO_BCUE_PBADR_PB_OFFSET]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_BCUE_PBADR_PB_OFFSET(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_BCUE_PBADR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_BCUE_PBADR_PB_OFFSET,
           TP_TPBR_PBA_PBAO_BCUE_PBADR_PB_OFFSET_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_BCUE_PBADR_PB_OFFSET chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_BCUE_PBADR_PB_OFFSET]

//>> SET_[TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_25_26]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_25_26(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_BCUE_PBADR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_25_26,
           TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_25_26_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_25_26 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_25_26]

//>> SET_[TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_25_26]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_25_26(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_BCUE_PBADR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_25_26,
           TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_25_26_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_25_26 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_25_26]

//>> GET_[TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_25_26]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_25_26(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_BCUE_PBADR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_25_26,
           TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_25_26_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_25_26 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_25_26]

//>> SET_[TP_TPBR_PBA_PBAO_BCUE_PBADR_EXTADDR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_BCUE_PBADR_EXTADDR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_BCUE_PBADR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_BCUE_PBADR_EXTADDR,
           TP_TPBR_PBA_PBAO_BCUE_PBADR_EXTADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_BCUE_PBADR_EXTADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_BCUE_PBADR_EXTADDR]

//>> SET_[TP_TPBR_PBA_PBAO_BCUE_PBADR_EXTADDR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_BCUE_PBADR_EXTADDR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_BCUE_PBADR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_BCUE_PBADR_EXTADDR,
           TP_TPBR_PBA_PBAO_BCUE_PBADR_EXTADDR_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_BCUE_PBADR_EXTADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_BCUE_PBADR_EXTADDR]

//>> GET_[TP_TPBR_PBA_PBAO_BCUE_PBADR_EXTADDR]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_BCUE_PBADR_EXTADDR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_BCUE_PBADR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_BCUE_PBADR_EXTADDR,
           TP_TPBR_PBA_PBAO_BCUE_PBADR_EXTADDR_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_BCUE_PBADR_EXTADDR chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_BCUE_PBADR_EXTADDR]

//>> SET_[TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_41_42]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_41_42(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_BCUE_PBADR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_41_42,
           TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_41_42_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_41_42 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_41_42]

//>> SET_[TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_41_42]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_41_42(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_BCUE_PBADR));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_41_42,
           TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_41_42_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_41_42 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_41_42]

//>> GET_[TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_41_42]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_41_42(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_BCUE_PBADR));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_41_42,
           TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_41_42_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_41_42 chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_BCUE_PBADR_RESERVED_41_42]

//>> PREP_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TPBR_PBA_PBAO_PBAXRCVSTAT(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_PBA_PBAO_PBAXRCVSTAT;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT]

//>> GET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TPBR_PBA_PBAO_PBAXRCVSTAT(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_PBA_PBAO_PBAXRCVSTAT;
#endif
    return fapi2::getScom(i_target, TP_TPBR_PBA_PBAO_PBAXRCVSTAT, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT]

//>> PUT_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TPBR_PBA_PBAO_PBAXRCVSTAT(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXRCVSTAT));
#endif
    return fapi2::putScom(i_target, TP_TPBR_PBA_PBAO_PBAXRCVSTAT, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT]


//>> SET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_IN_PROGRESS]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXRCVSTAT_IN_PROGRESS(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXRCVSTAT));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAXRCVSTAT_IN_PROGRESS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXRCVSTAT_IN_PROGRESS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_IN_PROGRESS]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_IN_PROGRESS]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXRCVSTAT_IN_PROGRESS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXRCVSTAT));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAXRCVSTAT_IN_PROGRESS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXRCVSTAT_IN_PROGRESS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_IN_PROGRESS]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_IN_PROGRESS]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXRCVSTAT_IN_PROGRESS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXRCVSTAT));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAO_PBAXRCVSTAT_IN_PROGRESS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXRCVSTAT_IN_PROGRESS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_IN_PROGRESS]

//>> CLEAR_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_IN_PROGRESS]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAO_PBAXRCVSTAT_IN_PROGRESS(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXRCVSTAT));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAO_PBAXRCVSTAT_IN_PROGRESS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXRCVSTAT_IN_PROGRESS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_IN_PROGRESS]

//>> GET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_IN_PROGRESS]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBAXRCVSTAT_IN_PROGRESS(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXRCVSTAT));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBAXRCVSTAT_IN_PROGRESS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXRCVSTAT_IN_PROGRESS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_IN_PROGRESS]

//>> GET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_IN_PROGRESS]
static inline bool GET_TP_TPBR_PBA_PBAO_PBAXRCVSTAT_IN_PROGRESS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXRCVSTAT));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAO_PBAXRCVSTAT_IN_PROGRESS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXRCVSTAT_IN_PROGRESS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_IN_PROGRESS]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_ERROR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXRCVSTAT_ERROR(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXRCVSTAT));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAXRCVSTAT_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXRCVSTAT_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_ERROR]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_ERROR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXRCVSTAT_ERROR(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXRCVSTAT));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAXRCVSTAT_ERROR,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXRCVSTAT_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_ERROR]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_ERROR]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXRCVSTAT_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXRCVSTAT));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAO_PBAXRCVSTAT_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXRCVSTAT_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_ERROR]

//>> CLEAR_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_ERROR]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAO_PBAXRCVSTAT_ERROR(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXRCVSTAT));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAO_PBAXRCVSTAT_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXRCVSTAT_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_ERROR]

//>> GET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_ERROR]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBAXRCVSTAT_ERROR(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXRCVSTAT));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBAXRCVSTAT_ERROR,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXRCVSTAT_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_ERROR]

//>> GET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_ERROR]
static inline bool GET_TP_TPBR_PBA_PBAO_PBAXRCVSTAT_ERROR(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXRCVSTAT));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAO_PBAXRCVSTAT_ERROR>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXRCVSTAT_ERROR chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_ERROR]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_WRITE_IN_PROGRESS]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXRCVSTAT_WRITE_IN_PROGRESS(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXRCVSTAT));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAXRCVSTAT_WRITE_IN_PROGRESS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXRCVSTAT_WRITE_IN_PROGRESS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_WRITE_IN_PROGRESS]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_WRITE_IN_PROGRESS]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXRCVSTAT_WRITE_IN_PROGRESS(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXRCVSTAT));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAXRCVSTAT_WRITE_IN_PROGRESS,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXRCVSTAT_WRITE_IN_PROGRESS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_WRITE_IN_PROGRESS]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_WRITE_IN_PROGRESS]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXRCVSTAT_WRITE_IN_PROGRESS(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXRCVSTAT));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAO_PBAXRCVSTAT_WRITE_IN_PROGRESS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXRCVSTAT_WRITE_IN_PROGRESS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_WRITE_IN_PROGRESS]

//>> CLEAR_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_WRITE_IN_PROGRESS]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAO_PBAXRCVSTAT_WRITE_IN_PROGRESS(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXRCVSTAT));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAO_PBAXRCVSTAT_WRITE_IN_PROGRESS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXRCVSTAT_WRITE_IN_PROGRESS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_WRITE_IN_PROGRESS]

//>> GET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_WRITE_IN_PROGRESS]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBAXRCVSTAT_WRITE_IN_PROGRESS(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXRCVSTAT));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBAXRCVSTAT_WRITE_IN_PROGRESS,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXRCVSTAT_WRITE_IN_PROGRESS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_WRITE_IN_PROGRESS]

//>> GET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_WRITE_IN_PROGRESS]
static inline bool GET_TP_TPBR_PBA_PBAO_PBAXRCVSTAT_WRITE_IN_PROGRESS(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXRCVSTAT));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAO_PBAXRCVSTAT_WRITE_IN_PROGRESS>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXRCVSTAT_WRITE_IN_PROGRESS chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_WRITE_IN_PROGRESS]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_RESERVATION_SET]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXRCVSTAT_RESERVATION_SET(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXRCVSTAT));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAXRCVSTAT_RESERVATION_SET,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXRCVSTAT_RESERVATION_SET chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_RESERVATION_SET]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_RESERVATION_SET]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXRCVSTAT_RESERVATION_SET(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXRCVSTAT));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAXRCVSTAT_RESERVATION_SET,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXRCVSTAT_RESERVATION_SET chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_RESERVATION_SET]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_RESERVATION_SET]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXRCVSTAT_RESERVATION_SET(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXRCVSTAT));
#endif
    return o_data.setBit<TP_TPBR_PBA_PBAO_PBAXRCVSTAT_RESERVATION_SET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXRCVSTAT_RESERVATION_SET chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_RESERVATION_SET]

//>> CLEAR_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_RESERVATION_SET]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PBA_PBAO_PBAXRCVSTAT_RESERVATION_SET(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXRCVSTAT));
#endif
    return o_data.clearBit<TP_TPBR_PBA_PBAO_PBAXRCVSTAT_RESERVATION_SET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXRCVSTAT_RESERVATION_SET chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_RESERVATION_SET]

//>> GET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_RESERVATION_SET]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBAXRCVSTAT_RESERVATION_SET(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXRCVSTAT));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBAXRCVSTAT_RESERVATION_SET,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXRCVSTAT_RESERVATION_SET chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_RESERVATION_SET]

//>> GET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_RESERVATION_SET]
static inline bool GET_TP_TPBR_PBA_PBAO_PBAXRCVSTAT_RESERVATION_SET(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXRCVSTAT));
#endif
    return i_data.getBit<TP_TPBR_PBA_PBAO_PBAXRCVSTAT_RESERVATION_SET>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXRCVSTAT_RESERVATION_SET chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_RESERVATION_SET]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_CAPTURE]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXRCVSTAT_CAPTURE(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXRCVSTAT));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAXRCVSTAT_CAPTURE,
           TP_TPBR_PBA_PBAO_PBAXRCVSTAT_CAPTURE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXRCVSTAT_CAPTURE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_CAPTURE]

//>> SET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_CAPTURE]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PBA_PBAO_PBAXRCVSTAT_CAPTURE(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXRCVSTAT));
#endif
    return o_data.insertFromRight<TP_TPBR_PBA_PBAO_PBAXRCVSTAT_CAPTURE,
           TP_TPBR_PBA_PBAO_PBAXRCVSTAT_CAPTURE_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXRCVSTAT_CAPTURE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_CAPTURE]

//>> GET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_CAPTURE]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PBA_PBAO_PBAXRCVSTAT_CAPTURE(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PBA_PBAO_PBAXRCVSTAT));
#endif
    return i_data.extractToRight<TP_TPBR_PBA_PBAO_PBAXRCVSTAT_CAPTURE,
           TP_TPBR_PBA_PBAO_PBAXRCVSTAT_CAPTURE_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PBA_PBAO_PBAXRCVSTAT_CAPTURE chip: %x, ec: %x", scomt::chip,
             scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PBA_PBAO_PBAXRCVSTAT_CAPTURE]

//>> PREP_[TP_TPBR_PSI_WRAP_TX_ERR_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TPBR_PSI_WRAP_TX_ERR_MODE(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_PSI_WRAP_TX_ERR_MODE;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TPBR_PSI_WRAP_TX_ERR_MODE]

//>> GET_[TP_TPBR_PSI_WRAP_TX_ERR_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TPBR_PSI_WRAP_TX_ERR_MODE(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_PSI_WRAP_TX_ERR_MODE;
#endif
    return fapi2::getScom(i_target, TP_TPBR_PSI_WRAP_TX_ERR_MODE, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TPBR_PSI_WRAP_TX_ERR_MODE]

//>> PUT_[TP_TPBR_PSI_WRAP_TX_ERR_MODE]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TPBR_PSI_WRAP_TX_ERR_MODE(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSI_WRAP_TX_ERR_MODE));
#endif
    return fapi2::putScom(i_target, TP_TPBR_PSI_WRAP_TX_ERR_MODE, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TPBR_PSI_WRAP_TX_ERR_MODE]


//>> SET_[TP_TPBR_PSI_WRAP_TX_ERR_MODE_0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSI_WRAP_TX_ERR_MODE_0(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSI_WRAP_TX_ERR_MODE));
#endif
    return o_data.insertFromRight<TP_TPBR_PSI_WRAP_TX_ERR_MODE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PSI_WRAP_TX_ERR_MODE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSI_WRAP_TX_ERR_MODE_0]

//>> SET_[TP_TPBR_PSI_WRAP_TX_ERR_MODE_0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSI_WRAP_TX_ERR_MODE_0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSI_WRAP_TX_ERR_MODE));
#endif
    return o_data.insertFromRight<TP_TPBR_PSI_WRAP_TX_ERR_MODE_0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PSI_WRAP_TX_ERR_MODE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSI_WRAP_TX_ERR_MODE_0]

//>> SET_[TP_TPBR_PSI_WRAP_TX_ERR_MODE_0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSI_WRAP_TX_ERR_MODE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSI_WRAP_TX_ERR_MODE));
#endif
    return o_data.setBit<TP_TPBR_PSI_WRAP_TX_ERR_MODE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PSI_WRAP_TX_ERR_MODE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSI_WRAP_TX_ERR_MODE_0]

//>> CLEAR_[TP_TPBR_PSI_WRAP_TX_ERR_MODE_0]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PSI_WRAP_TX_ERR_MODE_0(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSI_WRAP_TX_ERR_MODE));
#endif
    return o_data.clearBit<TP_TPBR_PSI_WRAP_TX_ERR_MODE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PSI_WRAP_TX_ERR_MODE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PSI_WRAP_TX_ERR_MODE_0]

//>> GET_[TP_TPBR_PSI_WRAP_TX_ERR_MODE_0]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PSI_WRAP_TX_ERR_MODE_0(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSI_WRAP_TX_ERR_MODE));
#endif
    return i_data.extractToRight<TP_TPBR_PSI_WRAP_TX_ERR_MODE_0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PSI_WRAP_TX_ERR_MODE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSI_WRAP_TX_ERR_MODE_0]

//>> GET_[TP_TPBR_PSI_WRAP_TX_ERR_MODE_0]
static inline bool GET_TP_TPBR_PSI_WRAP_TX_ERR_MODE_0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSI_WRAP_TX_ERR_MODE));
#endif
    return i_data.getBit<TP_TPBR_PSI_WRAP_TX_ERR_MODE_0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PSI_WRAP_TX_ERR_MODE_0 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSI_WRAP_TX_ERR_MODE_0]

//>> SET_[TP_TPBR_PSI_WRAP_TX_ERR_MODE_1]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSI_WRAP_TX_ERR_MODE_1(fapi2::buffer<uint64_t>& i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSI_WRAP_TX_ERR_MODE));
#endif
    return o_data.insertFromRight<TP_TPBR_PSI_WRAP_TX_ERR_MODE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PSI_WRAP_TX_ERR_MODE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSI_WRAP_TX_ERR_MODE_1]

//>> SET_[TP_TPBR_PSI_WRAP_TX_ERR_MODE_1]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSI_WRAP_TX_ERR_MODE_1(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSI_WRAP_TX_ERR_MODE));
#endif
    return o_data.insertFromRight<TP_TPBR_PSI_WRAP_TX_ERR_MODE_1,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PSI_WRAP_TX_ERR_MODE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSI_WRAP_TX_ERR_MODE_1]

//>> SET_[TP_TPBR_PSI_WRAP_TX_ERR_MODE_1]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSI_WRAP_TX_ERR_MODE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSI_WRAP_TX_ERR_MODE));
#endif
    return o_data.setBit<TP_TPBR_PSI_WRAP_TX_ERR_MODE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PSI_WRAP_TX_ERR_MODE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSI_WRAP_TX_ERR_MODE_1]

//>> CLEAR_[TP_TPBR_PSI_WRAP_TX_ERR_MODE_1]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PSI_WRAP_TX_ERR_MODE_1(fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSI_WRAP_TX_ERR_MODE));
#endif
    return o_data.clearBit<TP_TPBR_PSI_WRAP_TX_ERR_MODE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PSI_WRAP_TX_ERR_MODE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PSI_WRAP_TX_ERR_MODE_1]

//>> GET_[TP_TPBR_PSI_WRAP_TX_ERR_MODE_1]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PSI_WRAP_TX_ERR_MODE_1(fapi2::buffer<uint64_t>& i_data,
        uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSI_WRAP_TX_ERR_MODE));
#endif
    return i_data.extractToRight<TP_TPBR_PSI_WRAP_TX_ERR_MODE_1,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PSI_WRAP_TX_ERR_MODE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSI_WRAP_TX_ERR_MODE_1]

//>> GET_[TP_TPBR_PSI_WRAP_TX_ERR_MODE_1]
static inline bool GET_TP_TPBR_PSI_WRAP_TX_ERR_MODE_1(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSI_WRAP_TX_ERR_MODE));
#endif
    return i_data.getBit<TP_TPBR_PSI_WRAP_TX_ERR_MODE_1>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PSI_WRAP_TX_ERR_MODE_1 chip: %x, ec: %x", scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSI_WRAP_TX_ERR_MODE_1]

//>> PREP_[TP_TPBR_PSIHB_EMPTY_10]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TPBR_PSIHB_EMPTY_10(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_PSIHB_EMPTY_10;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TPBR_PSIHB_EMPTY_10]

//>> GET_[TP_TPBR_PSIHB_EMPTY_10]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TPBR_PSIHB_EMPTY_10(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_PSIHB_EMPTY_10;
#endif
    return fapi2::getScom(i_target, TP_TPBR_PSIHB_EMPTY_10, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TPBR_PSIHB_EMPTY_10]

//>> PUT_[TP_TPBR_PSIHB_EMPTY_10]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TPBR_PSIHB_EMPTY_10(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_EMPTY_10));
#endif
    return fapi2::putScom(i_target, TP_TPBR_PSIHB_EMPTY_10, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TPBR_PSIHB_EMPTY_10]


//>> PREP_[TP_TPBR_PSIHB_EMPTY_1B]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TPBR_PSIHB_EMPTY_1B(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_PSIHB_EMPTY_1B;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TPBR_PSIHB_EMPTY_1B]

//>> GET_[TP_TPBR_PSIHB_EMPTY_1B]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TPBR_PSIHB_EMPTY_1B(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_PSIHB_EMPTY_1B;
#endif
    return fapi2::getScom(i_target, TP_TPBR_PSIHB_EMPTY_1B, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TPBR_PSIHB_EMPTY_1B]

//>> PUT_[TP_TPBR_PSIHB_EMPTY_1B]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TPBR_PSIHB_EMPTY_1B(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_EMPTY_1B));
#endif
    return fapi2::putScom(i_target, TP_TPBR_PSIHB_EMPTY_1B, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TPBR_PSIHB_EMPTY_1B]


//>> PREP_[TP_TPBR_PSIHB_FIR_ACTION0_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PREP_TP_TPBR_PSIHB_FIR_ACTION0_REG(const fapi2::Target<K, M, V>& i_target)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_PSIHB_FIR_ACTION0_REG;
#endif
    return fapi2::current_err;
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PREP_[TP_TPBR_PSIHB_FIR_ACTION0_REG]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode GET_TP_TPBR_PSIHB_FIR_ACTION0_REG(const fapi2::Target<K, M, V>& i_target,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    scomt::last_scom = TP_TPBR_PSIHB_FIR_ACTION0_REG;
#endif
    return fapi2::getScom(i_target, TP_TPBR_PSIHB_FIR_ACTION0_REG, o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG]

//>> PUT_[TP_TPBR_PSIHB_FIR_ACTION0_REG]
template< fapi2::TargetType K, fapi2::MulticastType M, typename V >
static inline fapi2::ReturnCode PUT_TP_TPBR_PSIHB_FIR_ACTION0_REG(const fapi2::Target<K, M, V>& i_target,
        const uint64_t i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::init(i_target));
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return fapi2::putScom(i_target, TP_TPBR_PSIHB_FIR_ACTION0_REG, i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    return fapi2::current_err;
#endif
}
//<< PUT_[TP_TPBR_PSIHB_FIR_ACTION0_REG]


//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_CE_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_CE_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_CE_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_CE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_CE_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_CE_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_CE_ACTION0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_CE_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_CE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_CE_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_CE_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_CE_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.setBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_CE_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_CE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_CE_ACTION0]

//>> CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_CE_ACTION0]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_CE_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.clearBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_CE_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_CE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_CE_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_CE_ACTION0]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_CE_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.extractToRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_CE_ACTION0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_CE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_CE_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_CE_ACTION0]
static inline bool GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_CE_ACTION0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.getBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_CE_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_CE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_CE_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_UE_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_UE_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_UE_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_UE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_UE_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_UE_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_UE_ACTION0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_UE_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_UE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_UE_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_UE_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_UE_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.setBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_UE_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_UE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_UE_ACTION0]

//>> CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_UE_ACTION0]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_UE_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.clearBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_UE_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_UE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_UE_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_UE_ACTION0]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_UE_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.extractToRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_UE_ACTION0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_UE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_UE_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_UE_ACTION0]
static inline bool GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_UE_ACTION0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.getBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_UE_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_UE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_UE_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_SUE_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_SUE_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_SUE_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_SUE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_SUE_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_SUE_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_SUE_ACTION0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_SUE_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_SUE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_SUE_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_SUE_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_SUE_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.setBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_SUE_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_SUE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_SUE_ACTION0]

//>> CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_SUE_ACTION0]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_SUE_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.clearBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_SUE_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_SUE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_SUE_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_SUE_ACTION0]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_SUE_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.extractToRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_SUE_ACTION0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_SUE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_SUE_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_SUE_ACTION0]
static inline bool GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_SUE_ACTION0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.getBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_SUE_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_SUE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_ECC_ERR_SUE_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_ERROR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_ERROR_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_ERROR_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_ERROR_ACTION0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_ERROR_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_ERROR_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_ERROR_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.setBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_ERROR_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_ERROR_ACTION0]

//>> CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_ERROR_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.clearBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_ERROR_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_ERROR_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_ERROR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.extractToRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_ERROR_ACTION0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_ERROR_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_ERROR_ACTION0]
static inline bool GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_ERROR_ACTION0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.getBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_ERROR_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_ERROR_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_FSP_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_FSP_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_FSP_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_FSP_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_FSP_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_FSP_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_FSP_ACTION0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_FSP_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_FSP_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_FSP_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_FSP_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_FSP_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.setBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_FSP_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_FSP_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_FSP_ACTION0]

//>> CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_FSP_ACTION0]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_FSP_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.clearBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_FSP_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_FSP_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_FSP_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_FSP_ACTION0]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_FSP_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.extractToRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_FSP_ACTION0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_FSP_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_FSP_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_FSP_ACTION0]
static inline bool GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_FSP_ACTION0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.getBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_FSP_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_FSP_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_FROM_FSP_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_CE_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_CE_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_CE_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_CE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_CE_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_CE_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_CE_ACTION0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_CE_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_CE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_CE_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_CE_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_CE_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.setBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_CE_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_CE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_CE_ACTION0]

//>> CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_CE_ACTION0]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_CE_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.clearBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_CE_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_CE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_CE_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_CE_ACTION0]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_CE_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.extractToRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_CE_ACTION0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_CE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_CE_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_CE_ACTION0]
static inline bool GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_CE_ACTION0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.getBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_CE_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_CE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_CE_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_UE_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_UE_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_UE_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_UE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_UE_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_UE_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_UE_ACTION0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_UE_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_UE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_UE_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_UE_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_UE_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.setBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_UE_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_UE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_UE_ACTION0]

//>> CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_UE_ACTION0]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_UE_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.clearBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_UE_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_UE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_UE_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_UE_ACTION0]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_UE_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.extractToRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_UE_ACTION0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_UE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_UE_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_UE_ACTION0]
static inline bool GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_UE_ACTION0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.getBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_UE_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_UE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ECC_ERR_UE_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_ERROR_STATE_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_ERROR_STATE_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_ERROR_STATE_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_ERROR_STATE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_ERROR_STATE_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_ERROR_STATE_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_ERROR_STATE_ACTION0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_ERROR_STATE_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_ERROR_STATE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_ERROR_STATE_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_ERROR_STATE_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_ERROR_STATE_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.setBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_ERROR_STATE_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_ERROR_STATE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_ERROR_STATE_ACTION0]

//>> CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_ERROR_STATE_ACTION0]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PSIHB_FIR_ACTION0_REG_ERROR_STATE_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.clearBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_ERROR_STATE_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_ERROR_STATE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_ERROR_STATE_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_ERROR_STATE_ACTION0]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_ERROR_STATE_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.extractToRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_ERROR_STATE_ACTION0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_ERROR_STATE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_ERROR_STATE_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_ERROR_STATE_ACTION0]
static inline bool GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_ERROR_STATE_ACTION0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.getBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_ERROR_STATE_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_ERROR_STATE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_ERROR_STATE_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_TTYPE_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_TTYPE_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_TTYPE_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_TTYPE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_TTYPE_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_TTYPE_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_TTYPE_ACTION0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_TTYPE_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_TTYPE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_TTYPE_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_TTYPE_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_TTYPE_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.setBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_TTYPE_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_TTYPE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_TTYPE_ACTION0]

//>> CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_TTYPE_ACTION0]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_TTYPE_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.clearBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_TTYPE_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_TTYPE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_TTYPE_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_TTYPE_ACTION0]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_TTYPE_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.extractToRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_TTYPE_ACTION0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_TTYPE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_TTYPE_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_TTYPE_ACTION0]
static inline bool GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_TTYPE_ACTION0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.getBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_TTYPE_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_TTYPE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_TTYPE_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_CRESP_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_CRESP_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_CRESP_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_CRESP_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_CRESP_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_CRESP_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_CRESP_ACTION0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_CRESP_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_CRESP_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_CRESP_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_CRESP_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_CRESP_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.setBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_CRESP_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_CRESP_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_CRESP_ACTION0]

//>> CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_CRESP_ACTION0]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_CRESP_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.clearBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_CRESP_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_CRESP_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_CRESP_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_CRESP_ACTION0]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_CRESP_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.extractToRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_CRESP_ACTION0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_CRESP_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_CRESP_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_CRESP_ACTION0]
static inline bool GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_CRESP_ACTION0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.getBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_CRESP_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_CRESP_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INVALID_CRESP_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_DATA_TIME_OUT_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_DATA_TIME_OUT_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_DATA_TIME_OUT_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_DATA_TIME_OUT_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_DATA_TIME_OUT_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_DATA_TIME_OUT_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_DATA_TIME_OUT_ACTION0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_DATA_TIME_OUT_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_DATA_TIME_OUT_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_DATA_TIME_OUT_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_DATA_TIME_OUT_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_DATA_TIME_OUT_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.setBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_DATA_TIME_OUT_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_DATA_TIME_OUT_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_DATA_TIME_OUT_ACTION0]

//>> CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_DATA_TIME_OUT_ACTION0]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_DATA_TIME_OUT_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.clearBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_DATA_TIME_OUT_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_DATA_TIME_OUT_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_DATA_TIME_OUT_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_DATA_TIME_OUT_ACTION0]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_DATA_TIME_OUT_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.extractToRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_DATA_TIME_OUT_ACTION0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_DATA_TIME_OUT_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_DATA_TIME_OUT_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_DATA_TIME_OUT_ACTION0]
static inline bool GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_DATA_TIME_OUT_ACTION0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.getBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_DATA_TIME_OUT_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_DATA_TIME_OUT_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_DATA_TIME_OUT_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_PARITY_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_PARITY_ERROR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_PARITY_ERROR_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_PARITY_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_PARITY_ERROR_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_PARITY_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_PARITY_ERROR_ACTION0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_PARITY_ERROR_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_PARITY_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_PARITY_ERROR_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_PARITY_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_PARITY_ERROR_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.setBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_PARITY_ERROR_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_PARITY_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_PARITY_ERROR_ACTION0]

//>> CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_PARITY_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_PARITY_ERROR_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.clearBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_PARITY_ERROR_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_PARITY_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_PARITY_ERROR_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_PARITY_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_PARITY_ERROR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.extractToRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_PARITY_ERROR_ACTION0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_PARITY_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_PARITY_ERROR_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_PARITY_ERROR_ACTION0]
static inline bool GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_PARITY_ERROR_ACTION0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.getBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_PARITY_ERROR_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_PARITY_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_PB_PARITY_ERROR_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ACCESS_TRUSTED_SPACE_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ACCESS_TRUSTED_SPACE_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ACCESS_TRUSTED_SPACE_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ACCESS_TRUSTED_SPACE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ACCESS_TRUSTED_SPACE_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ACCESS_TRUSTED_SPACE_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ACCESS_TRUSTED_SPACE_ACTION0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ACCESS_TRUSTED_SPACE_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ACCESS_TRUSTED_SPACE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ACCESS_TRUSTED_SPACE_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ACCESS_TRUSTED_SPACE_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ACCESS_TRUSTED_SPACE_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.setBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ACCESS_TRUSTED_SPACE_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ACCESS_TRUSTED_SPACE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ACCESS_TRUSTED_SPACE_ACTION0]

//>> CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ACCESS_TRUSTED_SPACE_ACTION0]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ACCESS_TRUSTED_SPACE_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.clearBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ACCESS_TRUSTED_SPACE_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ACCESS_TRUSTED_SPACE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ACCESS_TRUSTED_SPACE_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ACCESS_TRUSTED_SPACE_ACTION0]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ACCESS_TRUSTED_SPACE_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.extractToRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ACCESS_TRUSTED_SPACE_ACTION0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ACCESS_TRUSTED_SPACE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ACCESS_TRUSTED_SPACE_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ACCESS_TRUSTED_SPACE_ACTION0]
static inline bool GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ACCESS_TRUSTED_SPACE_ACTION0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.getBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ACCESS_TRUSTED_SPACE_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ACCESS_TRUSTED_SPACE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FSP_ACCESS_TRUSTED_SPACE_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_UNEXPECTED_PB_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_UNEXPECTED_PB_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_UNEXPECTED_PB_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_UNEXPECTED_PB_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_UNEXPECTED_PB_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_UNEXPECTED_PB_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_UNEXPECTED_PB_ACTION0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_UNEXPECTED_PB_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_UNEXPECTED_PB_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_UNEXPECTED_PB_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_UNEXPECTED_PB_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_UNEXPECTED_PB_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.setBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_UNEXPECTED_PB_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_UNEXPECTED_PB_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_UNEXPECTED_PB_ACTION0]

//>> CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_UNEXPECTED_PB_ACTION0]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PSIHB_FIR_ACTION0_REG_UNEXPECTED_PB_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.clearBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_UNEXPECTED_PB_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_UNEXPECTED_PB_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_UNEXPECTED_PB_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_UNEXPECTED_PB_ACTION0]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_UNEXPECTED_PB_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.extractToRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_UNEXPECTED_PB_ACTION0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_UNEXPECTED_PB_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_UNEXPECTED_PB_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_UNEXPECTED_PB_ACTION0]
static inline bool GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_UNEXPECTED_PB_ACTION0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.getBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_UNEXPECTED_PB_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_UNEXPECTED_PB_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_UNEXPECTED_PB_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_REG_CHANGE_WHILE_ACTIVE_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_REG_CHANGE_WHILE_ACTIVE_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_REG_CHANGE_WHILE_ACTIVE_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_REG_CHANGE_WHILE_ACTIVE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_REG_CHANGE_WHILE_ACTIVE_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_REG_CHANGE_WHILE_ACTIVE_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_REG_CHANGE_WHILE_ACTIVE_ACTION0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_REG_CHANGE_WHILE_ACTIVE_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_REG_CHANGE_WHILE_ACTIVE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_REG_CHANGE_WHILE_ACTIVE_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_REG_CHANGE_WHILE_ACTIVE_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_REG_CHANGE_WHILE_ACTIVE_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.setBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_REG_CHANGE_WHILE_ACTIVE_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_REG_CHANGE_WHILE_ACTIVE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_REG_CHANGE_WHILE_ACTIVE_ACTION0]

//>> CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_REG_CHANGE_WHILE_ACTIVE_ACTION0]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_REG_CHANGE_WHILE_ACTIVE_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.clearBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_REG_CHANGE_WHILE_ACTIVE_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_REG_CHANGE_WHILE_ACTIVE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_REG_CHANGE_WHILE_ACTIVE_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_REG_CHANGE_WHILE_ACTIVE_ACTION0]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_REG_CHANGE_WHILE_ACTIVE_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.extractToRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_REG_CHANGE_WHILE_ACTIVE_ACTION0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_REG_CHANGE_WHILE_ACTIVE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_REG_CHANGE_WHILE_ACTIVE_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_REG_CHANGE_WHILE_ACTIVE_ACTION0]
static inline bool GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_REG_CHANGE_WHILE_ACTIVE_ACTION0(
    fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.getBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_REG_CHANGE_WHILE_ACTIVE_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_REG_CHANGE_WHILE_ACTIVE_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT_REG_CHANGE_WHILE_ACTIVE_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT0_ADDRESS_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT0_ADDRESS_ERROR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT0_ADDRESS_ERROR_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT0_ADDRESS_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT0_ADDRESS_ERROR_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT0_ADDRESS_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT0_ADDRESS_ERROR_ACTION0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT0_ADDRESS_ERROR_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT0_ADDRESS_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT0_ADDRESS_ERROR_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT0_ADDRESS_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT0_ADDRESS_ERROR_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.setBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT0_ADDRESS_ERROR_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT0_ADDRESS_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT0_ADDRESS_ERROR_ACTION0]

//>> CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT0_ADDRESS_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT0_ADDRESS_ERROR_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.clearBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT0_ADDRESS_ERROR_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT0_ADDRESS_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT0_ADDRESS_ERROR_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT0_ADDRESS_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT0_ADDRESS_ERROR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.extractToRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT0_ADDRESS_ERROR_ACTION0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT0_ADDRESS_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT0_ADDRESS_ERROR_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT0_ADDRESS_ERROR_ACTION0]
static inline bool GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT0_ADDRESS_ERROR_ACTION0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.getBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT0_ADDRESS_ERROR_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT0_ADDRESS_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT0_ADDRESS_ERROR_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT1_ADDRESS_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT1_ADDRESS_ERROR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT1_ADDRESS_ERROR_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT1_ADDRESS_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT1_ADDRESS_ERROR_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT1_ADDRESS_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT1_ADDRESS_ERROR_ACTION0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT1_ADDRESS_ERROR_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT1_ADDRESS_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT1_ADDRESS_ERROR_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT1_ADDRESS_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT1_ADDRESS_ERROR_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.setBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT1_ADDRESS_ERROR_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT1_ADDRESS_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT1_ADDRESS_ERROR_ACTION0]

//>> CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT1_ADDRESS_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT1_ADDRESS_ERROR_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.clearBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT1_ADDRESS_ERROR_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT1_ADDRESS_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT1_ADDRESS_ERROR_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT1_ADDRESS_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT1_ADDRESS_ERROR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.extractToRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT1_ADDRESS_ERROR_ACTION0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT1_ADDRESS_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT1_ADDRESS_ERROR_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT1_ADDRESS_ERROR_ACTION0]
static inline bool GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT1_ADDRESS_ERROR_ACTION0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.getBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT1_ADDRESS_ERROR_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT1_ADDRESS_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT1_ADDRESS_ERROR_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT2_ADDRESS_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT2_ADDRESS_ERROR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT2_ADDRESS_ERROR_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT2_ADDRESS_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT2_ADDRESS_ERROR_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT2_ADDRESS_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT2_ADDRESS_ERROR_ACTION0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT2_ADDRESS_ERROR_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT2_ADDRESS_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT2_ADDRESS_ERROR_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT2_ADDRESS_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT2_ADDRESS_ERROR_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.setBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT2_ADDRESS_ERROR_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT2_ADDRESS_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT2_ADDRESS_ERROR_ACTION0]

//>> CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT2_ADDRESS_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT2_ADDRESS_ERROR_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.clearBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT2_ADDRESS_ERROR_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT2_ADDRESS_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT2_ADDRESS_ERROR_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT2_ADDRESS_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT2_ADDRESS_ERROR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.extractToRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT2_ADDRESS_ERROR_ACTION0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT2_ADDRESS_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT2_ADDRESS_ERROR_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT2_ADDRESS_ERROR_ACTION0]
static inline bool GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT2_ADDRESS_ERROR_ACTION0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.getBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT2_ADDRESS_ERROR_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT2_ADDRESS_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT2_ADDRESS_ERROR_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT3_ADDRESS_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT3_ADDRESS_ERROR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT3_ADDRESS_ERROR_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT3_ADDRESS_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT3_ADDRESS_ERROR_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT3_ADDRESS_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT3_ADDRESS_ERROR_ACTION0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT3_ADDRESS_ERROR_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT3_ADDRESS_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT3_ADDRESS_ERROR_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT3_ADDRESS_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT3_ADDRESS_ERROR_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.setBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT3_ADDRESS_ERROR_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT3_ADDRESS_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT3_ADDRESS_ERROR_ACTION0]

//>> CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT3_ADDRESS_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT3_ADDRESS_ERROR_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.clearBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT3_ADDRESS_ERROR_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT3_ADDRESS_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT3_ADDRESS_ERROR_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT3_ADDRESS_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT3_ADDRESS_ERROR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.extractToRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT3_ADDRESS_ERROR_ACTION0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT3_ADDRESS_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT3_ADDRESS_ERROR_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT3_ADDRESS_ERROR_ACTION0]
static inline bool GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT3_ADDRESS_ERROR_ACTION0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.getBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT3_ADDRESS_ERROR_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT3_ADDRESS_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT3_ADDRESS_ERROR_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT4_ADDRESS_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT4_ADDRESS_ERROR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT4_ADDRESS_ERROR_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT4_ADDRESS_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT4_ADDRESS_ERROR_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT4_ADDRESS_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT4_ADDRESS_ERROR_ACTION0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT4_ADDRESS_ERROR_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT4_ADDRESS_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT4_ADDRESS_ERROR_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT4_ADDRESS_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT4_ADDRESS_ERROR_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.setBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT4_ADDRESS_ERROR_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT4_ADDRESS_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT4_ADDRESS_ERROR_ACTION0]

//>> CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT4_ADDRESS_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT4_ADDRESS_ERROR_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.clearBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT4_ADDRESS_ERROR_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT4_ADDRESS_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT4_ADDRESS_ERROR_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT4_ADDRESS_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT4_ADDRESS_ERROR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.extractToRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT4_ADDRESS_ERROR_ACTION0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT4_ADDRESS_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT4_ADDRESS_ERROR_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT4_ADDRESS_ERROR_ACTION0]
static inline bool GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT4_ADDRESS_ERROR_ACTION0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.getBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT4_ADDRESS_ERROR_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT4_ADDRESS_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT4_ADDRESS_ERROR_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT5_ADDRESS_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT5_ADDRESS_ERROR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT5_ADDRESS_ERROR_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT5_ADDRESS_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT5_ADDRESS_ERROR_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT5_ADDRESS_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT5_ADDRESS_ERROR_ACTION0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT5_ADDRESS_ERROR_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT5_ADDRESS_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT5_ADDRESS_ERROR_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT5_ADDRESS_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT5_ADDRESS_ERROR_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.setBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT5_ADDRESS_ERROR_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT5_ADDRESS_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT5_ADDRESS_ERROR_ACTION0]

//>> CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT5_ADDRESS_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT5_ADDRESS_ERROR_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.clearBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT5_ADDRESS_ERROR_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT5_ADDRESS_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT5_ADDRESS_ERROR_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT5_ADDRESS_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT5_ADDRESS_ERROR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.extractToRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT5_ADDRESS_ERROR_ACTION0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT5_ADDRESS_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT5_ADDRESS_ERROR_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT5_ADDRESS_ERROR_ACTION0]
static inline bool GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT5_ADDRESS_ERROR_ACTION0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.getBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT5_ADDRESS_ERROR_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT5_ADDRESS_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_INTERRUPT5_ADDRESS_ERROR_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_0_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_0_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_0_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_0_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_0_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_0_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_0_ACTION0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_0_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_0_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_0_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_0_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_0_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.setBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_0_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_0_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_0_ACTION0]

//>> CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_0_ACTION0]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_0_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.clearBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_0_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_0_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_0_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_0_ACTION0]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_0_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.extractToRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_0_ACTION0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_0_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_0_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_0_ACTION0]
static inline bool GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_0_ACTION0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.getBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_0_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_0_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_0_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_1_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_1_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_1_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_1_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_1_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_1_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_1_ACTION0(
    const uint64_t i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_1_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_1_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_1_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_1_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_1_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.setBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_1_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_1_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_1_ACTION0]

//>> CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_1_ACTION0]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_1_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.clearBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_1_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_1_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_1_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_1_ACTION0]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_1_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.extractToRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_1_ACTION0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_1_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_1_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_1_ACTION0]
static inline bool GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_1_ACTION0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.getBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_1_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_1_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_TCBR_TP_PSI_GLB_ERR_1_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_UPSTREAM_FIR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_UPSTREAM_FIR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_UPSTREAM_FIR_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_UPSTREAM_FIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_UPSTREAM_FIR_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_UPSTREAM_FIR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_UPSTREAM_FIR_ACTION0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_UPSTREAM_FIR_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_UPSTREAM_FIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_UPSTREAM_FIR_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_UPSTREAM_FIR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_UPSTREAM_FIR_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.setBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_UPSTREAM_FIR_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_UPSTREAM_FIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_UPSTREAM_FIR_ACTION0]

//>> CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_UPSTREAM_FIR_ACTION0]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PSIHB_FIR_ACTION0_REG_UPSTREAM_FIR_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.clearBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_UPSTREAM_FIR_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_UPSTREAM_FIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_UPSTREAM_FIR_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_UPSTREAM_FIR_ACTION0]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_UPSTREAM_FIR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.extractToRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_UPSTREAM_FIR_ACTION0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_UPSTREAM_FIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_UPSTREAM_FIR_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_UPSTREAM_FIR_ACTION0]
static inline bool GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_UPSTREAM_FIR_ACTION0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.getBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_UPSTREAM_FIR_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_UPSTREAM_FIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_UPSTREAM_FIR_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_SPARE_FIR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_SPARE_FIR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_SPARE_FIR_ACTION0,
           TP_TPBR_PSIHB_FIR_ACTION0_REG_SPARE_FIR_ACTION0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_SPARE_FIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_SPARE_FIR_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_SPARE_FIR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_SPARE_FIR_ACTION0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_SPARE_FIR_ACTION0,
           TP_TPBR_PSIHB_FIR_ACTION0_REG_SPARE_FIR_ACTION0_LEN>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_SPARE_FIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_SPARE_FIR_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_SPARE_FIR_ACTION0]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_SPARE_FIR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.extractToRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_SPARE_FIR_ACTION0,
           TP_TPBR_PSIHB_FIR_ACTION0_REG_SPARE_FIR_ACTION0_LEN>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_SPARE_FIR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_SPARE_FIR_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FIR_PARITY_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_FIR_PARITY_ERROR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_FIR_PARITY_ERROR_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("0:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_FIR_PARITY_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FIR_PARITY_ERROR_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FIR_PARITY_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_FIR_PARITY_ERROR_ACTION0(const uint64_t i_data,
        fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.insertFromRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_FIR_PARITY_ERROR_ACTION0,
           1>(i_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("1:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_FIR_PARITY_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FIR_PARITY_ERROR_ACTION0]

//>> SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FIR_PARITY_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& SET_TP_TPBR_PSIHB_FIR_ACTION0_REG_FIR_PARITY_ERROR_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.setBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_FIR_PARITY_ERROR_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("2:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_FIR_PARITY_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< SET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FIR_PARITY_ERROR_ACTION0]

//>> CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FIR_PARITY_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& CLEAR_TP_TPBR_PSIHB_FIR_ACTION0_REG_FIR_PARITY_ERROR_ACTION0(
    fapi2::buffer<uint64_t>& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return o_data.clearBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_FIR_PARITY_ERROR_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("3:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_FIR_PARITY_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return o_data;
#endif
}
//<< CLEAR_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FIR_PARITY_ERROR_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FIR_PARITY_ERROR_ACTION0]
static inline fapi2::buffer<uint64_t>& GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_FIR_PARITY_ERROR_ACTION0(
    fapi2::buffer<uint64_t>& i_data,
    uint64_t& o_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.extractToRight<TP_TPBR_PSIHB_FIR_ACTION0_REG_FIR_PARITY_ERROR_ACTION0,
           1>(o_data);
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("4:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_FIR_PARITY_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FIR_PARITY_ERROR_ACTION0]

//>> GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FIR_PARITY_ERROR_ACTION0]
static inline bool GET_TP_TPBR_PSIHB_FIR_ACTION0_REG_FIR_PARITY_ERROR_ACTION0(fapi2::buffer<uint64_t>& i_data)
{
#ifdef SCOM_CHECKING
    FAPI_TRY(scomt::chkReg(TP_TPBR_PSIHB_FIR_ACTION0_REG));
#endif
    return i_data.getBit<TP_TPBR_PSIHB_FIR_ACTION0_REG_FIR_PARITY_ERROR_ACTION0>();
#ifdef SCOM_CHECKING
fapi_try_exit:
    FAPI_ERR("5:scom_proc Invalid dial access TP_TPBR_PSIHB_FIR_ACTION0_REG_FIR_PARITY_ERROR_ACTION0 chip: %x, ec: %x",
             scomt::chip, scomt::ec);
    return i_data;
#endif
}
//<< GET_[TP_TPBR_PSIHB_FIR_ACTION0_REG_FIR_PARITY_ERROR_ACTION0]


//>>THE END<<

#ifndef __PPE_HCODE__
}
}

#endif
#endif
